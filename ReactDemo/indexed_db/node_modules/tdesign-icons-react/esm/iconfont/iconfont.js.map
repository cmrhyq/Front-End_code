{"version":3,"file":"iconfont.js","sources":["../../src/iconfont/iconfont.tsx"],"sourcesContent":["import {\n  forwardRef, Ref, HTMLAttributes, useEffect, createElement, CSSProperties, useMemo,\n} from 'react';\nimport classNames from 'classnames';\nimport useConfig from '../util/use-config';\nimport useSizeProps from '../util/use-size-props';\nimport { checkLinkAndLoad } from '../util/check-url-and-load';\n\nimport '../style/css';\n\nexport interface IconFontProps extends HTMLAttributes<HTMLElement> {\n  /**\n   * 图标类型\n   */\n  name?: string;\n\n  /**\n   * 尺寸\n   * @default undefined\n   */\n  size?: 'small' | 'medium' | 'large' | string | number;\n\n  /**\n   * 渲染容器元素\n   * @default 'i'\n   */\n  tag?: 'i' | 'span' | 'div';\n\n  /**\n   * 样式\n   */\n  style?: CSSProperties;\n\n  /**\n   * 类名\n   */\n  className?: string;\n\n  /**\n   * 图标地址\n   */\n  url?: string | string[];\n\n  /**\n   * @default true\n   */\n  loadDefaultIcons?: boolean;\n}\n\nconst CDN_ICONFONT_URL = 'https://tdesign.gtimg.com/icon/0.1.3/fonts/index.css';\n\n/**\n * 图标组件\n * iconfont 版本\n */\nexport const IconFont = forwardRef((props: IconFontProps, ref: Ref<HTMLElement>) => {\n  const { classPrefix } = useConfig();\n  const {\n    name = '',\n    size,\n    tag = 'i',\n    className: customClassName,\n    url,\n    loadDefaultIcons = true,\n    style: customStyle,\n    ...htmlProps\n  } = props;\n  const { className: sizeClassName, style: sizeStyle } = useSizeProps(size);\n\n  const isBuiltInIcon = props.url && /^t-icon-(\\w|-)+$/.test(name);\n\n  const className = useMemo(\n    () => classNames({\n      [name]: props.url,\n      [`${classPrefix}-icon`]: !props.url || isBuiltInIcon,\n      [`${classPrefix}-icon-${name}`]: !props.url,\n    }, sizeClassName, customClassName),\n    [classPrefix, customClassName, name, sizeClassName],\n  );\n\n  // 插入 iconfont 样式\n  useEffect(() => {\n    // 兼容一下服务端渲染\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    // 不加载图标\n    if (!loadDefaultIcons) {\n      return;\n    }\n\n    checkLinkAndLoad(CDN_ICONFONT_URL, `${classPrefix}-iconfont-stylesheet--unique-class`);\n  }, [classPrefix, loadDefaultIcons]);\n\n  // 加载 url\n  useEffect(() => {\n    const urls = Array.isArray(url) ? url : [url];\n    (urls as Array<string>).forEach((url) => {\n      checkLinkAndLoad(url, `${classPrefix}-iconfont-stylesheet--unique-class`);\n    });\n  }, [classPrefix, url]);\n\n  return createElement(tag, {\n    ref,\n    style: { ...customStyle, ...sizeStyle },\n    className,\n    ...htmlProps,\n  });\n});\n\nIconFont.displayName = 'Icon';\n"],"names":["CDN_ICONFONT_URL","IconFont","forwardRef","props","ref","useConfig","classPrefix","name","size","tag","customClassName","className","url","loadDefaultIcons","customStyle","style","htmlProps","useSizeProps","sizeClassName","sizeStyle","isBuiltInIcon","test","useMemo","classNames","document","urls","Array","isArray","forEach","url2","createElement","displayName"],"mappings":";;;;;;;;;;;;;;AAiDA,IAAMA,mBAAmB,sDAAzB;IAMaC,wBAAWC,WAAW,UAACC,KAAD,EAAuBC,GAAvB,EAAiD;mBAC1DC;MAAhBC,yBAAAA;;oBAUJH,MARFI;MAAAA,gCAAO;MACPC,OAOEL,MAPFK;mBAOEL,MANFM;MAAAA,8BAAM;MACKC,kBAKTP,MALFQ;MACAC,MAIET,MAJFS;8BAIET,MAHFU;MAAAA,sDAAmB;MACZC,cAELX,MAFFY;MACGC,qCACDb;;sBACmDc,aAAaT;MAAjDU,8BAAXP;MAAiCQ,0BAAPJ;;MAE5BK,gBAAgBjB,MAAMS,GAAN,IAAa,mBAAmBS,IAAnB,CAAwBd,IAAxB;MAE7BI,YAAYW,QAChB;AAAA;;AAAA,WAAMC,2DACHhB,MAAOJ,MAAMS,6CACVN,uBAAqB,CAACH,MAAMS,GAAP,IAAcQ,uDACnCd,8BAAoBC,OAAS,CAACJ,MAAMS,oBACvCM,eAAeR,gBAJlB;AAAA,KAKA,CAACJ,WAAD,EAAcI,eAAd,EAA+BH,IAA/B,EAAqCW,aAArC;YAIQ,YAAM;QAEV,OAAOM,QAAP,KAAoB,aAAa;;;;QAKjC,CAACX,kBAAkB;;;;qBAINb,4BAAqBM;KACrC,CAACA,WAAD,EAAcO,gBAAd;YAGO,YAAM;QACRY,OAAOC,MAAMC,OAAN,CAAcf,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD;AACvCa,IAAAA,KAAuBG,OAAvB,CAA+B,UAACC,IAAD,EAAS;uBACtBA,gBAAQvB;KAD1B;KAGA,CAACA,WAAD,EAAcM,GAAd;sBAEIkB,cAAcrB;AACnBL,IAAAA,KAAAA;AACAW,IAAAA,uCAAYD,cAAgBK;AAC5BR,IAAAA,WAAAA;KACGK;;AAIPf,SAAS8B,WAAT,GAAuB,MAAvB;;;;"}