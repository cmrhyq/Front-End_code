{"version":3,"file":"useUpload.js","sources":["../../../src/upload/hooks/useUpload.ts"],"sourcesContent":["import { useRef, useState, useMemo, ChangeEventHandler, DragEvent, MouseEvent } from 'react';\nimport merge from 'lodash/merge';\nimport { SizeLimitObj, TdUploadProps, UploadChangeContext, UploadFile, UploadRemoveContext } from '../type';\nimport {\n  getFilesAndErrors,\n  validateFile,\n  upload,\n  getTriggerTextField,\n  getDisplayFiles,\n} from '../../_common/js/upload/main';\nimport { getFileUrlByFileRaw } from '../../_common/js/upload/utils';\nimport useControlled from '../../hooks/useControlled';\nimport { InnerProgressContext, OnResponseErrorContext, SuccessContext } from '../../_common/js/upload/types';\nimport useConfig from '../../hooks/useConfig';\nimport { useLocaleReceiver } from '../../locale/LocalReceiver';\n\n/**\n * 上传组件全部逻辑，方便脱离 UI，自定义 UI 组件\n */\nexport default function useUpload(props: TdUploadProps) {\n  const inputRef = useRef<HTMLInputElement>();\n  // TODO: Form 表单控制上传组件是否禁用\n  const { disabled, autoUpload, isBatchUpload } = props;\n  const { classPrefix } = useConfig();\n  const [globalLocale, t] = useLocaleReceiver('upload');\n  const [uploadValue, setUploadValue] = useControlled(props, 'files', props.onChange);\n  const [xhrReq, setXhrReq] = useState<{ files: UploadFile[]; xhrReq: XMLHttpRequest }[]>([]);\n  const [toUploadFiles, setToUploadFiles] = useState<UploadFile[]>([]);\n  const [sizeOverLimitMessage, setSizeOverLimitMessage] = useState('');\n\n  const locale = useMemo(() => merge({}, globalLocale, props.locale), [globalLocale, props.locale]);\n\n  const tipsClasses = `${classPrefix}-upload__tips ${classPrefix}-size-s`;\n  const errorClasses = [tipsClasses].concat(`${classPrefix}-upload__tips-error`);\n\n  // 单文件场景：触发元素文本\n  const triggerUploadText = useMemo(() => {\n    const field = getTriggerTextField({\n      isBatchUpload: props.isBatchUpload,\n      multiple: props.multiple,\n      status: uploadValue?.[0]?.status,\n      autoUpload: props.autoUpload,\n    });\n    return locale.triggerUploadText[field];\n  }, [locale.triggerUploadText, uploadValue, props.multiple, props.isBatchUpload, props.autoUpload]);\n\n  const [uploading, setUploading] = useState(false);\n\n  // 文件列表显示的内容（自动上传和非自动上传有所不同）\n  const displayFiles = useMemo(\n    () => getDisplayFiles({ multiple: props.multiple, toUploadFiles, uploadValue, autoUpload, isBatchUpload }),\n    [props.multiple, toUploadFiles, uploadValue, autoUpload, isBatchUpload],\n  );\n\n  const onResponseError = (p: OnResponseErrorContext) => {\n    if (!p) return;\n    const { response, event, files } = p;\n    files?.[0] &&\n      props.onOneFileFail?.({\n        e: event,\n        file: files?.[0],\n        currentFiles: files,\n        failedFiles: files,\n        response,\n      });\n  };\n\n  const onResponseProgress = (p: InnerProgressContext) => {\n    props.onProgress?.({\n      e: p.event,\n      file: p.file,\n      currentFiles: p.files,\n      percent: p.percent,\n      type: p.type,\n    });\n  };\n\n  // 只有多个上传请求同时触发时才需 onOneFileSuccess\n  const onResponseSuccess = (p: SuccessContext) => {\n    if (!props.multiple || props.uploadAllFilesInOneRequest) return;\n    props.onOneFileSuccess?.({\n      e: p.event,\n      file: p.files[0],\n      response: p.response,\n    });\n    const index = uploadValue.findIndex((file) => file.raw === p.files[0].raw);\n    if (index > 0) {\n      uploadValue.splice(index, 1, p.files[0]);\n      setUploadValue([...uploadValue], { trigger: 'status-change' });\n    }\n  };\n\n  function getSizeLimitError(sizeLimitObj: SizeLimitObj) {\n    const limit = sizeLimitObj;\n    return limit.message\n      ? t(limit.message, { sizeLimit: limit.size })\n      : `${t(locale.sizeLimitMessage, { sizeLimit: limit.size })} ${limit.unit}`;\n  }\n\n  const handleNonAutoUpload = (toFiles: UploadFile[]) => {\n    const tmpFiles = props.multiple && !props.isBatchUpload ? uploadValue.concat(toFiles) : toFiles;\n    // 图片需要本地预览\n    if (['image', 'image-flow'].includes(props.theme)) {\n      const list = tmpFiles.map(\n        (file) =>\n          new Promise((resolve) => {\n            getFileUrlByFileRaw(file.raw).then((url) => {\n              resolve({ ...file, url });\n            });\n          }),\n      );\n      Promise.all(list).then((files) => {\n        setUploadValue(files, {\n          trigger: 'add',\n          index: uploadValue.length,\n          file: files[0],\n        });\n      });\n    } else {\n      setUploadValue(tmpFiles, {\n        trigger: 'add',\n        index: uploadValue.length,\n        file: tmpFiles[0],\n      });\n    }\n    setToUploadFiles([]);\n  };\n\n  const onFileChange = (files: FileList) => {\n    if (props.disabled) return;\n    // @ts-ignore\n    props.onSelectChange?.([...files], { currentSelectedFiles: toUploadFiles });\n    validateFile({\n      uploadValue,\n      // @ts-ignore\n      files: [...files],\n      allowUploadDuplicateFile: props.allowUploadDuplicateFile,\n      max: props.max,\n      sizeLimit: props.sizeLimit,\n      isBatchUpload: props.isBatchUpload,\n      autoUpload: props.autoUpload,\n      format: props.format,\n      beforeUpload: props.beforeUpload,\n      beforeAllFilesUpload: props.beforeAllFilesUpload,\n    }).then((args) => {\n      // 自定义全文件校验不通过\n      if (args.validateResult?.type === 'BEFORE_ALL_FILES_UPLOAD') return;\n      // 文件数量校验不通过\n      if (args.lengthOverLimit) {\n        props.onValidate?.({ type: 'FILES_OVER_LENGTH_LIMIT', files: args.files });\n      }\n      // 过滤相同的文件名\n      if (args.hasSameNameFile) {\n        props.onValidate?.({ type: 'FILTER_FILE_SAME_NAME', files: args.files });\n      }\n      // 文件大小校验结果处理\n      if (args.fileValidateList instanceof Array) {\n        const { sizeLimitErrors, toFiles } = getFilesAndErrors(args.fileValidateList, getSizeLimitError);\n        const tmpWaitingFiles = autoUpload ? toFiles : toUploadFiles.concat(toFiles);\n        setToUploadFiles(tmpWaitingFiles);\n        props.onWaitingUploadFilesChange?.({ files: tmpWaitingFiles, trigger: 'validate' });\n        // 错误信息处理\n        if (sizeLimitErrors[0]) {\n          setSizeOverLimitMessage(sizeLimitErrors[0].file.response.error);\n          props.onValidate?.({ type: 'FILE_OVER_SIZE_LIMIT', files: sizeLimitErrors.map((t) => t.file) });\n        }\n        setSizeOverLimitMessage('');\n        // 如果是自动上传\n        if (autoUpload) {\n          uploadFiles(toFiles);\n        } else {\n          handleNonAutoUpload(toFiles);\n        }\n      }\n    });\n\n    // 清空 <input type=\"file\"> 元素的文件，避免出现重复文件无法选择的情况\n    inputRef.current.value = null;\n  };\n\n  const onNormalFileChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    onFileChange?.(e.target.files);\n  };\n\n  function onDragFileChange(e: DragEvent<HTMLDivElement>) {\n    onFileChange?.(e.dataTransfer.files);\n  }\n\n  let xhrReqList: { files: UploadFile[]; xhrReq: XMLHttpRequest }[] = [];\n  /**\n   * 上传文件\n   * 对外暴露方法，修改时需谨慎\n   */\n  function uploadFiles(toFiles?: UploadFile[]) {\n    const notUploadedFiles = uploadValue.filter((t) => t.status !== 'success');\n    const files = props.autoUpload ? toFiles || toUploadFiles : notUploadedFiles;\n    if (!files || !files.length) return;\n    setUploading(true);\n    upload({\n      action: props.action,\n      uploadedFiles: uploadValue,\n      toUploadFiles: files,\n      multiple: props.multiple,\n      isBatchUpload: props.isBatchUpload,\n      uploadAllFilesInOneRequest: props.uploadAllFilesInOneRequest,\n      useMockProgress: props.useMockProgress,\n      data: props.data,\n      requestMethod: props.requestMethod,\n      formatRequest: props.formatRequest,\n      formatResponse: props.formatResponse,\n      onResponseProgress,\n      onResponseSuccess,\n      onResponseError,\n      setXhrObject: (xhr) => {\n        if (xhr.files[0]?.raw && xhrReqList.find((item) => item.files[0].raw === xhr.files[0].raw)) return;\n        xhrReqList = xhrReqList.concat(xhr);\n        const timer = setTimeout(() => {\n          setXhrReq(xhrReqList);\n          clearTimeout(timer);\n        }, 10);\n      },\n    }).then(\n      ({ status, data, list, failedFiles }) => {\n        setUploading(false);\n        if (status === 'success') {\n          if (props.autoUpload) {\n            setUploadValue(data.files, {\n              e: data.event,\n              trigger: 'add',\n              index: uploadValue.length,\n              file: data.files[0],\n            });\n          }\n          props.onSuccess?.({\n            fileList: data.files,\n            currentFiles: files,\n            file: files[0],\n            // 只有全部请求完成后，才会存在该字段\n            results: list?.map((t) => t.data),\n          });\n          xhrReqList = [];\n          setXhrReq([]);\n        } else if (failedFiles?.[0]) {\n          props.onFail?.({\n            e: data.event,\n            file: failedFiles[0],\n            failedFiles,\n            currentFiles: files,\n            response: data.response,\n          });\n        }\n\n        // 非自动上传，文件都在 uploadValue，不涉及 toUploadFiles\n        if (props.autoUpload) {\n          setToUploadFiles(failedFiles);\n          props.onWaitingUploadFilesChange?.({ files: failedFiles, trigger: 'uploaded' });\n        }\n      },\n      (p) => {\n        onResponseError(p);\n        setUploading(false);\n      },\n    );\n  }\n\n  function onRemove(p: UploadRemoveContext) {\n    setSizeOverLimitMessage('');\n    const changePrams: UploadChangeContext = {\n      e: p.e,\n      trigger: 'remove',\n      index: p.index,\n      file: p.file,\n    };\n    // remove all files for batchUpload\n    if (!p.file && p.index === -1) {\n      setToUploadFiles([]);\n      props.onWaitingUploadFilesChange?.({ files: [], trigger: 'remove' });\n      setUploadValue([], changePrams);\n      props.onRemove?.(p);\n      return;\n    }\n    // remove one file\n    if (autoUpload && p.file.status !== 'success') {\n      toUploadFiles.splice(p.index, 1);\n      setToUploadFiles([...toUploadFiles]);\n      props.onWaitingUploadFilesChange?.({ files: [...toUploadFiles], trigger: 'remove' });\n      if (p.file.raw || p.file.name) {\n        const fileIndex = uploadValue.findIndex(\n          (file) => (file.raw && file.raw === p.file.raw) || (file.name && file.name === p.file.name),\n        );\n        if (fileIndex !== -1) {\n          uploadValue.splice(fileIndex, 1);\n          setUploadValue([...uploadValue], changePrams);\n        }\n      }\n    } else {\n      uploadValue.splice(p.index, 1);\n      setUploadValue([...uploadValue], changePrams);\n    }\n    props.onRemove?.(p);\n  }\n\n  const triggerUpload = () => {\n    if (disabled) return;\n    (inputRef.current as HTMLInputElement).click();\n  };\n\n  const cancelUpload = (context?: { file?: UploadFile; e?: MouseEvent<HTMLElement> }) => {\n    xhrReq?.forEach((item) => {\n      item.xhrReq?.abort();\n    });\n    setUploading(false);\n\n    if (props.autoUpload) {\n      setToUploadFiles(toUploadFiles.map((item) => ({ ...item, status: 'waiting' })));\n    } else {\n      setUploadValue(\n        uploadValue.map((item) => {\n          if (item.status !== 'success') {\n            return { ...item, status: 'waiting' };\n          }\n          return item;\n        }),\n        { trigger: 'abort' },\n      );\n    }\n\n    if (context?.file) {\n      onRemove?.({ file: context.file, e: context.e, index: 0 });\n    }\n  };\n\n  return {\n    t,\n    locale,\n    classPrefix,\n    triggerUploadText,\n    toUploadFiles,\n    uploadValue,\n    displayFiles,\n    sizeOverLimitMessage,\n    uploading,\n    tipsClasses,\n    errorClasses,\n    inputRef,\n    disabled,\n    xhrReq,\n    uploadFiles,\n    onFileChange,\n    onNormalFileChange,\n    onDragFileChange,\n    onRemove,\n    triggerUpload,\n    cancelUpload,\n  };\n}\n"],"names":["useUpload","props","inputRef","useRef","disabled","autoUpload","isBatchUpload","useConfig","classPrefix","useLocaleReceiver","globalLocale","t","useControlled","onChange","uploadValue","setUploadValue","useState","xhrReq","setXhrReq","toUploadFiles","setToUploadFiles","sizeOverLimitMessage","setSizeOverLimitMessage","locale","useMemo","merge","tipsClasses","errorClasses","concat","triggerUploadText","field","getTriggerTextField","multiple","status","uploading","setUploading","displayFiles","getDisplayFiles","onResponseError","p","response","event","files","onOneFileFail","e","file","currentFiles","failedFiles","onResponseProgress","onProgress","percent","type","onResponseSuccess","uploadAllFilesInOneRequest","onOneFileSuccess","index","findIndex","raw","splice","trigger","getSizeLimitError","sizeLimitObj","limit","message","sizeLimit","size","sizeLimitMessage","unit","handleNonAutoUpload","toFiles","tmpFiles","includes","theme","list","map","Promise","resolve","getFileUrlByFileRaw","then","url","all","length","onFileChange","onSelectChange","currentSelectedFiles","validateFile","allowUploadDuplicateFile","max","format","beforeUpload","beforeAllFilesUpload","args","validateResult","lengthOverLimit","onValidate","hasSameNameFile","fileValidateList","Array","getFilesAndErrors","sizeLimitErrors","tmpWaitingFiles","onWaitingUploadFilesChange","error","uploadFiles","current","value","onNormalFileChange","target","onDragFileChange","dataTransfer","xhrReqList","notUploadedFiles","filter","upload","action","uploadedFiles","useMockProgress","data","requestMethod","formatRequest","formatResponse","setXhrObject","xhr","find","item","timer","setTimeout","clearTimeout","onSuccess","fileList","results","onFail","onRemove","changePrams","name","fileIndex","triggerUpload","click","cancelUpload","context","forEach","abort"],"mappings":"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"}