/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-1e32006c.js';
import React, { useRef, useMemo } from 'react';
import classNames from 'classnames';
import { CheckCircleFilledIcon, ErrorCircleFilledIcon } from 'tdesign-icons-react';
import { abridgeName, getFileSizeText, getCurrentDate } from '../../_common/js/upload/utils.js';
import { Button } from '../../button/index.js';
import useCommonClassName from '../../hooks/useCommonClassName.js';
import { Loading } from '../../loading/index.js';
import useDrag from '../hooks/useDrag.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import '../../_common/js/log/log.js';
import '../../button/Button.js';
import '../../_chunks/dep-8368bb87.js';
import '../../hooks/useConfig.js';
import '../../_chunks/dep-13a70a46.js';
import '../../_chunks/dep-1cce5a60.js';
import '../../_chunks/dep-dc1ce7ed.js';
import '../../_chunks/dep-4e2181de.js';
import '../../_chunks/dep-c197ce4f.js';
import '../../_chunks/dep-e430e2ee.js';
import '../../_chunks/dep-4a64abb1.js';
import '../../_chunks/dep-4e0da095.js';
import '../../_chunks/dep-e54bb0dc.js';
import '../../_chunks/dep-b2626e28.js';
import '../../_chunks/dep-5a2778c1.js';
import '../../_chunks/dep-a2b97df8.js';
import '../../_chunks/dep-7aeeb170.js';
import '../../_chunks/dep-2afd805c.js';
import '../../_chunks/dep-e237f0f2.js';
import '../../_chunks/dep-4ed2dce5.js';
import '../../_chunks/dep-c8db35c0.js';
import '../../_chunks/dep-96aef4a9.js';
import '../../_chunks/dep-557a1b0f.js';
import '../../_chunks/dep-264b0e55.js';
import '../../_chunks/dep-f5693bf6.js';
import '../../_chunks/dep-fdd1d1a6.js';
import '../../_chunks/dep-7ff8b18e.js';
import '../../_chunks/dep-ebf3a272.js';
import '../../_chunks/dep-6a2482c6.js';
import '../../_chunks/dep-a980ac05.js';
import '../../locale/zh_CN.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import '../../_util/useRipple.js';
import '../../_util/useAnimation.js';
import '../../_util/setStyle.js';
import '../../_util/dom.js';
import 'raf';
import '../../_chunks/dep-3c98169f.js';
import '../../_util/easing.js';
import '../../button/defaultProps.js';
import '../../loading/Loading.js';
import '../../_chunks/dep-9615f03f.js';
import '../../_chunks/dep-7909fefa.js';
import '../../common/Portal.js';
import 'react-dom';
import '../../loading/gradient.js';
import '../../_common/js/loading/circle-adapter.js';
import '../../_common/js/utils/set-style.js';
import '../../_common/js/utils/helper.js';
import '../../_chunks/dep-59b9253f.js';
import '../../_chunks/dep-d1b4ab24.js';
import '../../loading/defaultProps.js';
import '../../loading/plugin.js';
import '../../loading/style/css.js';
import '../../loading/type.js';
import '../../button/style/css.js';
import '../../button/type.js';

var DraggerFile = function DraggerFile(props) {
  var _props$trigger;

  var displayFiles = props.displayFiles,
      locale = props.locale,
      disabled = props.disabled;

  var _useCommonClassName = useCommonClassName(),
      SIZE = _useCommonClassName.SIZE;

  var uploadPrefix = "".concat(props.classPrefix, "-upload");
  var drag = useDrag(props.dragEvents);
  var dragActive = drag.dragActive;
  var draggerFileRef = useRef();

  var _useGlobalIcon = useGlobalIcon({
    CheckCircleFilledIcon: CheckCircleFilledIcon,
    ErrorCircleFilledIcon: ErrorCircleFilledIcon
  }),
      CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon;

  var classes = useMemo(function () {
    var _displayFiles$;

    return ["".concat(uploadPrefix, "__dragger"), _defineProperty({}, "".concat(uploadPrefix, "__dragger-center"), !displayFiles[0]), _defineProperty({}, "".concat(uploadPrefix, "__dragger-error"), ((_displayFiles$ = displayFiles[0]) === null || _displayFiles$ === void 0 ? void 0 : _displayFiles$.status) === "fail")];
  }, [displayFiles, uploadPrefix]);

  var renderImage = function renderImage() {
    var file = displayFiles[0];
    if (!file) return null;
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-img-wrap")
    }, file.url && /* @__PURE__ */React.createElement("img", {
      src: file.url
    }));
  };

  var renderUploading = function renderUploading() {
    var file = displayFiles[0];
    if (!file) return null;

    if (file.status === "progress") {
      return /* @__PURE__ */React.createElement("div", {
        className: "".concat(uploadPrefix, "__single-progress")
      }, /* @__PURE__ */React.createElement(Loading, null), /* @__PURE__ */React.createElement("span", {
        className: "".concat(uploadPrefix, "__single-percent")
      }, file.percent, "%"));
    }
  };

  var renderMainPreview = function renderMainPreview() {
    var file = displayFiles[0];
    if (!file) return null;
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-progress")
    }, props.theme === "image" && renderImage(), /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-progress-info")
    }, /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-text")
    }, /* @__PURE__ */React.createElement("span", {
      className: "".concat(uploadPrefix, "__single-name")
    }, abridgeName(file.name)), file.status === "progress" && renderUploading(), file.status === "success" && /* @__PURE__ */React.createElement(CheckCircleFilledIcon$1, null), file.status === "fail" && /* @__PURE__ */React.createElement(ErrorCircleFilledIcon$1, null)), /* @__PURE__ */React.createElement("small", {
      className: "".concat(SIZE.small)
    }, locale.file.fileSizeText, "\uFF1A", getFileSizeText(file.size)), /* @__PURE__ */React.createElement("small", {
      className: "".concat(SIZE.small)
    }, locale.file.fileOperationDateText, "\uFF1A", file.uploadTime || getCurrentDate()), /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-btns")
    }, ["progress", "waiting"].includes(file.status) && !disabled && /* @__PURE__ */React.createElement(Button, {
      theme: "primary",
      variant: "text",
      className: "".concat(uploadPrefix, "__dragger-progress-cancel"),
      onClick: function onClick(e) {
        var _props$cancelUpload;

        return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
          e: e,
          file: props.toUploadFiles[0] || props.files[0]
        });
      }
    }, locale === null || locale === void 0 ? void 0 : locale.cancelUploadText), !props.autoUpload && file.status === "waiting" && /* @__PURE__ */React.createElement(Button, {
      variant: "text",
      theme: "primary",
      disabled: disabled,
      onClick: function onClick() {
        var _props$uploadFiles;

        return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
      },
      className: "".concat(uploadPrefix, "__dragger-upload-btn")
    }, locale.triggerUploadText.normal)), ["fail", "success"].includes(file === null || file === void 0 ? void 0 : file.status) && !disabled && /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-btns")
    }, /* @__PURE__ */React.createElement(Button, {
      theme: "primary",
      variant: "text",
      disabled: disabled,
      className: "".concat(uploadPrefix, "__dragger-progress-cancel"),
      onClick: props.triggerUpload
    }, locale.triggerUploadText.reupload), /* @__PURE__ */React.createElement(Button, {
      theme: "danger",
      variant: "text",
      disabled: disabled,
      className: "".concat(uploadPrefix, "__dragger-delete-btn"),
      onClick: function onClick(e) {
        return props.onRemove({
          e: e,
          index: 0,
          file: file
        });
      }
    }, locale.triggerUploadText["delete"]))));
  };

  var renderDefaultDragElement = function renderDefaultDragElement() {
    var _locale$triggerUpload;

    var unActiveElement = /* @__PURE__ */React.createElement("div", null, /* @__PURE__ */React.createElement("span", {
      className: "".concat(uploadPrefix, "--highlight")
    }, (_locale$triggerUpload = locale.triggerUploadText) === null || _locale$triggerUpload === void 0 ? void 0 : _locale$triggerUpload.normal), /* @__PURE__ */React.createElement("span", null, "\xA0\xA0/\xA0\xA0", locale.dragger.draggingText));
    var activeElement = /* @__PURE__ */React.createElement("div", null, locale.dragger.dragDropText);
    return dragActive ? activeElement : unActiveElement;
  };

  var getContent = function getContent() {
    var file = displayFiles[0];

    if (file && ["progress", "success", "fail", "waiting"].includes(file.status)) {
      return renderMainPreview();
    }

    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__trigger"),
      onClick: props.triggerUpload
    }, props.children || renderDefaultDragElement());
  };

  return /* @__PURE__ */React.createElement("div", {
    ref: draggerFileRef,
    className: classNames(classes),
    onDrop: drag.handleDrop,
    onDragEnter: drag.handleDragenter,
    onDragOver: drag.handleDragover,
    onDragLeave: drag.handleDragleave
  }, ((_props$trigger = props.trigger) === null || _props$trigger === void 0 ? void 0 : _props$trigger.call(props, {
    files: displayFiles,
    dragActive: dragActive
  })) || getContent());
};

DraggerFile.displayName = "DraggerFile";

export { DraggerFile as default };
//# sourceMappingURL=DraggerFile.js.map
