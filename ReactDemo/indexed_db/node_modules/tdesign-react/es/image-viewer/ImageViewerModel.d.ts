import { MouseEvent, KeyboardEvent } from 'react';
import { TNode } from '../common';
import { ImageInfo, ImageScale, ImageViewerScale } from './type';
interface ImageModelItemProps {
    rotateZ: number;
    scale: number;
    mirror: number;
    src: string;
    preSrc?: string;
}
export declare const ImageModelItem: ({ rotateZ, scale, src, preSrc, mirror }: ImageModelItemProps) => JSX.Element;
interface ImageViewerUtilsProps {
    scale: number;
    currentImage: ImageInfo;
    onRotate: (ROTATE_COUNT: number) => void;
    onZoom: () => void;
    onZoomOut: () => void;
    onMirror: () => void;
    onReset: () => void;
}
export declare const ImageViewerUtils: ({ onZoom, scale, onZoomOut, currentImage, onRotate, onMirror, onReset, }: ImageViewerUtilsProps) => JSX.Element;
interface ImageModalProps {
    title?: TNode;
    visible: boolean;
    closeOnOverlay: boolean;
    showOverlay: boolean;
    index: number;
    defaultIndex?: number;
    images: ImageInfo[];
    onClose: (context: {
        trigger: 'close-btn' | 'overlay' | 'esc';
        e: MouseEvent<HTMLElement> | KeyboardEvent;
    }) => void;
    onOpen: () => void;
    imageScale: ImageScale;
    viewerScale: ImageViewerScale;
    zIndex: number;
    isMini: boolean;
    draggable: boolean;
    closeBtn: boolean | TNode;
    onIndexChange?: (index: number, context: {
        trigger: 'prev' | 'next';
    }) => void;
}
export declare const ImageModal: (props: ImageModalProps) => JSX.Element;
export {};
