/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-59b9253f.js';
import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import React, { useState, useRef, useEffect, useImperativeHandle } from 'react';
import { useFormContext, FormListContext } from './FormContext.js';
import '../_common/js/log/index.js';
import log from '../_common/js/log/log.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-d1b4ab24.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var key = 0;

var FormList = function FormList(props) {
  var _useFormContext = useFormContext(),
      formMapRef = _useFormContext.formMapRef;

  var name = props.name,
      _props$initialData = props.initialData,
      initialData = _props$initialData === void 0 ? [] : _props$initialData,
      rules = props.rules,
      children = props.children;

  var _useState = useState(initialData),
      _useState2 = _slicedToArray(_useState, 2),
      initialValue = _useState2[0],
      setInitialValue = _useState2[1];

  var _useState3 = useState(initialData.map(function (data, index) {
    return _objectSpread({
      key: key += 1,
      name: index,
      isListField: true
    }, data);
  })),
      _useState4 = _slicedToArray(_useState3, 2),
      fields = _useState4[0],
      setFields = _useState4[1];

  var formListMapRef = useRef( /* @__PURE__ */new Map());
  var formListRef = useRef();
  var operation = {
    add: function add(defaultValue, insertIndex) {
      var cloneFields = _toConsumableArray(fields);

      var index = insertIndex !== null && insertIndex !== void 0 ? insertIndex : cloneFields.length;
      cloneFields.splice(index, 0, {
        key: key += 1,
        name: index,
        isListField: true
      });
      cloneFields.forEach(function (field, index2) {
        return Object.assign(field, {
          name: index2
        });
      });
      setFields(cloneFields);

      if (typeof defaultValue !== "undefined") {
        var nextInitialValue = _toConsumableArray(initialValue);

        nextInitialValue[index] = defaultValue;
        setInitialValue(nextInitialValue);
      }
    },
    remove: function remove(index) {
      var nextFields = fields.filter(function (_, i) {
        if (Array.isArray(index)) return !index.includes(i);
        return i !== index;
      }).map(function (field, index2) {
        return Object.assign(field, {
          name: index2
        });
      });
      setInitialValue(initialValue.filter(function (_, idx) {
        return idx !== index;
      }));
      setFields(nextFields);
    },
    move: function move(from, to) {
      var cloneFields = _toConsumableArray(fields);

      var fromItem = _objectSpread({}, cloneFields[from]);

      var toItem = _objectSpread({}, cloneFields[to]);

      cloneFields[to] = fromItem;
      cloneFields[from] = toItem;
      setFields(cloneFields);
    }
  };

  function setListFields(fieldData, callback) {
    setFields(fieldData.map(function (_, index) {
      return {
        key: key += 1,
        name: index,
        isListField: true
      };
    }));
    Promise.resolve().then(function () {
      _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
        var name2 = formItemRef.current.name;
        var data;

        if (Array.isArray(name2)) {
          var _fieldData$index;

          var _name = _slicedToArray(name2, 2),
              index = _name[0],
              itemKey = _name[1];

          data = fieldData === null || fieldData === void 0 ? void 0 : (_fieldData$index = fieldData[index]) === null || _fieldData$index === void 0 ? void 0 : _fieldData$index[itemKey];
        } else {
          data = fieldData === null || fieldData === void 0 ? void 0 : fieldData[name2];
        }

        callback(formItemRef, data);
      });
    });
  }

  useEffect(function () {
    _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
      var _formItemRef$current = formItemRef.current,
          name2 = _formItemRef$current.name,
          value = _formItemRef$current.value;
      if (value) return;
      var data;

      if (Array.isArray(name2)) {
        var _initialValue$index;

        var _name2 = _slicedToArray(name2, 2),
            index = _name2[0],
            itemKey = _name2[1];

        data = initialValue === null || initialValue === void 0 ? void 0 : (_initialValue$index = initialValue[index]) === null || _initialValue$index === void 0 ? void 0 : _initialValue$index[itemKey];
      } else {
        data = initialValue === null || initialValue === void 0 ? void 0 : initialValue[name2];
      }

      formItemRef.current.setField({
        value: data,
        status: "not"
      });
    });
  }, [fields, initialValue]);
  useEffect(function () {
    if (!name || !formMapRef) return;
    formMapRef.current.set(name, formListRef);
    return function () {
      formMapRef.current["delete"](name);
    };
  }, [name]);
  useImperativeHandle(formListRef, function () {
    return {
      name: name,
      getValue: function getValue() {
        var formListValue = [];

        _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
          var _formItemRef$current2 = formItemRef.current,
              name2 = _formItemRef$current2.name,
              getValue = _formItemRef$current2.getValue;

          if (Array.isArray(name2)) {
            var _name3 = _slicedToArray(name2, 2),
                index = _name3[0],
                itemKey = _name3[1];

            if (!formListValue[index]) {
              formListValue[index] = _defineProperty({}, itemKey, getValue());
            } else {
              formListValue[index][itemKey] = getValue();
            }
          } else {
            formListValue[name2] = getValue();
          }
        });

        return formListValue;
      },
      validate: function validate() {
        var trigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "all";
        var resultList = [];

        var validates = _toConsumableArray(formListMapRef.current.values()).map(function (formItemRef) {
          return formItemRef.current.validate(trigger);
        });

        return new Promise(function (resolve) {
          Promise.all(validates).then(function (validateResult) {
            validateResult.forEach(function (result) {
              var errorKey = Object.keys(result)[0];
              var errorValue = Object.values(result)[0];

              var _errorKey$split = errorKey.split(","),
                  _errorKey$split2 = _slicedToArray(_errorKey$split, 2),
                  index = _errorKey$split2[0],
                  itemKey = _errorKey$split2[1];

              if (itemKey) {
                resultList[index] = _defineProperty({}, itemKey, errorValue);
              } else {
                resultList[index] = errorValue;
              }
            });
            var errorItems = validateResult.filter(function (item) {
              return Object.values(item)[0] !== true;
            });

            if (errorItems.length) {
              resolve(_defineProperty({}, name, resultList));
            } else {
              resolve(_defineProperty({}, name, true));
            }
          });
        });
      },
      setValue: function setValue(fieldData) {
        setListFields(fieldData, function (formItemRef, data) {
          var _formItemRef$current3;

          formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current3 = formItemRef.current) === null || _formItemRef$current3 === void 0 ? void 0 : _formItemRef$current3.setValue(data);
        });
      },
      setField: function setField(fieldData) {
        var value = fieldData.value,
            status = fieldData.status;
        setListFields(value, function (formItemRef, data) {
          var _formItemRef$current4;

          formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current4 = formItemRef.current) === null || _formItemRef$current4 === void 0 ? void 0 : _formItemRef$current4.setField({
            value: data,
            status: status
          });
        });
      },
      resetField: function resetField() {
        _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
          formItemRef.current.resetField();
        });

        setInitialValue([]);
      },
      setValidateMessage: function setValidateMessage(fieldData) {
        _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
          var name2 = formItemRef.current.name;
          var data;

          if (Array.isArray(name2)) {
            var _fieldData$index2;

            var _name4 = _slicedToArray(name2, 2),
                index = _name4[0],
                itemKey = _name4[1];

            data = fieldData === null || fieldData === void 0 ? void 0 : (_fieldData$index2 = fieldData[index]) === null || _fieldData$index2 === void 0 ? void 0 : _fieldData$index2[itemKey];
          } else {
            data = fieldData === null || fieldData === void 0 ? void 0 : fieldData[name2];
          }

          formItemRef.current.setValidateMessage(data);
        });
      },
      resetValidate: function resetValidate() {
        _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
          formItemRef.current.resetValidate();
        });
      }
    };
  });

  if (typeof children !== "function") {
    log.error("Form", "FormList's children must be a function!");
    return null;
  }

  return /* @__PURE__ */React.createElement(FormListContext.Provider, {
    value: {
      name: name,
      rules: rules,
      formListMapRef: formListMapRef
    }
  }, children(fields, operation));
};

FormList.displayName = "FormList";

export { FormList as default };
//# sourceMappingURL=FormList.js.map
