/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-59b9253f.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import React, { forwardRef, useState, useMemo, useCallback, useEffect } from 'react';
import dayjs from 'dayjs';
import { Button } from '../button/index.js';
import { Select } from '../select/index.js';
import { Radio } from '../radio/index.js';
import CheckTag from '../tag/CheckTag.js';
import noop from '../_util/noop.js';
import usePrefixClass from './hooks/usePrefixClass.js';
import useIsomorphicLayoutEffect from '../_util/useLayoutEffect.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import { minYear, createDateList, createMonthList, blockName, controlSectionSize } from './_util.js';
import CalendarCellComp from './CalendarCellComp.js';
import { calendarDefaultProps } from './defaultProps.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-d1b4ab24.js';
import '../button/Button.js';
import '../_chunks/dep-8368bb87.js';
import 'classnames';
import '../hooks/useConfig.js';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-e430e2ee.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-e54bb0dc.js';
import '../_chunks/dep-b2626e28.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-e237f0f2.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../_util/useRipple.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3c98169f.js';
import '../_util/easing.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../loading/style/css.js';
import '../loading/type.js';
import '../button/defaultProps.js';
import '../button/style/css.js';
import '../button/type.js';
import '../select/base/Select.js';
import '../_chunks/dep-ddb0f1c1.js';
import '../_chunks/dep-93a10d8c.js';
import '../_chunks/dep-199b1581.js';
import '../_chunks/dep-c8bfa11e.js';
import '../hooks/useControlled.js';
import '../_chunks/dep-f54ff1e5.js';
import '../_chunks/dep-e1d4dd61.js';
import '../_chunks/dep-236ef238.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../select/util/helper.js';
import '../select/base/OptionGroup.js';
import '../select/defaultProps.js';
import '../select/base/Option.js';
import '../_chunks/dep-a5f8b6ec.js';
import '../common/FakeArrow.js';
import '../select-input/index.js';
import '../select-input/SelectInput.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../popup/hooks/useTrigger.js';
import 'react-is';
import '../popup/utils/ref.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-236b0359.js';
import '../_chunks/dep-6d5c0a90.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/style/css.js';
import '../popup/type.js';
import '../select-input/useSingle.js';
import '../_chunks/dep-c776db26.js';
import '../_chunks/dep-afbd242f.js';
import '../_chunks/dep-3576b6cd.js';
import '../_chunks/dep-aadcae4d.js';
import '../input/index.js';
import '../input/Input.js';
import 'tdesign-icons-react';
import '../hooks/useGlobalIcon.js';
import '../input/InputGroup.js';
import '../input/defaultProps.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../input/style/css.js';
import '../input/type.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../_util/useDragSorter.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/useTagList.js';
import 'lodash';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/defaultProps.js';
import '../tag/style/css.js';
import '../tag/type.js';
import '../tag-input/useHover.js';
import '../tag-input/defaultProps.js';
import '../tag-input/style/css.js';
import '../tag-input/type.js';
import '../select-input/useOverlayInnerStyle.js';
import '../select-input/defaultProps.js';
import '../select-input/style/css.js';
import '../select-input/type.js';
import '../select/base/PopupContent.js';
import '../select/style/css.js';
import '../select/type.js';
import '../_chunks/dep-5bd899df.js';
import '../common/Check.js';
import '../_util/helper.js';
import '../_chunks/dep-fc5ba3d5.js';
import '../_util/useCommonClassName.js';
import '../radio/defaultProps.js';
import '../radio/style/css.js';
import '../radio/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
  var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return {
    visible: visible,
    disabled: false,
    mode: {
      visible: true,
      radioGroupProps: {}
    },
    year: {
      visible: true,
      selectProps: {
        popupProps: {
          overlayInnerStyle: {
            width: "110px"
          }
        }
      }
    },
    month: {
      visible: true,
      selectProps: {
        popupProps: {
          overlayInnerStyle: {
            width: "90px"
          }
        }
      }
    },
    weekend: {
      visible: true,
      showWeekendButtonProps: {},
      hideWeekendButtonProps: {}
    },
    current: {
      visible: true,
      currentDayButtonProps: {},
      currentMonthButtonProps: {}
    }
  };
};

var Calendar = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      style = props.style,
      modeFromProps = props.mode,
      valueFromProps = props.value,
      firstDayOfWeek = props.firstDayOfWeek,
      format = props.format,
      range = props.range,
      head = props.head,
      cell = props.cell,
      cellAppend = props.cellAppend,
      week = props.week,
      theme = props.theme,
      controllerConfig = props.controllerConfig,
      _props$isShowWeekendD = props.isShowWeekendDefault,
      isShowWeekendDefault = _props$isShowWeekendD === void 0 ? true : _props$isShowWeekendD,
      _props$preventCellCon = props.preventCellContextmenu,
      preventCellContextmenu = _props$preventCellCon === void 0 ? false : _props$preventCellCon,
      monthProps = props.month,
      yearProps = props.year,
      _props$onControllerCh = props.onControllerChange,
      onControllerChange = _props$onControllerCh === void 0 ? noop : _props$onControllerCh,
      _props$onCellClick = props.onCellClick,
      onCellClick = _props$onCellClick === void 0 ? noop : _props$onCellClick,
      _props$onCellDoubleCl = props.onCellDoubleClick,
      onCellDoubleClick = _props$onCellDoubleCl === void 0 ? noop : _props$onCellDoubleCl,
      _props$onCellRightCli = props.onCellRightClick,
      onCellRightClick = _props$onCellRightCli === void 0 ? noop : _props$onCellRightCli,
      _props$onMonthChange = props.onMonthChange,
      onMonthChange = _props$onMonthChange === void 0 ? noop : _props$onMonthChange,
      fillWithZero = props.fillWithZero;
  var controllerConfigData = typeof controllerConfig === "boolean" ? getDefaultControllerConfigData(controllerConfig) : _objectSpread(_objectSpread({}, getDefaultControllerConfigData()), controllerConfig);

  if (typeof controllerConfig !== "boolean") {
    if (monthProps) {
      controllerConfigData.month.visible = true;
    }

    if (yearProps) {
      controllerConfigData.year.visible = true;
    }
  }

  var visible = controllerConfigData.visible,
      disabled = controllerConfigData.disabled,
      modeFromConfig = controllerConfigData.mode,
      yearFromConfig = controllerConfigData.year,
      monthFromConfig = controllerConfigData.month,
      weekend = controllerConfigData.weekend,
      current = controllerConfigData.current;
  var _modeFromConfig$visib = modeFromConfig.visible,
      visibleForMode = _modeFromConfig$visib === void 0 ? true : _modeFromConfig$visib,
      _modeFromConfig$radio = modeFromConfig.radioGroupProps,
      radioGroupPropsForMode = _modeFromConfig$radio === void 0 ? {} : _modeFromConfig$radio;
  var _yearFromConfig$visib = yearFromConfig.visible,
      visibleForYear = _yearFromConfig$visib === void 0 ? true : _yearFromConfig$visib,
      _yearFromConfig$selec = yearFromConfig.selectProps,
      selectPropsForYear = _yearFromConfig$selec === void 0 ? {} : _yearFromConfig$selec;
  var _monthFromConfig$visi = monthFromConfig.visible,
      visibleForMonth = _monthFromConfig$visi === void 0 ? true : _monthFromConfig$visi,
      _monthFromConfig$sele = monthFromConfig.selectProps,
      selectPropsForMonth = _monthFromConfig$sele === void 0 ? {} : _monthFromConfig$sele;
  var _weekend$visible = weekend.visible,
      visibleForWeekendToggle = _weekend$visible === void 0 ? true : _weekend$visible,
      _weekend$showWeekendB = weekend.showWeekendButtonProps,
      showWeekendButtonProps = _weekend$showWeekendB === void 0 ? {} : _weekend$showWeekendB,
      _weekend$hideWeekendB = weekend.hideWeekendButtonProps,
      hideWeekendButtonProps = _weekend$hideWeekendB === void 0 ? {} : _weekend$hideWeekendB;
  var _current$visible = current.visible,
      visibleForCurrent = _current$visible === void 0 ? true : _current$visible,
      _current$currentDayBu = current.currentDayButtonProps,
      currentDayButtonProps = _current$currentDayBu === void 0 ? {} : _current$currentDayBu,
      _current$currentMonth = current.currentMonthButtonProps,
      currentMonthButtonProps = _current$currentMonth === void 0 ? {} : _current$currentMonth;

  var _useState = useState("month"),
      _useState2 = _slicedToArray(_useState, 2),
      mode = _useState2[0],
      setMode = _useState2[1];

  var _useState3 = useState(dayjs(valueFromProps || dayjs().format("YYYY-MM-DD"))),
      _useState4 = _slicedToArray(_useState3, 2),
      value = _useState4[0],
      setValue = _useState4[1];

  var _useState5 = useState(yearProps ? Number(yearProps) : value.year()),
      _useState6 = _slicedToArray(_useState5, 2),
      year = _useState6[0],
      setYear = _useState6[1];

  var _useState7 = useState(monthProps ? Number(monthProps) : parseInt(value.format("M"), 10)),
      _useState8 = _slicedToArray(_useState7, 2),
      month = _useState8[0],
      setMonth = _useState8[1];

  var _useState9 = useState(isShowWeekendDefault),
      _useState10 = _slicedToArray(_useState9, 2),
      isShowWeekend = _useState10[0],
      setIsShowWeekend = _useState10[1];

  var _useLocaleReceiver = useLocaleReceiver("calendar"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var weekLabelList = t(local.week).split(",");
  var colHeaderList = useMemo(function () {
    if (mode === "year") return [];
    var weekTextArr = Array.isArray(week) && week.length >= 7 ? week : _toConsumableArray(weekLabelList);
    var list = [];

    for (var i = firstDayOfWeek; i <= 7; i++) {
      if (!isShowWeekend && i > 5) {
        break;
      }

      list.push({
        day: i,
        text: weekTextArr[i - 1]
      });
    }

    if (firstDayOfWeek > 1) {
      for (var _i = 1; _i < firstDayOfWeek; _i++) {
        if (!isShowWeekend && _i > 5) {
          break;
        }

        list.push({
          day: _i,
          text: weekTextArr[_i - 1]
        });
      }
    }

    return list;
  }, [mode, firstDayOfWeek, isShowWeekend, week, weekLabelList]);
  var rangeFromTo = useMemo(function () {
    if (!range || range.length < 2) {
      return null;
    }

    var _range = _slicedToArray(range, 2),
        v1 = _range[0],
        v2 = _range[1];

    if (dayjs(v1).isBefore(dayjs(v2))) {
      return {
        from: v1,
        to: v2
      };
    }

    return {
      from: v2,
      to: v1
    };
  }, [range]);
  var controllerOptions = useMemo(function () {
    var dayJsFilterDate = dayjs("".concat(year, "-").concat(month));
    var re = {
      filterDate: dayJsFilterDate.toDate(),
      formattedFilterDate: dayJsFilterDate.format(format),
      mode: mode,
      isShowWeekend: isShowWeekend
    };
    return re;
  }, [isShowWeekend, mode, year, month, format]);

  var _useMemo = useMemo(function () {
    var isRangeValid = rangeFromTo && rangeFromTo.from && rangeFromTo.to;

    var checkMonthSelectorDisabled = function checkMonthSelectorDisabled(yearIn, monthIn) {
      if (isRangeValid) {
        var beginYear = dayjs(rangeFromTo.from).year();
        var endYear = dayjs(rangeFromTo.to).year();

        if (yearIn === beginYear) {
          var beginMon = parseInt(dayjs(rangeFromTo.from).format("M"), 10);
          return monthIn < beginMon;
        }

        if (yearIn === endYear) {
          var endMon = parseInt(dayjs(rangeFromTo.to).format("M"), 10);
          return monthIn > endMon;
        }
      }

      return false;
    };

    var yearList = [];
    var monthList2 = [];
    var yearBegin = isRangeValid ? dayjs(rangeFromTo.from).year() : Math.max(minYear, year - 10);
    var yearEnd = isRangeValid ? dayjs(rangeFromTo.to).year() : Math.max(minYear, year + 10);

    for (var i = yearBegin; i <= yearEnd; i++) {
      yearList.push({
        value: i,
        disabled: checkMonthSelectorDisabled(i, month)
      });
    }

    for (var _i2 = 1; _i2 <= 12; _i2++) {
      monthList2.push({
        value: _i2,
        disabled: checkMonthSelectorDisabled(year, _i2)
      });
    }

    return [yearList, monthList2];
  }, [rangeFromTo, year, month]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      yearSelectList = _useMemo2[0],
      monthSelectList = _useMemo2[1];

  var dateList = useMemo(function () {
    return createDateList(year, month, firstDayOfWeek, value, format);
  }, [year, month, firstDayOfWeek, format, value]);
  var monthList = useMemo(function () {
    return createMonthList(year, value, format);
  }, [year, value, format]);
  var createCalendarCell = useCallback(function (cellData) {
    return _objectSpread(_objectSpread({}, cellData), controllerOptions);
  }, [controllerOptions]);
  var toCurrent = useCallback(function () {
    var valueIn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var now = dayjs(valueIn).isValid() ? dayjs(valueIn) : dayjs(dayjs().format("YYYY-MM-DD"));
    setValue(now);
    setYear(now.year());
    setMonth(parseInt(now.format("M"), 10));
  }, []);
  React.useImperativeHandle(ref, function () {
    return {
      toCurrent: toCurrent
    };
  }, [toCurrent]);

  var handleMonthChange = function handleMonthChange(newMonth) {
    setMonth(newMonth);
    onMonthChange({
      month: String(newMonth),
      year: String(year)
    });
  };

  var execCellEvent = useCallback(function (event, calendarCell, handleFunc) {
    if (handleFunc && typeof handleFunc === "function") {
      handleFunc({
        cell: createCalendarCell(calendarCell),
        e: event
      });
    }
  }, [createCalendarCell]);

  var clickCell = function clickCell(event, calendarCell) {
    setValue(dayjs(calendarCell.formattedDate));
    execCellEvent(event, calendarCell, onCellClick);
  };

  var doubleClickCell = function doubleClickCell(event, calendarCell) {
    execCellEvent(event, calendarCell, onCellDoubleClick);
  };

  var rightClickCell = function rightClickCell(event, calendarCell) {
    if (preventCellContextmenu) event.preventDefault();
    execCellEvent(event, calendarCell, onCellRightClick);
  };

  useEffect(function () {
    toCurrent(valueFromProps);
  }, [valueFromProps, toCurrent]);
  useEffect(function () {
    if (monthProps) {
      setMonth(Number(monthProps));
    }
  }, [monthProps]);
  useEffect(function () {
    if (yearProps) {
      setYear(Number(yearProps));
    }
  }, [yearProps]);
  useEffect(function () {
    setMode(modeFromProps);
  }, [modeFromProps]);
  useEffect(function () {
    setIsShowWeekend(isShowWeekendDefault);
  }, [isShowWeekendDefault]);
  useIsomorphicLayoutEffect(function () {
    onControllerChange(controllerOptions);
  }, [controllerOptions, onControllerChange]);
  var prefixCls = usePrefixClass();
  var currentDate = dayjs().format("YYYY-MM-DD");
  var currentMonth = dayjs().format("YYYY-MM");
  return /* @__PURE__ */React.createElement("div", {
    className: prefixCls(blockName, [blockName, "", theme]).concat(" ", className),
    style: style
  }, visible && /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control"])
  }, /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "title"])
  }, function () {
    if (head && typeof head === "function") return head(controllerOptions);
    if (head && typeof head !== "function") return head;
  }()), /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section"])
  }, /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section-cell"])
  }, visibleForYear && /* @__PURE__ */React.createElement(Select, _objectSpread({
    autoWidth: true,
    size: controlSectionSize,
    value: year,
    disabled: disabled,
    options: yearSelectList.map(function (item) {
      return {
        label: t(local.yearSelection, {
          year: item.value
        }),
        value: item.value,
        disabled: item.disabled
      };
    }),
    onChange: function onChange(selectYear) {
      return setYear(selectYear);
    }
  }, selectPropsForYear))), /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section-cell"])
  }, visibleForMonth && mode === "month" && /* @__PURE__ */React.createElement(Select, _objectSpread({
    autoWidth: true,
    size: controlSectionSize,
    value: month,
    options: monthSelectList.map(function (item) {
      return {
        label: t(local.monthSelection, {
          month: item.value
        }),
        value: item.value,
        disabled: item.disabled
      };
    }),
    disabled: disabled,
    onChange: handleMonthChange
  }, selectPropsForMonth)))), /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section"]),
    style: {
      height: "auto"
    }
  }, visibleForMode && /* @__PURE__ */React.createElement(Radio.Group, _objectSpread({
    variant: "default-filled",
    size: controlSectionSize,
    value: mode,
    disabled: disabled,
    onChange: function onChange(value2) {
      return setMode(value2);
    }
  }, radioGroupPropsForMode), /* @__PURE__ */React.createElement(Radio.Button, {
    value: "month"
  }, t(local.monthRadio)), /* @__PURE__ */React.createElement(Radio.Button, {
    value: "year"
  }, t(local.yearRadio)))), mode === "month" && theme === "full" && visibleForWeekendToggle && /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section"])
  }, /* @__PURE__ */React.createElement(CheckTag, _objectSpread({
    className: "t-calendar__control-tag",
    checked: !isShowWeekend,
    disabled: disabled,
    size: controlSectionSize,
    onClick: function onClick() {
      setIsShowWeekend(!isShowWeekend);
    }
  }, isShowWeekend ? hideWeekendButtonProps : showWeekendButtonProps), "".concat(isShowWeekend ? t(local.hideWeekend) : t(local.showWeekend)))), theme === "full" && visibleForCurrent && /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section"])
  }, /* @__PURE__ */React.createElement(Button, _objectSpread({
    size: controlSectionSize,
    disabled: disabled,
    onClick: function onClick() {
      toCurrent();
    }
  }, mode === "year" ? currentMonthButtonProps : currentDayButtonProps), mode === "year" ? t(local.thisMonth) : t(local.today)))), /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "panel"], [blockName, "panel--".concat(mode)])
  }, /* @__PURE__ */React.createElement("table", {
    className: prefixCls([blockName, "table"])
  }, colHeaderList.length > 0 && /* @__PURE__ */React.createElement("thead", {
    className: prefixCls([blockName, "table-head"])
  }, /* @__PURE__ */React.createElement("tr", {
    className: prefixCls([blockName, "table-head-row"])
  }, colHeaderList.map(function (item) {
    return /* @__PURE__ */React.createElement("th", {
      key: item.day,
      className: prefixCls([blockName, "table-head-cell"])
    }, week && typeof week === "function" ? week({
      day: item.day
    }) : item.text);
  }))), mode === "month" && /* @__PURE__ */React.createElement("tbody", {
    className: prefixCls([blockName, "table-body"])
  }, dateList.map(function (dateRow, dateRowIndex) {
    return /* @__PURE__ */React.createElement("tr", {
      key: String(dateRowIndex),
      className: prefixCls([blockName, "table-body-row"])
    }, dateRow.map(function (dateCell, dateCellIndex) {
      if (!isShowWeekend && [6, 7].indexOf(dateCell.day) >= 0) return null;
      var isNow = dateCell.formattedDate === currentDate;
      return /* @__PURE__ */React.createElement(CalendarCellComp, {
        key: dateCellIndex,
        mode: mode,
        theme: theme,
        cell: cell,
        cellData: dateCell,
        cellAppend: cellAppend,
        fillWithZero: fillWithZero,
        isCurrent: dateCell.isCurrent,
        isNow: isNow,
        isDisabled: dateCell.belongTo !== 0,
        createCalendarCell: createCalendarCell,
        onCellClick: function onCellClick(event) {
          return clickCell(event, dateCell);
        },
        onCellDoubleClick: function onCellDoubleClick(event) {
          return doubleClickCell(event, dateCell);
        },
        onCellRightClick: function onCellRightClick(event) {
          return rightClickCell(event, dateCell);
        }
      });
    }));
  })), mode === "year" && /* @__PURE__ */React.createElement("tbody", {
    className: prefixCls([blockName, "table-body"])
  }, monthList.map(function (monthRow, monthRowIndex) {
    return /* @__PURE__ */React.createElement("tr", {
      key: String(monthRowIndex),
      className: prefixCls([blockName, "table-body-row"])
    }, monthRow.map(function (monthCell, monthCellIndex) {
      var isNow = monthCell.formattedDate.startsWith(currentMonth);
      return /* @__PURE__ */React.createElement(CalendarCellComp, {
        key: monthCellIndex,
        mode: mode,
        theme: theme,
        cell: cell,
        cellData: monthCell,
        cellAppend: cellAppend,
        fillWithZero: fillWithZero,
        isCurrent: monthCell.isCurrent,
        isNow: isNow,
        createCalendarCell: createCalendarCell,
        onCellClick: function onCellClick(event) {
          return clickCell(event, monthCell);
        },
        onCellDoubleClick: function onCellDoubleClick(event) {
          return doubleClickCell(event, monthCell);
        },
        onCellRightClick: function onCellRightClick(event) {
          return rightClickCell(event, monthCell);
        }
      });
    }));
  })))));
});
Calendar.displayName = "Calendar";
Calendar.defaultProps = calendarDefaultProps;

export { Calendar as default };
//# sourceMappingURL=Calendar.js.map
