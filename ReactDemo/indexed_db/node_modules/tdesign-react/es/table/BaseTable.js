/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import React, { forwardRef, useRef, useState, useMemo, useEffect, useImperativeHandle } from 'react';
import { p as pick_1 } from '../_chunks/dep-c776db26.js';
import classNames from 'classnames';
import TBody, { extendTableProps } from './TBody.js';
import { Affix } from '../affix/index.js';
import { ROW_LISTENERS } from './TR.js';
import THead from './THead.js';
import TFoot from './TFoot.js';
import useTableHeader from './hooks/useTableHeader.js';
import useColumnResize from './hooks/useColumnResize.js';
import useFixed from './hooks/useFixed.js';
import useAffix from './hooks/useAffix.js';
import usePagination from './hooks/usePagination.js';
import { Loading } from '../loading/index.js';
import useStyle, { formatCSSUnit } from './hooks/useStyle.js';
import useClassName from './hooks/useClassName.js';
import { getAffixProps } from './utils.js';
import '../_common/js/log/index.js';
import log from '../_common/js/log/log.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-93a10d8c.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-199b1581.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-e237f0f2.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-e430e2ee.js';
import '../_chunks/dep-e54bb0dc.js';
import '../_chunks/dep-b2626e28.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-c8bfa11e.js';
import '../_chunks/dep-afbd242f.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-3576b6cd.js';
import '../_chunks/dep-aadcae4d.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-fc5ba3d5.js';
import '../_chunks/dep-f54ff1e5.js';
import '../_chunks/dep-e1d4dd61.js';
import '../_chunks/dep-236ef238.js';
import '../_chunks/dep-ddb0f1c1.js';
import '../locale/LocalReceiver.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import './hooks/useRowspanAndColspan.js';
import '../affix/Affix.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3c98169f.js';
import '../_util/easing.js';
import '../hooks/useConfig.js';
import '../affix/defaultProps.js';
import '../affix/style/css.js';
import '../affix/type.js';
import './Ellipsis.js';
import '../tooltip/index.js';
import '../tooltip/Tooltip.js';
import '../_chunks/dep-8368bb87.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../_util/useAnimation.js';
import '../common/Portal.js';
import 'react-dom';
import '../popup/hooks/useTrigger.js';
import 'react-is';
import '../popup/utils/ref.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-236b0359.js';
import '../_chunks/dep-6d5c0a90.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/style/css.js';
import '../popup/type.js';
import '../tooltip/defaultProps.js';
import '../tooltip/style/css.js';
import '../tooltip/type.js';
import '../hooks/useDebounce.js';
import 'lodash';
import '../_util/usePersistFn.js';
import './hooks/useLazyLoad.js';
import '../_common/js/utils/observe.js';
import './hooks/useMultiHeader.js';
import '../_chunks/dep-a5f8b6ec.js';
import '../_common/js/table/set-column-width-by-drag.js';
import '../_common/js/table/utils.js';
import '../_common/js/table/recalculate-column-width.js';
import '../_common/js/utils/helper.js';
import '../_chunks/dep-59b9253f.js';
import '../_chunks/dep-d1b4ab24.js';
import '../_common/js/utils/getScrollbarWidth.js';
import '../pagination/index.js';
import '../pagination/Pagination.js';
import '../_chunks/dep-27f96743.js';
import '../_chunks/dep-1a36642a.js';
import '../_chunks/dep-614f9a08.js';
import '../select/index.js';
import '../select/base/Select.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../select/util/helper.js';
import '../select/base/OptionGroup.js';
import '../select/defaultProps.js';
import '../select/base/Option.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../common/FakeArrow.js';
import '../select-input/index.js';
import '../select-input/SelectInput.js';
import '../select-input/useSingle.js';
import '../input/index.js';
import '../input/Input.js';
import 'tdesign-icons-react';
import '../hooks/useGlobalIcon.js';
import '../input/InputGroup.js';
import '../input/defaultProps.js';
import '../input/style/css.js';
import '../input/type.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../_util/useDragSorter.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/useTagList.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/defaultProps.js';
import '../tag/style/css.js';
import '../tag/type.js';
import '../tag-input/useHover.js';
import '../tag-input/defaultProps.js';
import '../tag-input/style/css.js';
import '../tag-input/type.js';
import '../select-input/useOverlayInnerStyle.js';
import '../select-input/defaultProps.js';
import '../select-input/style/css.js';
import '../select-input/type.js';
import '../loading/Loading.js';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../loading/style/css.js';
import '../loading/type.js';
import '../select/base/PopupContent.js';
import '../select/style/css.js';
import '../select/type.js';
import '../input-number/index.js';
import '../input-number/InputNumber.js';
import '../button/index.js';
import '../button/Button.js';
import '../button/defaultProps.js';
import '../button/style/css.js';
import '../button/type.js';
import '../input-number/useInputNumber.js';
import '../_util/useCommonClassName.js';
import '../_common/js/input-number/number.js';
import '../_common/js/input-number/large-number.js';
import '../input-number/defaultProps.js';
import '../input-number/style/css.js';
import '../input-number/type.js';
import '../input-adornment/index.js';
import '../input-adornment/InputAdornment.js';
import '../input-adornment/style/css.js';
import '../input-adornment/type.js';
import '../pagination/hooks/useBoundaryJumper.js';
import '../pagination/hooks/usePrevNextJumper.js';
import '../pagination/hooks/usePageNumber.js';
import '../pagination/hooks/useTotal.js';
import '../pagination/validators.js';
import '../pagination/defaultProps.js';
import '../pagination/style/css.js';
import '../pagination/type.js';
import '../hooks/useCommonClassName.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var BASE_TABLE_EVENTS = ["page-change", "cell-click", "scroll", "scrollX", "scrollY"];
var BASE_TABLE_ALL_EVENTS = ROW_LISTENERS.map(function (t) {
  return "row-".concat(t);
}).concat(BASE_TABLE_EVENTS);
var BaseTable = /*#__PURE__*/forwardRef(function (props, ref) {
  var _tableClasses$concat, _props$data2, _props$scroll3, _props$scroll4, _navigator, _affixHeaderRef$curre, _props$footData, _tableContentRef$curr;

  var tableLayout = props.tableLayout,
      height = props.height,
      data = props.data,
      columns = props.columns,
      style = props.style,
      headerAffixedTop = props.headerAffixedTop,
      bordered = props.bordered,
      resizable = props.resizable;
  var tableRef = useRef();
  var tableElmRef = useRef();

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      tableFootHeight = _useState2[0],
      setTableFootHeight = _useState2[1];

  var _useClassName = useClassName(),
      virtualScrollClasses = _useClassName.virtualScrollClasses,
      tableLayoutClasses = _useClassName.tableLayoutClasses,
      tableBaseClass = _useClassName.tableBaseClass,
      tableColFixedClasses = _useClassName.tableColFixedClasses;

  var _useStyle = useStyle(props),
      tableClasses = _useStyle.tableClasses,
      tableContentStyles = _useStyle.tableContentStyles,
      tableElementStyles = _useStyle.tableElementStyles;

  var _useTableHeader = useTableHeader({
    columns: props.columns
  }),
      isMultipleHeader = _useTableHeader.isMultipleHeader,
      spansAndLeafNodes = _useTableHeader.spansAndLeafNodes,
      thList = _useTableHeader.thList;

  var finalColumns = useMemo(function () {
    return (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns;
  }, [spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns, columns]);

  var _useFixed = useFixed(props, finalColumns),
      scrollbarWidth = _useFixed.scrollbarWidth,
      tableWidth = _useFixed.tableWidth,
      tableElmWidth = _useFixed.tableElmWidth,
      tableContentRef = _useFixed.tableContentRef,
      isFixedHeader = _useFixed.isFixedHeader,
      isWidthOverflow = _useFixed.isWidthOverflow,
      isFixedColumn = _useFixed.isFixedColumn,
      thWidthList = _useFixed.thWidthList,
      showColumnShadow = _useFixed.showColumnShadow,
      rowAndColFixedPosition = _useFixed.rowAndColFixedPosition,
      setData = _useFixed.setData,
      refreshTable = _useFixed.refreshTable,
      emitScrollEvent = _useFixed.emitScrollEvent,
      setUseFixedTableElmRef = _useFixed.setUseFixedTableElmRef,
      updateColumnFixedShadow = _useFixed.updateColumnFixedShadow,
      getThWidthList = _useFixed.getThWidthList,
      updateThWidthList = _useFixed.updateThWidthList,
      setRecalculateColWidthFuncRef = _useFixed.setRecalculateColWidthFuncRef,
      addTableResizeObserver = _useFixed.addTableResizeObserver;

  var _useAffix = useAffix(props),
      affixHeaderRef = _useAffix.affixHeaderRef,
      affixFooterRef = _useAffix.affixFooterRef,
      horizontalScrollbarRef = _useAffix.horizontalScrollbarRef,
      paginationRef = _useAffix.paginationRef,
      showAffixHeader = _useAffix.showAffixHeader,
      showAffixFooter = _useAffix.showAffixFooter,
      showAffixPagination = _useAffix.showAffixPagination,
      onHorizontalScroll = _useAffix.onHorizontalScroll,
      setTableContentRef = _useAffix.setTableContentRef,
      updateAffixHeaderOrFooter = _useAffix.updateAffixHeaderOrFooter;

  var _usePagination = usePagination(props),
      dataSource = _usePagination.dataSource,
      isPaginateData = _usePagination.isPaginateData,
      renderPagination = _usePagination.renderPagination;

  var columnResizeParams = useColumnResize(tableContentRef, refreshTable, getThWidthList, updateThWidthList);
  var resizeLineRef = columnResizeParams.resizeLineRef,
      resizeLineStyle = columnResizeParams.resizeLineStyle,
      recalculateColWidth = columnResizeParams.recalculateColWidth,
      setEffectColMap = columnResizeParams.setEffectColMap;
  setRecalculateColWidthFuncRef(recalculateColWidth);
  var dynamicBaseTableClasses = classNames(tableClasses.concat((_tableClasses$concat = {}, _defineProperty(_tableClasses$concat, tableBaseClass.headerFixed, isFixedHeader), _defineProperty(_tableClasses$concat, tableBaseClass.columnFixed, isFixedColumn), _defineProperty(_tableClasses$concat, tableBaseClass.widthOverflow, isWidthOverflow), _defineProperty(_tableClasses$concat, tableBaseClass.multipleHeader, isMultipleHeader), _defineProperty(_tableClasses$concat, tableColFixedClasses.leftShadow, showColumnShadow.left), _defineProperty(_tableClasses$concat, tableColFixedClasses.rightShadow, showColumnShadow.right), _defineProperty(_tableClasses$concat, tableBaseClass.columnResizableTable, props.resizable), _tableClasses$concat)));
  var tableElmClasses = classNames([[tableLayoutClasses[tableLayout || "fixed"]], _defineProperty({}, tableBaseClass.fullHeight, height)]);
  var isVirtual = useMemo(function () {
    var _props$scroll, _props$data, _props$scroll2;

    return ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual" && ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length) > (((_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.threshold) || 100);
  }, [(_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.length, (_props$scroll3 = props.scroll) === null || _props$scroll3 === void 0 ? void 0 : _props$scroll3.threshold, (_props$scroll4 = props.scroll) === null || _props$scroll4 === void 0 ? void 0 : _props$scroll4.type]);
  var showRightDivider = useMemo(function () {
    return props.bordered && isFixedHeader && (isMultipleHeader && isWidthOverflow || !isMultipleHeader);
  }, [isFixedHeader, isMultipleHeader, isWidthOverflow, props.bordered]);
  useEffect(function () {
    setUseFixedTableElmRef(tableElmRef.current);
  }, [tableElmRef]);
  useEffect(function () {
    setData(isPaginateData ? dataSource : props.data);
  }, [props.data, dataSource, isPaginateData]);

  var _useState3 = useState(props.columns || []),
      _useState4 = _slicedToArray(_useState3, 2),
      lastLeafColumns = _useState4[0],
      setLastLeafColumns = _useState4[1];

  useEffect(function () {
    if (lastLeafColumns.map(function (t) {
      return t.colKey;
    }).join() !== spansAndLeafNodes.leafColumns.map(function (t) {
      return t.colKey;
    }).join()) {
      var _props$onLeafColumnsC;

      (_props$onLeafColumnsC = props.onLeafColumnsChange) === null || _props$onLeafColumnsC === void 0 ? void 0 : _props$onLeafColumnsC.call(props, spansAndLeafNodes.leafColumns);
      setLastLeafColumns(spansAndLeafNodes.leafColumns);
    }
  }, [spansAndLeafNodes.leafColumns]);
  useEffect(function () {
    setEffectColMap(thList[0], null);
  }, [thList]);
  useImperativeHandle(ref, function () {
    return {
      tableElement: tableRef.current,
      tableHtmlElement: tableElmRef.current,
      tableContentElement: tableContentRef.current,
      affixHeaderElement: affixHeaderRef.current,
      refreshTable: refreshTable
    };
  });

  var onFixedChange = function onFixedChange() {
    var timer = setTimeout(function () {
      onHorizontalScroll();
      updateAffixHeaderOrFooter();
      clearTimeout(timer);
    }, 0);
  };

  var lastScrollY = 0;

  var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
    var target = e.target;
    var top = target.scrollTop;

    if (lastScrollY !== top) {} else {
      lastScrollY = 0;
      updateColumnFixedShadow(target);
    }

    lastScrollY = top;
    emitScrollEvent(e);
  };

  var getTFootHeight = function getTFootHeight() {
    if (!tableElmRef.current) return;
    var timer = setTimeout(function () {
      var _tableElmRef$current, _tableElmRef$current$;

      var height2 = (_tableElmRef$current = tableElmRef.current) === null || _tableElmRef$current === void 0 ? void 0 : (_tableElmRef$current$ = _tableElmRef$current.querySelector("tfoot")) === null || _tableElmRef$current$ === void 0 ? void 0 : _tableElmRef$current$.getBoundingClientRect().height;
      setTableFootHeight(height2);
      clearTimeout(timer);
    });
  };

  useEffect(function () {
    setTableContentRef(tableContentRef.current);
  }, [tableContentRef]);
  useEffect(function () {
    return addTableResizeObserver(tableRef.current);
  }, [tableRef]);
  useEffect(getTFootHeight, [tableElmRef]);
  var newData = isPaginateData ? dataSource : data;

  if (resizable && tableLayout === "auto") {
    log.warn("Table", "table-layout can not be `auto` for resizable column table, set `table-layout: fixed` please.");
  }

  var defaultColWidth = props.tableLayout === "fixed" && isWidthOverflow ? "100px" : void 0;
  var colgroup = /* @__PURE__ */React.createElement("colgroup", null, finalColumns.map(function (col) {
    var style2 = {
      width: formatCSSUnit(thWidthList.current[col.colKey] || col.width) || defaultColWidth
    };

    if (col.minWidth) {
      style2.minWidth = formatCSSUnit(col.minWidth);
    }

    return /* @__PURE__ */React.createElement("col", {
      key: col.colKey,
      style: style2
    });
  }));
  var onlyVirtualScrollBordered = !!(isVirtual && !headerAffixedTop && bordered) && /Chrome/.test((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.userAgent);
  var borderWidth = bordered && onlyVirtualScrollBordered ? 1 : 0;
  var affixHeaderWrapHeight = (((_affixHeaderRef$curre = affixHeaderRef.current) === null || _affixHeaderRef$curre === void 0 ? void 0 : _affixHeaderRef$curre.getBoundingClientRect().height) || 0) - scrollbarWidth - borderWidth;
  var headerOpacity = headerAffixedTop ? Number(showAffixHeader) : 1;
  var affixHeaderWrapHeightStyle = {
    width: "".concat(tableWidth.current, "px"),
    height: "".concat(affixHeaderWrapHeight, "px"),
    opacity: headerOpacity,
    marginTop: onlyVirtualScrollBordered ? "".concat(borderWidth, "px") : 0
  };
  var affixedLeftBorder = props.bordered ? 1 : 0;
  var affixedHeader = Boolean(props.headerAffixedTop && tableWidth.current) && /* @__PURE__ */React.createElement("div", {
    ref: affixHeaderRef,
    style: {
      width: "".concat(tableWidth.current - affixedLeftBorder, "px"),
      opacity: headerOpacity
    },
    className: classNames(["scrollbar", _defineProperty({}, tableBaseClass.affixedHeaderElm, props.headerAffixedTop || isVirtual)])
  }, /* @__PURE__ */React.createElement("table", {
    className: classNames(tableElmClasses),
    style: _objectSpread(_objectSpread({}, tableElementStyles), {}, {
      width: "".concat(tableElmWidth.current, "px")
    })
  }, colgroup, /* @__PURE__ */React.createElement(THead, {
    isFixedHeader: isFixedHeader,
    rowAndColFixedPosition: rowAndColFixedPosition,
    isMultipleHeader: isMultipleHeader,
    bordered: props.bordered,
    spansAndLeafNodes: spansAndLeafNodes,
    thList: thList,
    thWidthList: thWidthList.current,
    resizable: props.resizable,
    columnResizeParams: columnResizeParams
  })));
  var affixHeaderWithWrap = /* @__PURE__ */React.createElement("div", {
    className: tableBaseClass.affixedHeaderWrap,
    style: affixHeaderWrapHeightStyle
  }, affixedHeader);
  var marginScrollbarWidth = isWidthOverflow ? scrollbarWidth : 0;

  if (bordered) {
    marginScrollbarWidth += 1;
  }

  var affixedFooter = Boolean(props.footerAffixedBottom && ((_props$footData = props.footData) === null || _props$footData === void 0 ? void 0 : _props$footData.length) && tableWidth.current) && /* @__PURE__ */React.createElement(Affix, _objectSpread(_objectSpread({
    className: tableBaseClass.affixedFooterWrap,
    onFixedChange: onFixedChange,
    offsetBottom: marginScrollbarWidth || 0
  }, getAffixProps(props.footerAffixedBottom)), {}, {
    style: {
      marginTop: "".concat(-1 * (tableFootHeight + marginScrollbarWidth), "px")
    }
  }), /* @__PURE__ */React.createElement("div", {
    ref: affixFooterRef,
    style: {
      width: "".concat(tableWidth.current - affixedLeftBorder, "px"),
      opacity: Number(showAffixFooter)
    },
    className: classNames(["scrollbar", _defineProperty({}, tableBaseClass.affixedFooterElm, props.footerAffixedBottom || isVirtual)])
  }, /* @__PURE__ */React.createElement("table", {
    className: tableElmClasses,
    style: _objectSpread(_objectSpread({}, tableElementStyles), {}, {
      width: "".concat(tableElmWidth.current, "px")
    })
  }, colgroup, /* @__PURE__ */React.createElement(TFoot, {
    rowKey: props.rowKey,
    isFixedHeader: isFixedHeader,
    rowAndColFixedPosition: rowAndColFixedPosition,
    footData: props.footData,
    columns: (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns,
    rowAttributes: props.rowAttributes,
    rowClassName: props.rowClassName,
    thWidthList: thWidthList.current,
    footerSummary: props.footerSummary,
    rowspanAndColspanInFooter: props.rowspanAndColspanInFooter
  }))));
  var translate = "translate(0, ".concat(0, "px)");
  var virtualStyle = {
    transform: translate,
    "-ms-transform": translate,
    "-moz-transform": translate,
    "-webkit-transform": translate
  };

  var tableBodyProps = _objectSpread({
    rowAndColFixedPosition: rowAndColFixedPosition,
    showColumnShadow: showColumnShadow,
    data: newData,
    columns: (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns,
    tableElm: tableRef.current,
    tableContentElm: tableContentRef.current,
    tableWidth: tableWidth.current,
    isWidthOverflow: isWidthOverflow,
    rowKey: props.rowKey || "id",
    scroll: props.scroll,
    cellEmptyContent: props.cellEmptyContent,
    renderExpandedRow: props.renderExpandedRow
  }, pick_1(props, extendTableProps));

  var tableContent = /* @__PURE__ */React.createElement("div", {
    ref: tableContentRef,
    className: tableBaseClass.content,
    style: tableContentStyles,
    onScroll: onInnerVirtualScroll
  }, isVirtual && /* @__PURE__ */React.createElement("div", {
    className: virtualScrollClasses.cursor,
    style: virtualStyle
  }), /* @__PURE__ */React.createElement("table", {
    ref: tableElmRef,
    className: classNames(tableElmClasses),
    style: tableElementStyles
  }, colgroup, /* @__PURE__ */React.createElement(THead, {
    isFixedHeader: isFixedHeader,
    rowAndColFixedPosition: rowAndColFixedPosition,
    isMultipleHeader: isMultipleHeader,
    bordered: props.bordered,
    spansAndLeafNodes: spansAndLeafNodes,
    thList: thList,
    thWidthList: thWidthList.current,
    resizable: props.resizable,
    columnResizeParams: columnResizeParams
  }), /* @__PURE__ */React.createElement(TBody, _objectSpread({}, tableBodyProps)), /* @__PURE__ */React.createElement(TFoot, {
    rowKey: props.rowKey,
    isFixedHeader: isFixedHeader,
    rowAndColFixedPosition: rowAndColFixedPosition,
    footData: props.footData,
    columns: (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns,
    rowAttributes: props.rowAttributes,
    rowClassName: props.rowClassName,
    thWidthList: thWidthList.current,
    footerSummary: props.footerSummary,
    rowspanAndColspanInFooter: props.rowspanAndColspanInFooter
  })));
  var loading = props.loading,
      loadingProps = props.loadingProps;
  var customLoadingText = loading;
  var loadingContent = loading !== void 0 && /* @__PURE__ */React.createElement(Loading, _objectSpread({
    loading: !!loading,
    text: customLoadingText,
    attach: function attach() {
      return tableRef.current;
    },
    showOverlay: true,
    size: "small"
  }, loadingProps));
  var topContent = props.topContent,
      bottomContent = props.bottomContent;
  var pagination = /* @__PURE__ */React.createElement("div", {
    ref: paginationRef,
    className: tableBaseClass.paginationWrap,
    style: {
      opacity: Number(showAffixPagination)
    }
  }, renderPagination());
  var bottom = !!bottomContent && /* @__PURE__ */React.createElement("div", {
    className: tableBaseClass.bottomContent
  }, bottomContent);
  return /* @__PURE__ */React.createElement("div", {
    ref: tableRef,
    className: classNames(dynamicBaseTableClasses),
    style: _objectSpread({
      position: "relative"
    }, style)
  }, !!topContent && /* @__PURE__ */React.createElement("div", {
    className: tableBaseClass.topContent
  }, topContent), !!(isVirtual || props.headerAffixedTop) && (props.headerAffixedTop ? /* @__PURE__ */React.createElement(Affix, _objectSpread(_objectSpread({
    offsetTop: 0
  }, getAffixProps(props.headerAffixedTop, props.headerAffixProps)), {}, {
    onFixedChange: onFixedChange
  }), affixHeaderWithWrap) : isFixedHeader && affixHeaderWithWrap), tableContent, affixedFooter, loadingContent, showRightDivider && /* @__PURE__ */React.createElement("div", {
    className: tableBaseClass.scrollbarDivider,
    style: {
      right: "".concat(scrollbarWidth, "px"),
      height: "".concat((_tableContentRef$curr = tableContentRef.current) === null || _tableContentRef$curr === void 0 ? void 0 : _tableContentRef$curr.getBoundingClientRect().height, "px")
    }
  }), bottom, props.horizontalScrollAffixedBottom && /* @__PURE__ */React.createElement(Affix, _objectSpread(_objectSpread({
    offsetBottom: 0
  }, getAffixProps(props.horizontalScrollAffixedBottom)), {}, {
    style: {
      marginTop: "-".concat(scrollbarWidth * 2, "px")
    }
  }), /* @__PURE__ */React.createElement("div", {
    ref: horizontalScrollbarRef,
    className: classNames(["scrollbar", tableBaseClass.obviousScrollbar]),
    style: {
      width: "".concat(tableWidth.current, "px"),
      overflow: "auto",
      opacity: Number(showAffixFooter)
    }
  }, /* @__PURE__ */React.createElement("div", {
    style: {
      width: "".concat(tableElmWidth.current, "px"),
      height: "5px"
    }
  }))), props.paginationAffixedBottom ? /* @__PURE__ */React.createElement(Affix, _objectSpread({
    offsetBottom: 0
  }, getAffixProps(props.paginationAffixedBottom)), pagination) : pagination, /* @__PURE__ */React.createElement("div", {
    ref: resizeLineRef,
    className: tableBaseClass.resizeLine,
    style: resizeLineStyle
  }));
});
BaseTable.displayName = "BaseTable";

export { BASE_TABLE_ALL_EVENTS, BASE_TABLE_EVENTS, BaseTable as default };
//# sourceMappingURL=BaseTable.js.map
