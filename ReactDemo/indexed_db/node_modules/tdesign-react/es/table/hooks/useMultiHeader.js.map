{"version":3,"file":"useMultiHeader.js","sources":["../../../src/table/hooks/useMultiHeader.ts"],"sourcesContent":["/**\n * 多级表头相关逻辑\n ** */\n\nimport { TdBaseTableProps, RowspanColspan } from '../type';\n\nexport type ThRowspanAndColspan = Map<any, RowspanColspan>;\n\nexport type TableColumns = TdBaseTableProps['columns'];\n\n// 获取节点深度，即表头总层级\nexport function getNodeDepth(columns: TableColumns, depthMap: Map<any, number>, depth = 1): number {\n  let maxDepth = depth;\n  // 树形结构递归已有较多函数上下文，此处不使用 forEach 迭代\n  for (let i = 0, len = columns.length; i < len; i++) {\n    const col = columns[i];\n    depthMap.set(col, depth);\n    if (col?.children?.length) {\n      const deep = getNodeDepth(col.children, depthMap, depth + 1);\n      if (deep > maxDepth) {\n        maxDepth = deep;\n      }\n    }\n  }\n  return maxDepth;\n}\n\n// 或当前节点的叶子结点宽度\nexport function getChildrenNodeWidth(node: TableColumns[0], count = 0) {\n  let countNew = count;\n  const childrenList = node?.children || [];\n  for (let i = 0, len = childrenList.length; i < len; i++) {\n    const item = childrenList[i];\n    if (item.children) {\n      countNew = getChildrenNodeWidth(item, countNew);\n    } else {\n      countNew += 1;\n    }\n  }\n  return countNew;\n}\n\n// 获取多级表头对应的 colspan 和 rowspan，以及叶子节点\nexport function getThRowspanAndColspan(columns: TableColumns) {\n  const depthMap = new Map<any, number>();\n  const columnsDepth = getNodeDepth(columns, depthMap);\n  const rowspanAndColspanMap: ThRowspanAndColspan = new Map();\n  const loop = (nodes: TableColumns, leafColumns: TableColumns) => {\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      const col = nodes[i];\n      const rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;\n      const colspan = col.children ? getChildrenNodeWidth(col) : 1;\n      // 避免存在 rowspan 或者 colspan 空属性\n      const span: RowspanColspan = {};\n      rowspan > 1 && (span.rowspan = rowspan);\n      colspan > 1 && (span.colspan = colspan);\n      rowspanAndColspanMap.set(col, span);\n      if (col?.children?.length) {\n        loop(col.children, leafColumns);\n      } else {\n        leafColumns.push(col);\n      }\n    }\n  };\n  const leafColumns: TableColumns = [];\n  loop(columns, leafColumns);\n  return { rowspanAndColspanMap, leafColumns };\n}\n\n// 表头渲染所需的二维数据\nexport function getThList(columns: TableColumns): Array<TableColumns> {\n  const loop = (nodes: TableColumns, thRows: Array<TableColumns>) => {\n    let thRowData: TableColumns = [];\n    let children: TableColumns = [];\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      const node = nodes[i];\n      const thList = [node];\n      thRowData = thRowData.concat(thList);\n      if (node?.children?.length) {\n        children = children.concat(node.children);\n      }\n    }\n    if (children?.length) {\n      loop(children, thRows);\n    }\n    thRows.push(thRowData);\n    return thRowData;\n  };\n  let list: Array<TableColumns> = [];\n  loop(columns, list);\n  list = list.reverse();\n  return list;\n}\n"],"names":["getNodeDepth","columns","depthMap","depth","maxDepth","i","len","length","col","set","children","deep","getChildrenNodeWidth","node","count","countNew","childrenList","item","getThRowspanAndColspan","Map","columnsDepth","rowspanAndColspanMap","loop","nodes","leafColumns","rowspan","get","colspan","span","push","getThList","thRows","thRowData","thList","concat","list","reverse"],"mappings":"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"}