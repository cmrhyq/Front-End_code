{"version":3,"file":"useDragSort.js","sources":["../../../src/table/hooks/useDragSort.ts"],"sourcesContent":["// 表格 行拖拽 + 列拖拽功能\nimport { MutableRefObject, useEffect, useMemo, useRef, useState } from 'react';\nimport Sortable, { SortableEvent, SortableOptions, MoveEvent } from 'sortablejs';\nimport get from 'lodash/get';\nimport { TableRowData, TdPrimaryTableProps, DragSortContext, PrimaryTableCol } from '../type';\nimport useClassName from './useClassName';\nimport { hasClass } from '../../_util/dom';\nimport log from '../../_common/js/log';\nimport swapDragArrayElement from '../../_common/js/utils/swapDragArrayElement';\nimport { BaseTableColumns } from '../interface';\n\nexport default function useDragSort(props: TdPrimaryTableProps, primaryTableRef: MutableRefObject<any>) {\n  const { sortOnRowDraggable, dragSort, data, onDragSort } = props;\n  const { tableDraggableClasses, tableBaseClass, tableFullRowClasses } = useClassName();\n  const [columns, setDragSortColumns] = useState<BaseTableColumns>(props.columns || []);\n  // 判断是否有拖拽列。此处重点测试树形结构的拖拽排序\n  const dragCol = useMemo(() => columns.find((item) => item.colKey === 'drag'), [columns]);\n  // 行拖拽判断条件\n  const isRowDraggable = useMemo(() => sortOnRowDraggable || dragSort === 'row', [dragSort, sortOnRowDraggable]);\n  // 行拖拽判断条件-手柄列\n  const isRowHandlerDraggable = useMemo(\n    () => ['row-handler', 'row-handler-col'].includes(dragSort) && !!dragCol,\n    [dragSort, dragCol],\n  );\n  // 列拖拽判断条件\n  const isColDraggable = useMemo(() => ['col', 'row-handler-col'].includes(dragSort), [dragSort]);\n  // 为实现受控，存储上一次的变化结果。React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const lastRowList = useRef([]);\n  // React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const tData = useRef<TableRowData[]>();\n  // 为实现受控，存储上一次的变化结果。React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const lastColList = useRef([]);\n  // 为实现受控，存储上一次的变化结果。React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const dragColumns = useRef([]);\n  // 为实现受控，存储上一次的变化结果。React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const originalColumns = useRef([]);\n\n  if (props.sortOnRowDraggable) {\n    log.warn('Table', \"`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.\");\n  }\n\n  useEffect(() => {\n    // 更新排列顺序\n    lastRowList.current = data.map((item) => String(get(item, props.rowKey)));\n    tData.current = data;\n  }, [data, props.rowKey]);\n\n  useEffect(() => {\n    lastColList.current = props.columns.map((t) => t.colKey);\n    dragColumns.current = props.columns;\n    originalColumns.current = props.columns;\n  }, [props.columns]);\n\n  const registerRowDragEvent = (element: HTMLElement) => {\n    if (!isRowHandlerDraggable && !isRowDraggable) return;\n    // 拖拽实例\n    let dragInstanceTmp: Sortable = null;\n    const dragContainer = element?.querySelector('tbody');\n    if (!dragContainer) {\n      log.error('Table', 'tbody does not exist.');\n      return null;\n    }\n    const baseOptions: SortableOptions = {\n      animation: 150,\n      ...props.dragSortOptions,\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      filter: `.${tableFullRowClasses.base}`, // 过滤首行尾行固定\n      onMove: (evt: MoveEvent) => !hasClass(evt.related, tableFullRowClasses.base),\n      onEnd: (evt: SortableEvent) => {\n        // 处理受控：拖拽列表恢复原始排序，等待外部数据 data 变化，更新最终顺序\n        let { oldIndex: currentIndex, newIndex: targetIndex } = evt;\n\n        dragInstanceTmp?.sort([...lastRowList.current]);\n        if (props.firstFullRow) {\n          currentIndex -= 1;\n          targetIndex -= 1;\n        }\n        const params: DragSortContext<TableRowData> = {\n          currentIndex,\n          current: tData.current[currentIndex],\n          targetIndex,\n          target: tData.current[targetIndex],\n          data: tData.current,\n          newData: swapDragArrayElement([...tData.current], currentIndex, targetIndex),\n          e: evt,\n          sort: 'row',\n        };\n        // currentData is going to be deprecated.\n        params.currentData = params.newData;\n\n        onDragSort?.(params);\n      },\n    };\n\n    if (isRowDraggable) {\n      dragInstanceTmp = new Sortable(dragContainer, { ...baseOptions });\n    } else if (isRowHandlerDraggable) {\n      dragInstanceTmp = new Sortable(dragContainer, {\n        ...baseOptions,\n        handle: `.${tableDraggableClasses.handle}`,\n      });\n    }\n    lastRowList.current = dragInstanceTmp?.toArray();\n  };\n\n  // TODO: 待和 Vue 保持相同逻辑\n  const registerColDragEvent = (tableElement: HTMLElement) => {\n    if (!isColDraggable || !tableElement) return;\n    // 拖拽实例\n    let dragInstanceTmp: Sortable = null;\n    const options: SortableOptions = {\n      animation: 150,\n      ...props.dragSortOptions,\n      dataIdAttr: 'data-colkey',\n      direction: 'vertical',\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      handle: `.${tableBaseClass.thCellInner}`,\n      onEnd: (evt: SortableEvent) => {\n        // 处理受控：拖拽列表恢复原始排序，等待外部数据 data 变化，更新最终顺序\n        dragInstanceTmp?.sort([...lastColList.current]);\n        let { oldIndex: currentIndex, newIndex: targetIndex } = evt;\n        const current = dragColumns.current[currentIndex];\n        const target = dragColumns.current[targetIndex];\n        if (!current || !current.colKey) {\n          log.error('Table', `colKey is missing in ${JSON.stringify(current)}`);\n        }\n        if (!target || !target.colKey) {\n          log.error('Table', `colKey is missing in ${JSON.stringify(target)}`);\n        }\n        // 寻找外部数据 props.columns 中的真正下标\n        currentIndex = originalColumns.current.findIndex((t) => t.colKey === current.colKey);\n        targetIndex = originalColumns.current.findIndex((t) => t.colKey === target.colKey);\n        const params: DragSortContext<PrimaryTableCol> = {\n          data: dragColumns.current,\n          currentIndex,\n          current,\n          targetIndex,\n          target,\n          newData: swapDragArrayElement([...originalColumns.current], currentIndex, targetIndex),\n          e: evt,\n          sort: 'col',\n        };\n        // currentData is going to be deprecated.\n        params.currentData = params.newData;\n        onDragSort?.(params);\n      },\n    };\n    const container = tableElement.querySelector('thead > tr') as HTMLDivElement;\n    dragInstanceTmp = new Sortable(container, options);\n    lastColList.current = dragInstanceTmp?.toArray();\n  };\n\n  // 注册拖拽事件\n  useEffect(() => {\n    if (!primaryTableRef || !primaryTableRef.current) return;\n    registerRowDragEvent(primaryTableRef.current?.tableElement);\n    registerColDragEvent(primaryTableRef.current?.tableHtmlElement);\n    /** 待表头节点准备完成后 */\n    const timer = setTimeout(() => {\n      if (primaryTableRef.current?.affixHeaderElement) {\n        registerColDragEvent(primaryTableRef.current.affixHeaderElement);\n      }\n      clearTimeout(timer);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [primaryTableRef, columns, dragSort]);\n\n  return {\n    isRowDraggable,\n    isRowHandlerDraggable,\n    isColDraggable,\n    setDragSortColumns,\n  };\n}\n"],"names":["useDragSort","props","primaryTableRef","sortOnRowDraggable","dragSort","data","onDragSort","useClassName","tableDraggableClasses","tableBaseClass","tableFullRowClasses","useState","columns","setDragSortColumns","dragCol","useMemo","find","item","colKey","isRowDraggable","isRowHandlerDraggable","includes","isColDraggable","lastRowList","useRef","tData","lastColList","dragColumns","originalColumns","log","warn","useEffect","current","map","String","get","rowKey","t","registerRowDragEvent","element","dragInstanceTmp","dragContainer","querySelector","error","baseOptions","animation","dragSortOptions","ghostClass","ghost","chosenClass","chosen","dragClass","dragging","filter","base","onMove","evt","hasClass","related","onEnd","currentIndex","oldIndex","targetIndex","newIndex","sort","firstFullRow","params","target","newData","swapDragArrayElement","e","currentData","Sortable","handle","toArray","registerColDragEvent","tableElement","options","dataIdAttr","direction","thCellInner","JSON","stringify","findIndex","container","tableHtmlElement","timer","setTimeout","affixHeaderElement","clearTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWwB,SAAAA,WAAA,CAAYC,KAAZ,EAAwCC,eAAxC,EAAgF;AACtG,EAAA,IAAQC,kBAAR,GAA2DF,KAA3D,CAAQE,kBAAR;AAAA,MAA4BC,QAA5B,GAA2DH,KAA3D,CAA4BG,QAA5B;AAAA,MAAsCC,IAAtC,GAA2DJ,KAA3D,CAAsCI,IAAtC;AAAA,MAA4CC,UAA5C,GAA2DL,KAA3D,CAA4CK,UAA5C,CAAA;;AACA,EAAA,IAAA,aAAA,GAAuEC,YAAa,EAApF;MAAQC,qBAAR,iBAAQA,qBAAR;MAA+BC,cAA/B,iBAA+BA,cAA/B;MAA+CC,mBAA/C,iBAA+CA,mBAA/C,CAAA;;AACM,EAAA,IAAA,SAAA,GAAgCC,SAA2BV,KAAM,CAAAW,OAAN,IAAiB,GAA5E;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAACA,OAAD,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAAUC,kBAAV,GAAA,UAAA,CAAA,CAAA,CAAA,CAAA;;EAEN,IAAMC,OAAU,GAAAC,OAAA,CAAQ,YAAA;AAAA,IAAA,OAAMH,OAAA,CAAQI,IAAR,CAAa,UAACC,IAAD,EAAA;AAAA,MAAA,OAAUA,IAAA,CAAKC,MAAL,KAAgB,MAA1B,CAAA;AAAA,KAAb,CAAN,CAAA;AAAA,GAAR,EAA8D,CAACN,OAAD,CAA9D,CAAhB,CAAA;EAEM,IAAAO,cAAA,GAAiBJ,QAAQ,YAAA;AAAA,IAAA,OAAMZ,kBAAA,IAAsBC,aAAa,KAAzC,CAAA;AAAA,KAAgD,CAACA,QAAD,EAAWD,kBAAX,EAAzE,CAAA;EAEN,IAAMiB,qBAAwB,GAAAL,OAAA,CAC5B,YAAA;IAAA,OAAM,CAAC,aAAD,EAAgB,iBAAhB,CAAA,CAAmCM,QAAnC,CAA4CjB,QAA5C,CAAA,IAAyD,CAAC,CAACU,OAAjE,CAAA;AAAA,GAD4B,EAE5B,CAACV,QAAD,EAAWU,OAAX,CAF4B,CAA9B,CAAA;EAKA,IAAMQ,cAAiB,GAAAP,OAAA,CAAQ,YAAA;IAAA,OAAM,CAAC,KAAD,EAAQ,iBAAR,EAA2BM,QAA3B,CAAoCjB,QAApC,CAAN,CAAA;AAAA,GAAR,EAA6D,CAACA,QAAD,CAA7D,CAAvB,CAAA;AAEM,EAAA,IAAAmB,WAAA,GAAcC,MAAO,CAAA,EAAA,CAArB,CAAA;EAEN,IAAMC,QAAQD,MAAuB,EAArC,CAAA;AAEM,EAAA,IAAAE,WAAA,GAAcF,MAAO,CAAA,EAAA,CAArB,CAAA;AAEA,EAAA,IAAAG,WAAA,GAAcH,MAAO,CAAA,EAAA,CAArB,CAAA;AAEA,EAAA,IAAAI,eAAA,GAAkBJ,MAAO,CAAA,EAAA,CAAzB,CAAA;;EAEN,IAAIvB,MAAME,kBAAV,EAA8B;AACxB0B,IAAAA,GAAA,CAAAC,IAAA,CAAK,OAAL,EAAc,6EAAd,CAAA,CAAA;AACN,GAAA;;AAEAC,EAAAA,SAAA,CAAU,YAAM;IAEFR,WAAA,CAAAS,OAAA,GAAU3B,IAAK,CAAA4B,GAAL,CAAS,UAAChB,IAAD,EAAA;MAAA,OAAUiB,MAAO,CAAAC,KAAA,CAAIlB,IAAJ,EAAUhB,KAAA,CAAMmC,MAAhB,CAAA,CAAjB,CAAA;AAAA,KAAT,CAAV,CAAA;IACZX,KAAA,CAAMO,OAAN,GAAgB3B,IAAhB,CAAA;GAHF,EAIG,CAACA,IAAD,EAAOJ,KAAA,CAAMmC,MAAb,CAJH,CAAA,CAAA;AAMAL,EAAAA,SAAA,CAAU,YAAM;IACdL,WAAA,CAAYM,OAAZ,GAAsB/B,KAAM,CAAAW,OAAN,CAAcqB,GAAd,CAAkB,UAACI,CAAD,EAAA;MAAA,OAAOA,EAAEnB,MAAT,CAAA;AAAA,KAAlB,CAAtB,CAAA;AACAS,IAAAA,WAAA,CAAYK,OAAZ,GAAsB/B,KAAM,CAAAW,OAA5B,CAAA;AACAgB,IAAAA,eAAA,CAAgBI,OAAhB,GAA0B/B,KAAM,CAAAW,OAAhC,CAAA;AACC,GAJH,EAIG,CAACX,KAAM,CAAAW,OAAP,CAJH,CAAA,CAAA;;AAMM,EAAA,IAAA0B,oBAAA,GAAuB,SAAvBA,oBAAuB,CAACC,OAAD,EAA0B;AAAA,IAAA,IAAA,iBAAA,CAAA;;AACjD,IAAA,IAAA,CAACnB,qBAAD,IAA0B,CAACD,cAA3B,EAA2C,OAAA;IAE/C,IAAIqB,eAA4B,GAAA,IAAhC,CAAA;IACM,IAAAC,aAAA,GAAgBF,OAAhB,KAAgBA,IAAAA,IAAAA,OAAhB,KAAgBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAS,CAAAG,aAAT,CAAuB,OAAvB,CAAhB,CAAA;;IACN,IAAI,CAACD,aAAL,EAAoB;AACdZ,MAAAA,GAAA,CAAAc,KAAA,CAAM,OAAN,EAAe,uBAAf,CAAA,CAAA;AACG,MAAA,OAAA,IAAA,CAAA;AACT,KAAA;;AACA,IAAA,IAAMC,WAA+B,GAAA,aAAA,CAAA,aAAA,CAAA;AACnCC,MAAAA,SAAW,EAAA,GAAA;KACR5C,EAAAA,KAAM,CAAA6C,eAF0B,CAAA,EAAA,EAAA,EAAA;MAGnCC,YAAYvC,qBAAsB,CAAAwC,KAHC;MAInCC,aAAazC,qBAAsB,CAAA0C,MAJA;MAKnCC,WAAW3C,qBAAsB,CAAA4C,QALE;AAMnCC,MAAAA,MAAA,EAAY3C,GAAAA,CAAAA,MAAAA,CAAAA,mBAAoB,CAAA4C,IAAhC,CANmC;MAOnCC,MAAA,EAAQ,gBAACC,GAAD,EAAA;QAAA,OAAoB,CAACC,SAASD,GAAI,CAAAE,SAAShD,oBAAoB4C,KAA/D,CAAA;OAP2B;MAQnCK,KAAA,EAAO,SAACH,KAAAA,CAAAA,GAAD,EAAwB;AAAA,QAAA,IAAA,gBAAA,CAAA;;AAE7B,QAAA,IAAgBI,YAAhB,GAAwDJ,GAAxD,CAAMK,QAAN;AAAA,YAAwCC,WAAxC,GAAwDN,GAAxD,CAA8BO,QAA9B,CAAA;AAEA,QAAA,CAAA,gBAAA,GAAAvB,eAAA,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAiBwB,IAAjB,CAA0BzC,kBAAAA,CAAAA,WAAA,CAAYS,OAAtC,CAAA,CAAA,CAAA;;QACA,IAAI/B,MAAMgE,YAAV,EAAwB;AACNL,UAAAA,YAAA,IAAA,CAAA,CAAA;AACDE,UAAAA,WAAA,IAAA,CAAA,CAAA;AACjB,SAAA;;AACA,QAAA,IAAMI,MAAwC,GAAA;AAC5CN,UAAAA,YAAA,EAAAA,YAD4C;AAE5C5B,UAAAA,OAAA,EAASP,MAAMO,OAAN,CAAc4B,YAAd,CAFmC;AAG5CE,UAAAA,WAAA,EAAAA,WAH4C;AAI5CK,UAAAA,MAAA,EAAQ1C,MAAMO,OAAN,CAAc8B,WAAd,CAJoC;UAK5CzD,MAAMoB,KAAM,CAAAO,OALgC;UAM5CoC,OAAA,EAASC,wCAAyB5C,MAAMO,QAAU4B,EAAAA,cAAcE,YANpB;AAO5CQ,UAAAA,CAAG,EAAAd,GAPyC;AAQ5CQ,UAAAA,IAAM,EAAA,KAAA;SARR,CAAA;AAWAE,QAAAA,MAAA,CAAOK,WAAP,GAAqBL,MAAO,CAAAE,OAA5B,CAAA;QAEA9D,UAAA,KAAA,IAAA,IAAAA,UAAA,KAAA,KAAA,CAAA,YAAAA,UAAA,CAAa4D,MAAb,CAAA,CAAA;AACF,OAAA;KA/BF,CAAA,CAAA;;AAkCA,IAAA,IAAI/C,cAAJ,EAAoB;AAClBqB,MAAAA,eAAA,GAAkB,IAAIgC,QAAJ,CAAa/B,aAAb,EAAA,aAAA,CAAA,EAAA,EAAiCG,WAAjC,CAAlB,CAAA,CAAA;KADF,UAEWxB,uBAAuB;AACdoB,MAAAA,eAAA,GAAA,IAAIgC,QAAJ,CAAa/B,aAAb,kCACbG,WADa,CAAA,EAAA,EAAA,EAAA;QAEhB6B,MAAA,EAAA,GAAA,CAAA,MAAA,CAAYjE,qBAAsB,CAAAiE,MAAlC,CAAA;OAFgB,CAAA,CAAA,CAAA;AAIpB,KAAA;;AACYlD,IAAAA,WAAA,CAAAS,OAAA,GAAA,CAAA,iBAAA,GAAUQ,eAAV,MAAU,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAiBkC,OAAjB,EAAV,CAAA;GAnDR,CAAA;;AAuDA,EAAA,IAAAC,oBAAA,GAAuB,SAAvBA,oBAAuB,CAACC,YAAD,EAA+B;AAAA,IAAA,IAAA,iBAAA,CAAA;;AACtD,IAAA,IAAA,CAACtD,cAAD,IAAmB,CAACsD,YAApB,EAAkC,OAAA;IAEtC,IAAIpC,eAA4B,GAAA,IAAhC,CAAA;;AACA,IAAA,IAAMqC,OAA2B,GAAA,aAAA,CAAA,aAAA,CAAA;AAC/BhC,MAAAA,SAAW,EAAA,GAAA;KACR5C,EAAAA,KAAM,CAAA6C,eAFsB,CAAA,EAAA,EAAA,EAAA;AAG/BgC,MAAAA,UAAY,EAAA,aAHmB;AAI/BC,MAAAA,SAAW,EAAA,UAJoB;MAK/BhC,YAAYvC,qBAAsB,CAAAwC,KALH;MAM/BC,aAAazC,qBAAsB,CAAA0C,MANJ;MAO/BC,WAAW3C,qBAAsB,CAAA4C,QAPF;AAQ/BqB,MAAAA,MAAA,EAAYhE,GAAAA,CAAAA,MAAAA,CAAAA,cAAe,CAAAuE,WAA3B,CAR+B;MAS/BrB,KAAA,EAAO,SAACH,KAAAA,CAAAA,GAAD,EAAwB;AAAA,QAAA,IAAA,iBAAA,CAAA;;AAE7B,QAAA,CAAA,iBAAA,GAAAhB,eAAA,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAiBwB,IAAjB,CAA0BtC,kBAAAA,CAAAA,WAAA,CAAYM,OAAtC,CAAA,CAAA,CAAA;AACA,QAAA,IAAgB4B,YAAhB,GAAwDJ,GAAxD,CAAMK,QAAN;AAAA,YAAwCC,WAAxC,GAAwDN,GAAxD,CAA8BO,QAA9B,CAAA;AACM,QAAA,IAAA/B,OAAA,GAAUL,YAAYK,OAAZ,CAAoB4B,YAApB,CAAV,CAAA;AACA,QAAA,IAAAO,MAAA,GAASxC,YAAYK,OAAZ,CAAoB8B,WAApB,CAAT,CAAA;;AACN,QAAA,IAAI,CAAC9B,OAAD,IAAY,CAACA,OAAA,CAAQd,MAAzB,EAAiC;UAC/BW,GAAA,CAAIc,KAAJ,CAAU,OAAV,EAAA,uBAAA,CAAA,MAAA,CAA2CsC,IAAK,CAAAC,SAAL,CAAelD,OAAf,CAA3C,CAAA,CAAA,CAAA;AACF,SAAA;;AACA,QAAA,IAAI,CAACmC,MAAD,IAAW,CAACA,MAAA,CAAOjD,MAAvB,EAA+B;UAC7BW,GAAA,CAAIc,KAAJ,CAAU,OAAV,EAAA,uBAAA,CAAA,MAAA,CAA2CsC,IAAK,CAAAC,SAAL,CAAef,MAAf,CAA3C,CAAA,CAAA,CAAA;AACF,SAAA;;QAEeP,YAAA,GAAAhC,eAAA,CAAgBI,OAAhB,CAAwBmD,SAAxB,CAAkC,UAAC9C,CAAD,EAAA;AAAA,UAAA,OAAOA,CAAE,CAAAnB,MAAF,KAAac,QAAQd,MAA5B,CAAA;AAAA,SAAlC,CAAA,CAAA;QACD4C,WAAA,GAAAlC,eAAA,CAAgBI,OAAhB,CAAwBmD,SAAxB,CAAkC,UAAC9C,CAAD,EAAA;AAAA,UAAA,OAAOA,CAAE,CAAAnB,MAAF,KAAaiD,OAAOjD,MAA3B,CAAA;AAAA,SAAlC,CAAA,CAAA;AACd,QAAA,IAAMgD,MAA2C,GAAA;UAC/C7D,MAAMsB,WAAY,CAAAK,OAD6B;AAE/C4B,UAAAA,YAAA,EAAAA,YAF+C;AAG/C5B,UAAAA,OAAA,EAAAA,OAH+C;AAI/C8B,UAAAA,WAAA,EAAAA,WAJ+C;AAK/CK,UAAAA,MAAA,EAAAA,MAL+C;UAM/CC,OAAA,EAASC,wCAAyBzC,gBAAgBI,QAAU4B,EAAAA,cAAcE,YAN3B;AAO/CQ,UAAAA,CAAG,EAAAd,GAP4C;AAQ/CQ,UAAAA,IAAM,EAAA,KAAA;SARR,CAAA;AAWAE,QAAAA,MAAA,CAAOK,WAAP,GAAqBL,MAAO,CAAAE,OAA5B,CAAA;QACA9D,UAAA,KAAA,IAAA,IAAAA,UAAA,KAAA,KAAA,CAAA,YAAAA,UAAA,CAAa4D,MAAb,CAAA,CAAA;AACF,OAAA;KArCF,CAAA,CAAA;;AAuCM,IAAA,IAAAkB,SAAA,GAAYR,YAAa,CAAAlC,aAAb,CAA2B,YAA3B,CAAZ,CAAA;AACYF,IAAAA,eAAA,GAAA,IAAIgC,QAAJ,CAAaY,SAAb,EAAwBP,OAAxB,CAAA,CAAA;AACNnD,IAAAA,WAAA,CAAAM,OAAA,GAAA,CAAA,iBAAA,GAAUQ,eAAV,MAAU,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAiBkC,OAAjB,EAAV,CAAA;GA7CR,CAAA;;AAiDN3C,EAAAA,SAAA,CAAU,YAAM;AAAA,IAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;AACV,IAAA,IAAA,CAAC7B,eAAD,IAAoB,CAACA,eAAgB,CAAA8B,OAArC,EAA8C,OAAA;AAC7BM,IAAAA,oBAAA,0BAAApC,eAAA,CAAgB8B,OAAhB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAyB4C,YAAzB,CAAA,CAAA;AACAD,IAAAA,oBAAA,2BAAAzE,eAAA,CAAgB8B,OAAhB,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAyBqD,gBAAzB,CAAA,CAAA;AAEf,IAAA,IAAAC,KAAA,GAAQC,WAAW,YAAM;AAAA,MAAA,IAAA,sBAAA,CAAA;;AACzB,MAAA,IAAA,CAAA,sBAAA,GAAArF,eAAA,CAAgB8B,OAAhB,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,IAAA,sBAAA,CAAyBwD,kBAAzB,EAA6C;AAC1Bb,QAAAA,oBAAA,CAAAzE,eAAA,CAAgB8B,OAAhB,CAAwBwD,kBAAxB,CAAA,CAAA;AACvB,OAAA;;MACAC,YAAA,CAAaH,KAAb,CAAA,CAAA;AACD,MALK,CAAA;GALR,EAYG,CAACpF,eAAD,EAAkBU,OAAlB,EAA2BR,QAA3B,CAZH,CAAA,CAAA;EAcO,OAAA;AACLe,IAAAA,cAAA,EAAAA,cADK;AAELC,IAAAA,qBAAA,EAAAA,qBAFK;AAGLE,IAAAA,cAAA,EAAAA,cAHK;AAILT,IAAAA,kBAAA,EAAAA,kBAAAA;GAJK,CAAA;AAMT;;;;"}