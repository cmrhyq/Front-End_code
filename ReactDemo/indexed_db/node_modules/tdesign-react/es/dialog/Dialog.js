/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _objectWithoutProperties } from '../_chunks/dep-8368bb87.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import React, { isValidElement, forwardRef, useRef, useEffect, useMemo } from 'react';
import { i as isString_1 } from '../_chunks/dep-3c98169f.js';
import { i as isObject_1 } from '../_chunks/dep-e54bb0dc.js';
import { i as isFunction_1 } from '../_chunks/dep-e430e2ee.js';
import { CloseIcon, InfoCircleFilledIcon, CheckCircleFilledIcon } from 'tdesign-icons-react';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import { Button } from '../button/index.js';
import noop from '../_util/noop.js';
import RenderDialog from './RenderDialog.js';
import useSetState from '../_util/useSetState.js';
import useConfig from '../hooks/useConfig.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import { dialogDefaultProps } from './defaultProps.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-e237f0f2.js';
import '../_chunks/dep-b2626e28.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../button/Button.js';
import 'classnames';
import '../_util/useRipple.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../_util/dom.js';
import 'raf';
import '../_util/easing.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../_chunks/dep-59b9253f.js';
import '../_chunks/dep-d1b4ab24.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../loading/style/css.js';
import '../loading/type.js';
import '../button/defaultProps.js';
import '../button/style/css.js';
import '../button/type.js';
import 'react-transition-group';
import '../_util/useLayoutEffect.js';
import '../_util/useDialogEsc.js';

var _excluded = ["visible", "attach", "closeBtn", "footer", "onCancel", "onConfirm", "cancelBtn", "confirmBtn", "onClose", "isPlugin"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var renderDialogButton = function renderDialogButton(btn, defaultProps) {
  var result = null;

  if (isString_1(btn)) {
    result = /* @__PURE__ */React.createElement(Button, _objectSpread({}, defaultProps), btn);
  } else if ( /*#__PURE__*/isValidElement(btn)) {
    result = btn;
  } else if (isObject_1(btn)) {
    result = /* @__PURE__ */React.createElement(Button, _objectSpread(_objectSpread({}, defaultProps), btn));
  } else if (isFunction_1(btn)) {
    result = btn();
  }

  return result;
};

var Dialog = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useGlobalIcon = useGlobalIcon({
    CloseIcon: CloseIcon,
    InfoCircleFilledIcon: InfoCircleFilledIcon,
    CheckCircleFilledIcon: CheckCircleFilledIcon
  }),
      CloseIcon$1 = _useGlobalIcon.CloseIcon,
      InfoCircleFilledIcon$1 = _useGlobalIcon.InfoCircleFilledIcon,
      CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon;

  var dialogDom = useRef();

  var _useSetState = useSetState(_objectSpread({
    width: 520,
    visible: false,
    zIndex: 2500,
    placement: "center",
    mode: "modal",
    showOverlay: true,
    destroyOnClose: false,
    draggable: false,
    preventScrollThrough: true,
    isPlugin: false
  }, props)),
      _useSetState2 = _slicedToArray(_useSetState, 2),
      state = _useSetState2[0],
      setState = _useSetState2[1];

  var _useLocaleReceiver = useLocaleReceiver("dialog"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var confirmText = t(local.confirm);
  var cancelText = t(local.cancel);

  var visible = state.visible,
      attach = state.attach,
      closeBtn = state.closeBtn,
      _state$footer = state.footer,
      footer = _state$footer === void 0 ? true : _state$footer,
      _state$onCancel = state.onCancel,
      onCancel = _state$onCancel === void 0 ? noop : _state$onCancel,
      _state$onConfirm = state.onConfirm,
      onConfirm = _state$onConfirm === void 0 ? noop : _state$onConfirm,
      _state$cancelBtn = state.cancelBtn,
      cancelBtn = _state$cancelBtn === void 0 ? cancelText : _state$cancelBtn,
      _state$confirmBtn = state.confirmBtn,
      confirmBtn = _state$confirmBtn === void 0 ? confirmText : _state$confirmBtn,
      _state$onClose = state.onClose,
      onClose = _state$onClose === void 0 ? noop : _state$onClose,
      _state$isPlugin = state.isPlugin,
      isPlugin = _state$isPlugin === void 0 ? false : _state$isPlugin,
      restState = _objectWithoutProperties(state, _excluded);

  useEffect(function () {
    if (!isPlugin) {
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), props);
      });
    }
  }, [props, setState, isPlugin]);
  var prefixCls = "".concat(classPrefix, "-dialog");

  var renderCloseIcon = function renderCloseIcon() {
    if (closeBtn === false) return null;
    if (closeBtn === true) return /* @__PURE__ */React.createElement(CloseIcon$1, {
      style: {
        verticalAlign: "unset"
      }
    });
    return closeBtn || /* @__PURE__ */React.createElement(CloseIcon$1, {
      style: {
        verticalAlign: "unset"
      }
    });
  };

  React.useImperativeHandle(ref, function () {
    return {
      show: function show() {
        setState({
          visible: true
        });
      },
      hide: function hide() {
        setState({
          visible: false
        });
      },
      destroy: function destroy() {
        setState({
          visible: false,
          destroyOnClose: true
        });
      },
      update: function update(newOptions) {
        setState(function (prevState) {
          return _objectSpread(_objectSpread({}, prevState), newOptions);
        });
      }
    };
  });
  var renderHeader = useMemo(function () {
    if (!state.header) return null;
    var iconMap = {
      info: /* @__PURE__ */React.createElement(InfoCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-info")
      }),
      warning: /* @__PURE__ */React.createElement(InfoCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-warning")
      }),
      error: /* @__PURE__ */React.createElement(InfoCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-error")
      }),
      success: /* @__PURE__ */React.createElement(CheckCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-success")
      })
    };
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(prefixCls, "__header")
    }, iconMap[state.theme], state.header);
  }, [state.header, state.theme, prefixCls, classPrefix]);

  var handleCancel = function handleCancel(e) {
    onCancel({
      e: e
    });
    onClose({
      e: e,
      trigger: "cancel"
    });
  };

  var handleConfirm = function handleConfirm(e) {
    onConfirm({
      e: e
    });
  };

  var defaultFooter = function defaultFooter() {
    var renderCancelBtn = renderDialogButton(cancelBtn, {
      variant: "outline"
    });
    var renderConfirmBtn = renderDialogButton(confirmBtn, {
      theme: "primary"
    });
    return /* @__PURE__ */React.createElement(React.Fragment, null, renderCancelBtn && /*#__PURE__*/React.cloneElement(renderCancelBtn, _objectSpread({
      onClick: handleCancel
    }, renderCancelBtn.props)), renderConfirmBtn && /*#__PURE__*/React.cloneElement(renderConfirmBtn, _objectSpread({
      onClick: handleConfirm
    }, renderConfirmBtn.props)));
  };

  return /* @__PURE__ */React.createElement(RenderDialog, _objectSpread(_objectSpread({}, restState), {}, {
    visible: visible,
    prefixCls: prefixCls,
    header: renderHeader,
    attach: attach,
    closeBtn: renderCloseIcon(),
    classPrefix: classPrefix,
    onClose: onClose,
    onConfirm: onConfirm,
    footer: footer === true ? defaultFooter() : footer,
    ref: dialogDom
  }));
});
Dialog.displayName = "Dialog";
Dialog.defaultProps = dialogDefaultProps;

export { Dialog as default };
//# sourceMappingURL=Dialog.js.map
