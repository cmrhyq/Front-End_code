/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../../_chunks/dep-1e32006c.js';
import React, { useRef, useCallback, useEffect } from 'react';
import { SATURATION_PANEL_DEFAULT_WIDTH, SATURATION_PANEL_DEFAULT_HEIGHT } from '../../const.js';
import useDrag from '../../../_util/useDrag.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var Saturation = function Saturation(props) {
  var color = props.color,
      disabled = props.disabled,
      onChange = props.onChange,
      baseClassName = props.baseClassName;
  var panelRef = useRef(null);
  var thumbRef = useRef(null);
  var panelRectRef = useRef({
    width: SATURATION_PANEL_DEFAULT_WIDTH,
    height: SATURATION_PANEL_DEFAULT_HEIGHT
  });

  var styles = function styles() {
    var saturation = color.saturation,
        value = color.value,
        rgb = color.rgb;
    var _panelRectRef$current = panelRectRef.current,
        width = _panelRectRef$current.width,
        height = _panelRectRef$current.height;
    var top = Math.round((1 - value) * height);
    var left = Math.round(saturation * width);
    return {
      color: rgb,
      left: "".concat(left, "px"),
      top: "".concat(top, "px")
    };
  };

  var getSaturationAndValueByCoordinate = function getSaturationAndValueByCoordinate(coordinate) {
    var _panelRectRef$current2 = panelRectRef.current,
        width = _panelRectRef$current2.width,
        height = _panelRectRef$current2.height;
    var x = coordinate.x,
        y = coordinate.y;
    var saturation = Math.round(x / width * 100);
    var value = Math.round((1 - y / height) * 100);
    return {
      saturation: saturation,
      value: value
    };
  };

  var isDragging = useRef(false);
  var handleDrag = useCallback(function (_ref, isEnd) {
    var x = _ref.x,
        y = _ref.y;

    if (disabled) {
      return;
    }

    isDragging.current = true;

    var _getSaturationAndValu = getSaturationAndValueByCoordinate({
      x: x,
      y: y
    }),
        saturation = _getSaturationAndValu.saturation,
        value = _getSaturationAndValu.value;

    onChange({
      saturation: saturation / 100,
      value: value / 100,
      addUsedColor: isEnd
    });
  }, [disabled, onChange]);
  var handleDragEnd = useCallback(function (coordinate) {
    if (disabled) {
      return;
    }

    isDragging.current = false;
    handleDrag(coordinate, true);
  }, []);
  useDrag(panelRef, {
    start: function start() {
      panelRectRef.current.width = panelRef.current.offsetWidth;
      panelRectRef.current.height = panelRef.current.offsetHeight;
    },
    end: function end(coordinate) {
      handleDragEnd(coordinate);
    },
    drag: function drag(coordinate) {
      handleDrag(coordinate);
    }
  });
  useEffect(function () {
    panelRectRef.current.width = panelRef.current.offsetWidth || SATURATION_PANEL_DEFAULT_WIDTH;
    panelRectRef.current.height = panelRef.current.offsetHeight || SATURATION_PANEL_DEFAULT_HEIGHT;
  }, [handleDrag, handleDragEnd]);
  return /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__saturation"),
    ref: panelRef,
    style: {
      background: "hsl(".concat(color.hue, ", 100%, 50%)")
    }
  }, /* @__PURE__ */React.createElement("span", {
    className: "".concat(baseClassName, "__thumb"),
    role: "slider",
    tabIndex: 0,
    ref: thumbRef,
    style: _objectSpread({}, styles())
  }));
};

var SaturationPanel = /*#__PURE__*/React.memo(Saturation);

export { SaturationPanel as default };
//# sourceMappingURL=saturation.js.map
