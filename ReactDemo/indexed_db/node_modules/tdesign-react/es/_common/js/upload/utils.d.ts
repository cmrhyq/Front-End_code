import { SizeUnit, TdUploadFile } from './types';
/**
 * 各个单位和 KB 的关系
 *
 * [*] 表示方法采用这种方式
 * [x] 表示方法不采用这种方式
 *
 * [x] bit      位              b     0 or 1
 * [*] byte     字节            B     8 bits
 * [x] kilobit  千位            kb    1000 bites
 * [*] kilobyte 千字节(二进制)   KB    1024 bytes
 * [x] kilobyte 千字节(十进制)   KB    1000 bytes
 * [x] Megabite 百万位          Mb    1000 kilobits
 * [*] Megabyte 兆字节(二进制)   KB    1024 kilobytes
 * [*] Megabyte 兆字节(十进制)   KB    1000 kilobytes
 * [x] Gigabit  万亿位          Gb    1000 Megabite
 * [*] Gigabyte 吉字节(二进制)   GB    1024 Megabytes
 * [x] Gigabyte 吉字节(十进制)   GB    1000 Megabytes
 */
export declare const SIZE_MAP: {
    B: number;
    KB: number;
    MB: number;
    GB: number;
};
export declare function returnFileSize(number: number): string;
export declare function getCurrentDate(): string;
/**
 * 缩略文件名 ABCDEFG => ABC...FG
 * @param inputName 文件名
 * @param leftCount 左边长度
 * @param rightCount 右边长度
 * @returns 缩略后的文件名
 */
export declare function abridgeName(inputName: string, leftCount?: number, rightCount?: number): string;
export declare function getFileSizeText(number: number): string;
/**
 * 大小比较
 * @param size 文件大小，单位：B
 * @param unit 计算机计量单位
 */
export declare function isOverSizeLimit(fileSize: number, sizeLimit: number, unit: SizeUnit): boolean;
export declare const urlCreator: () => {
    new (url: string | URL, base?: string | URL): URL;
    prototype: URL;
    createObjectURL(obj: Blob | MediaSource): string;
    revokeObjectURL(url: string): void;
};
/**
 *
 * @param files 待处理文件
 * @param format 格式化规则
 */
export declare function formatFiles(files?: File[], format?: (file: File) => TdUploadFile): TdUploadFile[];
export declare function getFileUrlByFileRaw(fileRaw: File): Promise<string>;
