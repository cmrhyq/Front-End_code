/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _toConsumableArray } from '../_chunks/dep-59b9253f.js';
import React, { useState, useEffect } from 'react';
import { i as isNumber_1 } from '../_chunks/dep-a5f8b6ec.js';
import classNames from 'classnames';
import useConfig from '../hooks/useConfig.js';
import { pxCompat } from '../_util/helper.js';
import { skeletonDefaultProps } from './defaultProps.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-d1b4ab24.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-e237f0f2.js';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-e430e2ee.js';
import '../_chunks/dep-e54bb0dc.js';
import '../_chunks/dep-b2626e28.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../_chunks/dep-8368bb87.js';
import '../_chunks/dep-fc5ba3d5.js';
import '../_chunks/dep-c8bfa11e.js';
import '../_chunks/dep-199b1581.js';
import '../_chunks/dep-f54ff1e5.js';
import '../_chunks/dep-e1d4dd61.js';
import '../_chunks/dep-236ef238.js';

var ThemeMap = {
  text: [1],
  avatar: [{
    type: "circle",
    size: "56px"
  }],
  paragraph: [1, 1, {
    width: "70%"
  }],
  "avatar-text": [[{
    type: "circle"
  }, {
    type: "text",
    height: "32px"
  }]],
  tab: [{
    height: "30px"
  }, {
    height: "200px"
  }],
  article: [{
    type: "rect",
    height: "30px",
    width: "100%"
  }, {
    type: "rect",
    height: "200px",
    width: "100%"
  }].concat(_toConsumableArray([3, 2, 2, 2].map(function (value) {
    return Array(value).fill({
      type: "text",
      height: "30px"
    });
  })))
};

var Skeleton = function Skeleton(props) {
  var animation = props.animation,
      loading = props.loading,
      rowCol = props.rowCol,
      theme = props.theme,
      className = props.className,
      style = props.style,
      _props$delay = props.delay,
      delay = _props$delay === void 0 ? 0 : _props$delay,
      children = props.children;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var name = "".concat(classPrefix, "-skeleton");

  var renderCols = function renderCols(_cols) {
    var getColItemClass = function getColItemClass(obj) {
      return classNames("".concat(name, "__col"), "".concat(name, "--type-").concat(obj.type || "text"), _defineProperty({}, "".concat(name, "--animation-").concat(animation), animation));
    };

    var getColItemStyle = function getColItemStyle(obj) {
      var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
      var style2 = {};
      styleName.forEach(function (name2) {
        if (name2 in obj) {
          var px = pxCompat(obj[name2]);

          if (name2 === "size") {
            var _ref = [px, px];
            style2.width = _ref[0];
            style2.height = _ref[1];
          } else {
            style2[name2] = px;
          }
        }
      });
      return style2;
    };

    var cols = [];

    if (Array.isArray(_cols)) {
      cols = _cols;
    } else if (isNumber_1(_cols)) {
      cols = new Array(_cols).fill({
        type: "text"
      });
    } else {
      cols = [_cols];
    }

    return cols.map(function (item, index) {
      return /* @__PURE__ */React.createElement("div", {
        key: index,
        className: getColItemClass(item),
        style: getColItemStyle(item)
      }, typeof item.content === "function" ? item.content(React.createElement) : item.content);
    });
  };

  var renderRowCol = function renderRowCol(_rowCol) {
    var renderedRowCol = _rowCol || rowCol;
    return renderedRowCol.map(function (item, index) {
      return /* @__PURE__ */React.createElement("div", {
        key: index,
        className: "".concat(name, "__row")
      }, renderCols(item));
    });
  };

  var _useState = useState(loading),
      _useState2 = _slicedToArray(_useState, 2),
      ctrlLoading = _useState2[0],
      setCtrlLoading = _useState2[1];

  useEffect(function () {
    if (delay > 0 && !loading) {
      var timeout = setTimeout(function () {
        setCtrlLoading(loading);
      }, delay);
      return function () {
        return clearTimeout(timeout);
      };
    }

    setCtrlLoading(loading);
  }, [delay, loading]);

  if (!ctrlLoading) {
    return /* @__PURE__ */React.createElement(React.Fragment, null, children);
  }

  var childrenContent = [];

  if (theme) {
    childrenContent.push(renderRowCol(ThemeMap[theme]));
  }

  if (rowCol) {
    childrenContent.push(renderRowCol(rowCol));
  }

  if (!theme && !rowCol) {
    childrenContent.push(renderRowCol([1, 1, 1, {
      width: "70%"
    }]));
  }

  return /* @__PURE__ */React.createElement("div", {
    className: className,
    style: style
  }, childrenContent);
};

Skeleton.displayName = "Skeleton";
Skeleton.defaultProps = skeletonDefaultProps;

export { Skeleton as default };
//# sourceMappingURL=Skeleton.js.map
