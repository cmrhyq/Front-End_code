/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import React from 'react';
import ReactDOM from 'react-dom';
import classNames from 'classnames';
import noop from '../_util/noop.js';
import { PlacementOffset } from './const.js';
import MessageComponent from './MessageComponent.js';
export { default } from './MessageComponent.js';
import { globalConfig, getMessageConfig, setGlobalConfig } from './config.js';
import { useMessageClass } from './useMessageClass.js';
import '../_chunks/dep-7909fefa.js';
import './MessageClose.js';
import 'tdesign-icons-react';
import '../hooks/useGlobalIcon.js';
import '../hooks/useConfig.js';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-e430e2ee.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-e54bb0dc.js';
import '../_chunks/dep-b2626e28.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-e237f0f2.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import './MessageIcon.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3c98169f.js';
import '../_util/easing.js';
import '../common/Portal.js';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../_chunks/dep-59b9253f.js';
import '../_chunks/dep-d1b4ab24.js';
import '../_chunks/dep-8368bb87.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../loading/style/css.js';
import '../loading/type.js';
import './defaultProps.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var MessageList = [];
var keyIndex = 1;

var MessageContainer = function MessageContainer(props) {
  var placement = props.placement,
      children = props.children,
      zIndex = props.zIndex,
      id = props.id;
  var style = {
    zIndex: zIndex
  };
  Object.keys(PlacementOffset[placement]).forEach(function (key) {
    style[key] = PlacementOffset[placement][key];
  });

  if (placement.includes("top")) {
    style.top = "".concat(globalConfig.top, "px");
  }

  var _useMessageClass = useMessageClass(),
      tdMessagePlacementClassGenerator = _useMessageClass.tdMessagePlacementClassGenerator,
      tdMessageListClass = _useMessageClass.tdMessageListClass;

  return /* @__PURE__ */React.createElement("div", {
    className: classNames(tdMessageListClass, tdMessagePlacementClassGenerator(placement)),
    style: style,
    id: id
  }, children);
};

function createContainer(_ref) {
  var attach = _ref.attach,
      zIndex = _ref.zIndex,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? "top" : _ref$placement;
  var mountedDom = document.body;

  if (typeof attach === "string") {
    var result = document.querySelectorAll(attach);

    if (result.length >= 1) {
      mountedDom = result[0];
    }
  } else if (typeof attach === "function") {
    mountedDom = attach();
  }

  var containerId = "tdesign-message-container--".concat(placement);
  var container = Array.from(mountedDom.querySelectorAll("#".concat(containerId)));

  if (container.length < 1) {
    var div = document.createElement("div");
    ReactDOM.render( /* @__PURE__ */React.createElement(MessageContainer, {
      id: containerId,
      placement: placement,
      zIndex: zIndex
    }), div);
    mountedDom.appendChild(div);
    var container2 = Array.from(mountedDom.querySelectorAll("#".concat(containerId)));
    return container2[0];
  }

  return container[0];
}

function renderElement(theme, config) {
  var container = createContainer(config);

  var content = config.content,
      offset = config.offset,
      _config$onDurationEnd = config.onDurationEnd,
      onDurationEnd = _config$onDurationEnd === void 0 ? noop : _config$onDurationEnd,
      _config$onCloseBtnCli = config.onCloseBtnClick,
      _onCloseBtnClick = _config$onCloseBtnCli === void 0 ? noop : _config$onCloseBtnCli;

  var div = document.createElement("div");
  keyIndex += 1;
  var message = {
    close: function close() {
      ReactDOM.unmountComponentAtNode(div);
      div.remove();
      message.closed = true;
    },
    key: keyIndex,
    closed: false
  };

  if (config.duration !== 0) {
    setTimeout(function () {
      if (!message.closed) {
        message.close();
        onDurationEnd();
      }
    }, config.duration);
  }

  var style = {};

  if (Array.isArray(offset) && offset.length === 2) {
    var _offset = _slicedToArray(offset, 2),
        left = _offset[0],
        top = _offset[1];

    style = _objectSpread(_objectSpread({}, config.style), {}, {
      left: left,
      top: top,
      position: "relative"
    });
  }

  return new Promise(function (resolve) {
    ReactDOM.render( /* @__PURE__ */React.createElement(MessageComponent, _objectSpread(_objectSpread({
      key: keyIndex
    }, config), {}, {
      theme: theme,
      style: style,
      onCloseBtnClick: function onCloseBtnClick(ctx) {
        _onCloseBtnClick(ctx);

        message.close();
      }
    }), content), div);
    container.appendChild(div);
    MessageList.push(message);
    resolve(message);
  });
}

function isConfig(content) {
  return Object.prototype.toString.call(content) === "[object Object]" && !!content.content;
}

var messageMethod = function messageMethod(theme, content, duration) {
  var config = {};

  if (isConfig(content)) {
    config = _objectSpread({
      duration: duration
    }, content);
  } else {
    config = {
      content: content,
      duration: duration
    };
  }

  return renderElement(theme, getMessageConfig(config));
};

var MessagePlugin = function MessagePlugin(theme, message, duration) {
  return messageMethod(theme, message, duration);
};

MessagePlugin.info = function (content, duration) {
  return messageMethod("info", content, duration);
};

MessagePlugin.error = function (content, duration) {
  return messageMethod("error", content, duration);
};

MessagePlugin.warning = function (content, duration) {
  return messageMethod("warning", content, duration);
};

MessagePlugin.success = function (content, duration) {
  return messageMethod("success", content, duration);
};

MessagePlugin.question = function (content, duration) {
  return messageMethod("question", content, duration);
};

MessagePlugin.loading = function (content, duration) {
  return messageMethod("loading", content, duration);
};

MessagePlugin.config = function (options) {
  return setGlobalConfig(options);
};

MessagePlugin.close = function (messageInstance) {
  messageInstance.then(function (instance) {
    return instance.close();
  });
};

MessagePlugin.closeAll = function () {
  MessageList.forEach(function (message) {
    typeof message.close === "function" && message.close();
  });
  MessageList = [];
  return;
};

export { MessagePlugin };
//# sourceMappingURL=Message.js.map
