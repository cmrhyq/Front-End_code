{"version":3,"file":"tree-node.js","sources":["../../../../node_modules/lodash/uniqueId.js","../../../../node_modules/lodash/isNil.js","../../../../src/_common/js/tree/tree-node.ts"],"sourcesContent":["var toString = require('./toString');\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nmodule.exports = isNil;\n","import uniqueId from 'lodash/uniqueId';\nimport isNil from 'lodash/isNil';\nimport get from 'lodash/get';\nimport { TreeStore } from './tree-store';\nimport {\n  TreeNodeValue,\n  TreeNodeState,\n  TypeIdMap,\n  TypeTreeItem,\n  TypeSettingOptions,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n} from './types';\nimport {\n  createNodeModel,\n  updateNodeModel,\n} from './tree-node-model';\n\nconst { hasOwnProperty } = Object.prototype;\n\nconst defaultStatus = {\n  expandMutex: false,\n  activable: false,\n  checkable: false,\n  disabled: false,\n  draggable: false,\n  loading: false,\n};\n\n// vm 开头为视图属性，不可以外部设置\n// 用于触发视图更新\nexport class TreeNode {\n  // 节点隶属的树实例\n  public tree: TreeStore;\n\n  // 节点 id ，唯一标志\n  public value: string;\n\n  // 节点文本\n  public label: string;\n\n  // 节点数据\n  public data: TypeTreeNodeData;\n\n  // 父节点\n  public parent: TreeNode;\n\n  // 子节点列表\n  public children: TreeNode[] | boolean;\n\n  // 暴露的 treeNodeModel，这个对象的属性和 api 提供给用户使用\n  public model: TypeTreeNodeModel;\n\n  // 是否为叶节点\n  public vmIsLeaf: boolean;\n\n  // 是否为子节点中的第一个\n  public vmIsFirst: boolean;\n\n  // 是否为子节点中的最后\n  public vmIsLast: boolean;\n\n  // 节点是否是经过过滤剩下的\n  public vmIsRest: boolean;\n\n  // 节点是否展示为锁定状态\n  public vmIsLocked: boolean;\n\n  // 节点在视图上实际的展开状态\n  public expanded: boolean;\n\n  // 展开时是否收起同级节点，对子节点生效\n  public expandMutex: boolean;\n\n  // 节点在视图上实际的激活状态\n  public actived: boolean;\n\n  // 是否可激活\n  public activable: boolean;\n\n  // 是否可选中\n  public checkable: boolean;\n\n  // 是否可选中的视图呈现\n  public vmCheckable: boolean;\n\n  // 节点在视图上实际的选中态\n  public checked: boolean;\n\n  // 节点实际是否为半选状态\n  public indeterminate: boolean;\n\n  // 节点是否已禁用\n  public disabled: boolean;\n\n  // 节点是否可拖动\n  public draggable: boolean;\n\n  // 节点是否可视\n  public visible: boolean;\n\n  // 节点在树中的层级\n  public level: number;\n\n  // 节点是否正在加载数据\n  public loading: boolean;\n\n  public constructor(\n    tree: TreeStore,\n    data?: TypeTreeNodeData,\n    parent?: TreeNode,\n  ) {\n    this.data = data;\n    this.tree = tree;\n\n    const config = tree.config || {};\n    const prefix = config.prefix || 't';\n    const keys = get(tree, 'config.keys') || {};\n    const propChildren = keys.children || 'children';\n    const propLabel = keys.label || 'label';\n    const propValue = keys.value || 'value';\n\n    this.model = null;\n    this.children = null;\n    this.vmCheckable = false;\n    this.vmIsLeaf = false;\n    this.vmIsFirst = false;\n    this.vmIsLast = false;\n    this.vmIsRest = true;\n    this.vmIsLocked = false;\n\n    const spec = {\n      ...defaultStatus,\n      actived: false,\n      expanded: false,\n      checked: false,\n      ...data,\n    };\n    const children = spec[propChildren];\n\n    this.set(spec);\n    this.label = spec[propLabel] || '';\n    this.value = isNil(spec[propValue]) ? uniqueId(prefix) : spec[propValue];\n    this.tree.nodeMap.set(this.value, this);\n\n    if (parent && parent instanceof TreeNode) {\n      this.parent = parent;\n    } else {\n      this.parent = null;\n    }\n\n    // 子节点为 true 的状态逻辑需要放到状态计算之前\n    // 初始化加载逻辑需要依据这个来进行\n    if (children === true) {\n      this.children = children;\n    }\n\n    // 初始化状态计算\n    this.level = 0;\n    this.visible = true;\n\n    this.actived = spec.actived;\n    this.initActived();\n\n    this.expanded = spec.expanded;\n    this.initExpanded();\n\n    this.checked = spec.checked;\n    this.initChecked();\n\n    this.update();\n    tree.reflow(this);\n\n    // 这里的子节点加载逻辑不能放到状态计算之前\n    // 因为子节点状态计算依赖父节点状态\n    if (Array.isArray(children)) {\n      this.append(children);\n    } else if (children === true && !config.lazy) {\n      this.loadChildren();\n    }\n\n    // checked 状态依赖于子节点状态\n    // 因此初始化状态放到子节点插入之后\n    this.checked = false;\n    this.indeterminate = false;\n    this.updateChecked();\n  }\n\n  /* ------ 状态初始化 ------ */\n\n  // 初始化选中态\n  public initChecked() {\n    const { tree, value, parent } = this;\n    const { checkStrictly } = tree.config;\n    let { checked } = this;\n    checked = parent?.isChecked();\n    if (checked && !checkStrictly) {\n      tree.checkedMap.set(value, true);\n    }\n    this.checked = checked;\n  }\n\n  // 初始化节点展开状态\n  public initExpanded(): void {\n    const { tree } = this;\n    let { expanded } = this;\n    const { config } = tree;\n    if (\n      typeof config.expandLevel === 'number'\n      && this.getLevel() < config.expandLevel\n    ) {\n      tree.expandedMap.set(this.value, true);\n      expanded = true;\n    }\n    if (config.expandAll) {\n      expanded = true;\n    }\n    if (this.children === true && config.lazy) {\n      expanded = false;\n    }\n    if (expanded) {\n      tree.expandedMap.set(this.value, true);\n    } else {\n      tree.expandedMap.delete(this.value);\n    }\n    this.expanded = expanded;\n  }\n\n  // 初始化高亮状态\n  public initActived(): void {\n    const { tree, actived } = this;\n    if (actived) {\n      tree.activedMap.set(this.value, true);\n    }\n  }\n\n  /* ------ 节点操作 ------ */\n\n  // 追加数据\n  public append(data: TypeTreeNodeData | TypeTreeNodeData[]): void {\n    const list = [];\n    if (!Array.isArray(data)) {\n      list.push(data);\n    } else {\n      list.push(...data);\n    }\n    if (list.length <= 0) {\n      return;\n    }\n    if (!Array.isArray(this.children)) {\n      this.children = [];\n    }\n    const { children, tree } = this;\n    list.forEach((item) => {\n      let node = null;\n      if (item instanceof TreeNode) {\n        node = item;\n        node.appendTo(this.tree, this);\n      } else {\n        node = new TreeNode(this.tree, item, this);\n        children.push(node);\n      }\n    });\n    tree.reflow(this);\n    this.updateRelated();\n  }\n\n  // 将当前节点追加到某个父节点的子节点列表中\n  public appendTo(\n    tree: TreeStore,\n    parent?: TreeNode,\n    index?: number,\n  ): void {\n    const parentNode = parent;\n    let targetIndex = -1;\n    if (typeof index === 'number') {\n      targetIndex = index;\n    }\n\n    const targetParents = parentNode?.getParents() || [];\n    const includeCurrent = targetParents.some((pnode) => pnode === this);\n    if (includeCurrent) {\n      throw new Error('无法将父节点插入到子节点');\n    }\n\n    if (Array.isArray(parentNode?.children)) {\n      const targetPosNode = parentNode?.children[targetIndex];\n      if (targetPosNode && targetPosNode === this) {\n        // 无需将节点插入到原位置\n        return;\n      }\n    }\n\n    // 先要取得 siblings\n    // 因为要应对节点在同一个 siblings 中变换位置的情况\n    let siblings = null;\n    if (parentNode instanceof TreeNode) {\n      if (!Array.isArray(parentNode?.children)) {\n        parentNode.children = [];\n      }\n      siblings = parent.children;\n    } else {\n      siblings = tree.children;\n    }\n\n    if (!Array.isArray(siblings)) {\n      throw new Error('无法插入到目标位置，可插入的节点列表不存在');\n    }\n\n    const prevLength = siblings.length;\n    const prevIndex = this.getIndex();\n\n    this.remove();\n\n    if (typeof index === 'number') {\n      let targetIndex = index;\n      if (parentNode === this.parent) {\n        // 前置节点被拔出后再插入到同一个 siblings 时，会引起目标 index 的变化\n        // 因此要相应的变更插入位置\n        // 后置节点被拔出时，目标 index 是不变的\n        const curLength = siblings.length;\n        if (\n          curLength < prevLength\n          && prevIndex <= targetIndex\n        ) {\n          targetIndex -= 1;\n        }\n      }\n      siblings.splice(targetIndex, 0, this);\n    } else {\n      siblings.push(this);\n    }\n\n    this.parent = parentNode;\n\n    // 插入节点应当继承展开状态\n    // 但建议不要继承选中状态和高亮状态\n    const nodes = this.walk();\n    nodes.forEach((item) => {\n      const node = item;\n      node.tree = tree;\n      tree.nodeMap.set(node.value, node);\n      if (node.expanded) {\n        tree.expandedMap.set(node.value, true);\n      }\n    });\n\n    const updateNodes = parentNode?.walk() || tree.children.map((item) => item.walk()).flat();\n    updateNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n\n    tree.reflow();\n  }\n\n  // 插入一个同级节点数据\n  public insert(\n    item: TypeTreeItem,\n    index?: number,\n  ): void {\n    const { tree, parent } = this;\n    const siblings = this.getSiblings();\n    let node = null;\n    if (item instanceof TreeNode) {\n      node = item;\n      node.appendTo(tree, parent, index);\n    } else if (item) {\n      node = new TreeNode(tree, item, parent);\n      if (typeof index === 'number') {\n        siblings.splice(index, 0, node);\n      }\n      siblings.forEach((sibling) => {\n        sibling.update();\n      });\n    }\n    tree.reflow();\n  }\n\n  // 在当前节点之前插入节点\n  public insertBefore(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index);\n  }\n\n  // 在当前节点之后插入节点\n  public insertAfter(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index + 1);\n  }\n\n  // 从一个树移除本节点\n  public remove(): void {\n    const { tree } = this;\n\n    const nodes = this.walk();\n    const siblings = this.getSiblings();\n    const index = this.getIndex();\n    // 从父节点的子节点列表中移除自己\n    // 但不要将自己的父节点移除，避免渲染与判断失败\n    if (Array.isArray(siblings)) {\n      siblings.splice(index, 1);\n    }\n    // 清理与树的关系，但不清理自身状态\n    nodes.forEach((node) => {\n      node.clean();\n    });\n    // 同级节点的连线状态会受到影响\n    siblings.forEach((node) => {\n      node.update();\n    });\n    // 父节点选中态会受到影响\n    this.updateParents();\n    tree.reflow();\n  }\n\n  // 清除本节点与一个树的关系\n  public clean(): void {\n    const { tree, value } = this;\n    tree.activedMap.delete(value);\n    tree.checkedMap.delete(value);\n    tree.expandedMap.delete(value);\n    tree.nodeMap.delete(value);\n  }\n\n  // 异步加载子节点数据\n  public async loadChildren(): Promise<void> {\n    const config = get(this, 'tree.config') || {};\n    if (this.children === true && !this.loading) {\n      if (typeof config.load === 'function') {\n        this.loading = true;\n        this.update();\n        let list = [];\n        list = await config.load(this);\n        this.tree.emit('load', {\n          node: this,\n          data: list,\n        });\n        this.loading = false;\n        if (Array.isArray(list) && list.length > 0) {\n          this.append(list);\n        } else {\n          this.children = false;\n        }\n        this.update();\n      }\n    }\n  }\n\n  // 设置状态\n  public set(item: TreeNodeState): void {\n    const { tree } = this;\n    const keys = Object.keys(item);\n    keys.forEach((key) => {\n      if (hasOwnProperty.call(defaultStatus, key) || key === 'label') {\n        this[key] = item[key];\n      }\n    });\n    tree.updated(this);\n  }\n\n  /* ------ 节点获取 ------- */\n\n  // 获取单个父节点\n  public getParent(): TreeNode {\n    return this.parent;\n  }\n\n  // 获取所有父节点\n  public getParents(): TreeNode[] {\n    const parents = [];\n    let node = this.parent;\n    while (node) {\n      parents.push(node);\n      node = node.parent;\n    }\n    return parents;\n  }\n\n  // 获取兄弟节点，包含自己在内\n  public getSiblings(): TreeNode[] {\n    const { parent, tree } = this;\n    let list: TreeNode[] = [];\n    if (parent) {\n      if (Array.isArray(parent.children)) {\n        list = parent.children;\n      }\n    } else if (tree) {\n      list = tree.children;\n    }\n    return list;\n  }\n\n  // 获取根节点\n  public getRoot(): TreeNode {\n    const parents = this.getParents();\n    return parents[parents.length - 1] || null;\n  }\n\n  // 获取节点在父节点的子节点列表中的位置\n  // 如果没有父节点，则获取节点在根节点列表的位置\n  public getIndex(): number {\n    const list = this.getSiblings();\n    return list.indexOf(this);\n  }\n\n  // 返回路径节点\n  public getPath(): TreeNode[] {\n    const nodes = this.getParents();\n    nodes.unshift(this);\n    return nodes.reverse();\n  }\n\n  // 获取节点所在层级\n  public getLevel(): number {\n    const parents = this.getParents();\n    return parents.length;\n  }\n\n  /* ------ 节点状态判断 ------ */\n\n  // 判断节点是否被过滤\n  public isRest(): boolean {\n    const {\n      config,\n      filterMap,\n    } = this.tree;\n\n    let rest = true;\n    if (typeof config.filter === 'function') {\n      const nodeModel = this.getModel();\n      rest = config.filter(nodeModel);\n    }\n\n    if (rest) {\n      filterMap.set(this.value, true);\n    } else if (filterMap.get(this.value)) {\n      filterMap.delete(this.value);\n    }\n\n    return rest;\n  }\n\n  // 判断节点是否可视\n  public isVisible(): boolean {\n    const {\n      nodeMap,\n    } = this.tree;\n\n    let visible = true;\n\n    // 锁定状态，直接呈现\n    if (this.vmIsLocked) {\n      return true;\n    }\n\n    // 在当前树上，未被移除\n    if (nodeMap.get(this.value)) {\n      // 节点未被过滤\n      const filterVisible = this.isRest();\n\n      // 所有父节点展开\n      let expandVisible = true;\n      const parents = this.getParents();\n      if (parents.length > 0) {\n        expandVisible = parents.every((node: TreeNode) => node.isExpanded());\n      }\n\n      // 节点为未被过滤节点的父节点\n      visible = expandVisible && filterVisible;\n    } else {\n      visible = false;\n    }\n    return visible;\n  }\n\n  // 判断节点是否被禁用\n  public isDisabled() {\n    if (this.vmIsLocked) return true;\n    const treeDisabled = get(this, 'tree.config.disabled');\n    return !!(treeDisabled || this.disabled);\n  }\n\n  // 判断节点是否能拖拽\n  public isDraggable() {\n    return !!(get(this, 'tree.config.draggable') || this.draggable);\n  }\n\n  // 判断节点是否支持互斥展开\n  public isExpandMutex() {\n    return !!(get(this, 'tree.config.expandMutex') || this.expandMutex);\n  }\n\n  // 节点可高亮\n  public isActivable() {\n    return !!(get(this, 'tree.config.activable') || this.activable);\n  }\n\n  // 是否可选\n  public isCheckable() {\n    return !!(get(this, 'tree.config.checkable') || this.checkable);\n  }\n\n  // 检查节点是否被激活\n  public isActived(map?: Map<string, boolean>): boolean {\n    const { tree, value } = this;\n    const activedMap = map || tree.activedMap;\n    return !!(tree.nodeMap.get(value) && activedMap.get(value));\n  }\n\n  // 检查节点是否已展开\n  public isExpanded(map?: Map<string, boolean>): boolean {\n    const { tree, value, vmIsLocked } = this;\n    if (vmIsLocked) return true;\n    const expandedMap = map || tree.expandedMap;\n    return !!(tree.nodeMap.get(value) && expandedMap.get(value));\n  }\n\n  // 计算属性，判断节点是否被选中\n  // map: 预期选中项map，用于计算节点在预期环境中的选中态\n  public isChecked(map?: TypeIdMap): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    let checked = false;\n    const checkedMap = map || tree.checkedMap;\n    if (tree.nodeMap.get(this.value)) {\n      if (checkedMap.get(this.value)) {\n        // 如果在 checked 节点列表中，则直接为 true\n        checked = true;\n      } else if (\n        Array.isArray(children)\n        && children.length > 0\n        && !checkStrictly\n      ) {\n        // 如果是父节点，需检查所有子节点状态\n        checked = children.every((node) => {\n          const childIsChecked = node.isChecked(checkedMap);\n          return childIsChecked;\n        });\n      } else if (!checkStrictly) {\n        // 从父节点状态推断子节点状态\n        // 这里再调用 isChecked 会导致死循环\n        const parents = this.getParents();\n        checked = parents.some((node) => checkedMap.get(node.value));\n      }\n    }\n    return !!checked;\n  }\n\n  // 是否为半选状态\n  public isIndeterminate(): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    if (checkStrictly) {\n      return false;\n    }\n    let indeterminate = false;\n    if (Array.isArray(children)) {\n      // 叶节点不存在半选状态\n      let childChecked: null | boolean = null;\n      indeterminate = children.some((node: TreeNode) => {\n        if (node.isIndeterminate()) {\n          // 子节点有任意一个半选，则其为半选状态\n          return true;\n        }\n        if (childChecked === null) {\n          childChecked = node.isChecked();\n        }\n        if (childChecked !== node.isChecked()) {\n          // 子节点选中状态不一致，则其为半选状态\n          return true;\n        }\n        return false;\n      });\n    }\n    return indeterminate;\n  }\n\n  public isFirst(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[0] === this;\n  }\n\n  public isLast(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[siblings.length - 1] === this;\n  }\n\n  // 是叶节点\n  public isLeaf(): boolean {\n    let isLeaf = false;\n    if (Array.isArray(this.children)) {\n      isLeaf = this.children.length <= 0;\n    } else {\n      isLeaf = !this.children;\n    }\n    return isLeaf;\n  }\n\n  /* ------ 节点状态切换 ------ */\n\n  // 锁定节点\n  // 搜索过滤节点时，路径节点需要固定呈现，视其为锁定态\n  public lock(lockState: boolean): void {\n    this.vmIsLocked = lockState;\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n  }\n\n  // 节点展开关闭后需要调用的状态检查函数\n  public afterExpanded(): void {\n    this.update();\n    // 节点展开时检查延迟加载的数据\n    if (this.expanded && this.children === true) {\n      this.loadChildren();\n    }\n  }\n\n  // 展开或者关闭节点\n  public toggleExpanded(): TreeNodeValue[] {\n    return this.setExpanded(!this.isExpanded());\n  }\n\n  // 设置节点展开状态\n  public setExpanded(expanded: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n\n    let map = tree.expandedMap;\n    if (!options.directly) {\n      map = new Map(tree.expandedMap);\n    }\n\n    // 手风琴效果，先折叠同级节点\n    if (expanded) {\n      const shouldExpandNodes = [];\n      shouldExpandNodes.push(this);\n      if (get(tree, 'config.expandParent')) {\n        this.getParents().forEach((node) => {\n          shouldExpandNodes.push(node);\n        });\n      }\n      shouldExpandNodes.forEach((node) => {\n        let isExpandMutex = false;\n        if (node.parent) {\n          isExpandMutex = node.parent.isExpandMutex();\n        } else {\n          isExpandMutex = tree?.config?.expandMutex;\n        }\n        if (isExpandMutex) {\n          const siblings = node.getSiblings();\n          siblings.forEach((snode) => {\n            map.delete(snode.value);\n          });\n        }\n        map.set(node.value, true);\n      });\n    } else {\n      map.delete(this.value);\n    }\n\n    if (options.directly) {\n      this.afterExpanded();\n      this.update();\n      this.updateChildren();\n    }\n\n    return tree.getExpanded(map);\n  }\n\n  // 切换节点激活态\n  public toggleActived(): TreeNodeValue[] {\n    return this.setActived(!this.isActived());\n  }\n\n  // 设置节点激活态\n  public setActived(actived: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    const config = tree.config || {};\n    let map = tree.activedMap;\n    if (!options.directly) {\n      map = new Map(tree.activedMap);\n    }\n    if (this.isActivable()) {\n      if (actived) {\n        if (!config.activeMultiple) {\n          map.clear();\n        }\n        map.set(this.value, true);\n      } else {\n        map.delete(this.value);\n      }\n    }\n    if (options.directly) {\n      this.update();\n    }\n    return tree.getActived(map);\n  }\n\n  // 切换选中态\n  public toggleChecked(): TreeNodeValue[] {\n    return this.setChecked(!this.isChecked());\n  }\n\n  // 更新单个节点的选中态\n  // 返回树选中列表\n  public setChecked(checked: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const config = tree.config || {};\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    let map = tree.checkedMap;\n    if (!options.directly) {\n      map = new Map(tree.checkedMap);\n    }\n    if (this.isCheckable() && checked !== this.isChecked()) {\n      if (config.checkStrictly) {\n        if (checked) {\n          map.set(this.value, true);\n        } else {\n          map.delete(this.value);\n        }\n      } else {\n        const children = this.walk();\n        // 子节点的预期选中态与当前节点同步\n        children.forEach((node) => {\n          if (checked) {\n            map.set(node.value, true);\n          } else {\n            map.delete(node.value);\n          }\n        });\n        // 消除全部父节点的预期选中态\n        // 父节点的预期选中态将通过计算得出\n        const parents = this.getParents();\n        parents.forEach((node) => {\n          map.delete(node.value);\n        });\n      }\n    }\n    if (options.directly) {\n      if (config.checkStrictly) {\n        this.updateChecked();\n      } else {\n        const relatedNodes = tree.getRelatedNodes([this.value]);\n        relatedNodes.forEach((node) => {\n          node.updateChecked();\n        });\n      }\n    }\n    return tree.getChecked(map);\n  }\n\n  /* ------ 节点状态更新 ------ */\n\n  // 更新节点状态\n  public update(): void {\n    this.level = this.getLevel();\n    this.actived = this.isActived();\n    this.expanded = this.isExpanded();\n    this.vmCheckable = this.isCheckable();\n    this.visible = this.isVisible();\n    this.vmIsRest = this.isRest();\n    this.vmIsFirst = this.isFirst();\n    this.vmIsLast = this.isLast();\n    this.vmIsLeaf = this.isLeaf();\n    this.tree.updated(this);\n  }\n\n  // 更新选中态属性值\n  public updateChecked(isFromValueChange?: boolean): void {\n    const { tree } = this;\n    this.vmCheckable = this.isCheckable();\n    if (this.vmCheckable && (!this.disabled || isFromValueChange)) {\n      this.checked = this.isChecked();\n      if (this.checked) {\n        tree.checkedMap.set(this.value, true);\n      }\n      this.indeterminate = this.isIndeterminate();\n      tree.updated(this);\n    }\n  }\n\n  // 更新所有子节点状态\n  // 注意:不包含自己\n  public updateChildren(): void {\n    const { children } = this;\n    if (Array.isArray(children)) {\n      children.forEach((node) => {\n        node.update();\n        node.updateChecked();\n        node.updateChildren();\n      });\n    }\n  }\n\n  // 父节点状态更新\n  // 注意:不包含自己\n  public updateParents(): void {\n    const { parent } = this;\n    if (parent) {\n      parent.update();\n      parent.updateChecked();\n      parent.updateParents();\n    }\n  }\n\n  // 更新上下游相关节点\n  public updateRelated() {\n    const { tree } = this;\n    const relatedNodes = tree.getRelatedNodes([this.value]);\n    relatedNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n    tree.reflow();\n  }\n\n  /* ------ 节点遍历 ------ */\n\n  // 获取包含自己在内所有的子节点\n  public walk(): TreeNode[] {\n    const { children } = this;\n    let list: TreeNode[] = [];\n    list.push(this);\n    if (Array.isArray(children) && children.length > 0) {\n      children.forEach((node) => {\n        list = list.concat(node.walk());\n      });\n    }\n    return list;\n  }\n\n  // TreeNode 对象 => TypeTreeNodeModel 对象\n  // 用于 treeNode 对外暴露的 api\n  // 经过封装的对象，减少了对外暴露的 api，利于代码重构\n  public getModel(): TypeTreeNodeModel {\n    let { model } = this;\n    if (!model) {\n      model = createNodeModel(this);\n      this.model = model;\n    }\n    updateNodeModel(model, this);\n    return model;\n  }\n}\n\nexport default TreeNode;\n"],"names":["toString","require$$0","idCounter","uniqueId","prefix","id","uniqueId_1","isNil","value","isNil_1","hasOwnProperty","Object","prototype","defaultStatus","expandMutex","activable","checkable","disabled","draggable","loading","TreeNode","tree","data","parent","config","keys","get","propChildren","children","propLabel","label","propValue","model","vmCheckable","vmIsLeaf","vmIsFirst","vmIsLast","vmIsRest","vmIsLocked","spec","actived","expanded","checked","set","nodeMap","level","visible","initActived","initExpanded","initChecked","update","reflow","Array","isArray","append","lazy","loadChildren","indeterminate","updateChecked","checkStrictly","isChecked","checkedMap","expandLevel","getLevel","expandedMap","expandAll","activedMap","list","push","length","forEach","item","node","appendTo","updateRelated","index","parentNode","targetIndex","targetParents","getParents","includeCurrent","some","pnode","Error","targetPosNode","siblings","prevLength","prevIndex","getIndex","remove","curLength","splice","nodes","walk","updateNodes","map","flat","getSiblings","sibling","newData","insert","clean","updateParents","_regeneratorRuntime","load","emit","key","call","updated","parents","indexOf","unshift","reverse","filterMap","rest","filter","nodeModel","getModel","filterVisible","isRest","expandVisible","every","isExpanded","treeDisabled","childIsChecked","childChecked","isIndeterminate","isLeaf","lockState","isVisible","setExpanded","opts","options","directly","Map","shouldExpandNodes","isExpandMutex","snode","afterExpanded","updateChildren","getExpanded","setActived","isActived","isActivable","activeMultiple","clear","getActived","setChecked","isCheckable","relatedNodes","getRelatedNodes","getChecked","isFirst","isLast","isFromValueChange","concat","createNodeModel","updateNodeModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,QAAQ,GAAGC,UAAf,CAAA;AAEA;;AACA,IAAIC,SAAS,GAAG,CAAhB,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;EACxB,IAAIC,EAAE,GAAG,EAAEH,SAAX,CAAA;AACA,EAAA,OAAOF,QAAQ,CAACI,MAAD,CAAR,GAAmBC,EAA1B,CAAA;AACD,CAAA;;AAED,IAAAC,UAAc,GAAGH,QAAjB;;;;;;;;;;;;;;;;;;;;;;;ACPA,SAASI,KAAT,CAAeC,KAAf,EAAsB;EACpB,OAAOA,KAAK,IAAI,IAAhB,CAAA;AACD,CAAA;;AAED,IAAAC,OAAc,GAAGF,KAAjB;;;;;ACNA,IAAQG,cAAR,GAA2BC,MAAO,CAAAC,SAAlC,CAAQF,cAAR,CAAA;AAEA,IAAMG,aAAgB,GAAA;AACpBC,EAAAA,WAAa,EAAA,KADO;AAEpBC,EAAAA,SAAW,EAAA,KAFS;AAGpBC,EAAAA,SAAW,EAAA,KAHS;AAIpBC,EAAAA,QAAU,EAAA,KAJU;AAKpBC,EAAAA,SAAW,EAAA,KALS;AAMpBC,EAAAA,OAAS,EAAA,KAAA;AANW,CAAtB,CAAA;AAWO,IAAMC,QAAN,gBAAA,YAAA;AA4EE,EAAA,SAAA,QAAA,CACLC,IADK,EAELC,IAFK,EAGLC,MAHK,EAIL;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;;IACA,IAAKD,CAAAA,IAAL,GAAYA,IAAZ,CAAA;IACA,IAAKD,CAAAA,IAAL,GAAYA,IAAZ,CAAA;AAEM,IAAA,IAAAG,MAAA,GAASH,IAAK,CAAAG,MAAL,IAAe,EAAxB,CAAA;AACA,IAAA,IAAApB,MAAA,GAASoB,OAAOpB,MAAP,IAAiB,GAA1B,CAAA;IACN,IAAMqB,IAAO,GAAAC,KAAA,CAAIL,IAAJ,EAAU,aAAV,CAAA,IAA4B,EAAzC,CAAA;AACM,IAAA,IAAAM,YAAA,GAAeF,KAAKG,QAAL,IAAiB,UAAhC,CAAA;AACA,IAAA,IAAAC,SAAA,GAAYJ,KAAKK,KAAL,IAAc,OAA1B,CAAA;AACA,IAAA,IAAAC,SAAA,GAAYN,KAAKjB,KAAL,IAAc,OAA1B,CAAA;IAEN,IAAKwB,CAAAA,KAAL,GAAa,IAAb,CAAA;IACA,IAAKJ,CAAAA,QAAL,GAAgB,IAAhB,CAAA;IACA,IAAKK,CAAAA,WAAL,GAAmB,KAAnB,CAAA;IACA,IAAKC,CAAAA,QAAL,GAAgB,KAAhB,CAAA;IACA,IAAKC,CAAAA,SAAL,GAAiB,KAAjB,CAAA;IACA,IAAKC,CAAAA,QAAL,GAAgB,KAAhB,CAAA;IACA,IAAKC,CAAAA,QAAL,GAAgB,IAAhB,CAAA;IACA,IAAKC,CAAAA,UAAL,GAAkB,KAAlB,CAAA;;IAEA,IAAMC,IAAO,mCACR1B,aADQ,CAAA,EAAA,EAAA,EAAA;AAEX2B,MAAAA,OAAS,EAAA,KAFE;AAGXC,MAAAA,QAAU,EAAA,KAHC;AAIXC,MAAAA,OAAS,EAAA,KAAA;AAJE,KAAA,EAKRpB,IALQ,CAAb,CAAA;;AAOA,IAAA,IAAMM,WAAWW,IAAK,CAAAZ,YAAA,CAAtB,CAAA;IAEA,IAAKgB,CAAAA,GAAL,CAASJ,IAAT,CAAA,CAAA;AACK,IAAA,IAAA,CAAAT,KAAA,GAAQS,KAAKV,UAAL,IAAmB,EAA3B,CAAA;AACA,IAAA,IAAA,CAAArB,KAAA,GAAQD,QAAMgC,IAAK,CAAAR,SAAA,EAAX,GAAyB5B,UAAS,CAAAC,MAAA,CAAlC,GAA4CmC,IAAK,CAAAR,SAAA,CAAzD,CAAA;IACL,IAAKV,CAAAA,IAAL,CAAUuB,OAAV,CAAkBD,GAAlB,CAAsB,IAAA,CAAKnC,KAA3B,EAAkC,IAAlC,CAAA,CAAA;;AAEI,IAAA,IAAAe,MAAA,IAAUA,kBAAkBH,QAA5B,EAAsC;MACxC,IAAKG,CAAAA,MAAL,GAAcA,MAAd,CAAA;AACK,KAFH,MAEG;MACL,IAAKA,CAAAA,MAAL,GAAc,IAAd,CAAA;AACF,KAAA;;IAIA,IAAIK,aAAa,IAAjB,EAAuB;MACrB,IAAKA,CAAAA,QAAL,GAAgBA,QAAhB,CAAA;AACF,KAAA;;IAGA,IAAKiB,CAAAA,KAAL,GAAa,CAAb,CAAA;IACA,IAAKC,CAAAA,OAAL,GAAe,IAAf,CAAA;AAEA,IAAA,IAAA,CAAKN,OAAL,GAAeD,IAAK,CAAAC,OAApB,CAAA;AACA,IAAA,IAAA,CAAKO,WAAL,EAAA,CAAA;AAEA,IAAA,IAAA,CAAKN,QAAL,GAAgBF,IAAK,CAAAE,QAArB,CAAA;AACA,IAAA,IAAA,CAAKO,YAAL,EAAA,CAAA;AAEA,IAAA,IAAA,CAAKN,OAAL,GAAeH,IAAK,CAAAG,OAApB,CAAA;AACA,IAAA,IAAA,CAAKO,WAAL,EAAA,CAAA;AAEA,IAAA,IAAA,CAAKC,MAAL,EAAA,CAAA;IACA7B,IAAA,CAAK8B,MAAL,CAAY,IAAZ,CAAA,CAAA;;AAII,IAAA,IAAAC,KAAA,CAAMC,OAAN,CAAczB,QAAd,CAAA,EAAyB;MAC3B,IAAK0B,CAAAA,MAAL,CAAY1B,QAAZ,CAAA,CAAA;KADE,MAEO,IAAAA,QAAA,KAAa,IAAb,IAAqB,CAACJ,OAAO+B,IAA7B,EAAmC;AAC5C,MAAA,IAAA,CAAKC,YAAL,EAAA,CAAA;AACF,KAAA;;IAIA,IAAKd,CAAAA,OAAL,GAAe,KAAf,CAAA;IACA,IAAKe,CAAAA,aAAL,GAAqB,KAArB,CAAA;AACA,IAAA,IAAA,CAAKC,aAAL,EAAA,CAAA;AACF,GAAA;;AA3JK,EAAA,YAAA,CAAA,QAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAgKE,SAAc,WAAA,GAAA;AACnB,MAAA,IAAQrC,IAAR,GAAgC,IAAhC,CAAQA,IAAR;AAAA,UAAcb,KAAd,GAAgC,IAAhC,CAAcA,KAAd;AAAA,UAAqBe,MAArB,GAAgC,IAAhC,CAAqBA,MAArB,CAAA;AACM,MAAA,IAAEoC,aAAF,GAAoBtC,IAAK,CAAAG,MAAzB,CAAEmC,aAAF,CAAA;AACF,MAAA,IAAEjB,OAAF,GAAc,IAAd,CAAEA,OAAF,CAAA;MACJA,OAAA,GAAUnB,MAAV,KAAUA,IAAAA,IAAAA,MAAV,uBAAUA,OAAQqC,SAAR,EAAV,CAAA;;AACI,MAAA,IAAAlB,OAAA,IAAW,CAACiB,aAAZ,EAA2B;AACxBtC,QAAAA,IAAA,CAAAwC,UAAA,CAAWlB,GAAX,CAAenC,KAAf,EAAsB,IAAtB,CAAA,CAAA;AACP,OAAA;;MACA,IAAKkC,CAAAA,OAAL,GAAeA,OAAf,CAAA;AACF,KAAA;AAzKK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EA4KE,SAAqB,YAAA,GAAA;AACpB,MAAA,IAAErB,IAAF,GAAW,IAAX,CAAEA,IAAF,CAAA;AACF,MAAA,IAAEoB,QAAF,GAAe,IAAf,CAAEA,QAAF,CAAA;AACE,MAAA,IAAEjB,MAAF,GAAaH,IAAb,CAAEG,MAAF,CAAA;;AAEJ,MAAA,IAAA,OAAOA,OAAOsC,WAAd,KAA8B,QAA9B,IACG,IAAA,CAAKC,QAAL,EAAA,GAAkBvC,OAAOsC,WAD5B,EAEA;QACAzC,IAAA,CAAK2C,WAAL,CAAiBrB,GAAjB,CAAqB,IAAKnC,CAAAA,KAA1B,EAAiC,IAAjC,CAAA,CAAA;AACWiC,QAAAA,QAAA,GAAA,IAAA,CAAA;AACb,OAAA;;MACA,IAAIjB,OAAOyC,SAAX,EAAsB;AACTxB,QAAAA,QAAA,GAAA,IAAA,CAAA;AACb,OAAA;;MACA,IAAI,IAAA,CAAKb,QAAL,KAAkB,IAAlB,IAA0BJ,MAAA,CAAO+B,IAArC,EAA2C;AAC9Bd,QAAAA,QAAA,GAAA,KAAA,CAAA;AACb,OAAA;;AACA,MAAA,IAAIA,QAAJ,EAAc;QACZpB,IAAA,CAAK2C,WAAL,CAAiBrB,GAAjB,CAAqB,IAAKnC,CAAAA,KAA1B,EAAiC,IAAjC,CAAA,CAAA;AACK,OAFP,MAEO;AACAa,QAAAA,IAAA,CAAA2C,WAAA,CAAmB,QAAA,CAAA,CAAA,IAAA,CAAKxD,KAAxB,CAAA,CAAA;AACP,OAAA;;MACA,IAAKiC,CAAAA,QAAL,GAAgBA,QAAhB,CAAA;AACF,KAAA;AAnMK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAsME,SAAoB,WAAA,GAAA;AACnB,MAAA,IAAEpB,IAAF,GAAoB,IAApB,CAAEA,IAAF;AAAA,UAAQmB,OAAR,GAAoB,IAApB,CAAQA,OAAR,CAAA;;AACN,MAAA,IAAIA,OAAJ,EAAa;QACXnB,IAAA,CAAK6C,UAAL,CAAgBvB,GAAhB,CAAoB,IAAKnC,CAAAA,KAAzB,EAAgC,IAAhC,CAAA,CAAA;AACF,OAAA;AACF,KAAA;AA3MK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;IAAA,KAgNE,EAAA,SAAA,MAAA,CAAOc,IAAP,EAA0D;AAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;;MAC/D,IAAM6C,OAAO,EAAb,CAAA;;AACA,MAAA,IAAI,CAACf,KAAA,CAAMC,OAAN,CAAc/B,IAAd,CAAL,EAA0B;QACxB6C,IAAA,CAAKC,IAAL,CAAU9C,IAAV,CAAA,CAAA;AACK,OAFP,MAEO;AACA6C,QAAAA,IAAA,CAAAC,IAAA,CAAA,KAAA,CAAAD,IAAA,EAAA,kBAAA,CAAQ7C,IAAR,CAAA,CAAA,CAAA;AACP,OAAA;;AACI,MAAA,IAAA6C,IAAA,CAAKE,MAAL,IAAe,CAAf,EAAkB;AACpB,QAAA,OAAA;AACF,OAAA;;MACA,IAAI,CAACjB,KAAA,CAAMC,OAAN,CAAc,IAAKzB,CAAAA,QAAnB,CAAL,EAAmC;QACjC,IAAKA,CAAAA,QAAL,GAAgB,EAAhB,CAAA;AACF,OAAA;;AACM,MAAA,IAAEA,QAAF,GAAqB,IAArB,CAAEA,QAAF;AAAA,UAAYP,IAAZ,GAAqB,IAArB,CAAYA,IAAZ,CAAA;AACD8C,MAAAA,IAAA,CAAAG,OAAA,CAAQ,UAACC,IAAD,EAAU;QACrB,IAAIC,IAAO,GAAA,IAAX,CAAA;;QACA,IAAID,gBAAgBnD,QAApB,EAA8B;AACrBoD,UAAAA,IAAA,GAAAD,IAAA,CAAA;AACFC,UAAAA,IAAA,CAAAC,QAAA,CAAS,KAAK,CAAApD,IAAd,EAAoB,KAApB,CAAA,CAAA;AACA,SAHP,MAGO;UACLmD,IAAA,GAAO,IAAIpD,QAAJ,CAAa,KAAK,CAAAC,IAAlB,EAAwBkD,IAAxB,EAA8B,KAA9B,CAAP,CAAA;UACA3C,QAAA,CAASwC,IAAT,CAAcI,IAAd,CAAA,CAAA;AACF,SAAA;OARG,CAAA,CAAA;MAULnD,IAAA,CAAK8B,MAAL,CAAY,IAAZ,CAAA,CAAA;AACA,MAAA,IAAA,CAAKuB,aAAL,EAAA,CAAA;AACF,KAAA;AA1OK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EA6OE,kBACLrD,IADK,EAELE,MAFK,EAGLoD,KAHK,EAIC;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;MACN,IAAMC,UAAa,GAAArD,MAAnB,CAAA;MACA,IAAIsD,WAAc,GAAA,CAAA,CAAlB,CAAA;;AACI,MAAA,IAAA,OAAOF,KAAP,KAAiB,QAAjB,EAA2B;AACfE,QAAAA,WAAA,GAAAF,KAAA,CAAA;AAChB,OAAA;;AAEA,MAAA,IAAMG,aAAgB,GAAA,CAAAF,UAAA,KAAA,IAAA,IAAAA,UAAA,KAAA,KAAA,CAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAA,CAAYG,UAAZ,OAA4B,EAAlD,CAAA;AACA,MAAA,IAAMC,iBAAiBF,aAAc,CAAAG,IAAd,CAAmB,UAACC,KAAD,EAAA;QAAA,OAAWA,UAAU,MAArB,CAAA;AAAA,OAAnB,CAAvB,CAAA;;AACA,MAAA,IAAIF,cAAJ,EAAoB;AACZ,QAAA,MAAA,IAAIG,KAAJ,CAAU,0EAAV,CAAA,CAAA;AACR,OAAA;;AAEA,MAAA,IAAI/B,KAAM,CAAAC,OAAN,CAAcuB,UAAd,KAAA,IAAA,IAAcA,UAAd,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAcA,UAAY,CAAAhD,QAA1B,CAAJ,EAAyC;QACjC,IAAAwD,aAAA,GAAgBR,UAAhB,KAAgBA,IAAAA,IAAAA,UAAhB,KAAgBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAYhD,QAAZ,CAAqBiD,WAArB,CAAhB,CAAA;;AACF,QAAA,IAAAO,aAAA,IAAiBA,kBAAkB,IAAnC,EAAyC;AAE3C,UAAA,OAAA;AACF,SAAA;AACF,OAAA;;MAIA,IAAIC,QAAW,GAAA,IAAf,CAAA;;MACA,IAAIT,sBAAsBxD,QAA1B,EAAoC;AAClC,QAAA,IAAI,CAACgC,KAAA,CAAMC,OAAN,CAAcuB,UAAd,KAAcA,IAAAA,IAAAA,UAAd,KAAcA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAA,CAAYhD,QAA1B,CAAL,EAA0C;UACxCgD,UAAA,CAAWhD,QAAX,GAAsB,EAAtB,CAAA;AACF,SAAA;;QACAyD,QAAA,GAAW9D,MAAO,CAAAK,QAAlB,CAAA;AACK,OALP,MAKO;QACLyD,QAAA,GAAWhE,IAAK,CAAAO,QAAhB,CAAA;AACF,OAAA;;AAEA,MAAA,IAAI,CAACwB,KAAA,CAAMC,OAAN,CAAcgC,QAAd,CAAL,EAA8B;AACtB,QAAA,MAAA,IAAIF,KAAJ,CAAU,gIAAV,CAAA,CAAA;AACR,OAAA;;AAEA,MAAA,IAAMG,aAAaD,QAAS,CAAAhB,MAA5B,CAAA;AACM,MAAA,IAAAkB,SAAA,GAAY,IAAKC,CAAAA,QAAL,EAAZ,CAAA;AAEN,MAAA,IAAA,CAAKC,MAAL,EAAA,CAAA;;AAEI,MAAA,IAAA,OAAOd,KAAP,KAAiB,QAAjB,EAA2B;QAC7B,IAAIE,YAAc,GAAAF,KAAlB,CAAA;;AACI,QAAA,IAAAC,UAAA,KAAe,IAAKrD,CAAAA,MAApB,EAA4B;AAI9B,UAAA,IAAMmE,YAAYL,QAAS,CAAAhB,MAA3B,CAAA;;AAEE,UAAA,IAAAqB,SAAA,GAAYJ,UAAZ,IACGC,SAAA,IAAaV,YADhB,EAEA;AACAA,YAAAA,YAAe,IAAA,CAAfA,CAAAA;AACF,WAAA;AACF,SAAA;;AACSQ,QAAAA,QAAA,CAAAM,MAAA,CAAOd,YAAP,EAAoB,CAApB,EAAuB,IAAvB,CAAA,CAAA;AACJ,OAfH,MAeG;QACLQ,QAAA,CAASjB,IAAT,CAAc,IAAd,CAAA,CAAA;AACF,OAAA;;MAEA,IAAK7C,CAAAA,MAAL,GAAcqD,UAAd,CAAA;AAIM,MAAA,IAAAgB,KAAA,GAAQ,IAAKC,CAAAA,IAAL,EAAR,CAAA;AACAD,MAAAA,KAAA,CAAAtB,OAAA,CAAQ,UAACC,IAAD,EAAU;QACtB,IAAMC,IAAO,GAAAD,IAAb,CAAA;QACAC,IAAA,CAAKnD,IAAL,GAAYA,IAAZ,CAAA;QACAA,IAAA,CAAKuB,OAAL,CAAaD,GAAb,CAAiB6B,IAAK,CAAAhE,KAAtB,EAA6BgE,IAA7B,CAAA,CAAA;;QACA,IAAIA,KAAK/B,QAAT,EAAmB;UACjBpB,IAAA,CAAK2C,WAAL,CAAiBrB,GAAjB,CAAqB6B,IAAK,CAAAhE,KAA1B,EAAiC,IAAjC,CAAA,CAAA;AACF,SAAA;OANI,CAAA,CAAA;MASN,IAAMsF,WAAc,GAAA,CAAAlB,UAAA,SAAA,IAAAA,UAAA,WAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAA,CAAYiB,IAAZ,EAAA,KAAsBxE,IAAK,CAAAO,QAAL,CAAcmE,GAAd,CAAkB,UAACxB,IAAD,EAAA;QAAA,OAAUA,IAAA,CAAKsB,IAAL,EAAV,CAAA;OAAlB,CAAA,CAAyCG,IAAzC,EAA1C,CAAA;AACYF,MAAAA,WAAA,CAAAxB,OAAA,CAAQ,UAACE,IAAD,EAAU;AAC5BA,QAAAA,IAAA,CAAKtB,MAAL,EAAA,CAAA;AACAsB,QAAAA,IAAA,CAAKd,aAAL,EAAA,CAAA;OAFU,CAAA,CAAA;AAKZrC,MAAAA,IAAA,CAAK8B,MAAL,EAAA,CAAA;AACF,KAAA;AAnUK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAsUE,SACLoB,MAAAA,CAAAA,IADK,EAELI,KAFK,EAGC;AACA,MAAA,IAAEtD,IAAF,GAAmB,IAAnB,CAAEA,IAAF;AAAA,UAAQE,MAAR,GAAmB,IAAnB,CAAQA,MAAR,CAAA;AACA,MAAA,IAAA8D,QAAA,GAAW,IAAKY,CAAAA,WAAL,EAAX,CAAA;MACN,IAAIzB,IAAO,GAAA,IAAX,CAAA;;MACA,IAAID,gBAAgBnD,QAApB,EAA8B;AACrBoD,QAAAA,IAAA,GAAAD,IAAA,CAAA;AACFC,QAAAA,IAAA,CAAAC,QAAA,CAASpD,IAAT,EAAeE,MAAf,EAAuBoD,KAAvB,CAAA,CAAA;OAFP,UAGWJ,MAAM;QACfC,IAAA,GAAO,IAAIpD,QAAJ,CAAaC,IAAb,EAAmBkD,IAAnB,EAAyBhD,MAAzB,CAAP,CAAA;;AACI,QAAA,IAAA,OAAOoD,KAAP,KAAiB,QAAjB,EAA2B;AACpBU,UAAAA,QAAA,CAAAM,MAAA,CAAOhB,KAAP,EAAc,CAAd,EAAiBH,IAAjB,CAAA,CAAA;AACX,SAAA;;AACSa,QAAAA,QAAA,CAAAf,OAAA,CAAQ,UAAC4B,OAAD,EAAa;AAC5BA,UAAAA,OAAA,CAAQhD,MAAR,EAAA,CAAA;SADO,CAAA,CAAA;AAGX,OAAA;;AACA7B,MAAAA,IAAA,CAAK8B,MAAL,EAAA,CAAA;AACF,KAAA;AA1VK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;IAAA,KA6VE,EAAA,SAAA,YAAA,CAAagD,OAAb,EAA0C;AACzC,MAAA,IAAAxB,KAAA,GAAQ,IAAKa,CAAAA,QAAL,EAAR,CAAA;AACD,MAAA,IAAA,CAAAY,MAAA,CAAOD,OAAP,EAAgBxB,KAAhB,CAAA,CAAA;AACP,KAAA;AAhWK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;IAAA,KAmWE,EAAA,SAAA,WAAA,CAAYwB,OAAZ,EAAyC;AACxC,MAAA,IAAAxB,KAAA,GAAQ,IAAKa,CAAAA,QAAL,EAAR,CAAA;AACD,MAAA,IAAA,CAAAY,MAAA,CAAOD,OAAP,EAAgBxB,KAAA,GAAQ,CAAxB,CAAA,CAAA;AACP,KAAA;AAtWK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAyWE,SAAe,MAAA,GAAA;AACd,MAAA,IAAEtD,IAAF,GAAW,IAAX,CAAEA,IAAF,CAAA;AAEA,MAAA,IAAAuE,KAAA,GAAQ,IAAKC,CAAAA,IAAL,EAAR,CAAA;AACA,MAAA,IAAAR,QAAA,GAAW,IAAKY,CAAAA,WAAL,EAAX,CAAA;AACA,MAAA,IAAAtB,KAAA,GAAQ,IAAKa,CAAAA,QAAL,EAAR,CAAA;;AAGF,MAAA,IAAApC,KAAA,CAAMC,OAAN,CAAcgC,QAAd,CAAA,EAAyB;AAClBA,QAAAA,QAAA,CAAAM,MAAA,CAAOhB,KAAP,EAAc,CAAd,CAAA,CAAA;AACX,OAAA;;AAEMiB,MAAAA,KAAA,CAAAtB,OAAA,CAAQ,UAACE,IAAD,EAAU;AACtBA,QAAAA,IAAA,CAAK6B,KAAL,EAAA,CAAA;OADI,CAAA,CAAA;AAIGhB,MAAAA,QAAA,CAAAf,OAAA,CAAQ,UAACE,IAAD,EAAU;AACzBA,QAAAA,IAAA,CAAKtB,MAAL,EAAA,CAAA;OADO,CAAA,CAAA;AAIT,MAAA,IAAA,CAAKoD,aAAL,EAAA,CAAA;AACAjF,MAAAA,IAAA,CAAK8B,MAAL,EAAA,CAAA;AACF,KAAA;AA/XK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA,EAkYE,SAAc,KAAA,GAAA;AACb,MAAA,IAAE9B,IAAF,GAAkB,IAAlB,CAAEA,IAAF;AAAA,UAAQb,KAAR,GAAkB,IAAlB,CAAQA,KAAR,CAAA;MACDa,IAAA,CAAA6C,UAAA,CAAA,QAAA,CAAA,CAAkB1D,KAAlB,CAAA,CAAA;MACAa,IAAA,CAAAwC,UAAA,CAAA,QAAA,CAAA,CAAkBrD,KAAlB,CAAA,CAAA;MACAa,IAAA,CAAA2C,WAAA,CAAA,QAAA,CAAA,CAAmBxD,KAAnB,CAAA,CAAA;MACAa,IAAA,CAAAuB,OAAA,CAAA,QAAA,CAAA,CAAepC,KAAf,CAAA,CAAA;AACP,KAAA;AAxYK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EAAA,YAAA;MAAA,IA2YL,aAAA,GAAA,iBAAA,eAAA+F,WAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,QAAA,IAAA,MAAA,EAAA,IAAA,CAAA;AAAA,QAAA,OAAAA,WAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,UAAA,OAAA,CAAA,EAAA;AAAA,YAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,cAAA,KAAA,CAAA;gBACQ/E,MADR,GACiBE,KAAA,CAAI,IAAJ,EAAU,aAAV,CAAA,IAA4B,EAD7C,CAAA;;AAAA,gBAAA,IAAA,EAEM,KAAKE,QAAL,KAAkB,IAAlB,IAA0B,CAAC,KAAKT,OAFtC,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;;AAAA,gBAAA,IAAA,EAGQ,OAAOK,MAAO,CAAAgF,IAAd,KAAuB,UAH/B,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;;gBAIM,IAAKrF,CAAAA,OAAL,GAAe,IAAf,CAAA;AACA,gBAAA,IAAA,CAAK+B,MAAL,EAAA,CAAA;AACIiB,gBAAAA,IANV,GAMiB,EANjB,CAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAOmB3C,MAAO,CAAAgF,IAAP,CAAY,IAAZ,CAPnB,CAAA;;AAAA,cAAA,KAAA,CAAA;gBAOarC,IAPb,GAAA,QAAA,CAAA,IAAA,CAAA;AAQW,gBAAA,IAAA,CAAA9C,IAAA,CAAKoF,IAAL,CAAU,MAAV,EAAkB;AACrBjC,kBAAAA,IAAM,EAAA,IADe;AAErBlD,kBAAAA,IAAM,EAAA6C,IAAAA;iBAFH,CAAA,CAAA;gBAIL,IAAKhD,CAAAA,OAAL,GAAe,KAAf,CAAA;;gBACA,IAAIiC,MAAMC,OAAN,CAAcc,IAAd,CAAuBA,IAAAA,IAAA,CAAKE,MAAL,GAAc,CAAzC,EAA4C;kBAC1C,IAAKf,CAAAA,MAAL,CAAYa,IAAZ,CAAA,CAAA;AACK,iBAFP,MAEO;kBACL,IAAKvC,CAAAA,QAAL,GAAgB,KAAhB,CAAA;AACF,iBAAA;;AACA,gBAAA,IAAA,CAAKsB,MAAL,EAAA,CAAA;;AAlBN,cAAA,KAAA,EAAA,CAAA;AAAA,cAAA,KAAA,KAAA;AAAA,gBAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA;AAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA;OA3YK,CAAA,CAAA,CAAA;;AAAA,MAAA,SAAA,YAAA,GAAA;AAAA,QAAA,OAAA,aAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,OAAA;;AAAA,MAAA,OAAA,YAAA,CAAA;AAAA,KAAA,EAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,KAAA;IAAA,KAmaE,EAAA,SAAA,GAAA,CAAIqB,IAAJ,EAA+B;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;AAC9B,MAAA,IAAElD,IAAF,GAAW,IAAX,CAAEA,IAAF,CAAA;AACA,MAAA,IAAAI,IAAA,GAAOd,MAAO,CAAAc,IAAP,CAAY8C,IAAZ,CAAP,CAAA;AACD9C,MAAAA,IAAA,CAAA6C,OAAA,CAAQ,UAACoC,GAAD,EAAS;QACpB,IAAIhG,eAAeiG,IAAf,CAAoB9F,aAApB,EAAmC6F,GAAnC,CAA2CA,IAAAA,QAAQ,OAAvD,EAAgE;AAC9D,UAAA,MAAA,CAAKA,GAAL,CAAA,GAAYnC,IAAK,CAAAmC,GAAA,CAAjB,CAAA;AACF,SAAA;OAHG,CAAA,CAAA;MAKLrF,IAAA,CAAKuF,OAAL,CAAa,IAAb,CAAA,CAAA;AACF,KAAA;AA5aK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,WAAA;AAAA,IAAA,KAAA,EAibE,SAAsB,SAAA,GAAA;AAC3B,MAAA,OAAO,KAAKrF,MAAZ,CAAA;AACF,KAAA;AAnbK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;AAAA,IAAA,KAAA,EAsbE,SAAyB,UAAA,GAAA;MAC9B,IAAMsF,UAAU,EAAhB,CAAA;MACA,IAAIrC,OAAO,IAAA,CAAKjD,MAAhB,CAAA;;AACA,MAAA,OAAOiD,IAAP,EAAa;QACXqC,OAAA,CAAQzC,IAAR,CAAaI,IAAb,CAAA,CAAA;QACAA,IAAA,GAAOA,IAAK,CAAAjD,MAAZ,CAAA;AACF,OAAA;;AACO,MAAA,OAAAsF,OAAA,CAAA;AACT,KAAA;AA9bK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAicE,SAA0B,WAAA,GAAA;AACzB,MAAA,IAAEtF,MAAF,GAAmB,IAAnB,CAAEA,MAAF;AAAA,UAAUF,IAAV,GAAmB,IAAnB,CAAUA,IAAV,CAAA;MACN,IAAI8C,OAAmB,EAAvB,CAAA;;AACA,MAAA,IAAI5C,MAAJ,EAAY;QACV,IAAI6B,KAAM,CAAAC,OAAN,CAAc9B,MAAO,CAAAK,QAArB,CAAJ,EAAoC;UAClCuC,IAAA,GAAO5C,MAAO,CAAAK,QAAd,CAAA;AACF,SAAA;OAHF,UAIWP,MAAM;QACf8C,IAAA,GAAO9C,IAAK,CAAAO,QAAZ,CAAA;AACF,OAAA;;AACO,MAAA,OAAAuC,IAAA,CAAA;AACT,KAAA;AA5cK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,KAAA,EA+cE,SAAoB,OAAA,GAAA;AACnB,MAAA,IAAA0C,OAAA,GAAU,IAAK9B,CAAAA,UAAL,EAAV,CAAA;MACC,OAAA8B,OAAA,CAAQA,OAAQ,CAAAxC,MAAR,GAAiB,CAAzB,CAAA,IAA+B,IAA/B,CAAA;AACT,KAAA;AAldK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAsdE,SAAmB,QAAA,GAAA;AAClB,MAAA,IAAAF,IAAA,GAAO,IAAK8B,CAAAA,WAAL,EAAP,CAAA;AACC,MAAA,OAAA9B,IAAA,CAAK2C,OAAL,CAAa,IAAb,CAAA,CAAA;AACT,KAAA;AAzdK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,KAAA,EA4dE,SAAsB,OAAA,GAAA;AACrB,MAAA,IAAAlB,KAAA,GAAQ,IAAKb,CAAAA,UAAL,EAAR,CAAA;MACNa,KAAA,CAAMmB,OAAN,CAAc,IAAd,CAAA,CAAA;MACA,OAAOnB,MAAMoB,OAAN,EAAP,CAAA;AACF,KAAA;AAheK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAmeE,SAAmB,QAAA,GAAA;AAClB,MAAA,IAAAH,OAAA,GAAU,IAAK9B,CAAAA,UAAL,EAAV,CAAA;MACN,OAAO8B,OAAQ,CAAAxC,MAAf,CAAA;AACF,KAAA;AAteK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EA2eE,SAAkB,MAAA,GAAA;AACjB,MAAA,IAAA,UAAA,GAGF,KAAKhD,IAHH;UACJG,MADI,cACJA,MADI;UAEJyF,SAFI,cAEJA,SAFI,CAAA;MAKN,IAAIC,IAAO,GAAA,IAAX,CAAA;;AACI,MAAA,IAAA,OAAO1F,MAAO,CAAA2F,MAAd,KAAyB,UAAzB,EAAqC;AACjC,QAAA,IAAAC,SAAA,GAAY,IAAKC,CAAAA,QAAL,EAAZ,CAAA;AACCH,QAAAA,IAAA,GAAA1F,MAAA,CAAO2F,MAAP,CAAcC,SAAd,CAAA,CAAA;AACT,OAAA;;AAEA,MAAA,IAAIF,IAAJ,EAAU;AACED,QAAAA,SAAA,CAAAtE,GAAA,CAAI,IAAKnC,CAAAA,KAAT,EAAgB,IAAhB,CAAA,CAAA;OADZ,MAEW,IAAAyG,SAAA,CAAUvF,GAAV,CAAc,IAAA,CAAKlB,KAAnB,CAAA,EAA2B;QAC1ByG,SAAA,CAAA,QAAA,CAAA,CAAO,IAAA,CAAKzG,KAAZ,CAAA,CAAA;AACZ,OAAA;;AAEO,MAAA,OAAA0G,IAAA,CAAA;AACT,KAAA;AA9fK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,WAAA;AAAA,IAAA,KAAA,EAigBE,SAAqB,SAAA,GAAA;AACpB,MAAA,IACJtE,OADI,GAEF,IAAKvB,CAAAA,IAFH,CACJuB,OADI,CAAA;MAIN,IAAIE,OAAU,GAAA,IAAd,CAAA;;MAGA,IAAI,IAAA,CAAKR,UAAT,EAAqB;AACZ,QAAA,OAAA,IAAA,CAAA;AACT,OAAA;;AAGA,MAAA,IAAIM,OAAQ,CAAAlB,GAAR,CAAY,IAAKlB,CAAAA,KAAjB,CAAJ,EAA6B;AAErB,QAAA,IAAA8G,aAAA,GAAgB,IAAKC,CAAAA,MAAL,EAAhB,CAAA;QAGN,IAAIC,aAAgB,GAAA,IAApB,CAAA;AACM,QAAA,IAAAX,OAAA,GAAU,IAAK9B,CAAAA,UAAL,EAAV,CAAA;;AACF,QAAA,IAAA8B,OAAA,CAAQxC,MAAR,GAAiB,CAAjB,EAAoB;AACtBmD,UAAAA,aAAA,GAAgBX,QAAQY,KAAR,CAAc,UAACjD,IAAD,EAAA;YAAA,OAAoBA,IAAA,CAAKkD,UAAL,EAApB,CAAA;AAAA,WAAd,CAAhB,CAAA;AACF,SAAA;;QAGA5E,OAAA,GAAU0E,aAAiB,IAAAF,aAA3B,CAAA;AACK,OAbP,MAaO;AACKxE,QAAAA,OAAA,GAAA,KAAA,CAAA;AACZ,OAAA;;AACO,MAAA,OAAAA,OAAA,CAAA;AACT,KAAA;AA/hBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;AAAA,IAAA,KAAA,EAkiBE,SAAa,UAAA,GAAA;AAClB,MAAA,IAAI,IAAKR,CAAAA,UAAT,EAA4B,OAAA,IAAA,CAAA;AACtB,MAAA,IAAAqF,YAAA,GAAejG,KAAI,CAAA,IAAA,EAAM,sBAAN,CAAnB,CAAA;AACC,MAAA,OAAA,CAAC,EAAEiG,YAAA,IAAgB,IAAA,CAAK1G,QAAvB,CAAD,CAAA;AACT,KAAA;AAtiBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAyiBE,SAAc,WAAA,GAAA;MACnB,OAAO,CAAC,EAAES,KAAA,CAAI,IAAJ,EAAU,uBAAV,CAAA,IAAsC,IAAKR,CAAAA,SAA7C,CAAR,CAAA;AACF,KAAA;AA3iBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EA8iBE,SAAgB,aAAA,GAAA;MACrB,OAAO,CAAC,EAAEQ,KAAA,CAAI,IAAJ,EAAU,yBAAV,CAAA,IAAwC,IAAKZ,CAAAA,WAA/C,CAAR,CAAA;AACF,KAAA;AAhjBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAmjBE,SAAc,WAAA,GAAA;MACnB,OAAO,CAAC,EAAEY,KAAA,CAAI,IAAJ,EAAU,uBAAV,CAAA,IAAsC,IAAKX,CAAAA,SAA7C,CAAR,CAAA;AACF,KAAA;AArjBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAwjBE,SAAc,WAAA,GAAA;MACnB,OAAO,CAAC,EAAEW,KAAA,CAAI,IAAJ,EAAU,uBAAV,CAAA,IAAsC,IAAKV,CAAAA,SAA7C,CAAR,CAAA;AACF,KAAA;AA1jBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,WAAA;IAAA,KA6jBE,EAAA,SAAA,SAAA,CAAU+E,GAAV,EAA+C;AAC9C,MAAA,IAAE1E,IAAF,GAAkB,IAAlB,CAAEA,IAAF;AAAA,UAAQb,KAAR,GAAkB,IAAlB,CAAQA,KAAR,CAAA;AACA,MAAA,IAAA0D,UAAA,GAAa6B,OAAO1E,IAAK,CAAA6C,UAAzB,CAAA;AACC,MAAA,OAAA,CAAC,EAAE7C,IAAK,CAAAuB,OAAL,CAAalB,GAAb,CAAiBlB,KAAjB,CAAA,IAA2B0D,UAAW,CAAAxC,GAAX,CAAelB,KAAf,CAA7B,CAAD,CAAA;AACT,KAAA;AAjkBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;IAAA,KAokBE,EAAA,SAAA,UAAA,CAAWuF,GAAX,EAAgD;AACrD,MAAA,IAAQ1E,IAAR,GAAoC,IAApC,CAAQA,IAAR;AAAA,UAAcb,KAAd,GAAoC,IAApC,CAAcA,KAAd;AAAA,UAAqB8B,UAArB,GAAoC,IAApC,CAAqBA,UAArB,CAAA;MACI,IAAAA,UAAA,EAAmB,OAAA,IAAA,CAAA;AACjB,MAAA,IAAA0B,WAAA,GAAc+B,OAAO1E,IAAK,CAAA2C,WAA1B,CAAA;AACC,MAAA,OAAA,CAAC,EAAE3C,IAAK,CAAAuB,OAAL,CAAalB,GAAb,CAAiBlB,KAAjB,CAAA,IAA2BwD,WAAY,CAAAtC,GAAZ,CAAgBlB,KAAhB,CAA7B,CAAD,CAAA;AACT,KAAA;AAzkBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,WAAA;IAAA,KA6kBE,EAAA,SAAA,SAAA,CAAUuF,GAAV,EAAoC;AACnC,MAAA,IAAEnE,QAAF,GAAqB,IAArB,CAAEA,QAAF;AAAA,UAAYP,IAAZ,GAAqB,IAArB,CAAYA,IAAZ,CAAA;AACA,MAAA,IAAEsC,aAAF,GAAoBtC,IAAK,CAAAG,MAAzB,CAAEmC,aAAF,CAAA;MACN,IAAIjB,OAAU,GAAA,KAAd,CAAA;AACM,MAAA,IAAAmB,UAAA,GAAakC,OAAO1E,IAAK,CAAAwC,UAAzB,CAAA;;MACN,IAAIxC,IAAK,CAAAuB,OAAL,CAAalB,GAAb,CAAiB,IAAA,CAAKlB,KAAtB,CAAJ,EAAkC;AAChC,QAAA,IAAIqD,UAAW,CAAAnC,GAAX,CAAe,IAAKlB,CAAAA,KAApB,CAAJ,EAAgC;AAEpBkC,UAAAA,OAAA,GAAA,IAAA,CAAA;AACZ,SAHA,MAGA,IACEU,MAAMC,OAAN,CAAczB,QAAd,CAAA,IACGA,QAAS,CAAAyC,MAAT,GAAkB,CADrB,IAEG,CAACV,aAHN,EAIE;AAEUjB,UAAAA,OAAA,GAAAd,QAAA,CAAS6F,KAAT,CAAe,UAACjD,IAAD,EAAU;AAC3B,YAAA,IAAAoD,cAAA,GAAiBpD,IAAK,CAAAZ,SAAL,CAAeC,UAAf,CAAjB,CAAA;AACC,YAAA,OAAA+D,cAAA,CAAA;AACR,WAHS,CAAA,CAAA;AAIZ,SAVA,MAUA,IAAW,CAACjE,aAAZ,EAA2B;AAGnB,UAAA,IAAAkD,OAAA,GAAU,IAAK9B,CAAAA,UAAL,EAAV,CAAA;AACIrC,UAAAA,OAAA,GAAAmE,OAAA,CAAQ5B,IAAR,CAAa,UAACT,IAAD,EAAA;AAAA,YAAA,OAAUX,WAAWnC,GAAX,CAAe8C,IAAA,CAAKhE,KAApB,CAAV,CAAA;AAAA,WAAb,CAAA,CAAA;AACZ,SAAA;AACF,OAAA;;MACA,OAAO,CAAC,CAACkC,OAAT,CAAA;AACF,KAAA;AAxmBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,iBAAA;AAAA,IAAA,KAAA,EA2mBE,SAA2B,eAAA,GAAA;AAC1B,MAAA,IAAEd,QAAF,GAAqB,IAArB,CAAEA,QAAF;AAAA,UAAYP,IAAZ,GAAqB,IAArB,CAAYA,IAAZ,CAAA;AACA,MAAA,IAAEsC,aAAF,GAAoBtC,IAAK,CAAAG,MAAzB,CAAEmC,aAAF,CAAA;;AACN,MAAA,IAAIA,aAAJ,EAAmB;AACV,QAAA,OAAA,KAAA,CAAA;AACT,OAAA;;MACA,IAAIF,aAAgB,GAAA,KAApB,CAAA;;AACI,MAAA,IAAAL,KAAA,CAAMC,OAAN,CAAczB,QAAd,CAAA,EAAyB;QAE3B,IAAIiG,YAA+B,GAAA,IAAnC,CAAA;AACgBpE,QAAAA,aAAA,GAAA7B,QAAA,CAASqD,IAAT,CAAc,UAACT,IAAD,EAAoB;AAC5C,UAAA,IAAAA,IAAA,CAAKsD,eAAL,EAAA,EAAwB;AAEnB,YAAA,OAAA,IAAA,CAAA;AACT,WAAA;;UACA,IAAID,iBAAiB,IAArB,EAA2B;AACzBA,YAAAA,YAAA,GAAerD,KAAKZ,SAAL,EAAf,CAAA;AACF,WAAA;;AACI,UAAA,IAAAiE,YAAA,KAAiBrD,IAAK,CAAAZ,SAAL,EAAjB,EAAmC;AAE9B,YAAA,OAAA,IAAA,CAAA;AACT,WAAA;;AACO,UAAA,OAAA,KAAA,CAAA;AACR,SAbe,CAAA,CAAA;AAclB,OAAA;;AACO,MAAA,OAAAH,aAAA,CAAA;AACT,KAAA;AAroBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,KAAA,EAuoBE,SAAmB,OAAA,GAAA;AAClB,MAAA,IAAA4B,QAAA,GAAW,IAAKY,CAAAA,WAAL,EAAX,CAAA;AACN,MAAA,OAAOZ,SAAS,EAAT,KAAgB,IAAvB,CAAA;AACF,KAAA;AA1oBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EA4oBE,SAAkB,MAAA,GAAA;AACjB,MAAA,IAAAA,QAAA,GAAW,IAAKY,CAAAA,WAAL,EAAX,CAAA;MACC,OAAAZ,QAAA,CAASA,QAAS,CAAAhB,MAAT,GAAkB,CAA3B,CAAA,KAAkC,IAAlC,CAAA;AACT,KAAA;AA/oBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAkpBE,SAAkB,MAAA,GAAA;MACvB,IAAI0D,MAAS,GAAA,KAAb,CAAA;;AACA,MAAA,IAAI3E,KAAM,CAAAC,OAAN,CAAc,IAAKzB,CAAAA,QAAnB,CAAJ,EAAkC;AACvBmG,QAAAA,MAAA,GAAA,IAAKnG,CAAAA,QAAL,CAAcyC,MAAd,IAAwB,CAAxB,CAAA;AACJ,OAFP,MAEO;QACL0D,MAAA,GAAS,CAAC,IAAA,CAAKnG,QAAf,CAAA;AACF,OAAA;;AACO,MAAA,OAAAmG,MAAA,CAAA;AACT,KAAA;AA1pBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;IAAA,KAgqBE,EAAA,SAAA,IAAA,CAAKC,SAAL,EAA+B;MACpC,IAAK1F,CAAAA,UAAL,GAAkB0F,SAAlB,CAAA;AACK,MAAA,IAAA,CAAAvF,QAAA,GAAW,IAAKiF,CAAAA,UAAL,EAAX,CAAA;AACA,MAAA,IAAA,CAAA5E,OAAA,GAAU,IAAKmF,CAAAA,SAAL,EAAV,CAAA;AACP,KAAA;AApqBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAuqBE,SAAsB,aAAA,GAAA;AAC3B,MAAA,IAAA,CAAK/E,MAAL,EAAA,CAAA;;AAEA,MAAA,IAAI,KAAKT,QAAL,IAAiB,KAAKb,QAAL,KAAkB,IAAvC,EAA6C;AAC3C,QAAA,IAAA,CAAK4B,YAAL,EAAA,CAAA;AACF,OAAA;AACF,KAAA;AA7qBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,gBAAA;AAAA,IAAA,KAAA,EAgrBE,SAAkC,cAAA,GAAA;AACvC,MAAA,OAAO,KAAK0E,WAAL,CAAiB,CAAC,IAAKR,CAAAA,UAAL,EAAlB,CAAP,CAAA;AACF,KAAA;AAlrBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAqrBE,SAAYjF,WAAAA,CAAAA,QAAZ,EAA+B0F,IAA/B,EAA2E;AAC1E,MAAA,IAAE9G,IAAF,GAAW,IAAX,CAAEA,IAAF,CAAA;;AACN,MAAA,IAAM+G,OAAU,GAAA,aAAA,CAAA;AACdC,QAAAA,QAAU,EAAA,KAAA;AADI,OAAA,EAEXF,IAFW,CAAhB,CAAA;;AAKA,MAAA,IAAIpC,MAAM1E,IAAK,CAAA2C,WAAf,CAAA;;AACI,MAAA,IAAA,CAACoE,QAAQC,QAAT,EAAmB;AACftC,QAAAA,GAAA,GAAA,IAAIuC,GAAJ,CAAQjH,IAAA,CAAK2C,WAAb,CAAA,CAAA;AACR,OAAA;;AAGA,MAAA,IAAIvB,QAAJ,EAAc;QACZ,IAAM8F,oBAAoB,EAA1B,CAAA;QACAA,iBAAA,CAAkBnE,IAAlB,CAAuB,IAAvB,CAAA,CAAA;;AACI,QAAA,IAAA1C,KAAA,CAAIL,IAAJ,EAAU,qBAAV,CAAA,EAAkC;AACpC,UAAA,IAAA,CAAK0D,UAAL,EAAkBT,CAAAA,OAAlB,CAA0B,UAACE,IAAD,EAAU;YAClC+D,iBAAA,CAAkBnE,IAAlB,CAAuBI,IAAvB,CAAA,CAAA;WADF,CAAA,CAAA;AAGF,SAAA;;AACkB+D,QAAAA,iBAAA,CAAAjE,OAAA,CAAQ,UAACE,IAAD,EAAU;UAClC,IAAIgE,aAAgB,GAAA,KAApB,CAAA;;UACA,IAAIhE,KAAKjD,MAAT,EAAiB;AACCiH,YAAAA,aAAA,GAAAhE,IAAA,CAAKjD,MAAL,CAAYiH,aAAZ,EAAA,CAAA;AACX,WAFP,MAEO;AAAA,YAAA,IAAA,YAAA,CAAA;;YACLA,aAAA,GAAgBnH,IAAhB,KAAA,IAAA,IAAgBA,IAAhB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,YAAA,GAAgBA,KAAMG,MAAtB,MAAgB,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAcV,WAA9B,CAAA;AACF,WAAA;;AACA,UAAA,IAAI0H,aAAJ,EAAmB;AACX,YAAA,IAAAnD,QAAA,GAAWb,KAAKyB,WAAL,EAAX,CAAA;AACGZ,YAAAA,QAAA,CAAAf,OAAA,CAAQ,UAACmE,KAAD,EAAW;AACtB1C,cAAAA,GAAA,CAAA,QAAA,CAAA,CAAO0C,MAAMjI,KAAb,CAAA,CAAA;aADG,CAAA,CAAA;AAGX,WAAA;;AACIuF,UAAAA,GAAA,CAAApD,GAAA,CAAI6B,IAAK,CAAAhE,KAAT,EAAgB,IAAhB,CAAA,CAAA;SAbY,CAAA,CAAA;AAeb,OAvBP,MAuBO;QACDuF,GAAA,CAAA,QAAA,CAAA,CAAO,IAAA,CAAKvF,KAAZ,CAAA,CAAA;AACN,OAAA;;MAEA,IAAI4H,QAAQC,QAAZ,EAAsB;AACpB,QAAA,IAAA,CAAKK,aAAL,EAAA,CAAA;AACA,QAAA,IAAA,CAAKxF,MAAL,EAAA,CAAA;AACA,QAAA,IAAA,CAAKyF,cAAL,EAAA,CAAA;AACF,OAAA;;AAEO,MAAA,OAAAtH,IAAA,CAAKuH,WAAL,CAAiB7C,GAAjB,CAAA,CAAA;AACT,KAAA;AApuBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAuuBE,SAAiC,aAAA,GAAA;AACtC,MAAA,OAAO,KAAK8C,UAAL,CAAgB,CAAC,IAAKC,CAAAA,SAAL,EAAjB,CAAP,CAAA;AACF,KAAA;AAzuBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;AAAA,IAAA,KAAA,EA4uBE,SAAWtG,UAAAA,CAAAA,OAAX,EAA6B2F,IAA7B,EAAyE;AACxE,MAAA,IAAE9G,IAAF,GAAW,IAAX,CAAEA,IAAF,CAAA;;AACN,MAAA,IAAM+G,OAAU,GAAA,aAAA,CAAA;AACdC,QAAAA,QAAU,EAAA,KAAA;AADI,OAAA,EAEXF,IAFW,CAAhB,CAAA;;AAIM,MAAA,IAAA3G,MAAA,GAASH,IAAK,CAAAG,MAAL,IAAe,EAAxB,CAAA;AACN,MAAA,IAAIuE,MAAM1E,IAAK,CAAA6C,UAAf,CAAA;;AACI,MAAA,IAAA,CAACkE,QAAQC,QAAT,EAAmB;AACftC,QAAAA,GAAA,GAAA,IAAIuC,GAAJ,CAAQjH,IAAA,CAAK6C,UAAb,CAAA,CAAA;AACR,OAAA;;MACI,IAAA,IAAA,CAAK6E,WAAL,EAAA,EAAoB;AACtB,QAAA,IAAIvG,OAAJ,EAAa;AACP,UAAA,IAAA,CAAChB,OAAOwH,cAAR,EAAwB;AAC1BjD,YAAAA,GAAA,CAAIkD,KAAJ,EAAA,CAAA;AACF,WAAA;;AACIlD,UAAAA,GAAA,CAAApD,GAAA,CAAI,IAAKnC,CAAAA,KAAT,EAAgB,IAAhB,CAAA,CAAA;AACC,SALP,MAKO;UACDuF,GAAA,CAAA,QAAA,CAAA,CAAO,IAAA,CAAKvF,KAAZ,CAAA,CAAA;AACN,SAAA;AACF,OAAA;;MACA,IAAI4H,QAAQC,QAAZ,EAAsB;AACpB,QAAA,IAAA,CAAKnF,MAAL,EAAA,CAAA;AACF,OAAA;;AACO,MAAA,OAAA7B,IAAA,CAAK6H,UAAL,CAAgBnD,GAAhB,CAAA,CAAA;AACT,KAAA;AArwBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAwwBE,SAAiC,aAAA,GAAA;AACtC,MAAA,OAAO,KAAKoD,UAAL,CAAgB,CAAC,IAAKvF,CAAAA,SAAL,EAAjB,CAAP,CAAA;AACF,KAAA;AA1wBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;AAAA,IAAA,KAAA,EA8wBE,SAAWlB,UAAAA,CAAAA,OAAX,EAA6ByF,IAA7B,EAAyE;AACxE,MAAA,IAAE9G,IAAF,GAAW,IAAX,CAAEA,IAAF,CAAA;AACA,MAAA,IAAAG,MAAA,GAASH,IAAK,CAAAG,MAAL,IAAe,EAAxB,CAAA;;AACN,MAAA,IAAM4G,OAAU,GAAA,aAAA,CAAA;AACdC,QAAAA,QAAU,EAAA,KAAA;AADI,OAAA,EAEXF,IAFW,CAAhB,CAAA;;AAIA,MAAA,IAAIpC,MAAM1E,IAAK,CAAAwC,UAAf,CAAA;;AACI,MAAA,IAAA,CAACuE,QAAQC,QAAT,EAAmB;AACftC,QAAAA,GAAA,GAAA,IAAIuC,GAAJ,CAAQjH,IAAA,CAAKwC,UAAb,CAAA,CAAA;AACR,OAAA;;MACA,IAAI,IAAA,CAAKuF,WAAL,EAAsB1G,IAAAA,OAAY,KAAA,IAAKkB,CAAAA,SAAL,EAAtC,EAAwD;QACtD,IAAIpC,OAAOmC,aAAX,EAA0B;AACxB,UAAA,IAAIjB,OAAJ,EAAa;AACPqD,YAAAA,GAAA,CAAApD,GAAA,CAAI,IAAKnC,CAAAA,KAAT,EAAgB,IAAhB,CAAA,CAAA;AACC,WAFP,MAEO;YACDuF,GAAA,CAAA,QAAA,CAAA,CAAO,IAAA,CAAKvF,KAAZ,CAAA,CAAA;AACN,WAAA;AACK,SANP,MAMO;AACC,UAAA,IAAAoB,QAAA,GAAW,IAAKiE,CAAAA,IAAL,EAAX,CAAA;AAEGjE,UAAAA,QAAA,CAAA0C,OAAA,CAAQ,UAACE,IAAD,EAAU;AACzB,YAAA,IAAI9B,OAAJ,EAAa;AACPqD,cAAAA,GAAA,CAAApD,GAAA,CAAI6B,IAAK,CAAAhE,KAAT,EAAgB,IAAhB,CAAA,CAAA;AACC,aAFP,MAEO;AACDuF,cAAAA,GAAA,CAAA,QAAA,CAAA,CAAOvB,KAAKhE,KAAZ,CAAA,CAAA;AACN,aAAA;WALO,CAAA,CAAA;AASH,UAAA,IAAAqG,OAAA,GAAU,IAAK9B,CAAAA,UAAL,EAAV,CAAA;AACE8B,UAAAA,OAAA,CAAAvC,OAAA,CAAQ,UAACE,IAAD,EAAU;AACpBuB,YAAAA,GAAA,CAAA,QAAA,CAAA,CAAOvB,KAAKhE,KAAZ,CAAA,CAAA;WADE,CAAA,CAAA;AAGV,SAAA;AACF,OAAA;;MACA,IAAI4H,QAAQC,QAAZ,EAAsB;QACpB,IAAI7G,OAAOmC,aAAX,EAA0B;AACxB,UAAA,IAAA,CAAKD,aAAL,EAAA,CAAA;AACK,SAFP,MAEO;UACL,IAAM2F,eAAehI,IAAK,CAAAiI,eAAL,CAAqB,CAAC,IAAA,CAAK9I,KAAN,CAArB,CAArB,CAAA;AACa6I,UAAAA,YAAA,CAAA/E,OAAA,CAAQ,UAACE,IAAD,EAAU;AAC7BA,YAAAA,IAAA,CAAKd,aAAL,EAAA,CAAA;WADW,CAAA,CAAA;AAGf,SAAA;AACF,OAAA;;AACO,MAAA,OAAArC,IAAA,CAAKkI,UAAL,CAAgBxD,GAAhB,CAAA,CAAA;AACT,KAAA;AA7zBK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAk0BE,SAAe,MAAA,GAAA;AACf,MAAA,IAAA,CAAAlD,KAAA,GAAQ,IAAKkB,CAAAA,QAAL,EAAR,CAAA;AACA,MAAA,IAAA,CAAAvB,OAAA,GAAU,IAAKsG,CAAAA,SAAL,EAAV,CAAA;AACA,MAAA,IAAA,CAAArG,QAAA,GAAW,IAAKiF,CAAAA,UAAL,EAAX,CAAA;AACA,MAAA,IAAA,CAAAzF,WAAA,GAAc,IAAKmH,CAAAA,WAAL,EAAd,CAAA;AACA,MAAA,IAAA,CAAAtG,OAAA,GAAU,IAAKmF,CAAAA,SAAL,EAAV,CAAA;AACA,MAAA,IAAA,CAAA5F,QAAA,GAAW,IAAKkF,CAAAA,MAAL,EAAX,CAAA;AACA,MAAA,IAAA,CAAApF,SAAA,GAAY,IAAKqH,CAAAA,OAAL,EAAZ,CAAA;AACA,MAAA,IAAA,CAAApH,QAAA,GAAW,IAAKqH,CAAAA,MAAL,EAAX,CAAA;AACA,MAAA,IAAA,CAAAvH,QAAA,GAAW,IAAK6F,CAAAA,MAAL,EAAX,CAAA;AACA,MAAA,IAAA,CAAA1G,IAAA,CAAKuF,OAAL,CAAa,IAAb,CAAA,CAAA;AACP,KAAA;AA70BK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;IAAA,KAg1BE,EAAA,SAAA,aAAA,CAAc8C,iBAAd,EAAiD;AAChD,MAAA,IAAErI,IAAF,GAAW,IAAX,CAAEA,IAAF,CAAA;AACD,MAAA,IAAA,CAAAY,WAAA,GAAc,IAAKmH,CAAAA,WAAL,EAAd,CAAA;;MACL,IAAI,IAAA,CAAKnH,WAAL,KAAqB,CAAC,KAAKhB,QAAN,IAAkByI,iBAAvC,CAAJ,EAA+D;AACxD,QAAA,IAAA,CAAAhH,OAAA,GAAU,IAAKkB,CAAAA,SAAL,EAAV,CAAA;;QACL,IAAI,IAAA,CAAKlB,OAAT,EAAkB;UAChBrB,IAAA,CAAKwC,UAAL,CAAgBlB,GAAhB,CAAoB,IAAKnC,CAAAA,KAAzB,EAAgC,IAAhC,CAAA,CAAA;AACF,SAAA;;AACK,QAAA,IAAA,CAAAiD,aAAA,GAAgB,IAAKqE,CAAAA,eAAL,EAAhB,CAAA;QACLzG,IAAA,CAAKuF,OAAL,CAAa,IAAb,CAAA,CAAA;AACF,OAAA;AACF,KAAA;AA31BK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,gBAAA;AAAA,IAAA,KAAA,EA+1BE,SAAuB,cAAA,GAAA;AACtB,MAAA,IAAEhF,QAAF,GAAe,IAAf,CAAEA,QAAF,CAAA;;AACF,MAAA,IAAAwB,KAAA,CAAMC,OAAN,CAAczB,QAAd,CAAA,EAAyB;AAClBA,QAAAA,QAAA,CAAA0C,OAAA,CAAQ,UAACE,IAAD,EAAU;AACzBA,UAAAA,IAAA,CAAKtB,MAAL,EAAA,CAAA;AACAsB,UAAAA,IAAA,CAAKd,aAAL,EAAA,CAAA;AACAc,UAAAA,IAAA,CAAKmE,cAAL,EAAA,CAAA;SAHO,CAAA,CAAA;AAKX,OAAA;AACF,KAAA;AAx2BK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EA42BE,SAAsB,aAAA,GAAA;AACrB,MAAA,IAAEpH,MAAF,GAAa,IAAb,CAAEA,MAAF,CAAA;;AACN,MAAA,IAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAA,CAAO2B,MAAP,EAAA,CAAA;AACA3B,QAAAA,MAAA,CAAOmC,aAAP,EAAA,CAAA;AACAnC,QAAAA,MAAA,CAAO+E,aAAP,EAAA,CAAA;AACF,OAAA;AACF,KAAA;AAn3BK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAs3BE,SAAgB,aAAA,GAAA;AACf,MAAA,IAAEjF,IAAF,GAAW,IAAX,CAAEA,IAAF,CAAA;MACN,IAAMgI,eAAehI,IAAK,CAAAiI,eAAL,CAAqB,CAAC,IAAA,CAAK9I,KAAN,CAArB,CAArB,CAAA;AACa6I,MAAAA,YAAA,CAAA/E,OAAA,CAAQ,UAACE,IAAD,EAAU;AAC7BA,QAAAA,IAAA,CAAKtB,MAAL,EAAA,CAAA;AACAsB,QAAAA,IAAA,CAAKd,aAAL,EAAA,CAAA;OAFW,CAAA,CAAA;AAIbrC,MAAAA,IAAA,CAAK8B,MAAL,EAAA,CAAA;AACF,KAAA;AA93BK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;AAAA,IAAA,KAAA,EAm4BE,SAAmB,IAAA,GAAA;AAClB,MAAA,IAAEvB,QAAF,GAAe,IAAf,CAAEA,QAAF,CAAA;MACN,IAAIuC,OAAmB,EAAvB,CAAA;MACAA,IAAA,CAAKC,IAAL,CAAU,IAAV,CAAA,CAAA;;MACA,IAAIhB,MAAMC,OAAN,CAAczB,QAAd,CAA2BA,IAAAA,QAAA,CAASyC,MAAT,GAAkB,CAAjD,EAAoD;AACzCzC,QAAAA,QAAA,CAAA0C,OAAA,CAAQ,UAACE,IAAD,EAAU;UACzBL,IAAA,GAAOA,IAAK,CAAAwF,MAAL,CAAYnF,IAAK,CAAAqB,IAAL,EAAZ,CAAP,CAAA;SADO,CAAA,CAAA;AAGX,OAAA;;AACO,MAAA,OAAA1B,IAAA,CAAA;AACT,KAAA;AA74BK,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAk5BE,SAA8B,QAAA,GAAA;AAC/B,MAAA,IAAEnC,KAAF,GAAY,IAAZ,CAAEA,KAAF,CAAA;;MACJ,IAAI,CAACA,KAAL,EAAY;AACVA,QAAAA,KAAA,GAAQ4H,gBAAgB,KAAxB,CAAA;QACA,IAAK5H,CAAAA,KAAL,GAAaA,KAAb,CAAA;AACF,OAAA;;AACA6H,MAAAA,eAAA,CAAgB7H,KAAhB,EAAuB,IAAvB,CAAA,CAAA;AACO,MAAA,OAAAA,KAAA,CAAA;AACT,KAAA;AA15BK,GAAA,CAAA,CAAA,CAAA;;AAAA,EAAA,OAAA,QAAA,CAAA;AAAA,CAAA;;;;"}