{"version":3,"file":"main.js","sources":["../../../../node_modules/@babel/runtime/helpers/esm/toArray.js","../../../../src/_common/js/upload/main.ts"],"sourcesContent":["import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","/* eslint-disable no-param-reassign */\nimport { isOverSizeLimit } from './utils';\nimport xhr from './xhr';\nimport log from '../log/log';\nimport {\n  UploadFile,\n  SizeLimitObj,\n  FileChangeParams,\n  FileChangeReturn,\n  RequestMethodResponse,\n  HandleUploadParams,\n  SuccessContext,\n  handleSuccessParams,\n  UploadTriggerUploadText,\n} from './types';\n\nexport interface BeforeUploadExtra {\n  /** 图片文件大小限制 */\n  sizeLimit?: number | SizeLimitObj;\n  /** 上传文件之前的钩子，参数为上传的文件，返回值决定是否上传 */\n  beforeUpload?: (file: UploadFile) => boolean | Promise<boolean>;\n}\n\nexport type BeforeUploadPromiseList = [Promise<SizeLimitObj>, undefined | Promise<boolean>]\n\nexport function handleBeforeUpload(\n  file: UploadFile, params: BeforeUploadExtra,\n): Promise<[SizeLimitObj, boolean]> {\n  const { sizeLimit, beforeUpload } = params;\n  // 文件大小校验\n  const sizePromise = new Promise<SizeLimitObj>((resolve) => {\n    let result: SizeLimitObj = null;\n    if (sizeLimit) {\n      const sizeLimitObj: SizeLimitObj = typeof sizeLimit === 'number'\n        ? { size: sizeLimit, unit: 'KB' }\n        : sizeLimit;\n      const limit = isOverSizeLimit(file.size, sizeLimitObj.size, sizeLimitObj.unit);\n      if (limit) {\n        result = sizeLimitObj;\n      }\n    }\n    resolve(result);\n  });\n\n  // 自定义校验\n  const promiseList: BeforeUploadPromiseList = [sizePromise, undefined];\n  if (typeof beforeUpload === 'function') {\n    const r = beforeUpload(file);\n    const p = r instanceof Promise ? r : (new Promise<boolean>((resolve) => resolve(r)));\n    promiseList[1] = p;\n  }\n\n  // 同时进行文件大小校验和自定义校验函数\n  return new Promise((resolve) => {\n    Promise.all(promiseList).then((r) => {\n      resolve(r);\n    });\n  });\n}\n\nexport interface OnErrorParams {\n  event?: ProgressEvent;\n  files?: UploadFile[];\n  response?: any;\n  formatResponse?: HandleUploadParams['formatResponse'];\n}\n\nexport function handleError(options: OnErrorParams) {\n  const { event, files, response, formatResponse } = options;\n  files.forEach((file) => {\n    file.status = 'fail';\n  });\n  let res = response;\n  if (typeof formatResponse === 'function') {\n    res = formatResponse(response, { file: files[0], currentFiles: files });\n  }\n  return { response: res, event, files };\n}\n\nexport function handleSuccess(params: handleSuccessParams) {\n  const { event, files, response } = params;\n  if (files?.length <= 0) {\n    log.error('Upload', 'Empty File in Success Callback');\n  }\n  files.forEach((file) => {\n    file.status = 'success';\n    delete file.response?.error;\n  });\n  const res = response;\n  files[0].url = res.url || files[0].url;\n  return { response: res, event, files };\n}\n\nexport type UploadRequestReturn = {\n  status?: 'fail' | 'success';\n  /** 上传失败的文件，需等待继续上传 */\n  failedFiles?: UploadFile[];\n  data?: SuccessContext;\n  /** 批量文件上传，一个文件一个请求的场景下，响应结果的列表 */\n  list?: UploadRequestReturn[];\n}\n\nexport function handleRequestMethodResponse(res: RequestMethodResponse) {\n  if (!res) {\n    log.error('Upload', '`requestMethodResponse` is required.');\n    return false;\n  }\n  if (!res.status) {\n    log.error('Upload', '`requestMethodResponse.status` is missing, which value only can be `success` or `fail`');\n    return false;\n  }\n  if (!['success', 'fail'].includes(res.status)) {\n    log.error('Upload', '`requestMethodResponse.status` must be `success` or `fail`, examples `{ status: \\'success\\', response: { url: \\'\\' } }`');\n    return false;\n  }\n  if (res.status === 'success' && (!res.response || !res.response.url)) {\n    log.warn('Upload', '`requestMethodResponse.response.url` is required as `status` is `success`');\n  }\n  return true;\n}\n\n/**\n * 一次上传请求的返回结果\n */\nexport function uploadOneRequest(params: HandleUploadParams): Promise<UploadRequestReturn> {\n  const { action, toUploadFiles, requestMethod } = params;\n  return new Promise<UploadRequestReturn>((resolve) => {\n    if (!action && !requestMethod) {\n      log.error('Upload', 'one of action and requestMethod must be exist.');\n      resolve({});\n      return;\n    }\n    if (!toUploadFiles || !toUploadFiles.length) {\n      log.warn('Upload', 'No files need to be uploaded');\n      resolve({});\n      return;\n    }\n    toUploadFiles.forEach((file) => {\n      file.status = 'progress';\n    });\n    // 自定义上传方法\n    if (requestMethod) {\n      requestMethod(params.multiple ? toUploadFiles : toUploadFiles[0]).then((res) => {\n        if (!handleRequestMethodResponse(res)) {\n          resolve({});\n          return;\n        }\n        let { response } = res;\n        if (res.status === 'fail') {\n          response = response || {};\n          response.error = res.error || response.error;\n        }\n        toUploadFiles.forEach((file) => {\n          file.status = res.status;\n          file.response = response;\n        });\n        const result = { response, file: toUploadFiles[0], files: toUploadFiles };\n        if (res.status === 'success') {\n          params.onResponseSuccess?.(result);\n        } else if (res.status === 'fail') {\n          params.onResponseError?.(result);\n        }\n        resolve({\n          status: res.status,\n          data: result,\n        });\n      });\n    } else {\n      const xhrReq = xhr({\n        action: params.action,\n        files: params.toUploadFiles,\n        useMockProgress: params.useMockProgress,\n        onError: (p: OnErrorParams) => {\n          const r = handleError({ ...p, formatResponse: params.formatResponse });\n          params.onResponseError?.(r);\n          resolve({ status: 'fail', data: r });\n        },\n        onProgress: params.onResponseProgress,\n        onSuccess: (p: SuccessContext) => {\n          const { formatResponse } = params;\n          let res = p.response;\n          if (typeof formatResponse === 'function') {\n            res = formatResponse(p.response, {\n              file: p.file,\n              currentFiles: p.files,\n            });\n          }\n          if (res.error) {\n            const r = handleError({ ...p, response: res });\n            params.onResponseError?.(r);\n            resolve({ status: 'fail', data: r });\n          } else {\n            const r = handleSuccess({ ...p, response: res });\n            params.onResponseSuccess?.(r);\n            resolve({ status: 'success', data: r });\n          }\n        },\n        formatRequest: params.formatRequest,\n        data: params.data,\n        name: params.name,\n        headers: params.headers,\n        withCredentials: params.withCredentials,\n        method: params.method,\n      });\n      params.setXhrObject?.({\n        files: params.toUploadFiles,\n        xhrReq,\n      });\n    }\n  });\n}\n\n/**\n * 可能单个文件上传，也可能批量文件一次性上传\n * 返回上传成功或上传失败的文件列表\n */\nexport function upload(params: HandleUploadParams):\nPromise<UploadRequestReturn> {\n  const { uploadAllFilesInOneRequest, toUploadFiles, uploadedFiles, isBatchUpload } = params;\n  // 一批文件上传，部分文件失败，重新上传失败的文件\n  const thisUploadFiles = toUploadFiles.filter((t) => (\n    !t.response || (t.response && !t.response.error)\n  ));\n  return new Promise((resolve) => {\n    // 所有文件一次性上传\n    if (uploadAllFilesInOneRequest || !params.multiple) {\n      uploadOneRequest(params).then((r) => {\n        if (r.status === 'success') {\n          r.data.files = isBatchUpload || !params.multiple\n            ? r.data.files\n            : uploadedFiles.concat(r.data.files);\n        }\n        const failedFiles = r.status === 'fail' ? r.data.files : [];\n        resolve({ ...r, failedFiles });\n      });\n      return;\n    }\n    // 一个文件一个文件上传\n    const list = thisUploadFiles.map((file) => (\n      uploadOneRequest({ ...params, toUploadFiles: [file] })\n    ));\n    Promise.all(list).then((arr) => {\n      const files: UploadFile[] = [];\n      const failedFiles: UploadFile[] = [];\n      arr.forEach((one) => {\n        if (one.status === 'success') {\n          files.push(one.data.files[0]);\n        } else if (one.status === 'fail') {\n          failedFiles.push(one.data.files[0]);\n        }\n      });\n      const newFiles = isBatchUpload || !params.multiple ? files : uploadedFiles.concat(files);\n      resolve({\n        // 有一个请求成功，就算成功\n        status: files.length ? 'success' : 'fail',\n        data: {\n          files: newFiles,\n        },\n        // 上传失败的文件，需等待继续上传\n        failedFiles,\n        list: arr,\n      });\n    });\n  });\n}\n\nexport function formatToUploadFile(\n  tmpFiles: File[],\n  format: FileChangeParams['format'],\n  autoUpload: boolean,\n) {\n  return tmpFiles.map((fileRaw: File) => {\n    let file: UploadFile = fileRaw;\n    if (typeof format === 'function') {\n      file = format(fileRaw);\n    }\n    const uploadFile: UploadFile = {\n      raw: fileRaw,\n      lastModified: fileRaw.lastModified,\n      name: fileRaw.name,\n      size: fileRaw.size,\n      type: fileRaw.type,\n      percent: 0,\n      status: autoUpload ? 'progress' : 'waiting',\n      ...file,\n    };\n    return uploadFile;\n  });\n}\n\nexport function validateFile(\n  params: FileChangeParams\n): Promise<FileChangeReturn> {\n  const { files, uploadValue, max, allowUploadDuplicateFile } = params;\n  return new Promise((resolve) => {\n    // 是否允许相同的文件名存在\n    let tmpFiles = files.filter((file) => {\n      const sameNameFile = uploadValue.find((t) => t.name === file.name);\n      return allowUploadDuplicateFile || !sameNameFile;\n    });\n\n    let hasSameNameFile = false;\n    if (tmpFiles.length < files.length) {\n      hasSameNameFile = true;\n    }\n    if (!tmpFiles.length) {\n      const tFiles = formatToUploadFile(files, params.format, params.autoUpload);\n      resolve({ hasSameNameFile, file: tFiles?.[0], files: tFiles, validateResult: { type: 'FILTER_FILE_SAME_NAME' } });\n      return;\n    }\n\n    // 上传文件数量限制\n    let lengthOverLimit = false;\n    if (max && tmpFiles.length && !params.isBatchUpload) {\n      tmpFiles = tmpFiles.slice(0, max - uploadValue.length);\n      if (tmpFiles.length !== files.length) {\n        lengthOverLimit = true;\n      }\n    }\n\n    // 格式化文件对象\n    const formattedFiles = formatToUploadFile(tmpFiles, params.format, params.autoUpload);\n\n    // 全量文件，一波校验，整体上传 或 终止上传\n    let allFileValidatePromise;\n    if (params.beforeAllFilesUpload) {\n      const r = params.beforeAllFilesUpload?.(formattedFiles);\n      allFileValidatePromise = r instanceof Promise ? r : new Promise((resolve) => resolve(r));\n    }\n\n    // 单文件合法性校验，一个文件校验不通过其他文件可继续上传\n    const promiseList = formattedFiles.map((file: UploadFile) => new Promise((resolve) => {\n      handleBeforeUpload(\n        file,\n        { beforeUpload: params.beforeUpload, sizeLimit: params.sizeLimit },\n      ).then(([sizeResult, customResult]) => {\n        if (sizeResult) {\n          resolve({ file, validateResult: { type: 'FILE_OVER_SIZE_LIMIT', extra: sizeResult } });\n        } else if (customResult === false) {\n          resolve({ file, validateResult: { type: 'CUSTOME_BEFORE_UPLOAD' } });\n        }\n        resolve({ file });\n      });\n    }));\n    Promise.all([allFileValidatePromise].concat(promiseList)).then((results) => {\n      const [allFilesResult, ...others] = results;\n      if (allFilesResult === false) {\n        resolve({\n          lengthOverLimit,\n          hasSameNameFile,\n          validateResult: { type: 'BEFORE_ALL_FILES_UPLOAD' },\n          files: formattedFiles,\n        });\n      } else {\n        resolve({\n          lengthOverLimit,\n          hasSameNameFile,\n          fileValidateList: others,\n          files: formattedFiles,\n        });\n      }\n    });\n  });\n}\n\nexport function getFilesAndErrors(fileValidateList: FileChangeReturn[], getError) {\n  const sizeLimitErrors: FileChangeReturn[] = [];\n  const toFiles: UploadFile[] = [];\n  fileValidateList.forEach((oneFile) => {\n    if (oneFile.validateResult?.type === 'CUSTOME_BEFORE_UPLOAD') return;\n    if (oneFile.validateResult?.type === 'FILE_OVER_SIZE_LIMIT') {\n      if (!oneFile.file.response) {\n        oneFile.file.response = {};\n      }\n      oneFile.file.response.error = oneFile.file.response.error\n      || getError(oneFile.validateResult.extra);\n      sizeLimitErrors.push(oneFile);\n      return;\n    }\n    toFiles.push(oneFile.file);\n  });\n\n  return { sizeLimitErrors, toFiles };\n}\n\n/**\n * 获取文件上传触发元素文本 在全局配置中的字段\n */\nexport function getTriggerTextField(p: {\n  status: 'success' | 'fail' | 'progress' | 'waiting',\n  multiple: boolean,\n  autoUpload: boolean;\n  isBatchUpload: boolean;\n}): keyof UploadTriggerUploadText {\n  if (p.isBatchUpload && p.status) return 'reupload';\n  if (p.status === 'fail') return 'reupload';\n  if (p.status === 'progress') return 'uploading';\n  if (p.status === 'success' || (!p.autoUpload && p.status === 'waiting')) {\n    return p.multiple ? 'continueUpload' : 'reupload';\n  }\n  return 'fileInput';\n}\n\nexport interface GetDisplayFilesParams {\n  multiple: boolean;\n  autoUpload: boolean;\n  isBatchUpload: boolean;\n  uploadValue: UploadFile[];\n  toUploadFiles: UploadFile[];\n}\n\n/**\n * 获取文件列表显示\n */\nexport function getDisplayFiles(params: GetDisplayFilesParams) {\n  const { multiple, uploadValue, toUploadFiles } = params;\n  const waitingUploadFiles = toUploadFiles.filter((file) => file.status !== 'success');\n  if (multiple && !params.isBatchUpload) {\n    if (!params.autoUpload) return uploadValue;\n    return (waitingUploadFiles.length ? uploadValue.concat(waitingUploadFiles) : uploadValue) || [];\n  }\n  return (waitingUploadFiles.length ? waitingUploadFiles : uploadValue) || [];\n}\n"],"names":["_toArray","arr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","handleBeforeUpload","file","params","sizeLimit","beforeUpload","sizePromise","Promise","resolve","result","sizeLimitObj","size","unit","limit","isOverSizeLimit","promiseList","r","p","all","then","handleError","options","event","files","response","formatResponse","forEach","status","res","currentFiles","handleSuccess","length","log","error","url","handleRequestMethodResponse","includes","warn","uploadOneRequest","action","toUploadFiles","requestMethod","multiple","onResponseSuccess","onResponseError","data","xhrReq","xhr","useMockProgress","onError","onProgress","onResponseProgress","onSuccess","formatRequest","name","headers","withCredentials","method","setXhrObject","upload","uploadAllFilesInOneRequest","uploadedFiles","isBatchUpload","thisUploadFiles","filter","t","concat","failedFiles","list","map","one","push","newFiles","formatToUploadFile","tmpFiles","format","autoUpload","fileRaw","uploadFile","raw","lastModified","type","percent","validateFile","uploadValue","max","allowUploadDuplicateFile","sameNameFile","find","hasSameNameFile","tFiles","validateResult","lengthOverLimit","slice","formattedFiles","allFileValidatePromise","beforeAllFilesUpload","sizeResult","customResult","extra","results","allFilesResult","others","fileValidateList","getFilesAndErrors","getError","sizeLimitErrors","toFiles","oneFile","getTriggerTextField","getDisplayFiles","waitingUploadFiles"],"mappings":"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"}