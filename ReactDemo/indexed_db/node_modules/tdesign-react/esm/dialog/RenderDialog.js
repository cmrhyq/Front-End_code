/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _typeof } from '../_chunks/dep-4e0da095.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import React, { forwardRef, useRef, useImperativeHandle, useEffect } from 'react';
import { CSSTransition } from 'react-transition-group';
import classNames from 'classnames';
import Portal from '../common/Portal.js';
import noop from '../_util/noop.js';
import useIsomorphicLayoutEffect from '../_util/useLayoutEffect.js';
import useDialogEsc from '../_util/useDialogEsc.js';
import { dialogDefaultProps } from './defaultProps.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import '../_chunks/dep-7909fefa.js';
import 'react-dom';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3c98169f.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-e237f0f2.js';
import '../_util/easing.js';
import '../hooks/useConfig.js';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-e430e2ee.js';
import '../_chunks/dep-e54bb0dc.js';
import '../_chunks/dep-b2626e28.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../_chunks/dep-59b9253f.js';
import '../_chunks/dep-d1b4ab24.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function GetCSSValue(v) {
  return Number.isNaN(Number(v)) ? v : "".concat(Number(v), "px");
}

var transitionTime = 300;
var mousePosition;

var getClickPosition = function getClickPosition(e) {
  mousePosition = {
    x: e.clientX,
    y: e.clientY
  };
  setTimeout(function () {
    mousePosition = null;
  }, 100);
};

if (typeof window !== "undefined" && window.document && window.document.documentElement) {
  document.documentElement.addEventListener("click", getClickPosition, true);
}

var RenderDialog = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useLocaleReceiver = useLocaleReceiver("dialog"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
      local = _useLocaleReceiver2[0];

  var prefixCls = props.prefixCls,
      attach = props.attach,
      visible = props.visible,
      mode = props.mode,
      zIndex = props.zIndex,
      showOverlay = props.showOverlay,
      _props$onEscKeydown = props.onEscKeydown,
      onEscKeydown = _props$onEscKeydown === void 0 ? noop : _props$onEscKeydown,
      _props$onClosed = props.onClosed,
      onClosed = _props$onClosed === void 0 ? noop : _props$onClosed,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? noop : _props$onClose,
      _props$onCloseBtnClic = props.onCloseBtnClick,
      onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop : _props$onCloseBtnClic,
      _props$onOverlayClick = props.onOverlayClick,
      onOverlayClick = _props$onOverlayClick === void 0 ? noop : _props$onOverlayClick,
      _props$onConfirm = props.onConfirm,
      onConfirm = _props$onConfirm === void 0 ? noop : _props$onConfirm,
      preventScrollThrough = props.preventScrollThrough,
      closeBtn = props.closeBtn,
      closeOnEscKeydown = props.closeOnEscKeydown,
      confirmOnEnter = props.confirmOnEnter,
      closeOnOverlayClick = props.closeOnOverlayClick,
      destroyOnClose = props.destroyOnClose,
      showInAttachedElement = props.showInAttachedElement;
  var wrap = useRef();
  var dialog = useRef();
  var dialogPosition = useRef();
  var maskRef = useRef();
  var portalRef = useRef();
  var bodyOverflow = useRef();
  var bodyCssTextRef = useRef();
  var isModal = mode === "modal";
  var isNormal = mode === "normal";
  var canDraggable = props.draggable && mode === "modeless";
  var dialogOpenClass = "".concat(prefixCls, "__").concat(mode);
  useDialogEsc(visible, wrap);
  useImperativeHandle(ref, function () {
    return wrap.current;
  });
  useIsomorphicLayoutEffect(function () {
    bodyOverflow.current = document.body.style.overflow;
    bodyCssTextRef.current = document.body.style.cssText;
  }, []);
  useIsomorphicLayoutEffect(function () {
    if (visible) {
      if (isModal && bodyOverflow.current !== "hidden" && preventScrollThrough && !showInAttachedElement) {
        var scrollWidth = window.innerWidth - document.body.offsetWidth;

        if (bodyCssTextRef.current === "") {
          var bodyCssText = "overflow: hidden;";

          if (scrollWidth > 0) {
            bodyCssText += "position: relative;width: calc(100% - ".concat(scrollWidth, "px);");
          }

          document.body.style.cssText = bodyCssText;
        } else {
          if (scrollWidth > 0) {
            document.body.style.width = "calc(100% - ".concat(scrollWidth, "px)");
            document.body.style.position = "relative";
          }

          document.body.style.overflow = "hidden";
        }
      }

      if (wrap.current) {
        wrap.current.focus();
      }
    } else if (isModal) {
      var openDialogDom = document.querySelectorAll("".concat(prefixCls, "__mode"));

      if (openDialogDom.length < 1) {
        document.body.style.cssText = bodyCssTextRef.current;
      }
    }

    return function () {
      if (isModal) {
        var _openDialogDom = document.querySelectorAll("".concat(prefixCls, "__mode"));

        if (_openDialogDom.length < 1) {
          document.body.style.cssText = bodyCssTextRef.current;
          document.body.style.overflow = bodyOverflow.current;
        }
      } else {
        document.body.style.cssText = bodyCssTextRef.current;
        document.body.style.overflow = bodyOverflow.current;
      }
    };
  }, [preventScrollThrough, attach, visible, mode, isModal, showInAttachedElement, prefixCls]);
  useEffect(function () {
    if (visible) {
      if (mousePosition && dialog.current) {
        dialog.current.style.transformOrigin = "".concat(mousePosition.x - dialog.current.offsetLeft, "px ").concat(mousePosition.y - dialog.current.offsetTop, "px");
      }
    }
  }, [visible]);

  var onAnimateLeave = function onAnimateLeave() {
    if (wrap.current) {
      wrap.current.style.display = "none";
    }

    if (isModal && preventScrollThrough) {
      var openDialogDom = document.querySelectorAll("".concat(prefixCls, "__mode"));

      if (isModal && openDialogDom.length < 1) {
        document.body.style.overflow = bodyOverflow.current;
      }
    }

    if (!isModal) {
      var style = dialog.current.style;
      style.position = "relative";
      style.left = "unset";
      style.top = "unset";
    }

    onClosed && onClosed();
  };

  var onMaskClick = function onMaskClick(e) {
    if (showOverlay && (closeOnOverlayClick !== null && closeOnOverlayClick !== void 0 ? closeOnOverlayClick : local.closeOnOverlayClick)) {
      if (e.target === dialogPosition.current) {
        onOverlayClick({
          e: e
        });
        onClose({
          e: e,
          trigger: "overlay"
        });
      }
    }
  };

  var handleCloseBtnClick = function handleCloseBtnClick(e) {
    onCloseBtnClick({
      e: e
    });
    onClose({
      e: e,
      trigger: "close-btn"
    });
  };

  var handleKeyDown = function handleKeyDown(e) {
    if (e.code === "Escape") {
      e.stopPropagation();
      onEscKeydown({
        e: e
      });

      if (closeOnEscKeydown !== null && closeOnEscKeydown !== void 0 ? closeOnEscKeydown : local.closeOnEscKeydown) {
        onClose({
          e: e,
          trigger: "esc"
        });
      }
    } else if (e.code === "Enter" || e.code === "NumpadEnter") {
      e.stopPropagation();

      if (confirmOnEnter) {
        onConfirm({
          e: e
        });
      }
    }
  };

  var renderDialog = function renderDialog() {
    var dest = {};

    if (props.width !== void 0) {
      dest.width = GetCSSValue(props.width);
    }

    if (props.mode === "normal") {
      dest.zIndex = "auto";
    }

    var footer = props.footer ? /* @__PURE__ */React.createElement("div", {
      className: "".concat(prefixCls, "__footer")
    }, props.footer) : null;
    var header = props.header;
    var body = /* @__PURE__ */React.createElement("div", {
      className: "".concat(prefixCls, "__body")
    }, props.body || props.children);
    var closer = closeBtn && /* @__PURE__ */React.createElement("span", {
      onClick: handleCloseBtnClick,
      className: "".concat(prefixCls, "__close")
    }, closeBtn);
    var validWindow = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object";
    var screenHeight = validWindow ? window.innerHeight || document.documentElement.clientHeight : void 0;
    var screenWidth = validWindow ? window.innerWidth || document.documentElement.clientWidth : void 0;

    var style = _objectSpread(_objectSpread({}, dest), props.style);

    var dialogOffset = {
      x: 0,
      y: 0
    };

    var onDialogMove = function onDialogMove(e) {
      var _dialog$current = dialog.current,
          style2 = _dialog$current.style,
          offsetWidth = _dialog$current.offsetWidth,
          offsetHeight = _dialog$current.offsetHeight;
      var diffX = e.clientX - dialogOffset.x;
      var diffY = e.clientY - dialogOffset.y;
      if (diffX < 0) diffX = 0;
      if (diffY < 0) diffY = 0;
      if (screenWidth - offsetWidth - diffX < 0) diffX = screenWidth - offsetWidth;
      if (screenHeight - offsetHeight - diffY < 0) diffY = screenHeight - offsetHeight;
      style2.position = "absolute";
      style2.left = "".concat(diffX, "px");
      style2.top = "".concat(diffY, "px");
    };

    var onDialogMoveEnd = function onDialogMoveEnd() {
      dialog.current.style.cursor = "default";
      document.removeEventListener("mousemove", onDialogMove);
      document.removeEventListener("mouseup", onDialogMoveEnd);
    };

    var onDialogMoveStart = function onDialogMoveStart(e) {
      if (canDraggable && e.currentTarget === e.target) {
        var _dialog$current2 = dialog.current,
            offsetLeft = _dialog$current2.offsetLeft,
            offsetTop = _dialog$current2.offsetTop,
            offsetHeight = _dialog$current2.offsetHeight,
            offsetWidth = _dialog$current2.offsetWidth;
        if (offsetWidth > screenWidth || offsetHeight > screenHeight) return;
        dialog.current.style.cursor = "move";
        var diffX = e.clientX - offsetLeft;
        var diffY = e.clientY - offsetTop;
        dialogOffset = {
          x: diffX,
          y: diffY
        };
        document.addEventListener("mousemove", onDialogMove);
        document.addEventListener("mouseup", onDialogMoveEnd);
      }
    };

    var positionStyle = {};

    if (props.top) {
      var topValue = GetCSSValue(props.top);
      positionStyle.paddingTop = topValue;
    }

    var positionClass = classNames("".concat(prefixCls, "__position"), _defineProperty({}, "".concat(prefixCls, "--top"), !!props.top), "".concat(props.placement && !props.top ? "".concat(prefixCls, "--").concat(props.placement) : ""));
    var dialogElement = /* @__PURE__ */React.createElement("div", {
      className: isNormal ? "" : "".concat(prefixCls, "__wrap")
    }, /* @__PURE__ */React.createElement("div", {
      className: isNormal ? "" : positionClass,
      style: positionStyle,
      onClick: onMaskClick,
      ref: dialogPosition
    }, /* @__PURE__ */React.createElement("div", {
      ref: dialog,
      style: style,
      className: classNames("".concat(prefixCls), "".concat(prefixCls, "--default")),
      onMouseDown: onDialogMoveStart
    }, closer, header, body, footer)));
    return /* @__PURE__ */React.createElement(CSSTransition, {
      "in": props.visible,
      appear: true,
      mountOnEnter: true,
      unmountOnExit: destroyOnClose,
      timeout: transitionTime,
      classNames: "".concat(prefixCls, "-zoom"),
      onEntered: props.onOpened,
      onExited: onAnimateLeave,
      nodeRef: dialog
    }, dialogElement);
  };

  var renderMask = function renderMask() {
    var maskElement;

    if (showOverlay) {
      maskElement = /* @__PURE__ */React.createElement(CSSTransition, {
        "in": visible,
        appear: true,
        timeout: transitionTime,
        classNames: "".concat(prefixCls, "-fade"),
        mountOnEnter: true,
        unmountOnExit: true,
        nodeRef: maskRef
      }, /* @__PURE__ */React.createElement("div", {
        ref: maskRef,
        className: "".concat(prefixCls, "__mask")
      }));
    }

    return maskElement;
  };

  var render = function render() {
    var style = {};

    if (visible) {
      style.display = "block";
    }

    var wrapStyle = _objectSpread(_objectSpread({}, style), {}, {
      zIndex: zIndex
    });

    var dialogBody = renderDialog();
    var wrapClass = classNames(props.className, "".concat(prefixCls, "__ctx"), !isNormal ? "".concat(prefixCls, "__ctx--fixed") : "", visible ? dialogOpenClass : "", isModal && showInAttachedElement ? "".concat(prefixCls, "__ctx--absolute") : "", props.mode === "modeless" ? "".concat(prefixCls, "__ctx--modeless") : "");
    var dialog2 = /* @__PURE__ */React.createElement("div", {
      ref: wrap,
      className: wrapClass,
      style: wrapStyle,
      onKeyDown: handleKeyDown,
      tabIndex: 0
    }, mode === "modal" && renderMask(), dialogBody);
    var dom = null;

    if (visible || wrap.current) {
      if (attach === "" || isNormal) {
        dom = dialog2;
      } else {
        dom = /* @__PURE__ */React.createElement(CSSTransition, {
          "in": visible,
          appear: true,
          timeout: transitionTime,
          mountOnEnter: true,
          unmountOnExit: destroyOnClose,
          nodeRef: portalRef
        }, /* @__PURE__ */React.createElement(Portal, {
          attach: attach,
          ref: portalRef
        }, dialog2));
      }
    }

    return dom;
  };

  return render();
});
RenderDialog.defaultProps = dialogDefaultProps;

export { RenderDialog as default };
//# sourceMappingURL=RenderDialog.js.map
