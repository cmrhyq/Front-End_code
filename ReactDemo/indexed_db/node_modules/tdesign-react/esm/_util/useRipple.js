/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { useMemo, useCallback, useEffect } from 'react';
import useConfig from '../hooks/useConfig.js';
import useAnimation from './useAnimation.js';
import setStyle from './setStyle.js';
import { canUseDocument } from './dom.js';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-1e32006c.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-e430e2ee.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-e54bb0dc.js';
import '../_chunks/dep-b2626e28.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-e237f0f2.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import 'raf';
import '../_chunks/dep-3c98169f.js';
import './easing.js';

var period = 200;
var noneRippleBg = "rgba(0, 0, 0, 0)";
var defaultRippleColor = "rgba(0, 0, 0, 0.35)";

var getRippleColor = function getRippleColor(el, fixedRippleColor) {
  var _el$dataset;

  if (fixedRippleColor) {
    return fixedRippleColor;
  }

  if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
    var rippleColor = el.dataset.ripple;
    return rippleColor;
  }

  var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");

  if (cssVariable) {
    return cssVariable;
  }

  return defaultRippleColor;
};

function useRipple(ref, fixedRippleColor) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useAnimation = useAnimation(),
      keepRipple = _useAnimation.keepRipple;

  var rippleContainer = useMemo(function () {
    if (!canUseDocument) return null;
    var container = document.createElement("div");
    container.className = "".concat(classPrefix, "-ripple");
    return container;
  }, [classPrefix]);
  var handleAddRipple = useCallback(function (e) {
    var el = ref === null || ref === void 0 ? void 0 : ref.current;
    var rippleColor = getRippleColor(el, fixedRippleColor);
    if (e.button !== 0 || !el || !keepRipple) return;
    if (el.classList.contains("".concat(classPrefix, "-is-active")) || el.classList.contains("".concat(classPrefix, "-is-disabled")) || el.classList.contains("".concat(classPrefix, "-is-checked")) || el.classList.contains("".concat(classPrefix, "-is-loading"))) return;
    var elStyle = getComputedStyle(el);
    var elBorder = parseInt(elStyle.borderWidth, 10);
    var border = elBorder > 0 ? elBorder : 0;
    var width = el.offsetWidth;
    var height = el.offsetHeight;

    if (rippleContainer.parentNode === null) {
      setStyle(rippleContainer, {
        position: "absolute",
        left: "".concat(0 - border, "px"),
        top: "".concat(0 - border, "px"),
        width: "".concat(width, "px"),
        height: "".concat(height, "px"),
        borderRadius: elStyle.borderRadius,
        pointerEvents: "none",
        overflow: "hidden"
      });
      el.appendChild(rippleContainer);
    }

    var ripple = document.createElement("div");
    ripple.className = "".concat(classPrefix, "-ripple__inner");
    setStyle(ripple, {
      marginTop: "0",
      marginLeft: "0",
      right: "".concat(width, "px"),
      width: "".concat(width + 20, "px"),
      height: "100%",
      transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
      transform: "skewX(-8deg)",
      pointerEvents: "none",
      position: "absolute",
      zIndex: 0,
      backgroundColor: rippleColor,
      opacity: "0.9"
    });
    var elMap = /* @__PURE__ */new WeakMap();

    for (var n = el.children.length, i = 0; i < n; ++i) {
      var child = el.children[i];

      if (child.style.zIndex === "" && child !== rippleContainer) {
        child.style.zIndex = "1";
        elMap.set(child, true);
      }
    }

    var initPosition = el.style.position ? el.style.position : getComputedStyle(el).position;

    if (initPosition === "" || initPosition === "static") {
      el.style.position = "relative";
    }

    rippleContainer.insertBefore(ripple, rippleContainer.firstChild);
    setTimeout(function () {
      ripple.style.transform = "translateX(".concat(width, "px)");
    }, 0);

    var handleClearRipple = function handleClearRipple() {
      var el2 = ref === null || ref === void 0 ? void 0 : ref.current;
      ripple.style.backgroundColor = noneRippleBg;
      if (!el2) return;
      el2.removeEventListener("pointerup", handleClearRipple, false);
      el2.removeEventListener("pointerleave", handleClearRipple, false);
      setTimeout(function () {
        ripple.remove();
        if (rippleContainer.children.length === 0) rippleContainer.remove();
      }, period * 2 + 100);
    };

    el.addEventListener("pointerup", handleClearRipple, false);
    el.addEventListener("pointerleave", handleClearRipple, false);
  }, [classPrefix, ref, fixedRippleColor, rippleContainer, keepRipple]);
  useEffect(function () {
    var el = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!el) return;
    el.addEventListener("pointerdown", handleAddRipple, false);
    return function () {
      el.removeEventListener("pointerdown", handleAddRipple, false);
    };
  }, [handleAddRipple, fixedRippleColor, ref]);
}

export { useRipple as default };
//# sourceMappingURL=useRipple.js.map
