/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../../_chunks/dep-9615f03f.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-59b9253f.js';
import { useState, useMemo, useEffect } from 'react';
import { g as get_1 } from '../../_chunks/dep-ddb0f1c1.js';
import { i as intersection_1 } from '../../_chunks/dep-6120e322.js';
import useControlled from '../../hooks/useControlled.js';
import '../../_chunks/dep-7909fefa.js';
import '../../_chunks/dep-d1b4ab24.js';
import '../../_chunks/dep-1cce5a60.js';
import '../../_chunks/dep-93a10d8c.js';
import '../../_chunks/dep-264b0e55.js';
import '../../_chunks/dep-4e0da095.js';
import '../../_chunks/dep-199b1581.js';
import '../../_chunks/dep-4a64abb1.js';
import '../../_chunks/dep-e237f0f2.js';
import '../../_chunks/dep-4e2181de.js';
import '../../_chunks/dep-c197ce4f.js';
import '../../_chunks/dep-e430e2ee.js';
import '../../_chunks/dep-e54bb0dc.js';
import '../../_chunks/dep-b2626e28.js';
import '../../_chunks/dep-5a2778c1.js';
import '../../_chunks/dep-a2b97df8.js';
import '../../_chunks/dep-c8bfa11e.js';
import '../../_chunks/dep-6011038b.js';
import '../../_chunks/dep-4ed2dce5.js';
import '../../_chunks/dep-7ff8b18e.js';
import '../../_chunks/dep-fdd1d1a6.js';
import '../../_chunks/dep-2afd805c.js';
import '../../_chunks/dep-ebf3a272.js';
import '../../_chunks/dep-96aef4a9.js';
import '../../_chunks/dep-f54ff1e5.js';
import '../../_chunks/dep-e1d4dd61.js';
import '../../_chunks/dep-236ef238.js';
import '../../_util/noop.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var childrenMap = /* @__PURE__ */new Map();
function getChildrenData(treeDataMap, data, keys, r) {
  if (childrenMap.get(data)) return childrenMap.get(data);
  var result = r || {
    allChildren: [],
    allChildrenKeys: [],
    leafNodeKeys: []
  };
  var children = get_1(data, keys.childrenKey);
  if (!children || !children.length) return result;
  var selectableChildren = children.filter(function (item) {
    var _treeDataMap$get;

    return !((_treeDataMap$get = treeDataMap.get(get_1(item, keys.rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
  });
  result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(selectableChildren)));

  for (var i = 0, len = children.length; i < len; i++) {
    var tItem = children[i];
    var c = get_1(tItem, keys.childrenKey);

    if (c !== null && c !== void 0 && c.length) {
      var nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);
      result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(nextLevelData.allChildren)));
    }
  }

  for (var _i = 0, _len = result.allChildren.length; _i < _len; _i++) {
    var item = result.allChildren[_i];
    var children2 = get_1(item, keys.childrenKey);
    var rowValue = get_1(item, keys.rowKey);
    result.allChildrenKeys.push(rowValue);

    if (!children2 || !children2.length) {
      result.leafNodeKeys.push(rowValue);
    }
  }

  result.allChildrenKeys = _toConsumableArray(new Set(result.allChildrenKeys));
  result.leafNodeKeys = _toConsumableArray(new Set(result.leafNodeKeys));
  return result;
}
function removeChildrenKeys(p, r) {
  var selectedRowKeys = p.selectedRowKeys,
      removeKeys = p.removeKeys;
  var result = r || {
    data: [],
    keys: []
  };

  for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
    var key = selectedRowKeys[i];

    if (!removeKeys.includes(key)) {
      result.keys.push(key);
    }
  }

  return result;
}
function getRowDataByKeys(p) {
  var treeDataMap = p.treeDataMap,
      selectedRowKeys = p.selectedRowKeys;
  var result = [];

  for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
    var key = selectedRowKeys[i];
    result.push(treeDataMap.get(key));
  }

  return result;
}
function useTreeSelect(props, treeDataMap) {
  var tree = props.tree,
      rowKey = props.rowKey,
      data = props.data,
      indeterminateSelectedRowKeys = props.indeterminateSelectedRowKeys;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      tIndeterminateSelectedRowKeys = _useState2[0],
      setTIndeterminateSelectedRowKeys = _useState2[1];

  var _useControlled = useControlled(props, "selectedRowKeys", props.onSelectChange, {
    defaultSelectedRowKeys: props.defaultSelectedRowKeys || []
  }),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      tSelectedRowKeys = _useControlled2[0],
      setTSelectedRowKeys = _useControlled2[1];

  var rowDataKeys = useMemo(function () {
    return {
      rowKey: rowKey || "id",
      childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
    };
  }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
  useEffect(function () {
    if (!tree || !treeDataMap.size || tree.checkStrictly) return;
    updateIndeterminateState();
  }, [tSelectedRowKeys, data, tree, treeDataMap]);

  function updateIndeterminateState() {
    if (!tree || tree.checkStrictly) return;

    if (!tSelectedRowKeys.length) {
      setTIndeterminateSelectedRowKeys([]);
      return;
    }

    var keys = [];
    var parentMap = {};

    for (var i = 0, len = tSelectedRowKeys.length; i < len; i++) {
      var rowValue = tSelectedRowKeys[i];
      var state = treeDataMap.get(rowValue);
      var children = get_1(state.row, rowDataKeys.childrenKey);

      if (!children || !children.length) {
        var parentTmp = state.parent;

        while (parentTmp) {
          if (!parentMap[parentTmp.id]) {
            parentMap[parentTmp.id] = [];
          }

          parentMap[parentTmp.id].push(state.row);
          var checkedLength = parentMap[parentTmp.id].length;

          var _getChildrenData = getChildrenData(treeDataMap, parentTmp.row, rowDataKeys),
              allChildrenKeys = _getChildrenData.allChildrenKeys;

          var parentTmpIndex = keys.indexOf(parentTmp.id);
          var selectedIndex = tSelectedRowKeys.indexOf(parentTmp.id);

          if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {
            parentTmpIndex === -1 && keys.push(parentTmp.id);
          } else {
            parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);
          }

          parentTmp = parentTmp.parent;
        }
      }
    }

    setTIndeterminateSelectedRowKeys(keys);
  }

  function updateParentCheckedState(selectedKeys, currentRowKey, type) {
    if (!tree || tree.checkStrictly) return;

    var keys = _toConsumableArray(selectedKeys);

    var state = treeDataMap.get(currentRowKey);
    var parentTmp = state.parent;

    while (parentTmp) {
      var _getChildrenData2 = getChildrenData(treeDataMap, parentTmp.row, rowDataKeys),
          leafNodeKeys = _getChildrenData2.leafNodeKeys;

      var checkedChildrenKeys = intersection_1(leafNodeKeys, selectedKeys);
      var selectedIndex = keys.indexOf(parentTmp.id);

      if (type === "uncheck") {
        selectedIndex !== -1 && keys.splice(selectedIndex, 1);
      } else if (checkedChildrenKeys.length === leafNodeKeys.length) {
        selectedIndex === -1 && keys.push(parentTmp.id);
      }

      parentTmp = parentTmp.parent;
    }

    return keys;
  }

  function onInnerSelectChange(rowKeys, extraData) {
    if (!tree || tree.checkStrictly) {
      setTSelectedRowKeys(rowKeys, extraData);
      return;
    }

    if (extraData.currentRowKey === "CHECK_ALL_BOX") {
      handleSelectAll(extraData);
    } else {
      handleSelect(rowKeys, extraData);
    }
  }

  function handleSelectAll(extraData) {
    var newRowKeys = [];
    var newRowData = [];

    if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
      var arr = _toConsumableArray(treeDataMap.values());

      for (var i = 0, len = arr.length; i < len; i++) {
        var item = arr[i];

        if (!(item !== null && item !== void 0 && item.disabled)) {
          newRowData.push(item.row);
          newRowKeys.push(get_1(item.row, rowDataKeys.rowKey));
        }
      }
    }

    var newExtraData = _objectSpread(_objectSpread({}, extraData), {}, {
      selectedRowData: newRowData || []
    });

    setTSelectedRowKeys(newRowKeys, newExtraData);
  }

  function handleSelect(rowKeys, extraData) {
    var newRowKeys = _toConsumableArray(rowKeys);

    if (tree.checkStrictly === false) {
      if (extraData.type === "check") {
        var result = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys);
        var allChildrenKeys = result.allChildrenKeys;
        childrenMap.set(extraData.currentRowData, result);
        newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
      } else if (extraData.type === "uncheck") {
        var children = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys);

        var _result = removeChildrenKeys({
          selectedRowKeys: rowKeys,
          removeKeys: children.allChildrenKeys
        });

        newRowKeys = _result.keys;
      }
    }

    newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);
    var newRowData = getRowDataByKeys({
      treeDataMap: treeDataMap,
      selectedRowKeys: newRowKeys
    });

    var newExtraData = _objectSpread(_objectSpread({}, extraData), {}, {
      selectedRowData: newRowData
    });

    setTSelectedRowKeys(newRowKeys, newExtraData);
  }

  return {
    tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys || tIndeterminateSelectedRowKeys,
    onInnerSelectChange: onInnerSelectChange
  };
}

export { childrenMap, useTreeSelect as default, getChildrenData, getRowDataByKeys, removeChildrenKeys };
//# sourceMappingURL=useTreeSelect.js.map
