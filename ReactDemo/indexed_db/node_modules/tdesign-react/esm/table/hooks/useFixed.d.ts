/// <reference types="lodash" />
import { WheelEvent } from 'react';
import { ClassName, Styles } from '../../common';
import { BaseTableCol, TableRowData, TdBaseTableProps } from '../type';
import { TableRowFixedClasses, RowAndColFixedPosition, TableColFixedClasses, RecalculateColumnWidthFunc } from '../interface';
export declare function getColumnFixedStyles(col: TdBaseTableProps['columns'][0], index: number, rowAndColFixedPosition: RowAndColFixedPosition, tableColFixedClasses: TableColFixedClasses): {
    style?: Styles;
    classes?: ClassName;
};
export declare function getRowFixedStyles(rowId: string | number, rowIndex: number, rowLength: number, fixedRows: TdBaseTableProps['fixedRows'], rowAndColFixedPosition: RowAndColFixedPosition, tableRowFixedClasses: TableRowFixedClasses): {
    style: Styles;
    classes: ClassName;
};
export default function useFixed(props: TdBaseTableProps, finalColumns: BaseTableCol<TableRowData>[]): {
    tableWidth: import("react").MutableRefObject<number>;
    tableElmWidth: import("react").MutableRefObject<number>;
    thWidthList: import("react").MutableRefObject<{
        [colKey: string]: number;
    }>;
    isFixedHeader: boolean;
    isWidthOverflow: boolean;
    tableContentRef: import("react").MutableRefObject<HTMLDivElement>;
    isFixedColumn: boolean;
    showColumnShadow: {
        left: boolean;
        right: boolean;
    };
    rowAndColFixedPosition: RowAndColFixedPosition;
    virtualScrollHeaderPos: {
        left: number;
        top: number;
    };
    scrollbarWidth: number;
    setData: import("react").Dispatch<import("react").SetStateAction<TableRowData[]>>;
    refreshTable: import("lodash").DebouncedFuncLeading<() => void>;
    emitScrollEvent: (e: WheelEvent<HTMLDivElement>) => void;
    updateThWidthListHandler: () => void;
    updateColumnFixedShadow: (target: HTMLElement, extra?: {
        skipScrollLimit?: boolean;
    }) => void;
    setUseFixedTableElmRef: (val: HTMLTableElement) => void;
    getThWidthList: () => {
        [colKey: string]: number;
    };
    updateThWidthList: (trList: HTMLCollection | {
        [colKey: string]: number;
    }) => void;
    setRecalculateColWidthFuncRef: (val: RecalculateColumnWidthFunc) => void;
    addTableResizeObserver: (tableElement: HTMLDivElement) => () => void;
};
