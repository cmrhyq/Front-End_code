/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../../_chunks/dep-59b9253f.js';
import { _ as _slicedToArray } from '../../../_chunks/dep-9615f03f.js';
import React, { useRef, useState, useEffect, useCallback } from 'react';
import { c as cloneDeep_1 } from '../../../_chunks/dep-cebd0c7c.js';
import classNames from 'classnames';
import useClassNames from '../../hooks/useClassNames.js';
import { genGradientPoint, gradientColors2string } from '../../../_common/js/color-picker/color.js';
import useCommonClassName from '../../../_util/useCommonClassName.js';
import { GRADIENT_SLIDER_DEFAULT_WIDTH } from '../../const.js';
import { InputNumber } from '../../../input-number/index.js';
import '../../../_chunks/dep-7909fefa.js';
import '../../../_chunks/dep-d1b4ab24.js';
import '../../../_chunks/dep-1cce5a60.js';
import '../../../_chunks/dep-1a36642a.js';
import '../../../_chunks/dep-dc1ce7ed.js';
import '../../../_chunks/dep-4e2181de.js';
import '../../../_chunks/dep-c197ce4f.js';
import '../../../_chunks/dep-e430e2ee.js';
import '../../../_chunks/dep-4a64abb1.js';
import '../../../_chunks/dep-4e0da095.js';
import '../../../_chunks/dep-e54bb0dc.js';
import '../../../_chunks/dep-b2626e28.js';
import '../../../_chunks/dep-5a2778c1.js';
import '../../../_chunks/dep-a2b97df8.js';
import '../../../_chunks/dep-7aeeb170.js';
import '../../../_chunks/dep-2afd805c.js';
import '../../../_chunks/dep-e237f0f2.js';
import '../../../_chunks/dep-4ed2dce5.js';
import '../../../_chunks/dep-c8db35c0.js';
import '../../../_chunks/dep-96aef4a9.js';
import '../../../_chunks/dep-557a1b0f.js';
import '../../../_chunks/dep-264b0e55.js';
import '../../../_chunks/dep-f5693bf6.js';
import '../../../_chunks/dep-fdd1d1a6.js';
import '../../../_chunks/dep-614f9a08.js';
import '../../../_chunks/dep-aadcae4d.js';
import '../../../hooks/useConfig.js';
import '../../../_chunks/dep-13a70a46.js';
import '../../../_chunks/dep-1e32006c.js';
import '../../../_chunks/dep-7ff8b18e.js';
import '../../../_chunks/dep-ebf3a272.js';
import '../../../_chunks/dep-6a2482c6.js';
import '../../../_chunks/dep-a980ac05.js';
import '../../../locale/zh_CN.js';
import '../../../_common/js/global-config/locale/zh_CN.js';
import '../../../_common/js/global-config/default-config.js';
import '../../../_chunks/dep-864ee0c2.js';
import 'tinycolor2';
import '../../../_common/js/color-picker/cmyk.js';
import '../../../_common/js/color-picker/gradient.js';
import '../../../input-number/InputNumber.js';
import 'tdesign-icons-react';
import '../../../input/index.js';
import '../../../input/Input.js';
import '../../../_chunks/dep-8368bb87.js';
import '../../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../../hooks/useGlobalIcon.js';
import '../../../_common/js/utils/helper.js';
import '../../../input/InputGroup.js';
import '../../../hooks/useControlled.js';
import '../../../_chunks/dep-f54ff1e5.js';
import '../../../_chunks/dep-e1d4dd61.js';
import '../../../_chunks/dep-236ef238.js';
import '../../../_chunks/dep-c8bfa11e.js';
import '../../../_chunks/dep-199b1581.js';
import '../../../_util/noop.js';
import '../../../locale/LocalReceiver.js';
import '../../../config-provider/index.js';
import '../../../config-provider/ConfigProvider.js';
import '../../../input/defaultProps.js';
import '../../../input/style/index.js';
import '../../../input/type.js';
import '../../../button/index.js';
import '../../../button/Button.js';
import '../../../_util/useRipple.js';
import '../../../_util/useAnimation.js';
import '../../../_util/setStyle.js';
import '../../../_util/dom.js';
import 'raf';
import '../../../_chunks/dep-3c98169f.js';
import '../../../_util/easing.js';
import '../../../loading/index.js';
import '../../../loading/Loading.js';
import '../../../common/Portal.js';
import 'react-dom';
import '../../../loading/gradient.js';
import '../../../_common/js/loading/circle-adapter.js';
import '../../../_common/js/utils/set-style.js';
import '../../../loading/defaultProps.js';
import '../../../loading/plugin.js';
import '../../../loading/style/index.js';
import '../../../loading/type.js';
import '../../../button/defaultProps.js';
import '../../../button/style/index.js';
import '../../../button/type.js';
import '../../../input-number/useInputNumber.js';
import '../../../_common/js/input-number/number.js';
import '../../../_chunks/dep-a5f8b6ec.js';
import '../../../_common/js/input-number/large-number.js';
import '../../../_common/js/log/log.js';
import '../../../_common/js/log/index.js';
import '../../../input-number/defaultProps.js';
import '../../../input-number/style/index.js';
import '../../../input-number/type.js';

var DELETE_KEYS = ["delete", "backspace"];

var LinearGradient = function LinearGradient(props) {
  var _allGradientColors$, _allGradientColors;

  var onChange = props.onChange,
      color = props.color,
      disabled = props.disabled;
  var baseClassName = useClassNames();

  var _useCommonClassName = useCommonClassName(),
      statusClassNames = _useCommonClassName.STATUS;

  var refSlider = useRef(null);
  var sliderRectRef = useRef({
    left: 0,
    width: GRADIENT_SLIDER_DEFAULT_WIDTH
  });
  var isDragging = useRef(false);
  var isMoved = useRef(false);
  var degree = useRef(props.color.gradientDegree);

  var _useState = useState(props.color.gradientSelectedId),
      _useState2 = _slicedToArray(_useState, 2),
      selectedId = _useState2[0],
      setSelectedId = _useState2[1];

  var selectedRef = useRef(props.color.gradientSelectedId);
  var colors = useRef(cloneDeep_1(color.gradientColors));
  useEffect(function () {
    degree.current = color === null || color === void 0 ? void 0 : color.gradientDegree;
    setSelectedId(color.gradientSelectedId);
    selectedRef.current = color.gradientSelectedId;
    colors.current = cloneDeep_1(color.gradientColors);
  }, [color]);

  var updateSliderRect = function updateSliderRect() {
    var rect = refSlider.current.getBoundingClientRect();
    sliderRectRef.current = {
      left: rect.left,
      width: rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH
    };
  };

  var handleChange = useCallback(function (key, payload, addUsedColor) {
    if (disabled) {
      return;
    }

    onChange({
      key: key,
      payload: payload,
      addUsedColor: addUsedColor
    });
  }, [onChange, disabled]);

  var handleDegreeChange = function handleDegreeChange(value) {
    if (props.disabled || value === props.color.gradientDegree) {
      return;
    }

    degree.current = value;
    handleChange("degree", value, true);
  };

  var handleSelectedIdChange = function handleSelectedIdChange(value) {
    if (props.disabled) {
      return;
    }

    setSelectedId(value);
    selectedRef.current = value;
    handleChange("selectedId", value);
  };

  var handleColorsChange = useCallback(function (value, isEnded) {
    if (props.disabled) {
      return;
    }

    colors.current = value;
    handleChange("colors", value, isEnded);
  }, [props.disabled, handleChange]);
  var updateActiveThumbLeft = useCallback(function (left) {
    var index = colors.current.findIndex(function (c) {
      return c.id === selectedRef.current;
    });

    if (index === -1) {
      return;
    }

    var point = colors.current[index];
    var formatLeft = Math.max(0, Math.min(sliderRectRef.current.width, left));
    var percentLeft = formatLeft / sliderRectRef.current.width * 100;
    var newColors = colors.current.map(function (item, i) {
      return index !== i ? item : {
        color: point.color,
        left: percentLeft,
        id: point.id
      };
    });
    handleColorsChange(newColors);
  }, [handleColorsChange]);

  var handleStart = function handleStart(id, e) {
    if (isDragging.current || props.disabled) {
      return;
    }

    selectedRef.current = id;
    setSelectedId(id);
    isMoved.current = false;
    isDragging.current = true;
    e.preventDefault();
    e.stopPropagation();
    refSlider.current.focus();
  };

  var handleMove = useCallback(function (e) {
    if (!isDragging.current || disabled) {
      return;
    }

    var rect = refSlider.current.getBoundingClientRect();
    var left = e.clientX - rect.x;
    isMoved.current = true;
    updateActiveThumbLeft(left);
  }, [disabled, updateActiveThumbLeft]);
  var handleEnd = useCallback(function () {
    if (!isDragging.current) {
      return;
    }

    setTimeout(function () {
      isDragging.current = false;
    }, 0);

    if (isMoved.current) {
      handleColorsChange(colors.current, true);
      isMoved.current = false;
    }
  }, [handleColorsChange]);

  var handleKeyup = function handleKeyup(e) {
    if (props.disabled) {
      return;
    }

    var points = _toConsumableArray(colors.current);

    var pos = points.findIndex(function (c) {
      return c.id === selectedRef.current;
    });
    var length = points.length;

    if (DELETE_KEYS.includes(e.key.toLocaleLowerCase()) && length > 2 && pos >= 0 && pos <= length - 1) {
      points.splice(pos, 1);

      if (!points[pos]) {
        pos = points[pos + 1] ? pos + 1 : points[pos - 1] ? pos - 1 : 0;
      }

      var current = points[pos];
      handleColorsChange(points, true);
      handleSelectedIdChange(current === null || current === void 0 ? void 0 : current.id);
    }
  };

  var handleThumbBarClick = function handleThumbBarClick(e) {
    if (props.disabled) {
      return;
    }

    updateSliderRect();
    var left = e.clientX - sliderRectRef.current.left;
    left = Math.max(0, Math.min(sliderRectRef.current.width, left));
    var percentLeft = left / sliderRectRef.current.width * 100;
    var newPoint = genGradientPoint(percentLeft, props.color.rgba);

    var newColors = _toConsumableArray(colors.current);

    newColors.push(newPoint);
    handleColorsChange(newColors, true);
    handleSelectedIdChange(newPoint.id);
  };

  useEffect(function () {
    updateSliderRect();
    window.addEventListener("mousemove", handleMove, false);
    window.addEventListener("mouseup", handleEnd, false);
    window.addEventListener("contextmenu", handleEnd, false);
    return function () {
      window.removeEventListener("mousemove", handleMove, false);
      window.removeEventListener("mouseup", handleEnd, false);
      window.removeEventListener("contextmenu", handleEnd, false);
    };
  }, []);
  var gradientColors = props.color.gradientColors;
  var thumbBackground = gradientColors2string({
    points: gradientColors,
    degree: 90
  });

  var handleClickThumb = function handleClickThumb(e, t) {
    handleSelectedIdChange(t.id);
    e.stopPropagation();
  };

  var allGradientColors = _toConsumableArray(colors.current);

  var _genGradientPoint = genGradientPoint(0, (_allGradientColors$ = allGradientColors[0]) === null || _allGradientColors$ === void 0 ? void 0 : _allGradientColors$.color),
      leftColor = _genGradientPoint.color;

  var _genGradientPoint2 = genGradientPoint(100, (_allGradientColors = allGradientColors[allGradientColors.length - 1]) === null || _allGradientColors === void 0 ? void 0 : _allGradientColors.color),
      rightColor = _genGradientPoint2.color;

  return /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__gradient")
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__gradient-slider"),
    style: {
      background: "linear-gradient(90deg, ".concat(leftColor, " 0%, ").concat(leftColor, " 50%, ").concat(rightColor, " 50%, ").concat(rightColor, " 100%)")
    }
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(baseClassName, "__slider"), "".concat(baseClassName, "--bg-alpha")),
    onKeyUp: handleKeyup,
    tabIndex: 0,
    ref: refSlider
  }, /* @__PURE__ */React.createElement("ul", {
    className: "gradient-thumbs",
    onClick: handleThumbBarClick,
    style: {
      background: thumbBackground
    }
  }, colors.current.map(function (t) {
    var left = "".concat(Math.round(t.left * 100) / 100, "%");
    return /* @__PURE__ */React.createElement("li", {
      className: classNames(["".concat(baseClassName, "__thumb"), "gradient-thumbs__item", selectedId === t.id ? statusClassNames.active : ""]),
      key: t.id,
      title: "".concat(t.color, " ").concat(left),
      style: {
        color: t.color,
        left: left
      },
      onClick: function onClick(e) {
        return handleClickThumb(e, t);
      },
      onMouseDown: function onMouseDown(e) {
        return handleStart(t.id, e);
      }
    }, /* @__PURE__ */React.createElement("span", {
      className: classNames(["gradient-thumbs__item-inner", "".concat(baseClassName, "--bg-alpha")])
    }));
  })))), /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__gradient-degree"),
    title: "".concat(degree, "deg")
  }, /* @__PURE__ */React.createElement(InputNumber, {
    theme: "normal",
    min: 0,
    max: 360,
    step: 1,
    size: "small",
    format: function format(value) {
      return "".concat(value, "\xB0");
    },
    value: degree.current,
    onBlur: handleDegreeChange,
    onEnter: handleDegreeChange,
    disabled: props.disabled
  })));
};

var LinearGradient$1 = /*#__PURE__*/React.memo(LinearGradient);

export { LinearGradient$1 as default };
//# sourceMappingURL=linear-gradient.js.map
