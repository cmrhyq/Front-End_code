{"version":3,"file":"index.js","sources":["../../../../../src/color-picker/components/panel/format/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { upperCase } from 'lodash';\nimport Select from '../../../../select';\nimport FormatInput from './inputs';\nimport Color from '../../../../_common/js/color-picker/color';\nimport { FORMATS } from '../../../const';\nimport { TdColorPickerProps } from '../../../type';\n\nexport interface TdColorFormatProps extends TdColorPickerProps {\n  onModeChange: Function;\n  onInputChange: Function;\n  baseClassName: string;\n  color: Color;\n}\n\nconst FormatPanel = (props: TdColorFormatProps) => {\n  const { baseClassName, format, onModeChange } = props;\n  const [formatMode, setFormatMode] = useState(format);\n\n  const handleModeChange = (v: TdColorPickerProps['format']) => {\n    setFormatMode(v);\n    onModeChange(v);\n  };\n\n  const formats: TdColorPickerProps['format'][] = [...FORMATS];\n\n  return (\n    <div className={`${baseClassName}__format`}>\n      <div className={`${baseClassName}__format--item`}>\n        <Select\n          size=\"small\"\n          className={`${baseClassName}__format-mode-select`}\n          popupProps={{\n            overlayClassName: `${baseClassName}__select-options`,\n          }}\n          autoWidth\n          value={formatMode}\n          onChange={handleModeChange}\n        >\n          {formats.map((item) => (\n            <Select.Option key={item} value={item} label={upperCase(item)} style={{ fontSize: '12px' }} />\n          ))}\n        </Select>\n      </div>\n      <div className={`${baseClassName}__format--item`}>\n        <FormatInput {...props} format={formatMode} />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(FormatPanel);\n"],"names":["FormatPanel","props","baseClassName","format","onModeChange","useState","formatMode","setFormatMode","handleModeChange","v","formats","FORMATS","React","createElement","className","Select","size","popupProps","overlayClassName","autoWidth","value","onChange","map","item","Option","key","label","upperCase","style","fontSize","FormatInput","memo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAMA,WAAA,GAAc,SAAdA,WAAc,CAACC,KAAD,EAA+B;AACjD,EAAA,IAAQC,aAAR,GAAgDD,KAAhD,CAAQC,aAAR;AAAA,MAAuBC,MAAvB,GAAgDF,KAAhD,CAAuBE,MAAvB;AAAA,MAA+BC,YAA/B,GAAgDH,KAAhD,CAA+BG,YAA/B,CAAA;;EACA,IAAoCC,SAAAA,GAAAA,SAASF,OAA7C;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAAOG,UAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAAmBC,aAAnB,GAAA,UAAA,CAAA,CAAA,CAAA,CAAA;;AAEM,EAAA,IAAAC,gBAAA,GAAmB,SAAnBA,gBAAmB,CAACC,CAAD,EAAqC;IAC5DF,aAAA,CAAcE,CAAd,CAAA,CAAA;IACAL,YAAA,CAAaK,CAAb,CAAA,CAAA;GAFI,CAAA;;EAKA,IAAAC,OAAA,GAA8CC,kBAAAA,CAAAA,OAA9C,CAAA,CAAA;;AAEN,EAAA,sBACGC,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;AAAIC,IAAAA,qBAAcZ;AAAlB,GAAA,iBACEU,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;AAAIC,IAAAA,qBAAcZ;AAAlB,GAAA,iBACEU,KAAA,CAAAC,aAAA,CAAAE,MAAA,EAAA;AACCC,IAAAA,IAAK,EAAA,OADN;IAECF,qBAAcZ,eAFf,sBAAA,CAAA;AAGCe,IAAAA,UAAY,EAAA;AACVC,MAAAA,4BAAqBhB;KAJxB;AAMCiB,IAAAA,SAAS,EAAA,IANV;AAOCC,IAAAA,KAAO,EAAAd,UAPR;AAQCe,IAAAA,QAAU,EAAAb,gBAAAA;AARX,GAAA,EAUEE,QAAQY,GAAR,CAAY,UAACC,IAAD,EAAA;IAAA,sBACXX,KAAA,CAAAC,aAAA,CAACE,OAAOS,MAAR,EAAC;AAAcC,MAAAA,GAAK,EAAAF,IAAnB;AAAyBH,MAAAA,KAAO,EAAAG,IAAhC;AAAsCG,MAAAA,KAAA,EAAOC,UAAUJ,KAAvD;AAA8DK,MAAAA,KAAA,EAAO;AAAEC,QAAAA,QAAA,EAAU,MAAA;AAAZ,OAAA;AAArE,KAAD,CADW,CAAA;GAAZ,CAVF,CADF,CADF,iBAiBEjB,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;AAAIC,IAAAA,qBAAcZ;GAAlB,iBACEU,KAAA,CAAAC,aAAA,CAAAiB,WAAA,kCAAgB7B,KAAhB,CAAA,EAAA,EAAA,EAAA;AAAuBE,IAAAA,MAAQ,EAAAG,UAAAA;AAA/B,GAAA,CAAA,CADF,CAjBF,CADH,CAAA;AAuBF,CAlCA,CAAA;;AAoCA,oBAAA,aAAeM,KAAA,CAAMmB,IAAN,CAAW/B,WAAX,CAAf;;;;"}