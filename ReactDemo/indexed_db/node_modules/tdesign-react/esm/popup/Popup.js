/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import React, { forwardRef, useState, useRef, useMemo, useEffect, useImperativeHandle } from 'react';
import { CSSTransition } from 'react-transition-group';
import classNames from 'classnames';
import { usePopper } from 'react-popper';
import useControlled from '../hooks/useControlled.js';
import useAnimation from '../_util/useAnimation.js';
import useConfig from '../hooks/useConfig.js';
import Portal from '../common/Portal.js';
import useTrigger from './hooks/useTrigger.js';
import { getRefDom } from './utils/ref.js';
import { getTransitionParams } from './utils/transition.js';
import useMutationObservable from '../_util/useMutationObserver.js';
import useWindowSize from '../_util/useWindowSize.js';
import { popupDefaultProps } from './defaultProps.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-f54ff1e5.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-e1d4dd61.js';
import '../_chunks/dep-236ef238.js';
import '../_chunks/dep-c8bfa11e.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-199b1581.js';
import '../_chunks/dep-e237f0f2.js';
import '../_util/noop.js';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-e430e2ee.js';
import '../_chunks/dep-e54bb0dc.js';
import '../_chunks/dep-b2626e28.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import 'react-dom';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3c98169f.js';
import '../_util/easing.js';
import 'react-is';
import '../_util/composeRefs.js';
import '../_chunks/dep-236b0359.js';
import '../_chunks/dep-6d5c0a90.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Popup = /*#__PURE__*/forwardRef(function (props, ref) {
  var trigger = props.trigger,
      content = props.content,
      placement = props.placement,
      attach = props.attach,
      showArrow = props.showArrow,
      destroyOnClose = props.destroyOnClose,
      overlayClassName = props.overlayClassName,
      overlayInnerClassName = props.overlayInnerClassName,
      overlayStyle = props.overlayStyle,
      overlayInnerStyle = props.overlayInnerStyle,
      triggerElement = props.triggerElement,
      _props$children = props.children,
      children = _props$children === void 0 ? triggerElement : _props$children,
      disabled = props.disabled,
      zIndex = props.zIndex,
      _onScroll = props.onScroll,
      expandAnimation = props.expandAnimation,
      delay = props.delay,
      hideEmptyPopup = props.hideEmptyPopup,
      popperOptions = props.popperOptions,
      updateScrollTop = props.updateScrollTop;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useAnimation = useAnimation(),
      keepExpand = _useAnimation.keepExpand,
      keepFade = _useAnimation.keepFade;

  var _useWindowSize = useWindowSize(),
      windowHeight = _useWindowSize.height,
      windowWidth = _useWindowSize.width;

  var _useControlled = useControlled(props, "visible", props.onVisibleChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      visible = _useControlled2[0],
      onVisibleChange = _useControlled2[1];

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      popupElement = _useState2[0],
      setPopupElement = _useState2[1];

  var triggerRef = useRef(null);
  var popupRef = useRef(null);
  var portalRef = useRef(null);
  var contentRef = useRef(null);
  var popperRef = useRef(null);
  var DEFAULT_TRANSITION_TIMEOUT = 180;

  var _useMemo = useMemo(function () {
    if (Array.isArray(delay)) return delay;
    return [delay, delay];
  }, [delay]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      _useMemo2$ = _useMemo2[0],
      appearDelay = _useMemo2$ === void 0 ? 0 : _useMemo2$,
      _useMemo2$2 = _useMemo2[1],
      exitDelay = _useMemo2$2 === void 0 ? 0 : _useMemo2$2;

  var showOverlay = useMemo(function () {
    if (hideEmptyPopup && !content) return false;
    return visible || popupElement;
  }, [hideEmptyPopup, content, visible, popupElement]);
  var popperPlacement = useMemo(function () {
    return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
  }, [placement]);

  var _useTrigger = useTrigger({
    triggerRef: triggerRef,
    content: content,
    disabled: disabled,
    trigger: trigger,
    visible: visible,
    onVisibleChange: onVisibleChange
  }),
      getTriggerNode = _useTrigger.getTriggerNode,
      getPopupProps = _useTrigger.getPopupProps,
      getTriggerDom = _useTrigger.getTriggerDom;

  var triggerNode = getTriggerNode(children);
  useMutationObservable(getRefDom(triggerRef), function () {
    var _popperRef$current, _popperRef$current$up;

    (_popperRef$current = popperRef.current) === null || _popperRef$current === void 0 ? void 0 : (_popperRef$current$up = _popperRef$current.update) === null || _popperRef$current$up === void 0 ? void 0 : _popperRef$current$up.call(_popperRef$current);
  });
  useEffect(function () {
    var _popperRef$current2, _popperRef$current2$u;

    (_popperRef$current2 = popperRef.current) === null || _popperRef$current2 === void 0 ? void 0 : (_popperRef$current2$u = _popperRef$current2.update) === null || _popperRef$current2$u === void 0 ? void 0 : _popperRef$current2$u.call(_popperRef$current2);
  }, [visible, content, windowHeight, windowWidth]);
  useEffect(function () {
    if (!triggerRef.current) triggerRef.current = getTriggerDom();
    visible && (updateScrollTop === null || updateScrollTop === void 0 ? void 0 : updateScrollTop(contentRef.current));
  }, [visible, updateScrollTop, getTriggerDom]);

  function handleExited() {
    !destroyOnClose && popupElement && (popupElement.style.display = "none");
  }

  function handleEnter() {
    !destroyOnClose && popupElement && (popupElement.style.display = "block");
  }

  popperRef.current = usePopper(getRefDom(triggerRef), popupElement, _objectSpread({
    placement: popperPlacement
  }, popperOptions));
  var _popperRef$current3 = popperRef.current,
      styles = _popperRef$current3.styles,
      attributes = _popperRef$current3.attributes;

  function getOverlayStyle(overlayStyle2) {
    if (getRefDom(triggerRef) && popupRef.current && typeof overlayStyle2 === "function") {
      return _objectSpread({}, overlayStyle2(getRefDom(triggerRef), popupRef.current));
    }

    return _objectSpread({}, overlayStyle2);
  }

  var overlay = showOverlay && /* @__PURE__ */React.createElement(CSSTransition, {
    appear: true,
    "in": visible,
    timeout: {
      appear: DEFAULT_TRANSITION_TIMEOUT + appearDelay,
      enter: DEFAULT_TRANSITION_TIMEOUT + appearDelay,
      exit: DEFAULT_TRANSITION_TIMEOUT + exitDelay
    },
    nodeRef: portalRef,
    unmountOnExit: destroyOnClose,
    onEnter: handleEnter,
    onExited: handleExited
  }, /* @__PURE__ */React.createElement(Portal, {
    triggerNode: getRefDom(triggerRef),
    attach: attach,
    ref: portalRef
  }, /* @__PURE__ */React.createElement(CSSTransition, _objectSpread({
    appear: true,
    timeout: {
      appear: appearDelay,
      enter: appearDelay,
      exit: exitDelay
    },
    "in": visible,
    nodeRef: popupRef
  }, getTransitionParams({
    classPrefix: classPrefix,
    fadeAnimation: keepFade,
    expandAnimation: expandAnimation && keepExpand
  })), /* @__PURE__ */React.createElement("div", _objectSpread(_objectSpread({
    ref: function ref(node) {
      if (node) {
        popupRef.current = node;
        setPopupElement(node);
      }
    },
    style: _objectSpread(_objectSpread({}, styles.popper), {}, {
      zIndex: zIndex
    }, getOverlayStyle(overlayStyle)),
    className: classNames("".concat(classPrefix, "-popup"), overlayClassName)
  }, attributes.popper), getPopupProps()), /* @__PURE__ */React.createElement("div", {
    ref: contentRef,
    className: classNames("".concat(classPrefix, "-popup__content"), _defineProperty({}, "".concat(classPrefix, "-popup__content--arrow"), showArrow), overlayInnerClassName),
    style: getOverlayStyle(overlayInnerStyle),
    onScroll: function onScroll(e) {
      return _onScroll === null || _onScroll === void 0 ? void 0 : _onScroll({
        e: e
      });
    }
  }, showArrow ? /* @__PURE__ */React.createElement("div", {
    style: styles.arrow,
    className: "".concat(classPrefix, "-popup__arrow")
  }) : null, content)))));
  useImperativeHandle(ref, function () {
    return {
      getPopper: function getPopper() {
        return popperRef.current;
      },
      getPopupElement: function getPopupElement() {
        return popupRef.current;
      },
      getPortalElement: function getPortalElement() {
        return portalRef.current;
      }
    };
  });
  return /* @__PURE__ */React.createElement(React.Fragment, null, triggerNode, overlay);
});
Popup.displayName = "Popup";
Popup.defaultProps = popupDefaultProps;

export { Popup as default };
//# sourceMappingURL=Popup.js.map
