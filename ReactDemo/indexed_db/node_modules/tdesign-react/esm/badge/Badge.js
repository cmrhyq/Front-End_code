/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-8368bb87.js';
import React, { forwardRef } from 'react';
import classNames from 'classnames';
import useConfig from '../hooks/useConfig.js';
import { badgeDefaultProps } from './defaultProps.js';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-e430e2ee.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-e54bb0dc.js';
import '../_chunks/dep-b2626e28.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-e237f0f2.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';

var _excluded = ["color", "dot", "maxCount", "count", "size", "shape", "showZero", "offset", "className", "content", "children", "style"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Badge = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var color = _ref.color,
      dot = _ref.dot,
      maxCount = _ref.maxCount,
      count = _ref.count,
      size = _ref.size,
      shape = _ref.shape,
      showZero = _ref.showZero,
      offset = _ref.offset,
      className = _ref.className,
      content = _ref.content,
      children = _ref.children,
      style = _ref.style,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var childNode = content || children;
  var badgeClassName = classNames(!childNode && "".concat(classPrefix, "-badge--static"), dot ? "".concat(classPrefix, "-badge--dot") : "".concat(classPrefix, "-badge--").concat(shape), size === "small" && "".concat(classPrefix, "-size-s"), !childNode && className);

  var getDisplayCount = function getDisplayCount() {
    if (typeof count === "number" && count > maxCount) {
      return "".concat(maxCount, "+");
    }

    return count;
  };

  var isHidden = !count;

  if (typeof count === "number") {
    isHidden = count < 1 && !showZero;
  }

  var getStyle = function getStyle() {
    var mergedStyle = _objectSpread({}, style);

    if (color) mergedStyle.backgroundColor = color;

    if (offset) {
      if (offset[0]) {
        mergedStyle.right = +offset[0];
      }

      if (offset[1]) {
        mergedStyle.marginTop = +offset[1];
      }
    }

    return mergedStyle;
  };

  var badge = !isHidden ? /* @__PURE__ */React.createElement("span", _objectSpread(_objectSpread({}, childNode ? {} : restProps), {}, {
    className: badgeClassName,
    style: getStyle()
  }), !dot ? getDisplayCount() : null) : null;
  if (!childNode) return badge;
  return /* @__PURE__ */React.createElement("span", _objectSpread(_objectSpread({}, restProps), {}, {
    className: classNames("".concat(classPrefix, "-badge"), className),
    ref: ref
  }), childNode, badge);
});
Badge.displayName = "Badge";
Badge.defaultProps = badgeDefaultProps;

export { Badge as default };
//# sourceMappingURL=Badge.js.map
