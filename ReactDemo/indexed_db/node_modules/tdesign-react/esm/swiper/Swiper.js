/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import React, { isValidElement, useState, useRef, useMemo, useCallback, useEffect } from 'react';
import classNames from 'classnames';
import { ChevronLeftIcon, ChevronRightIcon } from 'tdesign-icons-react';
import useConfig from '../hooks/useConfig.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import noop from '../_util/noop.js';
import { swiperDefaultProps } from './defaultProps.js';
import SwiperItem from './SwiperItem.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-e430e2ee.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-e54bb0dc.js';
import '../_chunks/dep-b2626e28.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-e237f0f2.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var CreateArrow = /* @__PURE__ */function (CreateArrow2) {
  CreateArrow2["Default"] = "default";
  CreateArrow2["Fraction"] = "fraction";
  return CreateArrow2;
}(CreateArrow || {});

var ArrowClickDirection = /* @__PURE__ */function (ArrowClickDirection2) {
  ArrowClickDirection2["Left"] = "left";
  ArrowClickDirection2["Right"] = "right";
  return ArrowClickDirection2;
}(ArrowClickDirection || {});

var MouseAction = /* @__PURE__ */function (MouseAction2) {
  MouseAction2["Enter"] = "enter";
  MouseAction2["Leave"] = "leave";
  MouseAction2["Click"] = "click";
  return MouseAction2;
}(MouseAction || {});

var defaultNavigation = {
  placement: "inside",
  showSlideBtn: "always",
  size: "medium",
  type: "bars"
};

var Swiper = function Swiper(props) {
  var _classnames4, _classnames5;

  var animation = props.animation,
      autoplay = props.autoplay,
      current = props.current,
      defaultCurrent = props.defaultCurrent,
      direction = props.direction,
      duration = props.duration,
      interval = props.interval,
      trigger = props.trigger,
      height = props.height,
      loop = props.loop,
      stopOnHover = props.stopOnHover,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      className = props.className,
      children = props.children,
      navigation = props.navigation,
      type = props.type;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useGlobalIcon = useGlobalIcon({
    ChevronLeftIcon: ChevronLeftIcon,
    ChevronRightIcon: ChevronRightIcon
  }),
      ChevronLeftIcon$1 = _useGlobalIcon.ChevronLeftIcon,
      ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;

  var navigationConfig = defaultNavigation;
  var navigationNode = null;

  if ( /*#__PURE__*/isValidElement(navigation)) {
    navigationNode = navigation;
  } else {
    navigationConfig = _objectSpread(_objectSpread({}, defaultNavigation), navigation);
  }

  var _useState = useState(defaultCurrent),
      _useState2 = _slicedToArray(_useState, 2),
      currentIndex = _useState2[0],
      setCurrentIndex = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      needAnimation = _useState4[0],
      setNeedAnimation = _useState4[1];

  var _useState5 = useState(navigationConfig.showSlideBtn === "always"),
      _useState6 = _slicedToArray(_useState5, 2),
      arrowShow = _useState6[0],
      setArrowShow = _useState6[1];

  var swiperTimer = useRef(null);
  var swiperAnimationTimer = useRef(null);
  var isHovering = useRef(false);
  var swiperWrap = useRef(null);

  var getWrapAttribute = function getWrapAttribute(attr) {
    var _swiperWrap$current, _swiperWrap$current$p;

    return (_swiperWrap$current = swiperWrap.current) === null || _swiperWrap$current === void 0 ? void 0 : (_swiperWrap$current$p = _swiperWrap$current.parentNode) === null || _swiperWrap$current$p === void 0 ? void 0 : _swiperWrap$current$p[attr];
  };

  var childrenList = useMemo(function () {
    return React.Children.toArray(children).filter(function (child) {
      return child.type.displayName === SwiperItem.displayName;
    });
  }, [children]);
  var childrenLength = childrenList.length;
  var swiperItemList = childrenList.map(function (child, index) {
    return /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({
      key: index,
      index: index,
      currentIndex: currentIndex,
      needAnimation: needAnimation,
      childrenLength: childrenLength,
      getWrapAttribute: getWrapAttribute
    }, props), child.props));
  });

  if (childrenLength > 0 && type === "default") {
    var firstEle = swiperItemList[0];
    swiperItemList.push( /*#__PURE__*/React.cloneElement(firstEle, _objectSpread(_objectSpread({}, firstEle.props), {}, {
      key: childrenLength,
      index: childrenLength
    })));
  }

  var swiperItemLength = swiperItemList.length;
  var swiperTo = useCallback(function (index, context) {
    onChange(index % childrenLength, context);
    setNeedAnimation(true);
    setCurrentIndex(index);
  }, [childrenLength, onChange]);
  var setTimer = useCallback(function () {
    if (autoplay && interval > 0) {
      swiperTimer.current = setTimeout(function () {
        swiperTo(currentIndex + 1, {
          source: "autoplay"
        });
      }, currentIndex === 0 ? interval - (duration + 50) : interval);
    }
  }, [autoplay, currentIndex, duration, interval, swiperTo]);
  var clearTimer = useCallback(function () {
    if (swiperTimer.current) {
      clearTimeout(swiperTimer.current);
      swiperTimer.current = null;
    }
  }, []);
  var isEnd = useCallback(function () {
    if (type === "card") {
      return !loop && currentIndex + 1 >= swiperItemLength;
    }

    return !loop && currentIndex + 2 >= swiperItemLength;
  }, [loop, currentIndex, swiperItemLength, type]);
  useEffect(function () {
    if (current !== void 0) {
      swiperTo(current % childrenLength, {
        source: "autoplay"
      });
    }
  }, [current, childrenLength, swiperTo]);
  useEffect(function () {
    if (currentIndex + 1 > swiperItemLength && type === "card") {
      return setCurrentIndex(0);
    }

    if (swiperAnimationTimer.current) {
      clearTimeout(swiperAnimationTimer.current);
      swiperAnimationTimer.current = null;
    }

    swiperAnimationTimer.current = setTimeout(function () {
      setNeedAnimation(false);

      if (isEnd()) {
        clearTimer();
      }

      if (currentIndex + 1 >= swiperItemLength && type !== "card") {
        setCurrentIndex(0);
      }
    }, duration + 50);
  }, [currentIndex, swiperItemLength, duration, type, clearTimer, isEnd]);
  useEffect(function () {
    if (!isHovering.current || !stopOnHover) {
      clearTimer();
      setTimer();
    }
  }, [setTimer, clearTimer, stopOnHover]);

  var onMouseEnter = function onMouseEnter() {
    isHovering.current = true;

    if (stopOnHover) {
      clearTimer();
    }

    if (navigationConfig.showSlideBtn === "hover") {
      setArrowShow(true);
    }
  };

  var onMouseLeave = function onMouseLeave() {
    isHovering.current = false;

    if (!isEnd()) {
      setTimer();
    }

    if (navigationConfig.showSlideBtn === "hover") {
      setArrowShow(false);
    }
  };

  var navMouseAction = function navMouseAction(action, index) {
    if (action === "enter"
    /* Enter */
    && trigger === "hover") {
      swiperTo(index, {
        source: "hover"
      });
    }

    if (action === "click"
    /* Click */
    && trigger === "click") {
      swiperTo(index, {
        source: "click"
      });
    }
  };

  var arrowClick = function arrowClick(direction2) {
    if (needAnimation) {
      return false;
    }

    if (direction2 === "right"
    /* Right */
    ) {
      if (type === "card") {
        return swiperTo(currentIndex + 1 >= swiperItemLength ? 0 : currentIndex + 1, {
          source: "click"
        });
      }

      return swiperTo(currentIndex + 1, {
        source: "click"
      });
    }

    if (direction2 === "left"
    /* Left */
    ) {
      if (currentIndex - 1 < 0) {
        return swiperTo(childrenLength - 1, {
          source: "click"
        });
      }

      return swiperTo(currentIndex - 1, {
        source: "click"
      });
    }
  };

  var createArrow = function createArrow(type2) {
    if (!arrowShow) {
      return "";
    }

    if (navigationConfig.type === "fraction" && type2 === "default"
    /* Default */
    ) {
      return "";
    }

    var fractionIndex = currentIndex + 1 > childrenLength ? 1 : currentIndex + 1;
    return /* @__PURE__ */React.createElement("div", {
      className: classNames("".concat(classPrefix, "-swiper__arrow"), _defineProperty({}, "".concat(classPrefix, "-swiper__arrow--default"), type2 === "default"))
    }, /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-swiper__arrow-left"),
      onClick: function onClick() {
        return arrowClick("left"
        /* Left */
        );
      }
    }, /* @__PURE__ */React.createElement(ChevronLeftIcon$1, null)), type2 === "fraction"
    /* Fraction */
    ? /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-swiper__navigation-text-fraction")
    }, fractionIndex, "/", childrenLength) : "", /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-swiper__arrow-right"),
      onClick: function onClick() {
        return arrowClick("right"
        /* Right */
        );
      }
    }, /* @__PURE__ */React.createElement(ChevronRightIcon$1, null)));
  };

  var createNavigation = function createNavigation() {
    if (navigationConfig.type === "fraction") {
      return /* @__PURE__ */React.createElement("div", {
        className: classNames("".concat(classPrefix, "-swiper__navigation"), "".concat(classPrefix, "-swiper__navigation--fraction"))
      }, createArrow("fraction"
      /* Fraction */
      ));
    }

    return navigationNode ? /* @__PURE__ */React.createElement(React.Fragment, null, navigationNode) : /* @__PURE__ */React.createElement("ul", {
      className: classNames("".concat(classPrefix, "-swiper__navigation"), _defineProperty({}, "".concat(classPrefix, "-swiper__navigation-bars"), navigationConfig.type === "bars"))
    }, childrenList.map(function (_, i) {
      return /* @__PURE__ */React.createElement("li", {
        key: i,
        className: classNames("".concat(classPrefix, "-swiper__navigation-item"), _defineProperty({}, "".concat(classPrefix, "-is-active"), i === currentIndex % childrenLength)),
        onClick: function onClick() {
          return navMouseAction("click"
          /* Click */
          , i);
        },
        onMouseEnter: function onMouseEnter() {
          return navMouseAction("enter"
          /* Enter */
          , i);
        },
        onMouseLeave: function onMouseLeave() {
          return navMouseAction("leave"
          /* Leave */
          , i);
        }
      }, /* @__PURE__ */React.createElement("span", null));
    }));
  };

  var getWrapperStyle = function getWrapperStyle() {
    var offsetHeight = height ? "".concat(height, "px") : "".concat(getWrapAttribute("offsetHeight"), "px");

    if (type === "card" || animation === "fade") {
      return {
        height: offsetHeight
      };
    }

    if (animation === "slide") {
      if (direction === "vertical") {
        return {
          height: offsetHeight,
          msTransform: "translate3d(0, -".concat(currentIndex * 100, "%, 0px)"),
          WebkitTransform: "translate3d(0, -".concat(currentIndex * 100, "%, 0px)"),
          transform: "translate3d(0, -".concat(currentIndex * 100, "%, 0px)"),
          transition: needAnimation ? "transform ".concat(duration / 1e3, "s ease") : ""
        };
      }

      return {
        msTransform: "translate3d(-".concat(currentIndex * 100, "%, 0px, 0px)"),
        WebkitTransform: "translate3d(-".concat(currentIndex * 100, "%, 0px, 0px)"),
        transform: "translate3d(-".concat(currentIndex * 100, "%, 0px, 0px)"),
        transition: needAnimation ? "transform ".concat(duration / 1e3, "s ease") : ""
      };
    }
  };

  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-swiper"), className),
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    ref: swiperWrap
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-swiper__wrap"), (_classnames4 = {}, _defineProperty(_classnames4, "".concat(classPrefix, "-swiper--inside"), navigationConfig.placement === "inside"), _defineProperty(_classnames4, "".concat(classPrefix, "-swiper--outside"), navigationConfig.placement === "outside"), _defineProperty(_classnames4, "".concat(classPrefix, "-swiper--vertical"), direction === "vertical"), _defineProperty(_classnames4, "".concat(classPrefix, "-swiper--large"), navigationConfig.size === "large"), _defineProperty(_classnames4, "".concat(classPrefix, "-swiper--small"), navigationConfig.size === "small"), _classnames4))
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-swiper__content"), (_classnames5 = {}, _defineProperty(_classnames5, "".concat(classPrefix, "-swiper-fade"), animation === "fade"), _defineProperty(_classnames5, "".concat(classPrefix, "-swiper-card"), type === "card"), _classnames5)),
    style: {
      height: ""
    }
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-swiper__container"),
    style: getWrapperStyle()
  }, swiperItemList)), createNavigation(), createArrow("default"
  /* Default */
  )));
};

Swiper.SwiperItem = SwiperItem;
Swiper.displayName = "Swiper";
Swiper.defaultProps = swiperDefaultProps;

export { Swiper as default };
//# sourceMappingURL=Swiper.js.map
