{"version":3,"file":"FormList.js","sources":["../../src/form/FormList.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useImperativeHandle } from 'react';\nimport { FormListContext, useFormContext } from './FormContext';\nimport { FormItemInstance } from './FormItem';\nimport { TdFormListProps, FormListFieldOperation, FormListField } from './type';\nimport log from '../_common/js/log';\n\nlet key = 0;\n\nconst FormList = (props: TdFormListProps) => {\n  const { formMapRef } = useFormContext();\n  const { name, initialData = [], rules, children } = props;\n\n  const [initialValue, setInitialValue] = useState(initialData);\n  const [fields, setFields] = useState<Array<FormListField>>(\n    initialData.map((data, index) => ({\n      key: (key += 1),\n      name: index,\n      isListField: true,\n      ...data,\n    })),\n  );\n  const formListMapRef = useRef(new Map()); // 收集 formItem 实例\n  const formListRef = useRef<FormItemInstance>(); // 当前 formList 实例\n\n  const operation: FormListFieldOperation = {\n    add(defaultValue?: any, insertIndex?: number) {\n      const cloneFields = [...fields];\n      const index = insertIndex ?? cloneFields.length;\n      cloneFields.splice(index, 0, {\n        key: (key += 1),\n        name: index,\n        isListField: true,\n      });\n      cloneFields.forEach((field, index) => Object.assign(field, { name: index }));\n      setFields(cloneFields);\n\n      if (typeof defaultValue !== 'undefined') {\n        const nextInitialValue = [...initialValue];\n        nextInitialValue[index] = defaultValue;\n        setInitialValue(nextInitialValue);\n      }\n    },\n    remove(index: number | number[]) {\n      const nextFields = fields\n        .filter((_, i) => {\n          if (Array.isArray(index)) return !index.includes(i);\n          return i !== index;\n        })\n        .map((field, index) => Object.assign(field, { name: index }));\n\n      setInitialValue(initialValue.filter((_, idx) => idx !== index));\n      setFields(nextFields);\n    },\n    move(from: number, to: number) {\n      const cloneFields = [...fields];\n      const fromItem = { ...cloneFields[from] };\n      const toItem = { ...cloneFields[to] };\n      cloneFields[to] = fromItem;\n      cloneFields[from] = toItem;\n      setFields(cloneFields);\n    },\n  };\n\n  // 外部设置 fields 优先级最高，可以更改渲染的节点\n  function setListFields(fieldData: any[], callback: Function) {\n    setFields(\n      fieldData.map((_, index) => ({\n        key: (key += 1),\n        name: index,\n        isListField: true,\n      })),\n    );\n    // 延迟至 microtask 队列末尾再赋值\n    Promise.resolve().then(() => {\n      [...formListMapRef.current.values()].forEach((formItemRef) => {\n        const { name } = formItemRef.current;\n        let data;\n        if (Array.isArray(name)) {\n          const [index, itemKey] = name;\n          data = fieldData?.[index]?.[itemKey];\n        } else {\n          data = fieldData?.[name];\n        }\n        callback(formItemRef, data);\n      });\n    });\n  }\n\n  useEffect(() => {\n    [...formListMapRef.current.values()].forEach((formItemRef) => {\n      const { name, value } = formItemRef.current;\n      if (value) return;\n\n      let data;\n      if (Array.isArray(name)) {\n        const [index, itemKey] = name;\n        data = initialValue?.[index]?.[itemKey];\n      } else {\n        data = initialValue?.[name];\n      }\n      formItemRef.current.setField({ value: data, status: 'not' });\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fields, initialValue]);\n\n  useEffect(() => {\n    if (!name || !formMapRef) return;\n    formMapRef.current.set(name, formListRef);\n\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      formMapRef.current.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [name]);\n\n  useImperativeHandle(\n    formListRef,\n    (): FormItemInstance => ({\n      name,\n      getValue() {\n        const formListValue = [];\n        [...formListMapRef.current.values()].forEach((formItemRef) => {\n          const { name, getValue } = formItemRef.current;\n          if (Array.isArray(name)) {\n            const [index, itemKey] = name;\n            if (!formListValue[index]) {\n              formListValue[index] = { [itemKey]: getValue() };\n            } else {\n              formListValue[index][itemKey] = getValue();\n            }\n          } else {\n            formListValue[name] = getValue();\n          }\n        });\n        return formListValue;\n      },\n      validate: (trigger = 'all') => {\n        const resultList = [];\n        const validates = [...formListMapRef.current.values()].map((formItemRef) =>\n          formItemRef.current.validate(trigger),\n        );\n        return new Promise((resolve) => {\n          Promise.all(validates).then((validateResult) => {\n            validateResult.forEach((result) => {\n              const errorKey = Object.keys(result)[0];\n              const errorValue = Object.values(result)[0];\n              const [index, itemKey] = errorKey.split(',');\n              if (itemKey) {\n                resultList[index] = { [itemKey]: errorValue };\n              } else {\n                resultList[index] = errorValue;\n              }\n            });\n            const errorItems = validateResult.filter((item) => Object.values(item)[0] !== true);\n            if (errorItems.length) {\n              resolve({ [name]: resultList });\n            } else {\n              resolve({ [name]: true });\n            }\n          });\n        });\n      },\n      setValue: (fieldData: any[]) => {\n        setListFields(fieldData, (formItemRef, data) => {\n          formItemRef?.current?.setValue(data);\n        });\n      },\n      setField: (fieldData: { value?: any[]; status?: string }) => {\n        const { value, status } = fieldData;\n        setListFields(value, (formItemRef, data) => {\n          formItemRef?.current?.setField({ value: data, status });\n        });\n      },\n      resetField: () => {\n        [...formListMapRef.current.values()].forEach((formItemRef) => {\n          formItemRef.current.resetField();\n        });\n        setInitialValue([]);\n      },\n      setValidateMessage: (fieldData) => {\n        [...formListMapRef.current.values()].forEach((formItemRef) => {\n          const { name } = formItemRef.current;\n          let data;\n          if (Array.isArray(name)) {\n            const [index, itemKey] = name;\n            data = fieldData?.[index]?.[itemKey];\n          } else {\n            data = fieldData?.[name];\n          }\n\n          formItemRef.current.setValidateMessage(data);\n        });\n      },\n      resetValidate: () => {\n        [...formListMapRef.current.values()].forEach((formItemRef) => {\n          formItemRef.current.resetValidate();\n        });\n      },\n    }),\n  );\n\n  if (typeof children !== 'function') {\n    log.error('Form', `FormList's children must be a function!`);\n    return null;\n  }\n\n  return (\n    <FormListContext.Provider value={{ name, rules, formListMapRef }}>\n      {children(fields, operation)}\n    </FormListContext.Provider>\n  );\n};\n\nFormList.displayName = 'FormList';\n\nexport default FormList;\n"],"names":["key","FormList","props","useFormContext","formMapRef","name","initialData","rules","children","useState","initialValue","setInitialValue","map","data","index","isListField","fields","setFields","formListMapRef","useRef","Map","formListRef","operation","add","defaultValue","insertIndex","cloneFields","length","splice","forEach","field","Object","assign","nextInitialValue","remove","nextFields","filter","_","i","Array","isArray","includes","idx","move","from","to","fromItem","toItem","setListFields","fieldData","callback","Promise","resolve","then","current","values","formItemRef","itemKey","useEffect","value","setField","status","set","useImperativeHandle","getValue","formListValue","validate","trigger","resultList","validates","all","validateResult","result","errorKey","keys","errorValue","split","errorItems","item","setValue","resetField","setValidateMessage","resetValidate","log","error","React","createElement","FormListContext","Provider","displayName"],"mappings":"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"}