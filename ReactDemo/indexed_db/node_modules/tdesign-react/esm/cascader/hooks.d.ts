/// <reference types="react" />
import { TreeNode, TreeNodeValue, TdCascaderProps, TreeNodeModel, CascaderChangeSource, CascaderValue } from './interface';
export declare const useCascaderContext: (props: TdCascaderProps) => {
    cascaderContext: {
        value: any;
        size: import("../common").SizeEnum;
        checkStrictly: boolean;
        lazy: boolean;
        multiple: boolean;
        filterable: boolean;
        clearable: boolean;
        checkProps: import("..").CheckboxProps;
        max: number;
        disabled: boolean;
        showAllLevels: boolean;
        minCollapsedNum: number;
        valueType: "full" | "single";
        treeStore: any;
        setValue: (val: CascaderValue, source: CascaderChangeSource, node?: TreeNodeModel) => void;
        visible: boolean;
        setVisible: import("../hooks/useControlled").ChangeHandler<boolean, [context: import("..").PopupVisibleChangeContext]>;
        treeNodes: TreeNode[];
        setTreeNodes: import("react").Dispatch<import("react").SetStateAction<TreeNode[]>>;
        inputVal: string | number;
        setInputVal: import("react").Dispatch<import("react").SetStateAction<string | number>>;
        setExpend: import("react").Dispatch<import("react").SetStateAction<TreeNodeValue[]>>;
    };
    isFilterable: boolean;
};
