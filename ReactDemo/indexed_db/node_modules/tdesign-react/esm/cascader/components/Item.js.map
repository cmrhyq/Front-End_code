{"version":3,"file":"Item.js","sources":["../../../src/cascader/components/Item.tsx"],"sourcesContent":["import React, { useRef, forwardRef, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { ChevronRightIcon as TdChevronRightIcon } from 'tdesign-icons-react';\n\nimport TLoading from '../../loading';\nimport Checkbox from '../../checkbox/Checkbox';\n\nimport useConfig from '../../hooks/useConfig';\nimport useGlobalIcon from '../../hooks/useGlobalIcon';\nimport useCommonClassName from '../../_util/useCommonClassName';\nimport useRipple from '../../_util/useRipple';\n\nimport { getFullPathLabel } from '../core/helper';\nimport { getCascaderItemClass, getCascaderItemIconClass } from '../core/className';\nimport { CascaderContextType, TreeNodeValue, TreeNode } from '../interface';\n\nconst Item = forwardRef(\n  (\n    props: {\n      node: TreeNode;\n      cascaderContext: CascaderContextType;\n      onClick: (ctx: TreeNode) => void;\n      onChange: (ctx: TreeNode | { e: boolean; node: TreeNode }) => void;\n      onMouseEnter: (ctx: TreeNode) => void;\n    },\n    ref: React.RefObject<HTMLLIElement>,\n  ) => {\n    const {\n      node,\n      cascaderContext: { multiple },\n      onClick,\n      onChange,\n      onMouseEnter,\n      cascaderContext,\n    } = props;\n    const { classPrefix: prefix } = useConfig();\n    const { ChevronRightIcon } = useGlobalIcon({ ChevronRightIcon: TdChevronRightIcon });\n    const COMPONENT_NAME = `${prefix}-cascader__item`;\n    const itemRef = useRef();\n    useRipple(ref || itemRef);\n\n    /**\n     * class\n     */\n    const { STATUS, SIZE } = useCommonClassName();\n\n    const itemClass = useMemo(\n      () => classNames(getCascaderItemClass(prefix, node, SIZE, STATUS, cascaderContext)),\n      [prefix, node, SIZE, STATUS, cascaderContext],\n    );\n\n    const iconClass = useMemo(\n      () => classNames(getCascaderItemIconClass(prefix, node, STATUS, cascaderContext)),\n      [prefix, node, STATUS, cascaderContext],\n    );\n\n    const RenderLabelInner = (node: TreeNode, cascaderContext: CascaderContextType) => {\n      const { inputVal } = cascaderContext;\n      const labelText = inputVal ? getFullPathLabel(node) : node.label;\n\n      if (inputVal) {\n        const texts = labelText.split(inputVal as string);\n        const doms = [];\n        for (let index = 0; index < texts.length; index++) {\n          doms.push(<span key={index}>{texts[index]}</span>);\n          if (index === texts.length - 1) break;\n          doms.push(\n            <span key={`${index}filter`} className={`${COMPONENT_NAME}-label--filter`}>\n              {inputVal}\n            </span>,\n          );\n        }\n        return doms;\n      }\n      return labelText;\n    };\n\n    const RenderLabelContent = (node: TreeNode, cascaderContext: CascaderContextType) => {\n      const label = RenderLabelInner(node, cascaderContext);\n\n      const labelCont = (\n        <span\n          title={cascaderContext.inputVal ? getFullPathLabel(node) : node.label}\n          className={classNames(`${COMPONENT_NAME}-label`, `${COMPONENT_NAME}-label--ellipsis`)}\n          role=\"label\"\n        >\n          {label}\n        </span>\n      );\n\n      return labelCont;\n    };\n\n    const RenderCheckBox = (node: TreeNode, cascaderContext: CascaderContextType) => {\n      const { checkProps, value, max, inputVal } = cascaderContext;\n      const label = RenderLabelInner(node, cascaderContext);\n      return (\n        <Checkbox\n          checked={node.checked}\n          indeterminate={node.indeterminate}\n          disabled={node.isDisabled() || (value && (value as TreeNodeValue[]).length >= max && max !== 0)}\n          name={String(node.value)}\n          stopLabelTrigger={true}\n          title={inputVal ? getFullPathLabel(node) : node.label}\n          onChange={() => {\n            onChange(node);\n          }}\n          {...checkProps}\n        >\n          {label}\n        </Checkbox>\n      );\n    };\n\n    return (\n      <li\n        ref={ref || itemRef}\n        className={itemClass}\n        onClick={(e: React.MouseEvent) => {\n          e.stopPropagation();\n          e?.nativeEvent?.stopImmediatePropagation?.();\n\n          onClick(node);\n        }}\n        onMouseEnter={(e: React.MouseEvent) => {\n          e.stopPropagation();\n          onMouseEnter(node);\n        }}\n      >\n        {multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext)}\n        {node.children &&\n          (node.loading ? (\n            <TLoading className={iconClass} loading={true} size=\"small\" />\n          ) : (\n            <ChevronRightIcon className={iconClass} />\n          ))}\n      </li>\n    );\n  },\n);\n\nexport default Item;\n"],"names":["Item","forwardRef","props","ref","node","multiple","cascaderContext","onClick","onChange","onMouseEnter","useConfig","prefix","classPrefix","useGlobalIcon","ChevronRightIcon","TdChevronRightIcon","COMPONENT_NAME","itemRef","useRef","useRipple","useCommonClassName","STATUS","SIZE","itemClass","useMemo","classNames","getCascaderItemClass","iconClass","getCascaderItemIconClass","RenderLabelInner","inputVal","labelText","getFullPathLabel","label","texts","split","doms","index","length","push","React","createElement","key","className","RenderLabelContent","labelCont","title","role","RenderCheckBox","checkProps","value","max","Checkbox","checked","indeterminate","disabled","isDisabled","name","String","stopLabelTrigger","e","stopPropagation","nativeEvent","stopImmediatePropagation","children","loading","TLoading","size"],"mappings":"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"}