/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../_chunks/dep-4e0da095.js';
import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-8368bb87.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import React, { useRef, useState, useEffect, useImperativeHandle } from 'react';
import classNames from 'classnames';
import { BrowseIcon, BrowseOffIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';
import { i as isFunction_1 } from '../_chunks/dep-e430e2ee.js';
import forwardRefWithStatics from '../_util/forwardRefWithStatics.js';
import useConfig from '../hooks/useConfig.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import { limitUnicodeMaxLength, getCharacterLength } from '../_common/js/utils/helper.js';
import InputGroup from './InputGroup.js';
import useControlled from '../hooks/useControlled.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import { inputDefaultProps } from './defaultProps.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-1cce5a60.js';
import '../_chunks/dep-4a64abb1.js';
import '../_chunks/dep-e54bb0dc.js';
import '../_chunks/dep-b2626e28.js';
import 'hoist-non-react-statics';
import '../_chunks/dep-13a70a46.js';
import '../_chunks/dep-dc1ce7ed.js';
import '../_chunks/dep-4e2181de.js';
import '../_chunks/dep-c197ce4f.js';
import '../_chunks/dep-5a2778c1.js';
import '../_chunks/dep-a2b97df8.js';
import '../_chunks/dep-7aeeb170.js';
import '../_chunks/dep-2afd805c.js';
import '../_chunks/dep-e237f0f2.js';
import '../_chunks/dep-4ed2dce5.js';
import '../_chunks/dep-c8db35c0.js';
import '../_chunks/dep-96aef4a9.js';
import '../_chunks/dep-557a1b0f.js';
import '../_chunks/dep-264b0e55.js';
import '../_chunks/dep-f5693bf6.js';
import '../_chunks/dep-fdd1d1a6.js';
import '../_chunks/dep-7ff8b18e.js';
import '../_chunks/dep-ebf3a272.js';
import '../_chunks/dep-6a2482c6.js';
import '../_chunks/dep-a980ac05.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../_chunks/dep-59b9253f.js';
import '../_chunks/dep-d1b4ab24.js';
import '../_chunks/dep-f54ff1e5.js';
import '../_chunks/dep-e1d4dd61.js';
import '../_chunks/dep-236ef238.js';
import '../_chunks/dep-c8bfa11e.js';
import '../_chunks/dep-199b1581.js';
import '../_util/noop.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';

var _excluded = ["type", "autoWidth", "placeholder", "disabled", "status", "size", "className", "inputClass", "style", "prefixIcon", "suffixIcon", "clearable", "tips", "align", "maxlength", "maxcharacter", "showClearIconOnEmpty", "autofocus", "autocomplete", "readonly", "label", "suffix", "showInput", "keepWrapperWidth", "format", "onClick", "onClear", "onEnter", "onKeydown", "onKeyup", "onKeypress", "onFocus", "onBlur", "onPaste", "onMouseenter", "onMouseleave", "onWheel", "onCompositionstart", "onCompositionend", "onChange"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var renderIcon = function renderIcon(classPrefix, type, icon) {
  var result = null;
  if (icon) result = icon;
  if (typeof icon === "function") result = icon();
  var iconClassName = icon ? "".concat(classPrefix, "-input__").concat(type, "-icon") : "";

  if (result) {
    result = /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix, "-input__").concat(type, " ").concat(iconClassName)
    }, result);
  }

  return result;
};

var Input = forwardRefWithStatics(function (props, ref) {
  var _classNames;

  var _useLocaleReceiver = useLocaleReceiver("input"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var _useGlobalIcon = useGlobalIcon({
    BrowseIcon: BrowseIcon,
    BrowseOffIcon: BrowseOffIcon,
    CloseCircleFilledIcon: CloseCircleFilledIcon
  }),
      BrowseIcon$1 = _useGlobalIcon.BrowseIcon,
      BrowseOffIcon$1 = _useGlobalIcon.BrowseOffIcon,
      CloseCircleFilledIcon$1 = _useGlobalIcon.CloseCircleFilledIcon;

  var type = props.type,
      autoWidth = props.autoWidth,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? t(local.placeholder) : _props$placeholder,
      disabled = props.disabled,
      status = props.status,
      size = props.size,
      className = props.className,
      inputClass = props.inputClass,
      style = props.style,
      prefixIcon = props.prefixIcon,
      suffixIcon = props.suffixIcon,
      clearable = props.clearable,
      tips = props.tips,
      align = props.align,
      maxlength = props.maxlength,
      maxcharacter = props.maxcharacter,
      showClearIconOnEmpty = props.showClearIconOnEmpty,
      autofocus = props.autofocus,
      autocomplete = props.autocomplete,
      readonly = props.readonly,
      label = props.label,
      suffix = props.suffix,
      _props$showInput = props.showInput,
      showInput = _props$showInput === void 0 ? true : _props$showInput,
      keepWrapperWidth = props.keepWrapperWidth,
      format = props.format,
      _onClick = props.onClick,
      onClear = props.onClear,
      onEnter = props.onEnter,
      onKeydown = props.onKeydown,
      onKeyup = props.onKeyup,
      onKeypress = props.onKeypress,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onPaste = props.onPaste,
      onMouseenter = props.onMouseenter,
      onMouseleave = props.onMouseleave,
      onWheel = props.onWheel,
      onCompositionstart = props.onCompositionstart,
      onCompositionend = props.onCompositionend,
      onChangeFromProps = props.onChange,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useControlled = useControlled(props, "value", onChangeFromProps),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var composingRef = useRef(false);
  var inputRef = useRef();
  var inputPreRef = useRef();
  var wrapperRef = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHover = _useState2[0],
      toggleIsHover = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isFocused = _useState4[0],
      toggleIsFocused = _useState4[1];

  var _useState5 = useState(type),
      _useState6 = _slicedToArray(_useState5, 2),
      renderType = _useState6[0],
      setRenderType = _useState6[1];

  var _useState7 = useState(""),
      _useState8 = _slicedToArray(_useState7, 2),
      composingValue = _useState8[0],
      setComposingValue = _useState8[1];

  var isShowClearIcon = (clearable && value && !disabled || showClearIconOnEmpty) && isHover;
  var prefixIconContent = renderIcon(classPrefix, "prefix", prefixIcon);
  var suffixIconNew = suffixIcon;
  if (isShowClearIcon) suffixIconNew = /* @__PURE__ */React.createElement(CloseCircleFilledIcon$1, {
    className: "".concat(classPrefix, "-input__suffix-clear"),
    onClick: handleClear
  });

  if (type === "password" && typeof suffixIcon === "undefined") {
    if (renderType === "password") {
      suffixIconNew = /* @__PURE__ */React.createElement(BrowseOffIcon$1, {
        className: "".concat(classPrefix, "-input__suffix-clear"),
        onClick: togglePasswordVisible
      });
    } else if (renderType === "text") {
      suffixIconNew = /* @__PURE__ */React.createElement(BrowseIcon$1, {
        className: "".concat(classPrefix, "-input__suffix-clear"),
        onClick: togglePasswordVisible
      });
    }
  }

  var suffixIconContent = renderIcon(classPrefix, "suffix", suffixIconNew);
  var labelContent = isFunction_1(label) ? label() : label;
  var suffixContent = isFunction_1(suffix) ? suffix() : suffix;
  useEffect(function () {
    var _inputPreRef$current, _inputPreRef$current2;

    if (!autoWidth) return;
    if (((_inputPreRef$current = inputPreRef.current) === null || _inputPreRef$current === void 0 ? void 0 : _inputPreRef$current.offsetWidth) === 0) return;
    if (inputRef.current) inputRef.current.style.width = "".concat((_inputPreRef$current2 = inputPreRef.current) === null || _inputPreRef$current2 === void 0 ? void 0 : _inputPreRef$current2.offsetWidth, "px");
  }, [autoWidth, value, placeholder, inputRef]);
  useEffect(function () {
    setRenderType(type);
  }, [type]);
  var renderInput = /* @__PURE__ */React.createElement("input", {
    ref: inputRef,
    placeholder: placeholder,
    type: renderType,
    className: "".concat(classPrefix, "-input__inner"),
    value: composingRef.current ? composingValue : value !== null && value !== void 0 ? value : "",
    readOnly: readonly,
    disabled: disabled,
    autoComplete: autocomplete !== null && autocomplete !== void 0 ? autocomplete : local.autocomplete || void 0,
    autoFocus: autofocus,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    onKeyPress: handleKeyPress,
    onCompositionStart: handleCompositionStart,
    onCompositionEnd: handleCompositionEnd,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onPaste: handlePaste
  });
  var renderInputNode = /* @__PURE__ */React.createElement("div", {
    className: classNames(inputClass, "".concat(classPrefix, "-input"), (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-is-readonly"), readonly), _defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames, "".concat(classPrefix, "-is-focused"), isFocused), _defineProperty(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty(_classNames, "".concat(classPrefix, "-size-m"), size === "medium"), _defineProperty(_classNames, "".concat(classPrefix, "-align-").concat(align), align), _defineProperty(_classNames, "".concat(classPrefix, "-is-").concat(status), status), _defineProperty(_classNames, "".concat(classPrefix, "-input--prefix"), prefixIcon || labelContent), _defineProperty(_classNames, "".concat(classPrefix, "-input--suffix"), suffixIconContent || suffixContent), _defineProperty(_classNames, "".concat(classPrefix, "-input--focused"), isFocused), _classNames)),
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onWheel: handleWheel,
    onClick: function onClick(e) {
      return _onClick === null || _onClick === void 0 ? void 0 : _onClick({
        e: e
      });
    }
  }, prefixIconContent, labelContent ? /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-input__prefix")
  }, labelContent) : null, showInput && renderInput, autoWidth && /* @__PURE__ */React.createElement("span", {
    ref: inputPreRef,
    className: "".concat(classPrefix, "-input__input-pre")
  }, value || props.placeholder), suffixContent ? /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-input__suffix")
  }, suffixContent) : null, suffixIconContent);

  function togglePasswordVisible() {
    var toggleType = renderType === "password" ? "text" : "password";
    setRenderType(toggleType);
  }

  function handleChange(e) {
    var value2 = e.currentTarget.value;

    if (composingRef.current) {
      setComposingValue(value2);
    } else {
      value2 = limitUnicodeMaxLength(value2, maxlength);

      if (typeof maxcharacter === "number" && maxcharacter >= 0) {
        var stringInfo = getCharacterLength(value2, maxcharacter);
        value2 = _typeof(stringInfo) === "object" && stringInfo.characters;
      }

      setComposingValue(value2);
      onChange(value2, {
        e: e
      });
    }
  }

  function handleClear(e) {
    onChange === null || onChange === void 0 ? void 0 : onChange("", {
      e: e
    });
    onClear === null || onClear === void 0 ? void 0 : onClear({
      e: e
    });
  }

  function handleKeyDown(e) {
    var key = e.key,
        value2 = e.currentTarget.value;
    key === "Enter" && (onEnter === null || onEnter === void 0 ? void 0 : onEnter(value2, {
      e: e
    }));
    onKeydown === null || onKeydown === void 0 ? void 0 : onKeydown(value2, {
      e: e
    });
  }

  function handleKeyUp(e) {
    var value2 = e.currentTarget.value;
    onKeyup === null || onKeyup === void 0 ? void 0 : onKeyup(value2, {
      e: e
    });
  }

  function handleKeyPress(e) {
    var value2 = e.currentTarget.value;
    onKeypress === null || onKeypress === void 0 ? void 0 : onKeypress(value2, {
      e: e
    });
  }

  function handleCompositionStart(e) {
    composingRef.current = true;
    var value2 = e.currentTarget.value;
    onCompositionstart === null || onCompositionstart === void 0 ? void 0 : onCompositionstart(value2, {
      e: e
    });
  }

  function handleCompositionEnd(e) {
    var value2 = e.currentTarget.value;

    if (composingRef.current) {
      composingRef.current = false;
      handleChange(e);
    }

    onCompositionend === null || onCompositionend === void 0 ? void 0 : onCompositionend(value2, {
      e: e
    });
  }

  function handleFocus(e) {
    if (readonly) return;
    var value2 = e.currentTarget.value;
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(value2, {
      e: e
    });
    toggleIsFocused(true);
  }

  function handleBlur(e) {
    if (readonly) return;
    var value2 = e.currentTarget.value;
    format && onChange(format(value2), {
      e: e
    });
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(value2, {
      e: e
    });
    toggleIsFocused(false);
  }

  function handlePaste(e) {
    var clipData = e.clipboardData;
    var pasteValue = clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain");
    onPaste === null || onPaste === void 0 ? void 0 : onPaste({
      e: e,
      pasteValue: pasteValue
    });
  }

  function handleMouseEnter(e) {
    toggleIsHover(true);
    onMouseenter === null || onMouseenter === void 0 ? void 0 : onMouseenter({
      e: e
    });
  }

  function handleMouseLeave(e) {
    toggleIsHover(false);
    onMouseleave === null || onMouseleave === void 0 ? void 0 : onMouseleave({
      e: e
    });
  }

  function handleWheel(e) {
    onWheel === null || onWheel === void 0 ? void 0 : onWheel({
      e: e
    });
  }

  useImperativeHandle(ref, function () {
    return {
      currentElement: wrapperRef.current,
      inputElement: inputRef.current,
      focus: function focus() {
        var _inputRef$current;

        return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
      },
      blur: function blur() {
        var _inputRef$current2;

        return (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.blur();
      },
      select: function select() {
        var _inputRef$current3;

        return (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.select();
      }
    };
  });
  return /* @__PURE__ */React.createElement("div", _objectSpread({
    ref: wrapperRef,
    style: style,
    className: classNames("".concat(classPrefix, "-input__wrap"), className, _defineProperty({}, "".concat(classPrefix, "-input--auto-width"), autoWidth && !keepWrapperWidth))
  }, restProps), renderInputNode, tips && /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-input__tips"), "".concat(classPrefix, "-input__tips--").concat(status || "normal"))
  }, tips));
}, {
  Group: InputGroup
});
Input.displayName = "Input";
Input.defaultProps = inputDefaultProps;

export { Input as default };
//# sourceMappingURL=Input.js.map
