/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-1e32006c.js';
import React, { useMemo } from 'react';
import classNames from 'classnames';
import { BrowseIcon, DeleteIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon, TimeFilledIcon } from 'tdesign-icons-react';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import { ImageViewer } from '../../image-viewer/index.js';
import { Button } from '../../button/index.js';
import useDrag from '../hooks/useDrag.js';
import { abridgeName, returnFileSize } from '../../_common/js/upload/utils.js';
import { Loading } from '../../loading/index.js';
import '../../hooks/useConfig.js';
import '../../_chunks/dep-918e41e2.js';
import '../../_chunks/dep-734a21a0.js';
import '../../_chunks/dep-68f7a306.js';
import '../../_chunks/dep-a74f6fff.js';
import '../../_chunks/dep-d23d346c.js';
import '../../_chunks/dep-9ea787ca.js';
import '../../_chunks/dep-4e0da095.js';
import '../../_chunks/dep-0e2dfd87.js';
import '../../_chunks/dep-f50ff346.js';
import '../../_chunks/dep-51592cde.js';
import '../../_chunks/dep-ae94c4e7.js';
import '../../_chunks/dep-7f6754ac.js';
import '../../_chunks/dep-2509667d.js';
import '../../_chunks/dep-b817c90e.js';
import '../../_chunks/dep-fe9825b6.js';
import '../../_chunks/dep-ebc05da7.js';
import '../../_chunks/dep-3160df29.js';
import '../../_chunks/dep-c91b3852.js';
import '../../_chunks/dep-9e44c34c.js';
import '../../_chunks/dep-0c62d47a.js';
import '../../_chunks/dep-e2fe68b7.js';
import '../../_chunks/dep-44a03722.js';
import '../../_chunks/dep-f5616354.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import '../../image-viewer/ImageViewer.js';
import '../../_chunks/dep-9615f03f.js';
import '../../_chunks/dep-7909fefa.js';
import 'react-dom';
import '../../_chunks/dep-822b8697.js';
import '../../_chunks/dep-8368bb87.js';
import '../../tooltip/index.js';
import '../../tooltip/Tooltip.js';
import '../../popup/index.js';
import '../../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../../hooks/useControlled.js';
import '../../_chunks/dep-12260644.js';
import '../../_chunks/dep-ec84085d.js';
import '../../_chunks/dep-66273dbc.js';
import '../../_chunks/dep-2ac048c0.js';
import '../../_chunks/dep-b989427d.js';
import '../../_util/noop.js';
import '../../_util/useAnimation.js';
import '../../common/Portal.js';
import '../../_util/dom.js';
import 'raf';
import '../../_chunks/dep-8d5556d7.js';
import '../../_util/easing.js';
import '../../popup/hooks/useTrigger.js';
import 'react-is';
import '../../popup/utils/ref.js';
import '../../_util/composeRefs.js';
import '../../popup/utils/transition.js';
import '../../_util/useMutationObserver.js';
import '../../_chunks/dep-05d10538.js';
import '../../_chunks/dep-652c1652.js';
import '../../_util/useWindowSize.js';
import '../../popup/defaultProps.js';
import '../../tooltip/defaultProps.js';
import '../../image-viewer/utils.js';
import '../../dialog/index.js';
import '../../dialog/Dialog.js';
import '../../locale/LocalReceiver.js';
import '../../dialog/RenderDialog.js';
import '../../_util/useLayoutEffect.js';
import '../../_util/useDialogEsc.js';
import '../../_chunks/dep-59b9253f.js';
import '../../_chunks/dep-d1b4ab24.js';
import '../../dialog/defaultProps.js';
import '../../_util/useSetState.js';
import '../../button/Button.js';
import '../../_util/useRipple.js';
import '../../_util/setStyle.js';
import '../../button/defaultProps.js';
import '../../loading/Loading.js';
import '../../loading/gradient.js';
import '../../_common/js/loading/circle-adapter.js';
import '../../_common/js/utils/set-style.js';
import '../../_common/js/utils/helper.js';
import '../../loading/defaultProps.js';
import '../../loading/plugin.js';
import '../../dialog/plugin.js';
import '../../_common/js/log/log.js';
import '../../image-viewer/hooks/useMirror.js';
import '../../image-viewer/hooks/usePosition.js';
import '../../image-viewer/hooks/useIndex.js';
import '../../image-viewer/hooks/useRotate.js';
import '../../image-viewer/hooks/useScale.js';
import '../../image-viewer/hooks/useIconMap.js';
import '../../image-viewer/defaultProps.js';
import '../../image-viewer/hooks/useImageScale.js';
import '../../image-viewer/hooks/useList.js';
import '../../image-viewer/hooks/useViewerScale.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var ImageFlowList = function ImageFlowList(props) {
  var _props$draggable;

  var locale = props.locale,
      uploading = props.uploading,
      disabled = props.disabled,
      displayFiles = props.displayFiles,
      classPrefix = props.classPrefix;
  var uploadPrefix = "".concat(classPrefix, "-upload");

  var _useGlobalIcon = useGlobalIcon({
    BrowseIcon: BrowseIcon,
    DeleteIcon: DeleteIcon,
    CheckCircleFilledIcon: CheckCircleFilledIcon,
    ErrorCircleFilledIcon: ErrorCircleFilledIcon,
    TimeFilledIcon: TimeFilledIcon
  }),
      BrowseIcon$1 = _useGlobalIcon.BrowseIcon,
      DeleteIcon$1 = _useGlobalIcon.DeleteIcon,
      CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon,
      TimeFilledIcon$1 = _useGlobalIcon.TimeFilledIcon;

  var drag = useDrag(props.dragEvents);
  var dragActive = drag.dragActive;
  var uploadText = useMemo(function () {
    if (uploading) return "".concat(locale.progress.uploadingText);
    return locale.triggerUploadText.normal;
  }, [locale, uploading]);
  var draggable = (_props$draggable = props.draggable) !== null && _props$draggable !== void 0 ? _props$draggable : true;
  var dragEvents = draggable ? {
    onDrop: drag.handleDrop,
    onDragEnter: drag.handleDragenter,
    onDragOver: drag.handleDragover,
    onDragLeave: drag.handleDragleave
  } : {};

  var getStatusMap = function getStatusMap() {
    var _locale$progress, _locale$progress2, _locale$progress3, _locale$progress4;

    var iconMap = {
      success: /* @__PURE__ */React.createElement(CheckCircleFilledIcon$1, null),
      fail: /* @__PURE__ */React.createElement(ErrorCircleFilledIcon$1, null),
      progress: /* @__PURE__ */React.createElement(Loading, null),
      waiting: /* @__PURE__ */React.createElement(TimeFilledIcon$1, null)
    };
    var textMap = {
      success: (_locale$progress = locale.progress) === null || _locale$progress === void 0 ? void 0 : _locale$progress.successText,
      fail: (_locale$progress2 = locale.progress) === null || _locale$progress2 === void 0 ? void 0 : _locale$progress2.failText,
      progress: (_locale$progress3 = locale.progress) === null || _locale$progress3 === void 0 ? void 0 : _locale$progress3.uploadingText,
      waiting: (_locale$progress4 = locale.progress) === null || _locale$progress4 === void 0 ? void 0 : _locale$progress4.waitingText
    };
    return {
      iconMap: iconMap,
      textMap: textMap
    };
  };

  var renderEmpty = function renderEmpty() {
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__flow-empty")
    }, dragActive ? locale.dragger.dragDropText : locale.dragger.clickAndDragText);
  };

  var renderImgItem = function renderImgItem(file, index) {
    var _getStatusMap = getStatusMap(),
        iconMap = _getStatusMap.iconMap,
        textMap = _getStatusMap.textMap;

    return /* @__PURE__ */React.createElement("li", {
      className: "".concat(uploadPrefix, "__card-item"),
      key: file.name + index
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames(["".concat(uploadPrefix, "__card-content"), _defineProperty({}, "".concat(classPrefix, "-is-bordered"), file.status !== "waiting")])
    }, ["fail", "progress"].includes(file.status) && /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__card-status-wrap")
    }, iconMap[file.status], /* @__PURE__ */React.createElement("p", null, textMap[file.status])), (["waiting", "success"].includes(file.status) || !file.status && file.url) && /* @__PURE__ */React.createElement("img", {
      className: "".concat(uploadPrefix, "__card-image"),
      src: file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
    }), /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__card-mask")
    }, file.url && /* @__PURE__ */React.createElement("span", {
      className: "".concat(uploadPrefix, "__card-mask-item")
    }, /* @__PURE__ */React.createElement(ImageViewer, {
      trigger: function trigger(_ref2) {
        var onOpen = _ref2.onOpen;
        return /* @__PURE__ */React.createElement(BrowseIcon$1, {
          onClick: function onClick(e) {
            var _props$onPreview;

            (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 ? void 0 : _props$onPreview.call(props, {
              file: file,
              index: index,
              e: e
            });
            onOpen();
          }
        });
      },
      images: displayFiles.map(function (t) {
        return t.url;
      }),
      defaultIndex: index
    }), /* @__PURE__ */React.createElement("span", {
      className: "".concat(uploadPrefix, "__card-mask-item-divider")
    })), !disabled && /* @__PURE__ */React.createElement("span", {
      className: "".concat(uploadPrefix, "__card-mask-item"),
      onClick: function onClick(e) {
        return props.onRemove({
          e: e,
          index: index,
          file: file
        });
      }
    }, /* @__PURE__ */React.createElement(DeleteIcon$1, null)))), /* @__PURE__ */React.createElement("p", {
      className: "".concat(uploadPrefix, "__card-name")
    }, abridgeName(file.name)));
  };

  var renderStatus = function renderStatus(file) {
    var _getStatusMap2 = getStatusMap(),
        iconMap = _getStatusMap2.iconMap,
        textMap = _getStatusMap2.textMap;

    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__flow-status")
    }, iconMap[file.status], /* @__PURE__ */React.createElement("span", null, textMap[file.status]));
  };

  var renderNormalActionCol = function renderNormalActionCol(file, index) {
    var _locale$triggerUpload;

    return /* @__PURE__ */React.createElement("td", null, /* @__PURE__ */React.createElement(Button, {
      theme: "primary",
      variant: "text",
      onClick: function onClick(e) {
        return props.onRemove({
          e: e,
          index: index,
          file: file
        });
      }
    }, locale === null || locale === void 0 ? void 0 : (_locale$triggerUpload = locale.triggerUploadText) === null || _locale$triggerUpload === void 0 ? void 0 : _locale$triggerUpload["delete"]));
  };

  var renderBatchActionCol = function renderBatchActionCol(index) {
    var _locale$triggerUpload2;

    return index === 0 ? /* @__PURE__ */React.createElement("td", {
      rowSpan: displayFiles.length,
      className: "".concat(uploadPrefix, "__flow-table__batch-row")
    }, /* @__PURE__ */React.createElement(Button, {
      theme: "primary",
      variant: "text",
      onClick: function onClick(e) {
        return props.onRemove({
          e: e,
          index: -1,
          file: null
        });
      }
    }, locale === null || locale === void 0 ? void 0 : (_locale$triggerUpload2 = locale.triggerUploadText) === null || _locale$triggerUpload2 === void 0 ? void 0 : _locale$triggerUpload2["delete"])) : null;
  };

  var renderFileList = function renderFileList() {
    var _locale$file, _locale$file2, _locale$file3, _locale$file4;

    return /* @__PURE__ */React.createElement("table", {
      className: "".concat(uploadPrefix, "__flow-table")
    }, /* @__PURE__ */React.createElement("thead", null, /* @__PURE__ */React.createElement("tr", null, /* @__PURE__ */React.createElement("th", null, (_locale$file = locale.file) === null || _locale$file === void 0 ? void 0 : _locale$file.fileNameText), /* @__PURE__ */React.createElement("th", null, (_locale$file2 = locale.file) === null || _locale$file2 === void 0 ? void 0 : _locale$file2.fileSizeText), /* @__PURE__ */React.createElement("th", null, (_locale$file3 = locale.file) === null || _locale$file3 === void 0 ? void 0 : _locale$file3.fileStatusText), disabled ? null : /* @__PURE__ */React.createElement("th", null, (_locale$file4 = locale.file) === null || _locale$file4 === void 0 ? void 0 : _locale$file4.fileOperationText))), /* @__PURE__ */React.createElement("tbody", null, !displayFiles.length && /* @__PURE__ */React.createElement("tr", null, /* @__PURE__ */React.createElement("td", {
      colSpan: 4
    }, renderEmpty())), displayFiles.map(function (file, index) {
      var showBatchUploadAction = props.isBatchUpload;
      var deleteNode = showBatchUploadAction && !displayFiles.find(function (item) {
        return item.status !== "success";
      }) ? renderBatchActionCol(index) : renderNormalActionCol(file, index);
      return /* @__PURE__ */React.createElement("tr", {
        key: file.name + index
      }, /* @__PURE__ */React.createElement("td", null, abridgeName(file.name, 7, 10)), /* @__PURE__ */React.createElement("td", null, returnFileSize(file.size)), /* @__PURE__ */React.createElement("td", null, renderStatus(file)), disabled ? null : deleteNode);
    })));
  };

  var cardClassName = "".concat(uploadPrefix, "__flow-card-area");
  return /* @__PURE__ */React.createElement("div", {
    className: "".concat(uploadPrefix, "__flow ").concat(uploadPrefix, "__flow-").concat(props.theme)
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(uploadPrefix, "__flow-op")
  }, props.children, props.placeholder && /* @__PURE__ */React.createElement("small", {
    className: "".concat(uploadPrefix, "__flow-placeholder ").concat(uploadPrefix, "__placeholder")
  }, props.placeholder)), props.theme === "image-flow" && /* @__PURE__ */React.createElement("div", _objectSpread({
    className: cardClassName
  }, dragEvents), displayFiles.length ? /* @__PURE__ */React.createElement("ul", {
    className: "".concat(uploadPrefix, "__card clearfix")
  }, displayFiles.map(function (file, index) {
    return renderImgItem(file, index);
  })) : renderEmpty()), props.theme === "file-flow" && (displayFiles.length ? renderFileList() : /* @__PURE__ */React.createElement("div", _objectSpread({
    className: cardClassName
  }, dragEvents), renderEmpty())), !props.autoUpload && /* @__PURE__ */React.createElement("div", {
    className: "".concat(uploadPrefix, "__flow-bottom")
  }, /* @__PURE__ */React.createElement(Button, {
    theme: "default",
    onClick: function onClick(e) {
      var _props$cancelUpload;

      return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
        e: e
      });
    },
    disabled: disabled || !uploading
  }, locale === null || locale === void 0 ? void 0 : locale.cancelUploadText), /* @__PURE__ */React.createElement(Button, {
    disabled: disabled || uploading || !displayFiles.length,
    theme: "primary",
    loading: uploading,
    onClick: function onClick() {
      var _props$uploadFiles;

      return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
    }
  }, uploadText)));
};

ImageFlowList.displayName = "ImageFlowList";

export { ImageFlowList as default };
//# sourceMappingURL=MultipleFlowList.js.map
