/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import React from 'react';
import classNames from 'classnames';
import { ChevronRightIcon, ChevronLeftIcon } from 'tdesign-icons-react';
import useConfig from '../hooks/useConfig.js';
import { Divider } from '../divider/index.js';
import DropdownItem from './DropdownItem.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import '../_chunks/dep-918e41e2.js';
import '../_chunks/dep-734a21a0.js';
import '../_chunks/dep-68f7a306.js';
import '../_chunks/dep-a74f6fff.js';
import '../_chunks/dep-d23d346c.js';
import '../_chunks/dep-9ea787ca.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-0e2dfd87.js';
import '../_chunks/dep-f50ff346.js';
import '../_chunks/dep-51592cde.js';
import '../_chunks/dep-ae94c4e7.js';
import '../_chunks/dep-7f6754ac.js';
import '../_chunks/dep-2509667d.js';
import '../_chunks/dep-b817c90e.js';
import '../_chunks/dep-fe9825b6.js';
import '../_chunks/dep-ebc05da7.js';
import '../_chunks/dep-3160df29.js';
import '../_chunks/dep-c91b3852.js';
import '../_chunks/dep-9e44c34c.js';
import '../_chunks/dep-0c62d47a.js';
import '../_chunks/dep-e2fe68b7.js';
import '../_chunks/dep-44a03722.js';
import '../_chunks/dep-f5616354.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../divider/Divider.js';
import '../_chunks/dep-8368bb87.js';
import '../divider/defaultProps.js';
import '../_util/useRipple.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-8d5556d7.js';
import '../_util/easing.js';
import './defaultProps.js';
import '../_util/helper.js';
import '../_chunks/dep-9615f03f.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-8fe8d164.js';
import '../_chunks/dep-2ac048c0.js';
import '../_chunks/dep-b989427d.js';
import '../_chunks/dep-12260644.js';
import '../_chunks/dep-ec84085d.js';
import '../_chunks/dep-66273dbc.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var DropdownMenu = function DropdownMenu(props) {
  var _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$maxHeight = props.maxHeight,
      maxHeight = _props$maxHeight === void 0 ? 300 : _props$maxHeight,
      _props$minColumnWidth = props.minColumnWidth,
      minColumnWidth = _props$minColumnWidth === void 0 ? 10 : _props$minColumnWidth,
      _props$maxColumnWidth = props.maxColumnWidth,
      maxColumnWidth = _props$maxColumnWidth === void 0 ? 160 : _props$maxColumnWidth,
      direction = props.direction;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var dropdownClass = "".concat(classPrefix, "-dropdown");
  var dropdownMenuClass = "".concat(dropdownClass, "__menu");

  var _useGlobalIcon = useGlobalIcon({
    ChevronRightIcon: ChevronRightIcon,
    ChevronLeftIcon: ChevronLeftIcon
  }),
      ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon,
      ChevronLeftIcon$1 = _useGlobalIcon.ChevronLeftIcon;

  var handleItemClick = function handleItemClick(options2) {
    var _data$onClick, _props$onClick;

    var data = options2.data,
        context = options2.context;
    data === null || data === void 0 ? void 0 : (_data$onClick = data.onClick) === null || _data$onClick === void 0 ? void 0 : _data$onClick.call(data, data, context);
    (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, data, context);
  };

  var renderOptions = function renderOptions(data) {
    var _data$forEach;

    var arr = [];
    var renderContent;
    (_data$forEach = data.forEach) === null || _data$forEach === void 0 ? void 0 : _data$forEach.call(data, function (menu, idx) {
      var optionItem = _objectSpread({}, menu);

      if (optionItem.children) {
        var _classNames;

        optionItem.children = renderOptions(optionItem.children);
        renderContent = /* @__PURE__ */React.createElement("div", {
          key: idx
        }, /* @__PURE__ */React.createElement(DropdownItem, {
          className: classNames("".concat(dropdownClass, "__item"), "".concat(dropdownClass, "__item--suffix")),
          value: optionItem.value,
          theme: optionItem.theme,
          active: optionItem.active,
          prefixIcon: optionItem.prefixIcon,
          disabled: optionItem.disabled,
          minColumnWidth: minColumnWidth,
          maxColumnWidth: maxColumnWidth,
          isSubmenu: true
        }, /* @__PURE__ */React.createElement("div", {
          className: "".concat(dropdownClass, "__item-content")
        }, direction === "right" ? /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement("span", {
          className: "".concat(dropdownClass, "__item-text")
        }, optionItem.content), /* @__PURE__ */React.createElement(ChevronRightIcon$1, {
          className: "".concat(dropdownClass, "__item-direction"),
          size: "16"
        })) : /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(ChevronLeftIcon$1, {
          className: "".concat(dropdownClass, "__item-direction"),
          size: "16"
        }), /* @__PURE__ */React.createElement("span", {
          className: "".concat(dropdownClass, "__item-text")
        }, optionItem.content))), /* @__PURE__ */React.createElement("div", {
          className: classNames("".concat(dropdownClass, "__submenu"), (_classNames = {}, _defineProperty(_classNames, "".concat(dropdownClass, "__submenu--disabled"), optionItem.disabled), _defineProperty(_classNames, "".concat(dropdownClass, "__submenu--").concat(direction), direction), _classNames)),
          style: {
            top: "".concat(idx * 30, "px")
          }
        }, /* @__PURE__ */React.createElement("ul", null, optionItem.children))), optionItem.divider ? /* @__PURE__ */React.createElement(Divider, null) : null);
      } else {
        renderContent = /* @__PURE__ */React.createElement("div", {
          key: idx
        }, /* @__PURE__ */React.createElement(DropdownItem, {
          className: "".concat(dropdownClass, "__item"),
          value: optionItem.value,
          theme: optionItem.theme,
          active: optionItem.active,
          prefixIcon: optionItem.prefixIcon,
          disabled: optionItem.disabled,
          minColumnWidth: minColumnWidth,
          maxColumnWidth: maxColumnWidth,
          onClick: optionItem.disabled || optionItem.children ? function () {
            return null;
          } : function (value, context) {
            return handleItemClick({
              data: optionItem,
              context: context
            });
          }
        }, /* @__PURE__ */React.createElement("span", {
          className: "".concat(dropdownClass, "-text")
        }, optionItem.content)), optionItem.divider ? /* @__PURE__ */React.createElement(Divider, null) : null);
      }

      arr.push(renderContent);
    });
    return arr;
  };

  return /* @__PURE__ */React.createElement("div", {
    className: classNames(dropdownMenuClass, "".concat(dropdownMenuClass, "--").concat(direction)),
    style: {
      maxHeight: "".concat(maxHeight, "px")
    }
  }, renderOptions(options));
};

DropdownMenu.displayName = "DropdownMenu";

export { DropdownMenu as default };
//# sourceMappingURL=DropdownMenu.js.map
