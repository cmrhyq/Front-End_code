export * from './large-number';
export declare type NumberType = number | string;
export declare function canAddNumber(num: NumberType, max: NumberType, largeNumber?: boolean): boolean;
export declare function canReduceNumber(num: NumberType, min: NumberType, largeNumber?: boolean): boolean;
/**
 * 格式化数字，如：2e3 转换为 2000
 * 如果不是数字，则不允许输入
 * decimalPlaces 小数点处理
 */
export declare function formatToNumber(num: string, extra?: {
    decimalPlaces?: number;
    largeNumber?: boolean;
}): string | number;
/**
 * 将数字控制在 max 和 min 之间
 */
export declare function putInRangeNumber(val: NumberType, params: {
    max?: NumberType;
    min?: NumberType;
    lastValue?: NumberType;
    largeNumber?: boolean;
}): NumberType;
/**
 * 仅支持正数，小数加法精度处理，小数部分和整数部分分开处理
 */
export declare function positiveAdd(num1: number, num2: number): number;
/**
 * 正数，小数减法精度处理，小数部分和整数部分分开处理
 */
export declare function positiveSubtract(num1: number, num2: number): number;
/**
 * 支持正数、负数、小数等全部数字的加法
 * -0.766 + 1       =>   1 - 0.766
 * -1 + (-0.766)    =>   - (1 + 0.766)
 * 1 + (-0.766)     =>   1 - 0.766
 * 1 + 0.766        =>   1 + 0.766
 */
export declare function add(num1: number, num2: number): number;
/**
 * 支持正数、负数、小数等全部数字的减法
 * -0.766 - 1       =>   - (1 + 0.766)
 * -1 - (-0.766)    =>   0.766 - 1
 * 1 - (-0.766)     =>   1 + 0.766
 * 1 - 0.766        =>   1 - 0.766
 */
export declare function subtract(num1: number, num2: number): number;
export declare function getStepValue(p: {
    op: 'add' | 'reduce';
    step: NumberType;
    max?: NumberType;
    min?: NumberType;
    lastValue?: NumberType;
    largeNumber?: boolean;
}): any;
export declare type InputNumberErrorType = 'exceed-maximum' | 'below-minimum' | undefined;
/**
 * 最大值和最小值校验
 */
export declare function getMaxOrMinValidateResult(p: {
    largeNumber: boolean;
    value: NumberType;
    max: NumberType;
    min: NumberType;
}): InputNumberErrorType;
/**
 * 是否允许输入当前字符，输入字符校验
 */
export declare function canInputNumber(number: string, largeNumber: boolean): boolean;
