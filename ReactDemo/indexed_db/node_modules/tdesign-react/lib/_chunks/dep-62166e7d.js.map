{"version":3,"file":"dep-62166e7d.js","sources":["../../src/checkbox/CheckboxGroup.tsx","../../src/checkbox/Checkbox.tsx"],"sourcesContent":["import React, { ReactElement, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport isNumber from 'lodash/isNumber';\nimport useConfig from '../hooks/useConfig';\nimport { CheckContext, CheckContextValue } from '../common/Check';\nimport { CheckboxOption, CheckboxOptionObj, TdCheckboxGroupProps, TdCheckboxProps } from './type';\nimport { StyledProps } from '../common';\nimport useControlled from '../hooks/useControlled';\nimport Checkbox from './Checkbox';\nimport { checkboxGroupDefaultProps } from './defaultProps';\n\nexport interface CheckboxGroupProps extends TdCheckboxGroupProps, StyledProps {\n  children?: React.ReactNode;\n}\n\n// 将 checkBox 的 value 转换为 string|number\nconst getCheckboxValue = (v: CheckboxOption): string | number => {\n  switch (typeof v) {\n    case 'number':\n      return v as number;\n    case 'string':\n      return v as string;\n    case 'object': {\n      const vs = v as CheckboxOptionObj;\n      return vs.value;\n    }\n    default:\n      return undefined;\n  }\n};\n\n/**\n * 多选选项组，里面可以嵌套 <Checkbox />\n */\nconst CheckboxGroup = (props: CheckboxGroupProps) => {\n  const { classPrefix } = useConfig();\n  const { onChange, disabled, className, style, children, max, options = [] } = props;\n\n  // 去掉所有 checkAll 之后的 options\n  const intervalOptions =\n    Array.isArray(options) && options.length > 0\n      ? options\n      : React.Children.map(children, (child) => (child as ReactElement).props) || [];\n\n  const optionsWithoutCheckAll = intervalOptions.filter((t) => typeof t !== 'object' || !t.checkAll);\n  const optionsWithoutCheckAllValues = [];\n  optionsWithoutCheckAll.forEach((v) => {\n    const vs = getCheckboxValue(v);\n    optionsWithoutCheckAllValues.push(vs);\n  });\n\n  const [internalValue, setInternalValue] = useControlled(props, 'value', onChange);\n  const [localMax, setLocalMax] = useState(max);\n\n  const checkedSet = useMemo(() => {\n    if (!Array.isArray(internalValue)) return new Set([]);\n    return new Set([].concat(internalValue));\n  }, [internalValue]);\n\n  // 用于决定全选状态的属性\n  const indeterminate = useMemo(() => {\n    const list = Array.from(checkedSet);\n    return list.length !== 0 && list.length !== optionsWithoutCheckAll.length;\n  }, [checkedSet, optionsWithoutCheckAll]);\n\n  const checkAllChecked = useMemo(() => {\n    const list = Array.from(checkedSet);\n    return list.length === optionsWithoutCheckAll.length;\n  }, [checkedSet, optionsWithoutCheckAll]);\n\n  useEffect(() => {\n    if (!isNumber(max)) return;\n    if (max < checkedSet.size) {\n      console.warn('[TDesign] max should be less than the length of value, change is invalid');\n    } else {\n      setLocalMax(max);\n    }\n  }, [max, checkedSet]);\n\n  const context: CheckContextValue = {\n    inject: (checkProps) => {\n      // 如果已经受控，则不注入\n      if (typeof checkProps.checked !== 'undefined') {\n        return checkProps;\n      }\n\n      const { value: checkValue } = checkProps;\n\n      return {\n        ...checkProps,\n        checked: checkProps.checkAll ? checkAllChecked : checkedSet.has(checkValue),\n        indeterminate: checkProps.checkAll ? indeterminate : checkProps.indeterminate,\n        disabled: checkProps.disabled || disabled || (checkedSet.size >= localMax && !checkedSet.has(checkValue)),\n        onChange(checked, { e }) {\n          if (typeof checkProps.onChange === 'function') {\n            checkProps.onChange(checked, { e });\n          }\n\n          // 全选时的逻辑处理\n          if (checkProps.checkAll) {\n            checkedSet.clear();\n            if (checked) {\n              optionsWithoutCheckAllValues.forEach((v) => {\n                checkedSet.add(v);\n              });\n            }\n          } else if (checked) {\n            if (checkedSet.size >= localMax && isNumber(max)) return;\n            checkedSet.add(checkValue);\n          } else {\n            checkedSet.delete(checkValue);\n          }\n\n          setInternalValue(Array.from(checkedSet), {\n            e,\n            current: checkProps.checkAll ? undefined : (checkValue as TdCheckboxProps),\n            type: checked ? 'check' : 'uncheck',\n          });\n        },\n      };\n    },\n  };\n\n  // options 和 children 的抉择,在未明确说明时，暂时以 options 优先\n  const useOptions = Array.isArray(options) && options.length !== 0;\n\n  return (\n    <div className={classNames(`${classPrefix}-checkbox-group`, className)} style={style}>\n      <CheckContext.Provider value={context}>\n        {useOptions\n          ? options.map((v, index) => {\n              const type = typeof v;\n              switch (type) {\n                case 'string': {\n                  const vs = v as string;\n                  return (\n                    <Checkbox key={index} label={vs} value={vs}>\n                      {v}\n                    </Checkbox>\n                  );\n                }\n                case 'number': {\n                  const vs = v as number;\n                  return (\n                    <Checkbox key={index} label={vs} value={vs}>\n                      {v}\n                    </Checkbox>\n                  );\n                }\n                case 'object': {\n                  const vs = v as CheckboxOptionObj;\n                  // CheckAll 的 checkBox 不存在 value,故用 checkAll_index 来保证尽量不和用户的 value 冲突.\n                  return vs.checkAll ? (\n                    <Checkbox {...vs} key={`checkAll_${index}`} indeterminate={indeterminate} />\n                  ) : (\n                    <Checkbox {...vs} key={index} disabled={vs.disabled || disabled} />\n                  );\n                }\n                default:\n                  return null;\n              }\n            })\n          : children}\n      </CheckContext.Provider>\n    </div>\n  );\n};\n\nCheckboxGroup.displayName = 'CheckboxGroup';\nCheckboxGroup.defaultProps = checkboxGroupDefaultProps;\n\nexport default CheckboxGroup;\n","import React, { Ref } from 'react';\nimport forwardRefWithStatics from '../_util/forwardRefWithStatics';\nimport Check, { CheckProps } from '../common/Check';\nimport CheckboxGroup from './CheckboxGroup';\nimport { checkboxDefaultProps } from './defaultProps';\n\nexport type CheckboxProps = Omit<CheckProps, 'type'>;\n\nconst Checkbox = forwardRefWithStatics(\n  (props: CheckboxProps, ref: Ref<HTMLLabelElement>) => <Check ref={ref} type=\"checkbox\" {...props} />,\n  { Group: CheckboxGroup },\n);\n\nCheckbox.displayName = 'Checkbox';\nCheckbox.defaultProps = checkboxDefaultProps;\n\nexport default Checkbox;\n"],"names":["getCheckboxValue","v","vs","value","CheckboxGroup","props","useConfig","classPrefix","onChange","disabled","className","style","children","max","options","intervalOptions","Array","isArray","length","React","Children","map","child","optionsWithoutCheckAll","filter","t","checkAll","optionsWithoutCheckAllValues","forEach","push","useControlled","internalValue","setInternalValue","useState","localMax","setLocalMax","checkedSet","useMemo","Set","concat","indeterminate","list","from","checkAllChecked","useEffect","isNumber","size","console","warn","context","inject","checkProps","checked","checkValue","_objectSpread","has","e","clear","add","current","type","useOptions","createElement","classNames","CheckContext","Provider","index","Checkbox","key","label","displayName","defaultProps","checkboxGroupDefaultProps","forwardRefWithStatics","ref","Check","Group","checkboxDefaultProps"],"mappings":"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"}