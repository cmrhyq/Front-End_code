/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from './dep-1e32006c.js';
import React, { useState, useMemo, useEffect } from 'react';
import forwardRefWithStatics from '../_util/forwardRefWithStatics.js';
import Check, { CheckContext } from '../common/Check.js';
import { _ as _slicedToArray } from './dep-9615f03f.js';
import { _ as _typeof } from './dep-4e0da095.js';
import classNames from 'classnames';
import { i as isNumber_1 } from './dep-31043569.js';
import useConfig from '../hooks/useConfig.js';
import useControlled from '../hooks/useControlled.js';
import { checkboxGroupDefaultProps, checkboxDefaultProps } from '../checkbox/defaultProps.js';

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var getCheckboxValue = function getCheckboxValue(v) {
  switch (_typeof(v)) {
    case "number":
      return v;

    case "string":
      return v;

    case "object":
      {
        var vs = v;
        return vs.value;
      }

    default:
      return void 0;
  }
};

var CheckboxGroup = function CheckboxGroup(props) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var onChange = props.onChange,
      disabled = props.disabled,
      className = props.className,
      style = props.style,
      children = props.children,
      max = props.max,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options;
  var intervalOptions = Array.isArray(options) && options.length > 0 ? options : React.Children.map(children, function (child) {
    return child.props;
  }) || [];
  var optionsWithoutCheckAll = intervalOptions.filter(function (t) {
    return _typeof(t) !== "object" || !t.checkAll;
  });
  var optionsWithoutCheckAllValues = [];
  optionsWithoutCheckAll.forEach(function (v) {
    var vs = getCheckboxValue(v);
    optionsWithoutCheckAllValues.push(vs);
  });

  var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      internalValue = _useControlled2[0],
      setInternalValue = _useControlled2[1];

  var _useState = useState(max),
      _useState2 = _slicedToArray(_useState, 2),
      localMax = _useState2[0],
      setLocalMax = _useState2[1];

  var checkedSet = useMemo(function () {
    if (!Array.isArray(internalValue)) return /* @__PURE__ */new Set([]);
    return new Set([].concat(internalValue));
  }, [internalValue]);
  var indeterminate = useMemo(function () {
    var list = Array.from(checkedSet);
    return list.length !== 0 && list.length !== optionsWithoutCheckAll.length;
  }, [checkedSet, optionsWithoutCheckAll]);
  var checkAllChecked = useMemo(function () {
    var list = Array.from(checkedSet);
    return list.length === optionsWithoutCheckAll.length;
  }, [checkedSet, optionsWithoutCheckAll]);
  useEffect(function () {
    if (!isNumber_1(max)) return;

    if (max < checkedSet.size) {
      console.warn("[TDesign] max should be less than the length of value, change is invalid");
    } else {
      setLocalMax(max);
    }
  }, [max, checkedSet]);
  var context = {
    inject: function inject(checkProps) {
      if (typeof checkProps.checked !== "undefined") {
        return checkProps;
      }

      var checkValue = checkProps.value;
      return _objectSpread$1(_objectSpread$1({}, checkProps), {}, {
        checked: checkProps.checkAll ? checkAllChecked : checkedSet.has(checkValue),
        indeterminate: checkProps.checkAll ? indeterminate : checkProps.indeterminate,
        disabled: checkProps.disabled || disabled || checkedSet.size >= localMax && !checkedSet.has(checkValue),
        onChange: function onChange(checked, _ref) {
          var e = _ref.e;

          if (typeof checkProps.onChange === "function") {
            checkProps.onChange(checked, {
              e: e
            });
          }

          if (checkProps.checkAll) {
            checkedSet.clear();

            if (checked) {
              optionsWithoutCheckAllValues.forEach(function (v) {
                checkedSet.add(v);
              });
            }
          } else if (checked) {
            if (checkedSet.size >= localMax && isNumber_1(max)) return;
            checkedSet.add(checkValue);
          } else {
            checkedSet["delete"](checkValue);
          }

          setInternalValue(Array.from(checkedSet), {
            e: e,
            current: checkProps.checkAll ? void 0 : checkValue,
            type: checked ? "check" : "uncheck"
          });
        }
      });
    }
  };
  var useOptions = Array.isArray(options) && options.length !== 0;
  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-checkbox-group"), className),
    style: style
  }, /* @__PURE__ */React.createElement(CheckContext.Provider, {
    value: context
  }, useOptions ? options.map(function (v, index) {
    var type = _typeof(v);

    switch (type) {
      case "string":
        {
          var vs = v;
          return /* @__PURE__ */React.createElement(Checkbox, {
            key: index,
            label: vs,
            value: vs
          }, v);
        }

      case "number":
        {
          var _vs = v;
          return /* @__PURE__ */React.createElement(Checkbox, {
            key: index,
            label: _vs,
            value: _vs
          }, v);
        }

      case "object":
        {
          var _vs2 = v;
          return _vs2.checkAll ? /* @__PURE__ */React.createElement(Checkbox, _objectSpread$1(_objectSpread$1({}, _vs2), {}, {
            key: "checkAll_".concat(index),
            indeterminate: indeterminate
          })) : /* @__PURE__ */React.createElement(Checkbox, _objectSpread$1(_objectSpread$1({}, _vs2), {}, {
            key: index,
            disabled: _vs2.disabled || disabled
          }));
        }

      default:
        return null;
    }
  }) : children));
};

CheckboxGroup.displayName = "CheckboxGroup";
CheckboxGroup.defaultProps = checkboxGroupDefaultProps;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Checkbox = forwardRefWithStatics(function (props, ref) {
  return /* @__PURE__ */React.createElement(Check, _objectSpread({
    ref: ref,
    type: "checkbox"
  }, props));
}, {
  Group: CheckboxGroup
});
Checkbox.displayName = "Checkbox";
Checkbox.defaultProps = checkboxDefaultProps;

export { Checkbox as C, CheckboxGroup as a };
//# sourceMappingURL=dep-62166e7d.js.map
