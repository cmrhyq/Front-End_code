/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from './dep-1e32006c.js';
import React, { forwardRef, useState, useImperativeHandle, useContext } from 'react';
import classNames from 'classnames';
import { CloseIcon, InfoCircleFilledIcon, CheckCircleFilledIcon } from 'tdesign-icons-react';
import { _ as _toConsumableArray } from './dep-59b9253f.js';
import { _ as _slicedToArray } from './dep-9615f03f.js';
import ReactDOM from 'react-dom';
import useConfig from '../hooks/useConfig.js';
import noop from '../_util/noop.js';
import renderTNode from '../_util/renderTNode.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import { notificationDefaultProps } from '../notification/defaultProps.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var seed = 0;
var listMap = /* @__PURE__ */new Map();
var NotificationRemoveContext = /*#__PURE__*/React.createContext(noop);
var NotificationList = /*#__PURE__*/forwardRef(function (props, ref) {
  var placement = props.placement,
      zIndex = props.zIndex;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      list = _useState2[0],
      setList = _useState2[1];

  var remove = function remove(key) {
    setList(function (oldList) {
      var index = oldList.findIndex(function (item) {
        return item.key === key;
      });

      if (index !== -1) {
        var tempList = _toConsumableArray(oldList);

        tempList.splice(index, 1);
        return _toConsumableArray(tempList);
      }

      return oldList;
    });
  };

  var calOffset = function calOffset(offset) {
    return isNaN(Number(offset)) ? offset : "".concat(offset, "px");
  };

  var push = function push(theme, options) {
    var key = String(seed += 1);

    var _ref = _toConsumableArray(options.offset),
        horizontal = _ref[0],
        vertical = _ref[1];

    var horizontalOffset = calOffset(horizontal);
    var verticalOffset = calOffset(vertical);
    var style = {
      marginTop: verticalOffset,
      marginBottom: verticalOffset,
      marginLeft: horizontalOffset,
      marginRight: horizontalOffset
    };
    var ref2 = /*#__PURE__*/React.createRef();
    setList(function (oldList) {
      return [].concat(_toConsumableArray(oldList), [_objectSpread(_objectSpread({}, options), {}, {
        key: key,
        theme: theme,
        style: style,
        ref: ref2,
        id: key
      })]);
    });
    return Promise.resolve(ref2.current);
  };

  var removeAll = function removeAll() {
    setList([]);
  };

  useImperativeHandle(ref, function () {
    return {
      push: push,
      remove: remove,
      removeAll: removeAll
    };
  });
  return /* @__PURE__ */React.createElement(NotificationRemoveContext.Provider, {
    value: remove
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-notification__show--").concat(placement),
    style: {
      zIndex: zIndex
    }
  }, list.map(function (props2) {
    var _props2$onDurationEnd = props2.onDurationEnd,
        _onDurationEnd = _props2$onDurationEnd === void 0 ? noop : _props2$onDurationEnd,
        _props2$onCloseBtnCli = props2.onCloseBtnClick,
        _onCloseBtnClick = _props2$onCloseBtnCli === void 0 ? noop : _props2$onCloseBtnCli;

    return /* @__PURE__ */React.createElement(Notification, _objectSpread(_objectSpread({
      ref: props2.ref,
      key: props2.key
    }, props2), {}, {
      onDurationEnd: function onDurationEnd() {
        remove(props2.key);

        _onDurationEnd();
      },
      onCloseBtnClick: function onCloseBtnClick(e) {
        remove(props2.key);

        _onCloseBtnClick(e);
      }
    }));
  })));
});
var fetchListInstance = function fetchListInstance(placement, attach, zIndex) {
  return new Promise(function (resolve) {
    if (listMap.has(placement)) {
      resolve(listMap.get(placement));
    } else {
      var hasExec = false;
      ReactDOM.render( /* @__PURE__ */React.createElement(NotificationList, {
        attach: attach,
        placement: placement,
        zIndex: Number(zIndex),
        ref: function ref(instance) {
          if (!hasExec) {
            hasExec = true;
            listMap.set(placement, instance);
            resolve(instance);
          }
        }
      }), attach);
    }
  });
};

var Notification = /*#__PURE__*/forwardRef(function (props, ref) {
  var title = props.title,
      content = props.content,
      theme = props.theme,
      icon = props.icon,
      closeBtn = props.closeBtn,
      footer = props.footer,
      duration = props.duration,
      _props$onCloseBtnClic = props.onCloseBtnClick,
      onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop : _props$onCloseBtnClic,
      _props$onDurationEnd = props.onDurationEnd,
      onDurationEnd = _props$onDurationEnd === void 0 ? noop : _props$onDurationEnd,
      style = props.style,
      className = props.className,
      id = props.id;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var baseClassPrefix = "".concat(classPrefix, "-notification");

  var _useGlobalIcon = useGlobalIcon({
    CloseIcon: CloseIcon,
    InfoCircleFilledIcon: InfoCircleFilledIcon,
    CheckCircleFilledIcon: CheckCircleFilledIcon
  }),
      CloseIcon$1 = _useGlobalIcon.CloseIcon,
      InfoCircleFilledIcon$1 = _useGlobalIcon.InfoCircleFilledIcon,
      CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon;

  var remove = useContext(NotificationRemoveContext);
  React.useImperativeHandle(ref, function () {
    return {
      close: function close() {
        return remove(id);
      }
    };
  });
  React.useEffect(function () {
    var timer;

    if (duration > 0) {
      timer = setTimeout(function () {
        clearTimeout(timer);
        onDurationEnd();
      }, duration);
    }

    return function () {
      if (timer) clearTimeout(timer);
    };
  }, []);

  var renderIcon = function renderIcon() {
    if (typeof icon === "boolean" && !icon) return null;

    var IconWrapper = function IconWrapper(_ref) {
      var children = _ref.children;
      return /* @__PURE__ */React.createElement("div", {
        className: "".concat(baseClassPrefix, "__icon")
      }, children);
    };

    if ( /*#__PURE__*/React.isValidElement(icon)) {
      return /* @__PURE__ */React.createElement(IconWrapper, null, icon);
    }

    if (theme && theme === "success") {
      return /* @__PURE__ */React.createElement(IconWrapper, null, /* @__PURE__ */React.createElement(CheckCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-success")
      }));
    }

    if (theme && ["info", "warning", "error"].indexOf(theme) >= 0) {
      return /* @__PURE__ */React.createElement(IconWrapper, null, /* @__PURE__ */React.createElement(InfoCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-").concat(theme)
      }));
    }

    return null;
  };

  var renderCloseBtn = function renderCloseBtn() {
    if (typeof closeBtn === "boolean") {
      return closeBtn && /* @__PURE__ */React.createElement(CloseIcon$1, {
        className: "".concat(baseClassPrefix, "-icon-close"),
        onClick: function onClick(e) {
          onCloseBtnClick({
            e: e
          });
        }
      });
    }

    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(baseClassPrefix, "-close"),
      onClick: function onClick(e) {
        onCloseBtnClick({
          e: e
        });
      }
    }, renderTNode(closeBtn));
  };

  return /* @__PURE__ */React.createElement("div", {
    className: classNames(className, baseClassPrefix, _defineProperty({}, "".concat(baseClassPrefix, "-is-").concat(theme), theme)),
    style: style
  }, renderIcon(), /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassPrefix, "__main")
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassPrefix, "__title__wrap")
  }, /* @__PURE__ */React.createElement("span", {
    className: "".concat(baseClassPrefix, "__title")
  }, title), renderCloseBtn()), content && /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassPrefix, "__content")
  }, renderTNode(content)), footer && /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassPrefix, "__detail")
  }, renderTNode(footer))));
});
Notification.displayName = "Notification";
Notification.defaultProps = notificationDefaultProps;

export { Notification as N, NotificationRemoveContext as a, fetchListInstance as f, listMap as l };
//# sourceMappingURL=dep-6fcf4496.js.map
