/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../../_chunks/dep-9615f03f.js';
import { useState, useMemo } from 'react';
import '../../_chunks/dep-7909fefa.js';

var useDrag = function useDrag(placement, sizeDraggable) {
  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      dragSizeValue = _useState2[0],
      changeDragSizeValue = _useState2[1];

  var handleMousemove = function handleMousemove(e) {
    var x = e.x,
        y = e.y;

    if (sizeDraggable) {
      if (placement === "right") {
        changeDragSizeValue("".concat(document.documentElement.clientWidth - x + 8, "px"));
      }

      if (placement === "left") {
        changeDragSizeValue("".concat(x + 8, "px"));
      }

      if (placement === "top") {
        changeDragSizeValue("".concat(y + 8, "px"));
      }

      if (placement === "bottom") {
        changeDragSizeValue("".concat(document.documentElement.clientHeight - y + 8, "px"));
      }
    }
  };

  var handleMouseup = function handleMouseup() {
    document.removeEventListener("mouseup", handleMouseup, true);
    document.removeEventListener("mousemove", handleMousemove, true);
  };

  var draggableLineStyles = useMemo(function () {
    var _ref;

    var isHorizontal = ["right", "left"].includes(placement);
    var oppositeMap = {
      left: "right",
      right: "left",
      top: "bottom",
      bottom: "top"
    };
    return _ref = {
      zIndex: 1,
      position: "absolute",
      background: "transparent"
    }, _defineProperty(_ref, oppositeMap[placement], 0), _defineProperty(_ref, "width", isHorizontal ? "16px" : "100%"), _defineProperty(_ref, "height", isHorizontal ? "100%" : "16px"), _defineProperty(_ref, "cursor", isHorizontal ? "col-resize" : "row-resize"), _ref;
  }, [placement]);

  var enableDrag = function enableDrag() {
    document.addEventListener("mouseup", handleMouseup, true);
    document.addEventListener("mousemove", handleMousemove, true);
  };

  return {
    dragSizeValue: dragSizeValue,
    enableDrag: enableDrag,
    draggableLineStyles: draggableLineStyles
  };
};

export { useDrag as default };
//# sourceMappingURL=useDrag.js.map
