/// <reference types="react" />
import defaultLocale from '../locale/zh_CN';
import { GlobalConfigProvider } from './type';
export declare enum EAnimationType {
    ripple = "ripple",
    expand = "expand",
    fade = "fade"
}
export declare const defaultClassPrefix = "t";
export declare const defaultAnimation: {
    include: EAnimationType[];
    exclude: any[];
};
export declare const defaultGlobalConfig: {
    alert?: import("./type").AlertConfig;
    anchor?: import("./type").AnchorConfig;
    animation: Partial<Record<"include" | "exclude", import("./type").AnimationType[]>> & Record<"include" | "exclude", import("../_common/js/global-config/default-config").AnimationType[]>;
    calendar: import("./type").CalendarConfig & {
        firstDayOfWeek: number;
        fillWithZero: boolean;
        controllerConfig: any;
    };
    cascader?: import("./type").CascaderConfig;
    classPrefix: string;
    colorPicker?: import("./type").ColorPickerConfig;
    datePicker: import("./type").DatePickerConfig & {
        firstDayOfWeek: number;
    };
    dialog: import("./type").DialogConfig & {
        closeOnEscKeydown: boolean;
        closeOnOverlayClick: boolean;
        confirmBtnTheme: {
            default: string;
            info: string;
            warning: string;
            danger: string;
            success: string;
        };
    };
    drawer: import("./type").DrawerConfig & {
        closeOnEscKeydown: boolean;
        closeOnOverlayClick: boolean;
        size: string;
    };
    form: import("./type").FormConfig & {
        requiredMark: boolean;
    };
    icon: import("tdesign-icons-react").GlobalIconConfig;
    input: import("./type").InputConfig & {
        autocomplete: string;
    };
    list?: import("./type").ListConfig;
    pagination?: import("./type").PaginationConfig;
    popconfirm: import("./type").PopconfirmConfig & {
        confirmBtnTheme: {
            default: string;
            warning: string;
            danger: string;
        };
    };
    select: import("./type").SelectConfig & {
        clearIcon: any;
        filterable: boolean;
    };
    steps: import("./type").StepsConfig & {
        errorIcon: any;
    };
    table: import("./type").TableConfig & {
        expandIcon: any;
        sortIcon: any;
        filterIcon: any;
        treeExpandAndFoldIcon: any;
        hideSortTips: boolean;
    };
    tag: import("./type").TagConfig & {
        closeIcon: any;
    };
    timePicker?: import("./type").TimePickerConfig;
    transfer?: import("./type").TransferConfig;
    tree: import("./type").TreeConfig & {
        folderIcon: any;
    };
    treeSelect?: import("./type").TreeSelectConfig;
    upload?: import("./type").UploadConfig;
};
export declare type Locale = typeof defaultLocale;
export declare type GlobalConfig = typeof defaultGlobalConfig;
export interface Config {
    globalConfig?: GlobalConfigProvider;
}
export declare const defaultContext: {
    globalConfig: GlobalConfig;
};
declare const ConfigContext: import("react").Context<{
    globalConfig: GlobalConfig;
}>;
export default ConfigContext;
