{"version":3,"file":"ConfigProvider.js","sources":["../../node_modules/lodash/mergeWith.js","../../src/config-provider/ConfigProvider.tsx"],"sourcesContent":["var baseMerge = require('./_baseMerge'),\n    createAssigner = require('./_createAssigner');\n\n/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with six arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = { 'a': [1], 'b': [2] };\n * var other = { 'a': [3], 'b': [4] };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'a': [1, 3], 'b': [2, 4] }\n */\nvar mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n  baseMerge(object, source, srcIndex, customizer);\n});\n\nmodule.exports = mergeWith;\n","import React from 'react';\nimport _mergeWith from 'lodash/mergeWith';\nimport ConfigContext, { Config, defaultGlobalConfig, GlobalConfig } from './ConfigContext';\nimport { GlobalConfigProvider } from './type';\n\nexport interface ConfigProviderProps extends Config {\n  children: React.ReactNode;\n}\n\n// deal with https://github.com/lodash/lodash/issues/1313\nexport const merge = (src: GlobalConfigProvider, config: GlobalConfigProvider) =>\n  _mergeWith(src, config, (objValue, srcValue) => {\n    if (Array.isArray(objValue)) {\n      return srcValue;\n    }\n  });\n\nexport default function ConfigProvider({ children, globalConfig }: ConfigProviderProps) {\n  const mergedGlobalConfig = merge(defaultGlobalConfig, globalConfig);\n  return (\n    <ConfigContext.Provider value={{ globalConfig: mergedGlobalConfig as GlobalConfig }}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n\nConfigProvider.displayName = 'ConfigProvider';\n"],"names":["baseMerge","require$$0","createAssigner","require$$1","mergeWith","object","source","srcIndex","customizer","mergeWith_1","merge","src","config","_mergeWith","objValue","srcValue","Array","isArray","ConfigProvider","children","globalConfig","mergedGlobalConfig","defaultGlobalConfig","React","createElement","ConfigContext","Provider","value","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,SAAS,GAAGC,UAAhB;AAAA,IACIC,cAAc,GAAGC,eADrB,CAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAGF,cAAc,CAAC,UAASG,MAAT,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,UAAnC,EAA+C;EAC5ER,SAAS,CAACK,MAAD,EAASC,MAAT,EAAiBC,QAAjB,EAA2BC,UAA3B,CAAT,CAAA;AACD,CAF6B,CAA9B,CAAA;AAIA,IAAAC,WAAc,GAAGL,SAAjB;;AC5Ba,IAAAM,KAAA,GAAQ,SAARA,KAAQ,CAACC,GAAD,EAA4BC,MAA5B,EAAA;EAAA,OACnBC,YAAWF,KAAKC,QAAQ,UAACE,QAAD,EAAWC,QAAX,EAAwB;AAC1C,IAAA,IAAAC,KAAA,CAAMC,OAAN,CAAcH,QAAd,CAAA,EAAyB;AACpB,MAAA,OAAAC,QAAA,CAAA;AACT,KAAA;AACD,IALkB,CAAA;AAAA,EAAR;AAOb,SAAwBG,cAAxB,CAAwF,IAAA,EAAA;EAAA,IAA/CC,QAA+C,QAA/CA,QAA+C;MAArCC,YAAqC,QAArCA,YAAqC,CAAA;AAChF,EAAA,IAAAC,kBAAA,GAAqBX,KAAM,CAAAY,mBAAA,EAAqBF,YAArB,CAA3B,CAAA;EAEJ,sBAAAG,KAAA,CAAAC,aAAA,CAACC,cAAcC,QAAf,EAAC;AAAuBC,IAAAA,KAAA,EAAO;AAAEP,MAAAA,YAAA,EAAcC,kBAAAA;AAAhB,KAAA;GAA/B,EACGF,QADH,CAAA,CAAA;AAIJ,CAAA;AAEAD,cAAA,CAAeU,WAAf,GAA6B,gBAA7B;;;;"}