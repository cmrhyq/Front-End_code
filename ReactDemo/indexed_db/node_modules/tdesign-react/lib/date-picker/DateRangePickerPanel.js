/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _toConsumableArray } from '../_chunks/dep-59b9253f.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import React, { forwardRef, useState, useMemo } from 'react';
import dayjs from 'dayjs';
import RangePanel from './panel/RangePanel.js';
import useRange from './hooks/useRangeValue.js';
import { getDefaultFormat, formatDate } from '../_common/js/date-picker/format.js';
import { subtractMonth, addMonth, extractTimeObj } from '../_common/js/date-picker/utils.js';
import log from '../_common/js/log/log.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-d1b4ab24.js';
import 'classnames';
import '../hooks/useConfig.js';
import '../_chunks/dep-918e41e2.js';
import '../_chunks/dep-734a21a0.js';
import '../_chunks/dep-68f7a306.js';
import '../_chunks/dep-a74f6fff.js';
import '../_chunks/dep-d23d346c.js';
import '../_chunks/dep-9ea787ca.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-0e2dfd87.js';
import '../_chunks/dep-f50ff346.js';
import '../_chunks/dep-51592cde.js';
import '../_chunks/dep-ae94c4e7.js';
import '../_chunks/dep-7f6754ac.js';
import '../_chunks/dep-2509667d.js';
import '../_chunks/dep-b817c90e.js';
import '../_chunks/dep-fe9825b6.js';
import '../_chunks/dep-ebc05da7.js';
import '../_chunks/dep-3160df29.js';
import '../_chunks/dep-c91b3852.js';
import '../_chunks/dep-9e44c34c.js';
import '../_chunks/dep-0c62d47a.js';
import '../_chunks/dep-e2fe68b7.js';
import '../_chunks/dep-44a03722.js';
import '../_chunks/dep-f5616354.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import './panel/PanelContent.js';
import './base/Header.js';
import '../locale/LocalReceiver.js';
import '../select/index.js';
import '../select/base/Select.js';
import '../_chunks/dep-8368bb87.js';
import '../_chunks/dep-1f300d2c.js';
import '../_chunks/dep-e103618e.js';
import '../_chunks/dep-b989427d.js';
import '../_chunks/dep-2ac048c0.js';
import '../hooks/useControlled.js';
import '../_chunks/dep-12260644.js';
import '../_chunks/dep-ec84085d.js';
import '../_chunks/dep-66273dbc.js';
import '../_util/noop.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../select/util/helper.js';
import '../select/base/OptionGroup.js';
import '../select/defaultProps.js';
import '../select/base/Option.js';
import '../_chunks/dep-31043569.js';
import '../_chunks/dep-8d5556d7.js';
import '../_util/useRipple.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../_util/dom.js';
import 'raf';
import '../_util/easing.js';
import '../common/FakeArrow.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../select-input/index.js';
import '../select-input/SelectInput.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../popup/hooks/useTrigger.js';
import 'react-is';
import '../popup/utils/ref.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-05d10538.js';
import '../_chunks/dep-652c1652.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../select-input/useSingle.js';
import '../_chunks/dep-5e5947bc.js';
import '../_chunks/dep-dcadd2e9.js';
import '../_chunks/dep-9f757569.js';
import '../_chunks/dep-c4881228.js';
import '../input/index.js';
import '../input/Input.js';
import 'tdesign-icons-react';
import '../hooks/useGlobalIcon.js';
import '../input/InputGroup.js';
import '../input/defaultProps.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../_util/useDragSorter.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/useTagList.js';
import 'lodash';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/defaultProps.js';
import '../tag-input/useHover.js';
import '../tag-input/defaultProps.js';
import '../select-input/useOverlayInnerStyle.js';
import '../select-input/defaultProps.js';
import '../select/base/PopupContent.js';
import '../jumper/index.js';
import '../jumper/Jumper.js';
import '../button/index.js';
import '../button/Button.js';
import '../button/defaultProps.js';
import '../jumper/defaultProps.js';
import './base/Table.js';
import './base/Cell.js';
import '../time-picker/index.js';
import '../time-picker/TimePicker.js';
import '../_chunks/dep-f4afdfc0.js';
import '../time-picker/TimeRangePicker.js';
import '../range-input/index.js';
import '../range-input/RangeInput.js';
import '../range-input/defaultProps.js';
import '../range-input/RangeInputPopup.js';
import '../time-picker/panel/TimePickerPanel.js';
import '../time-picker/panel/SinglePanel.js';
import '../time-picker/hooks/useTimePickerTextConfig.js';
import '../_common/js/time-picker/const.js';
import '../_common/js/time-picker/utils.js';
import '../hooks/useDebounce.js';
import '../_util/usePersistFn.js';
import '../hooks/usePropsRef.js';
import '../time-picker/defaultProps.js';
import './panel/ExtraContent.js';
import './base/Footer.js';
import './hooks/useTableData.js';
import './hooks/useDisableDate.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DateRangePickerPanel = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      style = props.style,
      mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      disableDate = props.disableDate,
      firstDayOfWeek = props.firstDayOfWeek,
      presets = props.presets,
      timePickerProps = props.timePickerProps,
      presetsPlacement = props.presetsPlacement,
      panelPreselection = props.panelPreselection,
      onPanelClick = props.onPanelClick;

  var _useRangeValue = useRange(props),
      value = _useRangeValue.value,
      year = _useRangeValue.year,
      month = _useRangeValue.month,
      time = _useRangeValue.time,
      onChange = _useRangeValue.onChange,
      setTime = _useRangeValue.setTime,
      setYear = _useRangeValue.setYear,
      setMonth = _useRangeValue.setMonth,
      isFirstValueSelected = _useRangeValue.isFirstValueSelected,
      setIsFirstValueSelected = _useRangeValue.setIsFirstValueSelected,
      cacheValue = _useRangeValue.cacheValue,
      setCacheValue = _useRangeValue.setCacheValue;

  var _getDefaultFormat = getDefaultFormat({
    mode: mode,
    enableTimePicker: enableTimePicker,
    format: props.format,
    valueType: props.valueType
  }),
      format = _getDefaultFormat.format,
      valueType = _getDefaultFormat.valueType;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isSelected = _useState2[0],
      setIsSelected = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isHoverCell = _useState4[0],
      setIsHoverCell = _useState4[1];

  var _useState5 = useState([]),
      _useState6 = _slicedToArray(_useState5, 2),
      hoverValue = _useState6[0],
      setHoverValue = _useState6[1];

  var activeIndex = useMemo(function () {
    return isFirstValueSelected ? 1 : 0;
  }, [isFirstValueSelected]);

  function onCellMouseEnter(date) {
    setIsHoverCell(true);

    var nextValue = _toConsumableArray(hoverValue);

    nextValue[activeIndex] = formatDate(date, {
      format: format,
      targetFormat: format
    });
    setHoverValue(nextValue);
  }

  function onCellMouseLeave() {
    setIsHoverCell(false);
    setHoverValue(cacheValue);
  }

  function onCellClick(date, _ref) {
    var _props$onCellClick;

    var e = _ref.e,
        partial = _ref.partial;
    setIsSelected(true);

    var nextValue = _toConsumableArray(cacheValue);

    nextValue[activeIndex] = formatDate(date, {
      format: format,
      targetFormat: format
    });
    setCacheValue(nextValue);
    (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, {
      date: nextValue.map(function (v) {
        return dayjs(v).toDate();
      }),
      e: e,
      partial: activeIndex ? "end" : "start"
    });

    if (mode === "date") {
      var partialIndex = partial === "start" ? 0 : 1;
      var isAdditional = dayjs(date).month() !== month[partialIndex];

      if (isAdditional) {
        if (activeIndex === 0) setMonth([dayjs(date).month(), Math.min(dayjs(date).month() + 1, 11)]);
        if (activeIndex === 1) setMonth([Math.max(dayjs(date).month() - 1, 0), dayjs(date).month()]);
      }
    }

    if (enableTimePicker) return;

    if (nextValue.length === 2 && isFirstValueSelected) {
      onChange(formatDate(nextValue, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: nextValue.map(function (v) {
          return dayjs(v);
        }),
        trigger: "pick"
      });
      setIsFirstValueSelected(false);
    } else {
      setIsFirstValueSelected(true);
    }
  }

  function onJumperClick(_ref2) {
    var trigger = _ref2.trigger,
        partial = _ref2.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    var triggerMap = {
      "-1": "arrow-previous",
      1: "arrow-next"
    };
    var monthCountMap = {
      date: 1,
      week: 1,
      month: 12,
      quarter: 12,
      year: 120
    };
    var monthCount = monthCountMap[mode] || 0;
    var current = new Date(year[partialIndex], month[partialIndex]);
    var next = null;

    if (trigger === "prev") {
      next = subtractMonth(current, monthCount);
    } else if (trigger === "current") {
      next = new Date();
    } else if (trigger === "next") {
      next = addMonth(current, monthCount);
    }

    var nextYear = _toConsumableArray(year);

    nextYear[partialIndex] = next.getFullYear();

    var nextMonth = _toConsumableArray(month);

    nextMonth[partialIndex] = next.getMonth();

    if (partialIndex === 0) {
      nextYear[1] = Math.max(nextYear[0], nextYear[1]);

      if (nextYear[0] === nextYear[1]) {
        nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
      }
    }

    if (partialIndex === 1) {
      nextYear[0] = Math.min(nextYear[0], nextYear[1]);

      if (nextYear[0] === nextYear[1]) {
        nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
      }
    }

    if (year.some(function (y) {
      return !nextYear.includes(y);
    })) {
      var _props$onYearChange;

      (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, {
        partial: partial,
        year: nextYear[partialIndex],
        date: value.map(function (v) {
          return dayjs(v).toDate();
        }),
        trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
      });
    }

    if (month.some(function (m) {
      return !nextMonth.includes(m);
    })) {
      var _props$onMonthChange;

      (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, {
        partial: partial,
        month: nextMonth[partialIndex],
        date: value.map(function (v) {
          return dayjs(v).toDate();
        }),
        trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
      });
    }

    setYear(nextYear);
    setMonth(nextMonth);
  }

  function onTimePickerChange(val) {
    var _props$onTimeChange;

    var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;

    var nextInputValue = _toConsumableArray(cacheValue);

    var changedInputValue = cacheValue[activeIndex];
    var currentDate = !dayjs(changedInputValue, format).isValid() ? dayjs().year(year[activeIndex]).month(month[activeIndex]) : dayjs(changedInputValue, format);
    var nextHours = hours;
    if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
    if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
    var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
    nextInputValue[activeIndex] = nextDate;

    var nextTime = _toConsumableArray(time);

    nextTime[activeIndex] = val;
    setTime(nextTime);
    setIsSelected(true);
    setCacheValue(formatDate(nextInputValue, {
      format: format,
      targetFormat: format
    }));
    (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 ? void 0 : _props$onTimeChange.call(props, {
      time: val,
      partial: activeIndex ? "end" : "start",
      date: value.map(function (v) {
        return dayjs(v).toDate();
      }),
      trigger: "time-hour"
    });
  }

  function onConfirmClick(_ref3) {
    var _props$onConfirm;

    var e = _ref3.e;

    var nextValue = _toConsumableArray(cacheValue);

    if (nextValue.length === 2 && isFirstValueSelected) {
      onChange(formatDate(nextValue, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: nextValue.map(function (v) {
          return dayjs(v);
        }),
        trigger: "confirm"
      });
      setYear(nextValue.map(function (v) {
        return dayjs(v, format).year();
      }));
      setMonth(nextValue.map(function (v) {
        return dayjs(v, format).month();
      }));
      setIsFirstValueSelected(false);
    } else {
      setIsFirstValueSelected(true);
    }

    (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
      date: value.map(function (v) {
        return dayjs(v).toDate();
      }),
      e: e
    });
  }

  function onPresetClick(presetValue, _ref4) {
    var _props$onPresetClick;

    var e = _ref4.e,
        preset = _ref4.preset;
    var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;

    if (!Array.isArray(presetVal)) {
      log.error("DateRangePickerPanel", "preset: ".concat(presetValue, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
    } else {
      onChange(formatDate(presetVal, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: presetVal.map(function (p) {
          return dayjs(p);
        }),
        trigger: "preset"
      });
    }

    (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 ? void 0 : _props$onPresetClick.call(props, {
      e: e,
      preset: preset
    });
  }

  function onYearChange(nextVal, _ref5) {
    var partial = _ref5.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;

    var nextYear = _toConsumableArray(year);

    nextYear[partialIndex] = nextVal;
    if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
    if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
    setYear(nextYear);
    props.onYearChange({
      partial: partial,
      year: nextYear[partialIndex],
      date: value.map(function (v) {
        return dayjs(v).toDate();
      }),
      trigger: "year-select"
    });
  }

  function onMonthChange(nextVal, _ref6) {
    var partial = _ref6.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;

    var nextMonth = _toConsumableArray(month);

    nextMonth[partialIndex] = nextVal;

    if (year[0] === year[1]) {
      if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
      if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
    }

    setMonth(nextMonth);
    props.onMonthChange({
      partial: partial,
      month: nextMonth[partialIndex],
      date: value.map(function (v) {
        return dayjs(v).toDate();
      }),
      trigger: "month-select"
    });
  }

  var panelProps = {
    hoverValue: isHoverCell ? hoverValue : [],
    value: isSelected ? cacheValue : value,
    year: year,
    month: month,
    mode: mode,
    format: format,
    presets: presets,
    time: time,
    disableDate: disableDate,
    firstDayOfWeek: firstDayOfWeek,
    timePickerProps: timePickerProps,
    enableTimePicker: enableTimePicker,
    presetsPlacement: presetsPlacement,
    activeIndex: activeIndex,
    panelPreselection: panelPreselection,
    onCellMouseEnter: onCellMouseEnter,
    onCellMouseLeave: onCellMouseLeave,
    onCellClick: onCellClick,
    onJumperClick: onJumperClick,
    onConfirmClick: onConfirmClick,
    onPresetClick: onPresetClick,
    onYearChange: onYearChange,
    onMonthChange: onMonthChange,
    onTimePickerChange: onTimePickerChange,
    onPanelClick: onPanelClick
  };
  return /* @__PURE__ */React.createElement(RangePanel, _objectSpread({
    ref: ref,
    className: className,
    style: style
  }, panelProps));
});
DateRangePickerPanel.displayName = "DateRangePickerPanel";
DateRangePickerPanel.defaultProps = {
  mode: "date",
  defaultValue: [],
  panelPreselection: true
};

export { DateRangePickerPanel as default };
//# sourceMappingURL=DateRangePickerPanel.js.map
