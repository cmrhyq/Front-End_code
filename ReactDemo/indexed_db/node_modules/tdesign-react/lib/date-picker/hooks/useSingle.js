/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../../_chunks/dep-9615f03f.js';
import React, { useRef, useState, useEffect } from 'react';
import { CalendarIcon } from 'tdesign-icons-react';
import dayjs from 'dayjs';
import classNames from 'classnames';
import useConfig from '../../hooks/useConfig.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import { getDefaultFormat, formatDate, isValidDate, formatTime } from '../../_common/js/date-picker/format.js';
import useSingleValue from './useSingleValue.js';
import '../../_chunks/dep-7909fefa.js';
import '../../_chunks/dep-918e41e2.js';
import '../../_chunks/dep-734a21a0.js';
import '../../_chunks/dep-68f7a306.js';
import '../../_chunks/dep-a74f6fff.js';
import '../../_chunks/dep-d23d346c.js';
import '../../_chunks/dep-9ea787ca.js';
import '../../_chunks/dep-4e0da095.js';
import '../../_chunks/dep-0e2dfd87.js';
import '../../_chunks/dep-f50ff346.js';
import '../../_chunks/dep-51592cde.js';
import '../../_chunks/dep-ae94c4e7.js';
import '../../_chunks/dep-7f6754ac.js';
import '../../_chunks/dep-2509667d.js';
import '../../_chunks/dep-b817c90e.js';
import '../../_chunks/dep-fe9825b6.js';
import '../../_chunks/dep-ebc05da7.js';
import '../../_chunks/dep-3160df29.js';
import '../../_chunks/dep-c91b3852.js';
import '../../_chunks/dep-9e44c34c.js';
import '../../_chunks/dep-0c62d47a.js';
import '../../_chunks/dep-e2fe68b7.js';
import '../../_chunks/dep-44a03722.js';
import '../../_chunks/dep-f5616354.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import '../../_common/js/date-picker/utils.js';
import '../../_chunks/dep-f4afdfc0.js';
import '../../_chunks/dep-652c1652.js';
import '../../_chunks/dep-b989427d.js';
import '../../_chunks/dep-66273dbc.js';
import '../../_common/js/log/log.js';
import '../../hooks/useControlled.js';
import '../../_chunks/dep-12260644.js';
import '../../_chunks/dep-ec84085d.js';
import '../../_chunks/dep-2ac048c0.js';
import '../../_util/noop.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useSingleInput(props) {
  var _props$placeholder, _props$suffixIcon, _props$popupProps$ove, _props$popupProps, _props$popupProps2;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;

  var _useGlobalIcon = useGlobalIcon({
    CalendarIcon: CalendarIcon
  }),
      CalendarIcon$1 = _useGlobalIcon.CalendarIcon;

  var name = "".concat(classPrefix, "-date-picker");

  var _getDefaultFormat = getDefaultFormat({
    mode: props.mode,
    format: props.format,
    valueType: props.valueType,
    enableTimePicker: props.enableTimePicker
  }),
      format = _getDefaultFormat.format,
      valueType = _getDefaultFormat.valueType,
      timeFormat = _getDefaultFormat.timeFormat;

  var inputRef = useRef();

  var _useSingleValue = useSingleValue(props),
      value = _useSingleValue.value,
      onChange = _useSingleValue.onChange,
      time = _useSingleValue.time,
      setTime = _useSingleValue.setTime,
      month = _useSingleValue.month,
      setMonth = _useSingleValue.setMonth,
      year = _useSingleValue.year,
      setYear = _useSingleValue.setYear,
      cacheValue = _useSingleValue.cacheValue,
      setCacheValue = _useSingleValue.setCacheValue;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      popupVisible = _useState2[0],
      setPopupVisible = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isHoverCell = _useState4[0],
      setIsHoverCell = _useState4[1];

  var _useState5 = useState(formatDate(value, {
    format: format,
    targetFormat: format
  })),
      _useState6 = _slicedToArray(_useState5, 2),
      inputValue = _useState6[0],
      setInputValue = _useState6[1];

  var inputProps = _objectSpread(_objectSpread({}, props.inputProps), {}, {
    ref: inputRef,
    clearable: props.clearable,
    prefixIcon: props.prefixIcon,
    readonly: !props.allowInput,
    placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : globalDatePickerConfig.placeholder[props.mode],
    suffixIcon: (_props$suffixIcon = props.suffixIcon) !== null && _props$suffixIcon !== void 0 ? _props$suffixIcon : /* @__PURE__ */React.createElement(CalendarIcon$1, null),
    className: classNames(_defineProperty({}, "".concat(name, "__input--placeholder"), isHoverCell)),
    onClear: function onClear(_ref) {
      var e = _ref.e;
      e.stopPropagation();
      setPopupVisible(false);
      onChange("", {
        dayjsValue: dayjs(""),
        trigger: "clear"
      });
    },
    onBlur: function onBlur(val, _ref2) {
      var _props$onBlur;

      var e = _ref2.e;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
        value: val,
        e: e
      });
    },
    onFocus: function onFocus(_, _ref3) {
      var _props$onFocus;

      var e = _ref3.e;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
        value: value,
        e: e
      });
    },
    onChange: function onChange(val) {
      setInputValue(val);
      if (!isValidDate(val, format)) return;
      var newMonth = dayjs(val).month();
      var newYear = dayjs(val).year();
      var newTime = formatTime(val, timeFormat);
      !Number.isNaN(newYear) && setYear(newYear);
      !Number.isNaN(newMonth) && setMonth(newMonth);
      !Number.isNaN(newTime) && setTime(newTime);
    },
    onEnter: function onEnter(val) {
      if (!isValidDate(val, format) && !isValidDate(value, format)) return;
      setPopupVisible(false);

      if (isValidDate(val, format)) {
        onChange(formatDate(val, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: dayjs(val),
          trigger: "enter"
        });
      } else if (isValidDate(value, format)) {
        setInputValue(formatDate(value, {
          format: format,
          targetFormat: format
        }));
      } else {
        setInputValue("");
      }
    }
  });

  var popupProps = _objectSpread(_objectSpread({
    expandAnimation: true
  }, props.popupProps), {}, {
    overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
      width: "auto"
    },
    overlayClassName: classNames((_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(name, "__panel-container")),
    onVisibleChange: function onVisibleChange(visible, context) {
      if (context.trigger === "trigger-element-click") {
        return setPopupVisible(true);
      }

      if (!visible) {
        setIsHoverCell(false);
      }

      setPopupVisible(visible);
    }
  });

  useEffect(function () {
    if (!value) {
      setInputValue("");
      return;
    }

    if (!isValidDate(value, valueType)) return;
    setInputValue(formatDate(value, {
      format: format,
      targetFormat: format
    }));
  }, [value]);
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    inputValue: inputValue,
    popupVisible: popupVisible,
    inputProps: inputProps,
    popupProps: popupProps,
    inputRef: inputRef,
    cacheValue: cacheValue,
    onChange: onChange,
    setYear: setYear,
    setMonth: setMonth,
    setTime: setTime,
    setIsHoverCell: setIsHoverCell,
    setInputValue: setInputValue,
    setPopupVisible: setPopupVisible,
    setCacheValue: setCacheValue
  };
}

export { useSingleInput as default };
//# sourceMappingURL=useSingle.js.map
