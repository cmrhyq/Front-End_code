/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { notificationDefaultProps } from './defaultProps.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pluginDefaultConfig = _objectSpread(_objectSpread({}, notificationDefaultProps), {}, {
  zIndex: 6e3,
  placement: "top-right",
  offset: ["16px", "16px"]
});

var getConfig = function getConfig(options) {
  var currentOptions = _objectSpread({}, options);

  for (var i in currentOptions) {
    if (typeof currentOptions[i] === "undefined") {
      delete currentOptions[i];
    }
  }

  if (typeof currentOptions.duration !== "number" || currentOptions.duration < 0) {
    delete currentOptions.duration;
  }

  if (["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(currentOptions.placement) < 0) {
    delete currentOptions.placement;
  }

  if (["info", "success", "warning", "error"].indexOf(currentOptions.theme) < 0) {
    delete currentOptions.theme;
  }

  if (!Array.isArray(currentOptions.offset)) {
    delete currentOptions.offset;
  }

  return _objectSpread(_objectSpread({}, pluginDefaultConfig), currentOptions);
};
var setGlobalConfig = function setGlobalConfig(options) {
  pluginDefaultConfig = _objectSpread({}, getConfig(options));
};
var getDefaultConfig = function getDefaultConfig() {
  return _objectSpread({}, pluginDefaultConfig);
};

export { getConfig, getDefaultConfig, setGlobalConfig };
//# sourceMappingURL=config.js.map
