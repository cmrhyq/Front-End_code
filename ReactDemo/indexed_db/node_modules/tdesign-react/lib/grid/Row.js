/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-8368bb87.js';
import React, { createContext, forwardRef, useState, useEffect } from 'react';
import classNames from 'classnames';
import { i as isObject_1 } from '../_chunks/dep-0e2dfd87.js';
import useConfig from '../hooks/useConfig.js';
import { canUseDocument, getCssVarsValue } from '../_util/dom.js';
import { rowDefaultProps } from './defaultProps.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-918e41e2.js';
import '../_chunks/dep-734a21a0.js';
import '../_chunks/dep-68f7a306.js';
import '../_chunks/dep-a74f6fff.js';
import '../_chunks/dep-d23d346c.js';
import '../_chunks/dep-9ea787ca.js';
import '../_chunks/dep-f50ff346.js';
import '../_chunks/dep-51592cde.js';
import '../_chunks/dep-ae94c4e7.js';
import '../_chunks/dep-7f6754ac.js';
import '../_chunks/dep-2509667d.js';
import '../_chunks/dep-b817c90e.js';
import '../_chunks/dep-fe9825b6.js';
import '../_chunks/dep-ebc05da7.js';
import '../_chunks/dep-3160df29.js';
import '../_chunks/dep-c91b3852.js';
import '../_chunks/dep-9e44c34c.js';
import '../_chunks/dep-0c62d47a.js';
import '../_chunks/dep-e2fe68b7.js';
import '../_chunks/dep-44a03722.js';
import '../_chunks/dep-f5616354.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import 'raf';
import '../_chunks/dep-8d5556d7.js';
import '../_util/easing.js';

var _excluded = ["align", "gutter", "justify", "tag", "style", "className", "children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var calcSize = function calcSize(width) {
  var smWidth = getCssVarsValue("--td-screen-sm") || 768;
  var mdWidth = getCssVarsValue("--td-screen-md") || 992;
  var lgWidth = getCssVarsValue("--td-screen-lg") || 1200;
  var xlWidth = getCssVarsValue("--td-screen-xl") || 1400;
  var xxlWidth = getCssVarsValue("--td-screen-xxl") || 1880;
  var size = "xs";

  if (width >= xxlWidth) {
    size = "xxl";
  } else if (width >= xlWidth) {
    size = "xl";
  } else if (width >= lgWidth) {
    size = "lg";
  } else if (width >= mdWidth) {
    size = "md";
  } else if (width >= smWidth) {
    size = "sm";
  } else {
    size = "xs";
  }

  return size;
};

var calcRowStyle = function calcRowStyle(gutter, currentSize) {
  var rowStyle = {};

  if (typeof gutter === "number") {
    Object.assign(rowStyle, {
      marginLeft: "".concat(gutter / -2, "px"),
      marginRight: "".concat(gutter / -2, "px")
    });
  } else if (Array.isArray(gutter) && gutter.length) {
    if (typeof gutter[0] === "number") {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[0] / -2, "px"),
        marginRight: "".concat(gutter[0] / -2, "px")
      });
    }

    if (typeof gutter[1] === "number") {
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[1], "px")
      });
    }

    if (isObject_1(gutter[0]) && gutter[0][currentSize] !== void 0) {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[0][currentSize] / -2, "px"),
        marginRight: "".concat(gutter[0][currentSize] / -2, "px")
      });
    }

    if (isObject_1(gutter[1]) && gutter[1][currentSize] !== void 0) {
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[1][currentSize], "px")
      });
    }
  } else if (isObject_1(gutter) && gutter[currentSize]) {
    if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[currentSize][0] / -2, "px"),
        marginRight: "".concat(gutter[currentSize][0] / -2, "px")
      });
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[currentSize][1], "px")
      });
    } else {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[currentSize] / -2, "px"),
        marginRight: "".concat(gutter[currentSize] / -2, "px")
      });
    }
  }

  return rowStyle;
};

var RowContext = /*#__PURE__*/createContext({
  gutter: void 0,
  size: void 0
});
var Row = /*#__PURE__*/forwardRef(function (props, ref) {
  var _classNames;

  var align = props.align,
      gutter = props.gutter,
      justify = props.justify,
      tag = props.tag,
      propStyle = props.style,
      className = props.className,
      children = props.children,
      otherRowProps = _objectWithoutProperties(props, _excluded);

  var _useState = useState(canUseDocument ? calcSize(window.innerWidth) : "md"),
      _useState2 = _slicedToArray(_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];

  var updateSize = function updateSize() {
    var currentSize = calcSize(window.innerWidth);

    if (currentSize !== size) {
      setSize(size);
    }
  };

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var rowClassNames = classNames("".concat(classPrefix, "-row"), className, (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-row--").concat(justify), true), _defineProperty(_classNames, "".concat(classPrefix, "-row--").concat(align), true), _classNames));

  var rowStyle = _objectSpread(_objectSpread({}, calcRowStyle(gutter, size)), propStyle);

  useEffect(function () {
    window.addEventListener("resize", updateSize);
    return function () {
      window.removeEventListener("resize", updateSize);
    };
  });
  return /*#__PURE__*/React.createElement(tag, _objectSpread({
    ref: ref,
    className: rowClassNames,
    style: rowStyle
  }, otherRowProps), /* @__PURE__ */React.createElement(RowContext.Provider, {
    value: {
      gutter: gutter,
      size: size
    }
  }, children));
});
Row.displayName = "Row";
Row.defaultProps = rowDefaultProps;

export { RowContext, Row as default };
//# sourceMappingURL=Row.js.map
