/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { i as isEmpty_1 } from '../_chunks/dep-7efee863.js';
import { i as isFunction_1 } from '../_chunks/dep-d23d346c.js';
import { i as isString_1 } from '../_chunks/dep-8d5556d7.js';
import React from 'react';
import '../_chunks/dep-6be1e491.js';
import '../_chunks/dep-51592cde.js';
import '../_chunks/dep-9ea787ca.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-ae94c4e7.js';
import '../_chunks/dep-7f6754ac.js';
import '../_chunks/dep-2509667d.js';
import '../_chunks/dep-a74f6fff.js';
import '../_chunks/dep-0e2dfd87.js';
import '../_chunks/dep-ebc05da7.js';
import '../_chunks/dep-3160df29.js';
import '../_chunks/dep-9e44c34c.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var getDefaultValue = function getDefaultValue(value, defaultValue) {
  if (isEmpty_1(value)) {
    return Array.isArray(defaultValue) ? defaultValue : [defaultValue, defaultValue];
  }

  if (Array.isArray(value)) return value;
  return [defaultValue, defaultValue];
};
var getJSX = function getJSX(value) {
  if (isString_1(value)) return value;
  if (isFunction_1(value)) return value();
  if ( /*#__PURE__*/React.isValidElement(value)) return value;
  return value;
};
var getLeafNodes = function getLeafNodes(nodes) {
  var resData = [];

  var map = function map(nodes2) {
    nodes2.forEach(function (child) {
      if (child.children && child.children.length > 0) {
        return map(child.children);
      }

      resData.push(child);
    });
  };

  map(nodes);
  return resData;
};
var filterCheckedTreeNodes = function filterCheckedTreeNodes(nodes, checkeds) {
  return nodes.filter(function (item) {
    return !checkeds.includes(item.value);
  }).map(function (item) {
    var newItem = _objectSpread({}, item);

    if (item.children && item.children.length > 0) {
      newItem.children = filterCheckedTreeNodes(item.children, checkeds);
    }

    return newItem;
  }).filter(function (item) {
    return item.children && item.children.length !== 0 || !item.children;
  });
};
var getTargetNodes = function getTargetNodes(sourceNodes, data) {
  var source = getLeafNodes(sourceNodes).map(function (item) {
    return item.value;
  });
  return filterCheckedTreeNodes(data, source);
};

export { filterCheckedTreeNodes, getDefaultValue, getJSX, getLeafNodes, getTargetNodes };
//# sourceMappingURL=utils.js.map
