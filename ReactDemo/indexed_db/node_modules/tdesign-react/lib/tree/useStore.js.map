{"version":3,"file":"useStore.js","sources":["../../src/tree/useStore.ts"],"sourcesContent":["import { useRef } from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\n// import isEqual from 'lodash/isEqual';\nimport useUpdateEffect from '../_util/useUpdateEffect';\n// import { TreeOptionData } from '../common';\nimport TreeStore from '../_common/js/tree/tree-store';\n// import TreeNode from '../_common/js/tree/tree-node';\nimport { usePersistFn } from '../_util/usePersistFn';\nimport { TdTreeProps } from './type';\nimport { TypeEventState } from './interface';\n\nexport function useStore(props: TdTreeProps, refresh: () => void): TreeStore {\n  const storeRef = useRef<TreeStore>();\n\n  const {\n    data,\n    keys,\n    expandAll,\n    expandParent,\n    expanded,\n    expandLevel,\n    expandMutex,\n    activable,\n    activeMultiple,\n    actived,\n    disabled,\n    checkable,\n    value,\n    checkStrictly,\n    load,\n    lazy,\n    valueMode,\n    filter,\n    // onDataChange,\n    onLoad,\n    allowFoldNodeOnFilter = false,\n  } = props;\n\n  // 传入 TreeStore 中调用的，但是每次都需要使用最新的值，所以使用 usePersistFn\n  const handleUpdate = usePersistFn(() => {\n    refresh();\n  });\n\n  // const handleReflow = usePersistFn(() => {\n  //   if (!onDataChange) {\n  //     return;\n  //   }\n\n  //   const nodes = storeRef.current.getNodes();\n\n  //   const rootNodes = nodes.filter((v) => !v.parent);\n\n  //   const getChild = (list: TreeNode[] | boolean) => {\n  //     if (Array.isArray(list) && list.length > 0) {\n  //       return list.map((v) => {\n  //         const nodeData: TreeOptionData = v.data;\n  //         if (Array.isArray(v.children) && v.children.length > 0) {\n  //           nodeData.children = getChild(v.children);\n  //         }\n  //         return nodeData;\n  //       });\n  //     }\n  //   };\n\n  //   const newData = getChild(rootNodes);\n\n  //   if (!isEqual(newData, data)) {\n  //     onDataChange?.(newData);\n  //   }\n  // });\n\n  const getExpandedArr = (arr: TdTreeProps['expanded'], store: TreeStore) => {\n    const expandedMap = new Map();\n    arr.forEach((val) => {\n      expandedMap.set(val, true);\n      if (expandParent) {\n        const node = store.getNode(val);\n        node.getParents().forEach((tn) => {\n          expandedMap.set(tn.value, true);\n        });\n      }\n    });\n    return Array.from(expandedMap.keys());\n  };\n\n  const createStore = () => {\n    const store = new TreeStore({\n      keys,\n      activable,\n      activeMultiple,\n      checkable,\n      checkStrictly,\n      expandAll,\n      expandLevel,\n      expandMutex,\n      expandParent,\n      disabled,\n      load,\n      lazy,\n      valueMode,\n      filter,\n      onLoad: (info: TypeEventState) => {\n        const { node } = info;\n        onLoad?.({\n          node: node.getModel(),\n        });\n      },\n      onUpdate: handleUpdate,\n      allowFoldNodeOnFilter,\n      // onReflow: handleReflow,\n    });\n\n    // 初始化 store 的节点排列 + 状态\n    let list = cloneDeep(data);\n    if (!Array.isArray(list)) {\n      list = [];\n    }\n\n    store.append(list);\n\n    // 刷新节点，必须在配置选中之前执行\n    // 这样选中态联动判断才能找到父节点\n    store.refreshNodes();\n\n    // 初始化选中状态\n    if (Array.isArray(value)) {\n      store.setChecked(value);\n    }\n\n    // 初始化展开状态\n    if (Array.isArray(expanded)) {\n      const expandedArr = getExpandedArr(expanded, store);\n      store.setExpanded(expandedArr);\n    }\n\n    // 初始化激活状态\n    if (Array.isArray(actived)) {\n      store.setActived(actived);\n    }\n\n    // refresh();\n\n    store.refreshNodes();\n    return store;\n  };\n\n  if (!storeRef.current) {\n    storeRef.current = createStore();\n  }\n\n  /* ======== 由 props 引发的 store 更新 ======= */\n  const store = storeRef.current;\n\n  useUpdateEffect(() => {\n    if (data && Array.isArray(data)) {\n      const expanded = store.getExpanded();\n      const checked = store.getChecked();\n      const actived = store.getActived();\n      store.removeAll();\n      store.append(data);\n      store.setChecked(checked);\n      store.setActived(actived);\n      store.setExpanded(expanded);\n    }\n  }, [data, store]);\n\n  useUpdateEffect(() => {\n    store.setConfig({\n      keys,\n      expandAll,\n      expandLevel,\n      expandMutex,\n      expandParent,\n      activable,\n      activeMultiple,\n      disabled,\n      checkable,\n      checkStrictly,\n      load,\n      lazy,\n      valueMode,\n    });\n\n    store.refreshState();\n  }, [\n    activable,\n    activeMultiple,\n    checkStrictly,\n    checkable,\n    disabled,\n    expandAll,\n    expandLevel,\n    expandMutex,\n    expandParent,\n    keys,\n    lazy,\n    load,\n    store,\n    valueMode,\n  ]);\n\n  useUpdateEffect(() => {\n    if (Array.isArray(value)) {\n      store.replaceChecked(value);\n    }\n  }, [store, value]);\n\n  useUpdateEffect(() => {\n    if (Array.isArray(expanded)) {\n      const expandedArr = getExpandedArr(expanded, store);\n      store.replaceExpanded(expandedArr);\n    }\n  }, [expanded, store]);\n\n  useUpdateEffect(() => {\n    if (Array.isArray(actived)) {\n      store.replaceActived(actived);\n    }\n  }, [actived, store]);\n\n  useUpdateEffect(() => {\n    store.setConfig({\n      filter,\n    });\n    store.updateAll();\n  }, [filter, store]);\n\n  return storeRef.current;\n}\n"],"names":["useStore","props","refresh","storeRef","useRef","data","keys","expandAll","expandParent","expanded","expandLevel","expandMutex","activable","activeMultiple","actived","disabled","checkable","value","checkStrictly","load","lazy","valueMode","filter","onLoad","allowFoldNodeOnFilter","handleUpdate","usePersistFn","getExpandedArr","arr","store","expandedMap","Map","forEach","val","set","node","getNode","getParents","tn","Array","from","createStore","TreeStore","info","getModel","onUpdate","list","cloneDeep","isArray","append","refreshNodes","setChecked","expandedArr","setExpanded","setActived","current","useUpdateEffect","getExpanded","checked","getChecked","getActived","removeAll","setConfig","refreshState","replaceChecked","replaceExpanded","replaceActived","updateAll"],"mappings":"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"}