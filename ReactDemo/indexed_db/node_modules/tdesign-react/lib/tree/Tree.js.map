{"version":3,"file":"Tree.js","sources":["../../src/tree/Tree.tsx"],"sourcesContent":["import React, { forwardRef, useState, useImperativeHandle, useMemo, RefObject } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport classNames from 'classnames';\nimport { TreeNodeState, TreeNodeValue, TypeTreeNodeModel } from '../_common/js/tree/types';\nimport TreeNode from '../_common/js/tree/tree-node';\nimport { TreeOptionData } from '../common';\nimport { usePersistFn } from '../_util/usePersistFn';\nimport { TreeInstanceFunctions, TdTreeProps } from './type';\nimport { useTreeConfig } from './useTreeConfig';\nimport useControllable from './useControllable';\nimport { TreeItemProps } from './interface';\n\nimport TreeItem from './TreeItem';\nimport { useStore } from './useStore';\n\nexport type TreeProps = TdTreeProps;\n\n/**\n * 树组件\n */\nconst Tree = forwardRef((props: TreeProps, ref: React.Ref<TreeInstanceFunctions>) => {\n  const { treeClassNames, transitionNames, transitionClassNames, transitionDuration, locale } = useTreeConfig();\n\n  // 可见节点集合\n  const [visibleNodes, setVisibleNodes] = useState([]);\n\n  const {\n    empty,\n    activable,\n    disabled,\n    checkable,\n    checkProps,\n    disableCheck,\n    hover,\n    icon,\n    line,\n    label,\n    operations,\n    transition, // 动画默认开启\n    expandOnClickNode,\n    onClick,\n  } = props;\n\n  const { value, onChange, expanded, onExpand, onActive, actived } = useControllable(props);\n\n  // 国际化文本初始化\n  const emptyText = locale('empty');\n\n  const store = useStore(\n    {\n      ...props,\n      value,\n      onChange,\n      expanded,\n      onExpand,\n      onActive,\n      actived,\n    },\n    () => {\n      const nodes = store.getNodes();\n      const newVisibleNodes = nodes.filter((node) => node.visible);\n      setVisibleNodes(newVisibleNodes);\n    },\n  );\n\n  // 因为是被 useImperativeHandle 依赖的方法，使用 usePersistFn 变成持久化的。或者也可以使用 useCallback\n  const setExpanded = usePersistFn((node: TreeNode, isExpanded: boolean, e?: React.MouseEvent<HTMLDivElement>) => {\n    const expanded = node.setExpanded(isExpanded);\n    const treeNodeModel = node?.getModel();\n\n    e && onExpand?.(expanded, { node: treeNodeModel, e });\n    return expanded;\n  });\n\n  const setActived = usePersistFn((node: TreeNode, isActived: boolean) => {\n    const actived = node.setActived(isActived);\n    const treeNodeModel = node?.getModel();\n    onActive?.(actived, { node: treeNodeModel });\n    return actived;\n  });\n\n  const setChecked = usePersistFn((node: TreeNode, isChecked: boolean) => {\n    const checked = node.setChecked(isChecked);\n    const treeNodeModel = node?.getModel();\n    onChange?.(checked, { node: treeNodeModel });\n    return checked;\n  });\n\n  const handleItemClick: TreeItemProps['onClick'] = (node, options) => {\n    if (!node) {\n      return;\n    }\n    const isDisabled = disabled || node.disabled;\n    const { expand, active, event } = options;\n\n    if (expand) setExpanded(node, !node.isExpanded(), event);\n\n    if (active && !isDisabled) {\n      setActived(node, !node.isActived());\n      const treeNodeModel = node?.getModel();\n      onClick?.({\n        node: treeNodeModel,\n        e: event,\n      });\n    }\n  };\n\n  const handleChange: TreeItemProps['onChange'] = (node) => {\n    if (!node || disabled || node.disabled) {\n      return;\n    }\n    setChecked(node, !node.isChecked());\n  };\n\n  /** 对外暴露的公共方法 * */\n  useImperativeHandle<unknown, TreeInstanceFunctions>(\n    ref,\n    () => ({\n      store,\n      appendTo(value, newData) {\n        let list = [];\n        if (Array.isArray(newData)) {\n          list = newData;\n        } else {\n          list = [newData];\n        }\n        list.forEach((item) => {\n          store.appendNodes(value, item);\n        });\n      },\n      getIndex(value: TreeNodeValue): number {\n        return store.getNodeIndex(value);\n      },\n      getItem(value: TreeNodeValue): TypeTreeNodeModel {\n        const node: TreeNode = store.getNode(value);\n        return node?.getModel();\n      },\n      getItems(value?: TreeNodeValue): TypeTreeNodeModel[] {\n        const nodes = store.getNodes(value);\n        return nodes.map((node: TreeNode) => node.getModel());\n      },\n      getParent(value: TreeNodeValue): TypeTreeNodeModel {\n        const node = store.getParent(value);\n        return node?.getModel();\n      },\n      getParents(value: TreeNodeValue): TypeTreeNodeModel[] {\n        const nodes = store.getParents(value);\n        return nodes.map((node: TreeNode) => node.getModel());\n      },\n      getPath(value: TreeNodeValue): TypeTreeNodeModel[] {\n        const node = store.getNode(value);\n        let pathNodes = [];\n        if (node) {\n          pathNodes = node.getPath().map((node: TreeNode) => node.getModel());\n        }\n        return pathNodes;\n      },\n      insertAfter(value: TreeNodeValue, newData: TreeOptionData): void {\n        return store.insertAfter(value, newData);\n      },\n      insertBefore(value: TreeNodeValue, newData: TreeOptionData): void {\n        return store.insertBefore(value, newData);\n      },\n      remove(value: TreeNodeValue): void {\n        return store.remove(value);\n      },\n      setItem(value: TreeNodeValue, options: TreeNodeState): void {\n        const node: TreeNode = this.store.getNode(value);\n        const spec = options;\n        if (node && spec) {\n          if ('expanded' in options) {\n            setExpanded(node, spec.expanded);\n            delete spec.expanded;\n          }\n          if ('actived' in options) {\n            setActived(node, spec.actived);\n            delete spec.actived;\n          }\n          if ('checked' in options) {\n            setChecked(node, spec.checked);\n            delete spec.checked;\n          }\n          node.set(spec);\n        }\n      },\n    }),\n    [store, setExpanded, setActived, setChecked],\n  );\n\n  /* ======== render ======= */\n  // https://github.com/reactjs/react-transition-group/issues/668\n  // CSSTransition 不指定 nodeRef 的时候会使用 findDOMNode 获取 dom\n  // 因为 CSSTransition 是个数组，与 visibleNodes 对应，所以这里根据 visibleNodes 的长度创建 ref 用来保存 dom\n  // visibleNodes 改变的时候，释放上一个 nodeList，防止内存泄漏\n  const nodeList = useMemo<RefObject<HTMLDivElement>[]>(\n    () => visibleNodes.map(() => React.createRef()),\n    [visibleNodes],\n  );\n\n  const renderEmpty = () => {\n    let emptyView = empty || emptyText;\n    if (empty instanceof Function) {\n      emptyView = empty();\n    }\n\n    return emptyView;\n  };\n\n  const renderItems = () => {\n    if (visibleNodes.length <= 0) {\n      return renderEmpty();\n    }\n\n    return (\n      <TransitionGroup name={transitionNames.treeNode} className={treeClassNames.treeList}>\n        {visibleNodes.map((node, index) => (\n          // https://github.com/reactjs/react-transition-group/issues/668\n          <CSSTransition\n            nodeRef={nodeList[index]}\n            key={node.value}\n            timeout={transitionDuration}\n            classNames={transitionClassNames}\n          >\n            <TreeItem\n              ref={nodeList[index]}\n              node={node}\n              empty={empty}\n              icon={icon}\n              label={label}\n              line={line}\n              transition={transition}\n              expandOnClickNode={expandOnClickNode}\n              activable={activable}\n              operations={operations}\n              checkProps={checkProps}\n              disableCheck={disableCheck}\n              onClick={handleItemClick}\n              onChange={handleChange}\n            />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    );\n  };\n  return (\n    <div\n      className={classNames(treeClassNames.tree, {\n        [treeClassNames.disabled]: disabled,\n        [treeClassNames.treeHoverable]: hover,\n        [treeClassNames.treeCheckable]: checkable,\n        [treeClassNames.treeFx]: transition,\n        [treeClassNames.treeBlockNode]: expandOnClickNode,\n      })}\n    >\n      {renderItems()}\n    </div>\n  );\n});\n\nTree.displayName = 'Tree';\n\nTree.defaultProps = {\n  data: [],\n  empty: '',\n  expandLevel: 0,\n  icon: true,\n  line: false,\n  transition: true,\n  lazy: true,\n  valueMode: 'onlyLeaf',\n};\n\nexport default Tree;\n"],"names":["Tree","forwardRef","props","ref","useTreeConfig","treeClassNames","transitionNames","transitionClassNames","transitionDuration","locale","useState","visibleNodes","setVisibleNodes","empty","activable","disabled","checkable","checkProps","disableCheck","hover","icon","line","label","operations","transition","expandOnClickNode","onClick","useControllable","value","onChange","expanded","onExpand","onActive","actived","emptyText","store","useStore","nodes","getNodes","newVisibleNodes","filter","node","visible","setExpanded","usePersistFn","isExpanded","e","treeNodeModel","getModel","setActived","isActived","setChecked","isChecked","checked","handleItemClick","options","isDisabled","expand","active","event","handleChange","useImperativeHandle","appendTo","newData","list","Array","isArray","forEach","item","appendNodes","getIndex","getNodeIndex","getItem","getNode","getItems","map","getParent","getParents","getPath","pathNodes","insertAfter","insertBefore","remove","setItem","spec","set","nodeList","useMemo","React","createRef","renderEmpty","emptyView","Function","renderItems","length","createElement","TransitionGroup","name","treeNode","className","treeList","index","CSSTransition","nodeRef","key","timeout","classNames","TreeItem","tree","treeHoverable","treeCheckable","treeFx","treeBlockNode","displayName","defaultProps","data","expandLevel","lazy","valueMode"],"mappings":"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"}