/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { useRef } from 'react';
import { c as cloneDeep_1 } from '../_chunks/dep-91b4e41f.js';
import useUpdateEffect from '../_util/useUpdateEffect.js';
import { TreeStore } from '../_common/js/tree/tree-store.js';
import { usePersistFn } from '../_util/usePersistFn.js';
import '../_chunks/dep-51754e76.js';
import '../_chunks/dep-734a21a0.js';
import '../_chunks/dep-68f7a306.js';
import '../_chunks/dep-a74f6fff.js';
import '../_chunks/dep-d23d346c.js';
import '../_chunks/dep-9ea787ca.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-0e2dfd87.js';
import '../_chunks/dep-f50ff346.js';
import '../_chunks/dep-51592cde.js';
import '../_chunks/dep-ae94c4e7.js';
import '../_chunks/dep-7f6754ac.js';
import '../_chunks/dep-2509667d.js';
import '../_chunks/dep-b817c90e.js';
import '../_chunks/dep-fe9825b6.js';
import '../_chunks/dep-ebc05da7.js';
import '../_chunks/dep-3160df29.js';
import '../_chunks/dep-c91b3852.js';
import '../_chunks/dep-9e44c34c.js';
import '../_chunks/dep-6be1e491.js';
import '../_chunks/dep-c4881228.js';
import '../_util/useLayoutEffect.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-8d5556d7.js';
import '../_util/easing.js';
import '../_chunks/dep-1e32006c.js';
import '../_chunks/dep-cc25e35c.js';
import '../_chunks/dep-7483bc68.js';
import '../_chunks/dep-269fe2ba.js';
import '../_chunks/dep-2ac048c0.js';
import '../_chunks/dep-b989427d.js';
import '../_chunks/dep-9f757569.js';
import '../_chunks/dep-e2fe68b7.js';
import '../_chunks/dep-0c62d47a.js';
import '../_chunks/dep-8fe8d164.js';
import '../_chunks/dep-12260644.js';
import '../_chunks/dep-ec84085d.js';
import '../_chunks/dep-66273dbc.js';
import '../_chunks/dep-44a03722.js';
import '../_common/js/tree/tree-node.js';
import '../_chunks/dep-99cf9839.js';
import '../_chunks/dep-59b9253f.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-d1b4ab24.js';
import '../_chunks/dep-1f300d2c.js';
import '../_chunks/dep-e103618e.js';
import '../_common/js/tree/tree-node-model.js';
import '../_chunks/dep-5e5947bc.js';
import '../_chunks/dep-dcadd2e9.js';
import '../_chunks/dep-1efa5ad5.js';
import '../_common/js/log/log.js';

function useStore(props, refresh) {
  var storeRef = useRef();
  var data = props.data,
      keys = props.keys,
      expandAll = props.expandAll,
      expandParent = props.expandParent,
      expanded = props.expanded,
      expandLevel = props.expandLevel,
      expandMutex = props.expandMutex,
      activable = props.activable,
      activeMultiple = props.activeMultiple,
      actived = props.actived,
      disabled = props.disabled,
      checkable = props.checkable,
      value = props.value,
      checkStrictly = props.checkStrictly,
      load = props.load,
      lazy = props.lazy,
      valueMode = props.valueMode,
      filter = props.filter,
      _onLoad = props.onLoad,
      _props$allowFoldNodeO = props.allowFoldNodeOnFilter,
      allowFoldNodeOnFilter = _props$allowFoldNodeO === void 0 ? false : _props$allowFoldNodeO;
  var handleUpdate = usePersistFn(function () {
    refresh();
  });

  var getExpandedArr = function getExpandedArr(arr, store2) {
    var expandedMap = /* @__PURE__ */new Map();
    arr.forEach(function (val) {
      expandedMap.set(val, true);

      if (expandParent) {
        var node = store2.getNode(val);
        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
      }
    });
    return Array.from(expandedMap.keys());
  };

  var createStore = function createStore() {
    var store2 = new TreeStore({
      keys: keys,
      activable: activable,
      activeMultiple: activeMultiple,
      checkable: checkable,
      checkStrictly: checkStrictly,
      expandAll: expandAll,
      expandLevel: expandLevel,
      expandMutex: expandMutex,
      expandParent: expandParent,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode,
      filter: filter,
      onLoad: function onLoad(info) {
        var node = info.node;
        _onLoad === null || _onLoad === void 0 ? void 0 : _onLoad({
          node: node.getModel()
        });
      },
      onUpdate: handleUpdate,
      allowFoldNodeOnFilter: allowFoldNodeOnFilter
    });
    var list = cloneDeep_1(data);

    if (!Array.isArray(list)) {
      list = [];
    }

    store2.append(list);
    store2.refreshNodes();

    if (Array.isArray(value)) {
      store2.setChecked(value);
    }

    if (Array.isArray(expanded)) {
      var expandedArr = getExpandedArr(expanded, store2);
      store2.setExpanded(expandedArr);
    }

    if (Array.isArray(actived)) {
      store2.setActived(actived);
    }

    store2.refreshNodes();
    return store2;
  };

  if (!storeRef.current) {
    storeRef.current = createStore();
  }

  var store = storeRef.current;
  useUpdateEffect(function () {
    if (data && Array.isArray(data)) {
      var expanded2 = store.getExpanded();
      var checked = store.getChecked();
      var actived2 = store.getActived();
      store.removeAll();
      store.append(data);
      store.setChecked(checked);
      store.setActived(actived2);
      store.setExpanded(expanded2);
    }
  }, [data, store]);
  useUpdateEffect(function () {
    store.setConfig({
      keys: keys,
      expandAll: expandAll,
      expandLevel: expandLevel,
      expandMutex: expandMutex,
      expandParent: expandParent,
      activable: activable,
      activeMultiple: activeMultiple,
      disabled: disabled,
      checkable: checkable,
      checkStrictly: checkStrictly,
      load: load,
      lazy: lazy,
      valueMode: valueMode
    });
    store.refreshState();
  }, [activable, activeMultiple, checkStrictly, checkable, disabled, expandAll, expandLevel, expandMutex, expandParent, keys, lazy, load, store, valueMode]);
  useUpdateEffect(function () {
    if (Array.isArray(value)) {
      store.replaceChecked(value);
    }
  }, [store, value]);
  useUpdateEffect(function () {
    if (Array.isArray(expanded)) {
      var expandedArr = getExpandedArr(expanded, store);
      store.replaceExpanded(expandedArr);
    }
  }, [expanded, store]);
  useUpdateEffect(function () {
    if (Array.isArray(actived)) {
      store.replaceActived(actived);
    }
  }, [actived, store]);
  useUpdateEffect(function () {
    store.setConfig({
      filter: filter
    });
    store.updateAll();
  }, [filter, store]);
  return storeRef.current;
}

export { useStore };
//# sourceMappingURL=useStore.js.map
