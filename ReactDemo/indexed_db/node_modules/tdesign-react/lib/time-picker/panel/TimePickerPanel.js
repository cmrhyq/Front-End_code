/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../../_chunks/dep-9615f03f.js';
import React, { useState, useMemo, useEffect } from 'react';
import dayjs from 'dayjs';
import SinglePanel from './SinglePanel.js';
import useConfig from '../../hooks/useConfig.js';
import { Button } from '../../button/index.js';
import { useTimePickerTextConfig } from '../hooks/useTimePickerTextConfig.js';
import { DEFAULT_FORMAT, DEFAULT_STEPS } from '../../_common/js/time-picker/const.js';
import '../../_chunks/dep-7909fefa.js';
import 'classnames';
import '../../_chunks/dep-f4afdfc0.js';
import '../../_chunks/dep-9ea787ca.js';
import '../../_chunks/dep-4e0da095.js';
import '../../_chunks/dep-652c1652.js';
import '../../_chunks/dep-0e2dfd87.js';
import '../../_chunks/dep-b989427d.js';
import '../../_chunks/dep-7f6754ac.js';
import '../../_chunks/dep-2ac048c0.js';
import '../../_chunks/dep-3160df29.js';
import '../../_chunks/dep-ec84085d.js';
import '../../_chunks/dep-66273dbc.js';
import '../../_chunks/dep-f5616354.js';
import '../../_chunks/dep-f50ff346.js';
import '../../_chunks/dep-9e44c34c.js';
import '../../_chunks/dep-d23d346c.js';
import '../../_chunks/dep-ae94c4e7.js';
import '../../_chunks/dep-c91b3852.js';
import '../../_util/noop.js';
import '../../_common/js/time-picker/utils.js';
import '../../hooks/useDebounce.js';
import 'lodash';
import '../../_util/usePersistFn.js';
import '../../hooks/usePropsRef.js';
import '../../_chunks/dep-918e41e2.js';
import '../../_chunks/dep-734a21a0.js';
import '../../_chunks/dep-68f7a306.js';
import '../../_chunks/dep-a74f6fff.js';
import '../../_chunks/dep-51592cde.js';
import '../../_chunks/dep-2509667d.js';
import '../../_chunks/dep-b817c90e.js';
import '../../_chunks/dep-fe9825b6.js';
import '../../_chunks/dep-ebc05da7.js';
import '../../_chunks/dep-0c62d47a.js';
import '../../_chunks/dep-e2fe68b7.js';
import '../../_chunks/dep-44a03722.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import '../../button/Button.js';
import '../../_chunks/dep-8368bb87.js';
import '../../_util/useRipple.js';
import '../../_util/useAnimation.js';
import '../../_util/setStyle.js';
import '../../_util/dom.js';
import 'raf';
import '../../_chunks/dep-8d5556d7.js';
import '../../_util/easing.js';
import '../../loading/index.js';
import '../../loading/Loading.js';
import '../../common/Portal.js';
import 'react-dom';
import '../../loading/gradient.js';
import '../../_common/js/loading/circle-adapter.js';
import '../../_common/js/utils/set-style.js';
import '../../_common/js/utils/helper.js';
import '../../_chunks/dep-59b9253f.js';
import '../../_chunks/dep-d1b4ab24.js';
import '../../loading/defaultProps.js';
import '../../loading/plugin.js';
import '../../button/defaultProps.js';
import '../../locale/LocalReceiver.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var TimePickerPanel = function TimePickerPanel(props) {
  var _props$format = props.format,
      format = _props$format === void 0 ? DEFAULT_FORMAT : _props$format,
      _props$steps = props.steps,
      steps = _props$steps === void 0 ? DEFAULT_STEPS : _props$steps,
      handleConfirmClick = props.handleConfirmClick,
      isFooterDisplay = props.isFooterDisplay,
      onChange = props.onChange,
      value = props.value,
      _props$isShowPanel = props.isShowPanel,
      isShowPanel = _props$isShowPanel === void 0 ? true : _props$isShowPanel;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      triggerScroll = _useState2[0],
      toggleTriggerScroll = _useState2[1];

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var TEXT_CONFIG = useTimePickerTextConfig();
  var panelClassName = "".concat(classPrefix, "-time-picker__panel");
  var showNowTimeBtn = !!steps.filter(function (v) {
    return v > 1;
  }).length;
  var defaultValue = useMemo(function () {
    var isStepsSet = !!steps.filter(function (v) {
      return v > 1;
    }).length;

    if (value) {
      return dayjs(value, format);
    }

    if (isStepsSet) {
      return dayjs().hour(0).minute(0).second(0);
    }

    return dayjs();
  }, [value, format, steps]);
  useEffect(function () {
    if (isShowPanel) toggleTriggerScroll(true);
  }, [isShowPanel]);
  return /* @__PURE__ */React.createElement("div", {
    className: panelClassName
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(panelClassName, "-section-body")
  }, /* @__PURE__ */React.createElement(SinglePanel, _objectSpread(_objectSpread({}, props), {}, {
    format: format,
    steps: steps,
    value: value,
    triggerScroll: triggerScroll,
    isVisible: isShowPanel,
    resetTriggerScroll: function resetTriggerScroll() {
      return toggleTriggerScroll(false);
    }
  }))), isFooterDisplay ? /* @__PURE__ */React.createElement("div", {
    className: "".concat(panelClassName, "-section-footer")
  }, /* @__PURE__ */React.createElement(Button, {
    theme: "primary",
    variant: "base",
    onClick: function onClick() {
      handleConfirmClick(defaultValue);
    },
    size: "small"
  }, TEXT_CONFIG.confirm), !showNowTimeBtn ? /* @__PURE__ */React.createElement(Button, {
    theme: "primary",
    variant: "text",
    size: "small",
    onClick: function onClick() {
      return onChange(dayjs().format(format));
    }
  }, TEXT_CONFIG.nowTime) : null) : null);
};

export { TimePickerPanel as default };
//# sourceMappingURL=TimePickerPanel.js.map
