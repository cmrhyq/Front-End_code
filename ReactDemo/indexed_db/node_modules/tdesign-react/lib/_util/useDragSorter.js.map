{"version":3,"file":"useDragSorter.js","sources":["../../src/_util/useDragSorter.tsx"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\n\ninterface DragSortProps<T> {\n  sortOnDraggable: boolean;\n  onDragSort?: (context: DragSortContext<T>) => void;\n  onDragOverCheck?: {\n    x?: boolean;\n    targetClassNameRegExp?: RegExp;\n  };\n}\n\ntype DragFnType = (e?: React.DragEvent<HTMLTableRowElement>, index?: number, record?: any) => void;\ninterface DragSortInnerData {\n  dragging?: boolean;\n  onDragStart?: DragFnType;\n  onDragOver?: DragFnType;\n  onDrop?: DragFnType;\n  onDragEnd?: DragFnType;\n}\n\nexport interface DragSortInnerProps extends DragSortInnerData {\n  getDragProps?: (index?: number, record?: any) => DragSortInnerData;\n}\n\nexport interface DragSortContext<T> {\n  currentIndex: number;\n  current: T;\n  targetIndex: number;\n  target: T;\n}\n\nfunction useDragSorter<T>(props: DragSortProps<T>): DragSortInnerProps {\n  const { sortOnDraggable, onDragSort, onDragOverCheck } = props;\n  const [draggingIndex, setDraggingIndex] = useState(-1);\n  const [dragStartData, setDragStartData] = useState(null);\n  const [isDropped, setIsDropped] = useState(null);\n  const [startInfo, setStartInfo] = useState({ nodeX: 0, nodeWidth: 0, mouseX: 0 });\n\n  const onDragSortRef = useRef(onDragSort);\n  const onDragOver = useCallback(\n    (e, index, record: T) => {\n      e.preventDefault();\n      if (draggingIndex === index || draggingIndex === -1) return;\n      if (onDragOverCheck?.targetClassNameRegExp && !onDragOverCheck?.targetClassNameRegExp.test(e.target?.className)) {\n        return;\n      }\n\n      if (onDragOverCheck?.x) {\n        if (!startInfo.nodeWidth) return;\n\n        const { x, width } = e.target.getBoundingClientRect();\n        const targetNodeMiddleX = x + width / 2;\n        const draggingNodeLeft = e.clientX - (startInfo.mouseX - startInfo.nodeX);\n        const draggingNodeRight = draggingNodeLeft + startInfo.nodeWidth;\n\n        let overlap = false;\n        if (draggingNodeLeft > x && draggingNodeLeft < x + width) {\n          overlap = draggingNodeLeft < targetNodeMiddleX;\n        } else {\n          overlap = draggingNodeRight > targetNodeMiddleX;\n        }\n\n        if (!overlap) return;\n      }\n\n      onDragSortRef.current?.({\n        currentIndex: draggingIndex,\n        current: dragStartData,\n        target: record,\n        targetIndex: index,\n      });\n      setDraggingIndex(index);\n    },\n    [\n      draggingIndex,\n      onDragOverCheck?.targetClassNameRegExp,\n      onDragOverCheck?.x,\n      dragStartData,\n      startInfo.nodeWidth,\n      startInfo.mouseX,\n      startInfo.nodeX,\n    ],\n  );\n\n  if (!sortOnDraggable) {\n    return {};\n  }\n\n  function onDragStart(e, index, record: T) {\n    setDraggingIndex(index);\n    setDragStartData(record);\n    if (onDragOverCheck) {\n      const { x, width } = e.target.getBoundingClientRect();\n      setStartInfo({\n        nodeX: x,\n        nodeWidth: width,\n        mouseX: e.clientX,\n      });\n    }\n  }\n\n  function onDrop() {\n    setIsDropped(true);\n  }\n  function onDragEnd() {\n    if (!isDropped) {\n      // 取消排序，待扩展 api，输出 dragStartData\n    }\n    setIsDropped(false);\n    setDraggingIndex(-1);\n    setDragStartData(null);\n  }\n  function getDragProps(index, record: T) {\n    if (sortOnDraggable) {\n      return {\n        draggable: true,\n        onDragStart: (e) => {\n          onDragStart(e, index, record);\n        },\n        onDragOver: (e) => {\n          onDragOver(e, index, record);\n        },\n        onDrop: () => {\n          onDrop();\n        },\n        onDragEnd: () => {\n          onDragEnd();\n        },\n      };\n    }\n    return {};\n  }\n\n  return { onDragStart, onDragOver, onDrop, onDragEnd, getDragProps, dragging: draggingIndex !== -1 };\n}\n\nexport default useDragSorter;\n"],"names":["useDragSorter","props","sortOnDraggable","onDragSort","onDragOverCheck","useState","draggingIndex","setDraggingIndex","dragStartData","setDragStartData","setIsDropped","nodeX","nodeWidth","mouseX","startInfo","setStartInfo","onDragSortRef","useRef","onDragOver","useCallback","e","index","record","preventDefault","targetClassNameRegExp","test","target","className","x","getBoundingClientRect","width","targetNodeMiddleX","draggingNodeLeft","clientX","draggingNodeRight","overlap","current","currentIndex","targetIndex","onDragStart","onDrop","onDragEnd","getDragProps","draggable","dragging"],"mappings":"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"}