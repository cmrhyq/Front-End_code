/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../../_chunks/dep-9615f03f.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-59b9253f.js';
import React, { useRef, useEffect } from 'react';
import { SettingIcon } from 'tdesign-icons-react';
import { i as intersection_1 } from '../../_chunks/dep-75cc396f.js';
import classNames from 'classnames';
import { Checkbox } from '../../checkbox/index.js';
import { DialogPlugin } from '../../dialog/plugin.js';
import { renderTitle } from './useTableHeader.js';
import useConfig from '../../hooks/useConfig.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import useControlled from '../../hooks/useControlled.js';
import { getCurrentRowByKey } from '../utils.js';
import { Button } from '../../button/index.js';
import '../../_chunks/dep-7909fefa.js';
import '../../_chunks/dep-d1b4ab24.js';
import '../../_chunks/dep-2ac048c0.js';
import '../../_chunks/dep-9ea787ca.js';
import '../../_chunks/dep-4e0da095.js';
import '../../_chunks/dep-3160df29.js';
import '../../_chunks/dep-b989427d.js';
import '../../_chunks/dep-7f6754ac.js';
import '../../_chunks/dep-269fe2ba.js';
import '../../_chunks/dep-68f7a306.js';
import '../../_chunks/dep-a74f6fff.js';
import '../../_chunks/dep-d23d346c.js';
import '../../_chunks/dep-0e2dfd87.js';
import '../../_chunks/dep-f50ff346.js';
import '../../_chunks/dep-2509667d.js';
import '../../_chunks/dep-0c62d47a.js';
import '../../_chunks/dep-9e44c34c.js';
import '../../_chunks/dep-ae94c4e7.js';
import '../../_chunks/dep-e2fe68b7.js';
import '../../_chunks/dep-fe9825b6.js';
import '../../_chunks/dep-62166e7d.js';
import '../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../common/Check.js';
import '../../_chunks/dep-8368bb87.js';
import '../../_util/helper.js';
import '../../_chunks/dep-8fe8d164.js';
import '../../_chunks/dep-12260644.js';
import '../../_chunks/dep-ec84085d.js';
import '../../_chunks/dep-66273dbc.js';
import '../../_chunks/dep-918e41e2.js';
import '../../_chunks/dep-734a21a0.js';
import '../../_chunks/dep-51592cde.js';
import '../../_chunks/dep-b817c90e.js';
import '../../_chunks/dep-ebc05da7.js';
import '../../_chunks/dep-c91b3852.js';
import '../../_chunks/dep-44a03722.js';
import '../../_chunks/dep-f5616354.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import '../../_util/noop.js';
import '../../_chunks/dep-31043569.js';
import '../../checkbox/defaultProps.js';
import 'react-dom';
import '../../dialog/Dialog.js';
import '../../_chunks/dep-8d5556d7.js';
import '../../locale/LocalReceiver.js';
import '../../dialog/RenderDialog.js';
import 'react-transition-group';
import '../../common/Portal.js';
import '../../_util/dom.js';
import 'raf';
import '../../_util/easing.js';
import '../../_util/useLayoutEffect.js';
import '../../_util/useDialogEsc.js';
import '../../dialog/defaultProps.js';
import '../../_util/useSetState.js';
import '../../button/Button.js';
import '../../_util/useRipple.js';
import '../../_util/useAnimation.js';
import '../../_util/setStyle.js';
import '../../loading/index.js';
import '../../loading/Loading.js';
import '../../loading/gradient.js';
import '../../_common/js/loading/circle-adapter.js';
import '../../_common/js/utils/set-style.js';
import '../../_common/js/utils/helper.js';
import '../../loading/defaultProps.js';
import '../../loading/plugin.js';
import '../../button/defaultProps.js';
import '../../_common/js/log/log.js';
import './useMultiHeader.js';
import './useClassName.js';
import '../Ellipsis.js';
import '../../tooltip/index.js';
import '../../tooltip/Tooltip.js';
import '../../popup/index.js';
import '../../popup/Popup.js';
import 'react-popper';
import '../../popup/hooks/useTrigger.js';
import 'react-is';
import '../../popup/utils/ref.js';
import '../../_util/composeRefs.js';
import '../../popup/utils/transition.js';
import '../../_util/useMutationObserver.js';
import '../../_chunks/dep-05d10538.js';
import '../../_chunks/dep-652c1652.js';
import '../../_util/useWindowSize.js';
import '../../popup/defaultProps.js';
import '../../tooltip/defaultProps.js';
import '../../hooks/useDebounce.js';
import 'lodash';
import '../../_util/usePersistFn.js';
import '../../_chunks/dep-1f300d2c.js';
import '../../_chunks/dep-e103618e.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var CheckboxGroup = Checkbox.Group;
function getColumnKeys(columns) {
  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();

  for (var i = 0, len = columns.length; i < len; i++) {
    var _col$children;

    var col = columns[i];
    col.colKey && keys.add(col.colKey);

    if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
      getColumnKeys(col.children, keys);
    }
  }

  return keys;
}
function useColumnController(props) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix,
      table = _useConfig.table;

  var _useGlobalIcon = useGlobalIcon({
    SettingIcon: SettingIcon
  }),
      SettingIcon$1 = _useGlobalIcon.SettingIcon;

  var columns = props.columns,
      columnController = props.columnController,
      displayColumns = props.displayColumns,
      columnControllerVisible = props.columnControllerVisible;
  var dialogInstance = useRef();

  var enabledColKeys = function () {
    var arr = ((columnController === null || columnController === void 0 ? void 0 : columnController.fields) || _toConsumableArray(getColumnKeys(columns))).filter(function (v) {
      return v;
    });

    return new Set(arr);
  }();

  var keys = _toConsumableArray(getColumnKeys(columns));

  var _useControlled = useControlled(props, "displayColumns", props.onDisplayColumnsChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      tDisplayColumns = _useControlled2[0],
      setTDisplayColumns = _useControlled2[1];

  var defaultColumnCheckboxKeys = displayColumns || props.defaultDisplayColumns || keys;
  var columnCheckboxKeys = useRef(defaultColumnCheckboxKeys);
  useEffect(function () {
    var _dialogInstance$curre;

    columnCheckboxKeys.current = _toConsumableArray(displayColumns || props.defaultDisplayColumns || keys);
    (_dialogInstance$curre = dialogInstance.current) === null || _dialogInstance$curre === void 0 ? void 0 : _dialogInstance$curre.update({
      body: getDialogContent()
    });
  }, [displayColumns]);

  function getCheckboxOptions(columns2) {
    var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    for (var i = 0, len = columns2.length; i < len; i++) {
      var _item$children;

      var item = columns2[i];

      if (item.colKey) {
        arr.push({
          label: renderTitle(item, i),
          value: item.colKey,
          disabled: !enabledColKeys.has(item.colKey)
        });
      }

      if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
        getCheckboxOptions(item.children, arr);
      }
    }

    return arr;
  }

  var handleCheckChange = function handleCheckChange(val, ctx) {
    var _props$onColumnChange;

    columnCheckboxKeys.current = val;
    var params = {
      columns: val,
      type: ctx.type,
      currentColumn: getCurrentRowByKey(columns, String(ctx.current)),
      e: ctx.e
    };
    (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 ? void 0 : _props$onColumnChange.call(props, params);
    dialogInstance.current.update({
      body: getDialogContent()
    });
  };

  var handleClickAllShowColumns = function handleClickAllShowColumns(checked, ctx) {
    if (checked) {
      var _props$onColumnChange2;

      var checkboxOptions = getCheckboxOptions(columns);
      var newData = (checkboxOptions === null || checkboxOptions === void 0 ? void 0 : checkboxOptions.map(function (t) {
        return t.value;
      })) || [];
      columnCheckboxKeys.current = newData;
      (_props$onColumnChange2 = props.onColumnChange) === null || _props$onColumnChange2 === void 0 ? void 0 : _props$onColumnChange2.call(props, {
        type: "check",
        columns: newData,
        e: ctx.e
      });
    } else {
      var _props$onColumnChange3;

      var disabledColKeys = getCheckboxOptions(columns).filter(function (t) {
        return t.disabled;
      }).map(function (t) {
        return t.value;
      });
      columnCheckboxKeys.current = disabledColKeys;
      (_props$onColumnChange3 = props.onColumnChange) === null || _props$onColumnChange3 === void 0 ? void 0 : _props$onColumnChange3.call(props, {
        type: "uncheck",
        columns: disabledColKeys,
        e: ctx.e
      });
    }

    dialogInstance.current.update({
      body: getDialogContent()
    });
  };

  function getDialogContent() {
    var checkboxOptions = getCheckboxOptions(columns);
    var intersectionChecked = intersection_1(columnCheckboxKeys.current, _toConsumableArray(enabledColKeys));
    var widthMode = (columnController === null || columnController === void 0 ? void 0 : columnController.displayType) === "fixed-width" ? "fixed" : "auto";
    var checkedLength = intersectionChecked.length;
    var isCheckedAll = checkedLength === enabledColKeys.size;
    var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.size;
    return /* @__PURE__ */React.createElement("div", {
      className: classNames(["".concat(classPrefix, "-table__column-controller"), "".concat(classPrefix, "-table__column-controller--").concat(widthMode)])
    }, /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-body")
    }, /* @__PURE__ */React.createElement("p", {
      className: "".concat(classPrefix, "-table__column-controller-desc")
    }, table.columnConfigDescriptionText), /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-block")
    }, /* @__PURE__ */React.createElement(Checkbox, {
      indeterminate: isIndeterminate,
      checked: isCheckedAll,
      onChange: handleClickAllShowColumns
    }, table.selectAllText)), /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-block")
    }, /* @__PURE__ */React.createElement(CheckboxGroup, _objectSpread(_objectSpread({
      options: checkboxOptions
    }, (columnController === null || columnController === void 0 ? void 0 : columnController.checkboxProps) || {}), {}, {
      value: columnCheckboxKeys.current,
      onChange: handleCheckChange
    })))));
  }

  var handleToggleColumnController = function handleToggleColumnController() {
    dialogInstance.current = DialogPlugin.confirm(_objectSpread({
      header: table.columnConfigTitleText,
      body: getDialogContent(),
      confirmBtn: table.confirmText,
      cancelBtn: table.cancelText,
      width: 612,
      onConfirm: function onConfirm() {
        setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.current));

        if (columnControllerVisible === void 0) {
          dialogInstance.current.hide();
        } else {
          var _props$onColumnContro;

          (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 ? void 0 : _props$onColumnContro.call(props, false, {
            trigger: "cancel"
          });
        }
      },
      onClose: function onClose() {
        if (columnControllerVisible === void 0) {
          dialogInstance.current.hide();
        } else {
          var _props$onColumnContro2;

          (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 ? void 0 : _props$onColumnContro2.call(props, false, {
            trigger: "confirm"
          });
        }
      }
    }, (columnController === null || columnController === void 0 ? void 0 : columnController.dialogProps) || {}));
  };

  useEffect(function () {
    if (columnControllerVisible === void 0) return;

    if (dialogInstance.current) {
      columnControllerVisible ? dialogInstance.current.show() : dialogInstance.current.hide();
    } else {
      columnControllerVisible && handleToggleColumnController();
    }
  }, [columnControllerVisible, dialogInstance]);

  var renderColumnController = function renderColumnController() {
    var _props$columnControll;

    var isColumnController = !!(columnController && Object.keys(columnController).length);
    var placement = isColumnController ? columnController.placement || "top-right" : "";
    if (isColumnController && columnController.hideTriggerButton) return null;
    var classes = ["".concat(classPrefix, "-table__column-controller-trigger"), _defineProperty({}, "".concat(classPrefix, "-align-").concat(placement), !!placement)];
    return /* @__PURE__ */React.createElement("div", {
      className: classNames(classes)
    }, /* @__PURE__ */React.createElement(Button, _objectSpread({
      theme: "default",
      variant: "outline",
      onClick: handleToggleColumnController,
      content: table.columnConfigButtonText,
      icon: /* @__PURE__ */React.createElement(SettingIcon$1, null)
    }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps)));
  };

  return {
    tDisplayColumns: tDisplayColumns,
    renderColumnController: renderColumnController
  };
}

export { useColumnController as default, getColumnKeys };
//# sourceMappingURL=useColumnController.js.map
