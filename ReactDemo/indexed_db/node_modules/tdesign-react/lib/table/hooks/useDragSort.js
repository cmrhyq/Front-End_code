/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-59b9253f.js';
import { _ as _defineProperty } from '../../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../../_chunks/dep-9615f03f.js';
import { useState, useMemo, useRef, useEffect } from 'react';
import Sortable from 'sortablejs';
import { g as get_1 } from '../../_chunks/dep-1f300d2c.js';
import useClassName from './useClassName.js';
import { hasClass } from '../../_util/dom.js';
import log from '../../_common/js/log/log.js';
import swapDragArrayElement from '../../_common/js/utils/swapDragArrayElement.js';
import '../../_chunks/dep-7909fefa.js';
import '../../_chunks/dep-d1b4ab24.js';
import '../../_chunks/dep-e103618e.js';
import '../../_chunks/dep-3160df29.js';
import '../../_chunks/dep-4e0da095.js';
import '../../_chunks/dep-b989427d.js';
import '../../_chunks/dep-9ea787ca.js';
import '../../_chunks/dep-7f6754ac.js';
import '../../_chunks/dep-68f7a306.js';
import '../../_chunks/dep-a74f6fff.js';
import '../../_chunks/dep-d23d346c.js';
import '../../_chunks/dep-0e2dfd87.js';
import '../../_chunks/dep-f50ff346.js';
import '../../_chunks/dep-2ac048c0.js';
import '../../hooks/useConfig.js';
import '../../_chunks/dep-918e41e2.js';
import '../../_chunks/dep-734a21a0.js';
import '../../_chunks/dep-51592cde.js';
import '../../_chunks/dep-ae94c4e7.js';
import '../../_chunks/dep-2509667d.js';
import '../../_chunks/dep-b817c90e.js';
import '../../_chunks/dep-fe9825b6.js';
import '../../_chunks/dep-ebc05da7.js';
import '../../_chunks/dep-c91b3852.js';
import '../../_chunks/dep-9e44c34c.js';
import '../../_chunks/dep-0c62d47a.js';
import '../../_chunks/dep-e2fe68b7.js';
import '../../_chunks/dep-44a03722.js';
import '../../_chunks/dep-f5616354.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import 'raf';
import '../../_chunks/dep-8d5556d7.js';
import '../../_util/easing.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useDragSort(props, primaryTableRef) {
  var sortOnRowDraggable = props.sortOnRowDraggable,
      dragSort = props.dragSort,
      data = props.data,
      onDragSort = props.onDragSort;

  var _useClassName = useClassName(),
      tableDraggableClasses = _useClassName.tableDraggableClasses,
      tableBaseClass = _useClassName.tableBaseClass,
      tableFullRowClasses = _useClassName.tableFullRowClasses;

  var _useState = useState(props.columns || []),
      _useState2 = _slicedToArray(_useState, 2),
      columns = _useState2[0],
      setDragSortColumns = _useState2[1];

  var dragCol = useMemo(function () {
    return columns.find(function (item) {
      return item.colKey === "drag";
    });
  }, [columns]);
  var isRowDraggable = useMemo(function () {
    return sortOnRowDraggable || dragSort === "row";
  }, [dragSort, sortOnRowDraggable]);
  var isRowHandlerDraggable = useMemo(function () {
    return ["row-handler", "row-handler-col"].includes(dragSort) && !!dragCol;
  }, [dragSort, dragCol]);
  var isColDraggable = useMemo(function () {
    return ["col", "row-handler-col"].includes(dragSort);
  }, [dragSort]);
  var lastRowList = useRef([]);
  var tData = useRef();
  var lastColList = useRef([]);
  var dragColumns = useRef([]);
  var originalColumns = useRef([]);

  if (props.sortOnRowDraggable) {
    log.warn("Table", "`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.");
  }

  useEffect(function () {
    lastRowList.current = data.map(function (item) {
      return String(get_1(item, props.rowKey));
    });
    tData.current = data;
  }, [data, props.rowKey]);
  useEffect(function () {
    lastColList.current = props.columns.map(function (t) {
      return t.colKey;
    });
    dragColumns.current = props.columns;
    originalColumns.current = props.columns;
  }, [props.columns]);

  var registerRowDragEvent = function registerRowDragEvent(element) {
    var _dragInstanceTmp2;

    if (!isRowHandlerDraggable && !isRowDraggable) return;
    var dragInstanceTmp = null;
    var dragContainer = element === null || element === void 0 ? void 0 : element.querySelector("tbody");

    if (!dragContainer) {
      log.error("Table", "tbody does not exist.");
      return null;
    }

    var baseOptions = _objectSpread(_objectSpread({
      animation: 150
    }, props.dragSortOptions), {}, {
      ghostClass: tableDraggableClasses.ghost,
      chosenClass: tableDraggableClasses.chosen,
      dragClass: tableDraggableClasses.dragging,
      filter: ".".concat(tableFullRowClasses.base),
      onMove: function onMove(evt) {
        return !hasClass(evt.related, tableFullRowClasses.base);
      },
      onEnd: function onEnd(evt) {
        var _dragInstanceTmp;

        var currentIndex = evt.oldIndex,
            targetIndex = evt.newIndex;
        (_dragInstanceTmp = dragInstanceTmp) === null || _dragInstanceTmp === void 0 ? void 0 : _dragInstanceTmp.sort(_toConsumableArray(lastRowList.current));

        if (props.firstFullRow) {
          currentIndex -= 1;
          targetIndex -= 1;
        }

        var params = {
          currentIndex: currentIndex,
          current: tData.current[currentIndex],
          targetIndex: targetIndex,
          target: tData.current[targetIndex],
          data: tData.current,
          newData: swapDragArrayElement(_toConsumableArray(tData.current), currentIndex, targetIndex),
          e: evt,
          sort: "row"
        };
        params.currentData = params.newData;
        onDragSort === null || onDragSort === void 0 ? void 0 : onDragSort(params);
      }
    });

    if (isRowDraggable) {
      dragInstanceTmp = new Sortable(dragContainer, _objectSpread({}, baseOptions));
    } else if (isRowHandlerDraggable) {
      dragInstanceTmp = new Sortable(dragContainer, _objectSpread(_objectSpread({}, baseOptions), {}, {
        handle: ".".concat(tableDraggableClasses.handle)
      }));
    }

    lastRowList.current = (_dragInstanceTmp2 = dragInstanceTmp) === null || _dragInstanceTmp2 === void 0 ? void 0 : _dragInstanceTmp2.toArray();
  };

  var registerColDragEvent = function registerColDragEvent(tableElement) {
    var _dragInstanceTmp4;

    if (!isColDraggable || !tableElement) return;
    var dragInstanceTmp = null;

    var options = _objectSpread(_objectSpread({
      animation: 150
    }, props.dragSortOptions), {}, {
      dataIdAttr: "data-colkey",
      direction: "vertical",
      ghostClass: tableDraggableClasses.ghost,
      chosenClass: tableDraggableClasses.chosen,
      dragClass: tableDraggableClasses.dragging,
      handle: ".".concat(tableBaseClass.thCellInner),
      onEnd: function onEnd(evt) {
        var _dragInstanceTmp3;

        (_dragInstanceTmp3 = dragInstanceTmp) === null || _dragInstanceTmp3 === void 0 ? void 0 : _dragInstanceTmp3.sort(_toConsumableArray(lastColList.current));
        var currentIndex = evt.oldIndex,
            targetIndex = evt.newIndex;
        var current = dragColumns.current[currentIndex];
        var target = dragColumns.current[targetIndex];

        if (!current || !current.colKey) {
          log.error("Table", "colKey is missing in ".concat(JSON.stringify(current)));
        }

        if (!target || !target.colKey) {
          log.error("Table", "colKey is missing in ".concat(JSON.stringify(target)));
        }

        currentIndex = originalColumns.current.findIndex(function (t) {
          return t.colKey === current.colKey;
        });
        targetIndex = originalColumns.current.findIndex(function (t) {
          return t.colKey === target.colKey;
        });
        var params = {
          data: dragColumns.current,
          currentIndex: currentIndex,
          current: current,
          targetIndex: targetIndex,
          target: target,
          newData: swapDragArrayElement(_toConsumableArray(originalColumns.current), currentIndex, targetIndex),
          e: evt,
          sort: "col"
        };
        params.currentData = params.newData;
        onDragSort === null || onDragSort === void 0 ? void 0 : onDragSort(params);
      }
    });

    var container = tableElement.querySelector("thead > tr");
    dragInstanceTmp = new Sortable(container, options);
    lastColList.current = (_dragInstanceTmp4 = dragInstanceTmp) === null || _dragInstanceTmp4 === void 0 ? void 0 : _dragInstanceTmp4.toArray();
  };

  useEffect(function () {
    var _primaryTableRef$curr, _primaryTableRef$curr2;

    if (!primaryTableRef || !primaryTableRef.current) return;
    registerRowDragEvent((_primaryTableRef$curr = primaryTableRef.current) === null || _primaryTableRef$curr === void 0 ? void 0 : _primaryTableRef$curr.tableElement);
    registerColDragEvent((_primaryTableRef$curr2 = primaryTableRef.current) === null || _primaryTableRef$curr2 === void 0 ? void 0 : _primaryTableRef$curr2.tableHtmlElement);
    var timer = setTimeout(function () {
      var _primaryTableRef$curr3;

      if ((_primaryTableRef$curr3 = primaryTableRef.current) !== null && _primaryTableRef$curr3 !== void 0 && _primaryTableRef$curr3.affixHeaderElement) {
        registerColDragEvent(primaryTableRef.current.affixHeaderElement);
      }

      clearTimeout(timer);
    });
  }, [primaryTableRef, columns, dragSort]);
  return {
    isRowDraggable: isRowDraggable,
    isRowHandlerDraggable: isRowHandlerDraggable,
    isColDraggable: isColDraggable,
    setDragSortColumns: setDragSortColumns
  };
}

export { useDragSort as default };
//# sourceMappingURL=useDragSort.js.map
