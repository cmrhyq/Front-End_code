/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { _ as _slicedToArray } from '../_chunks/dep-9615f03f.js';
import React, { forwardRef, useRef, useMemo, useCallback, useEffect } from 'react';
import classNames from 'classnames';
import useConfig from '../hooks/useConfig.js';
import useControlled from '../hooks/useControlled.js';
import { Tree } from '../tree/index.js';
import SelectInput from '../select-input/SelectInput.js';
import { usePersistFn } from '../_util/usePersistFn.js';
import useSwitch from '../_util/useSwitch.js';
import noop from '../_util/noop.js';
import { useTreeSelectUtils } from './useTreeSelectUtils.js';
import { SelectArrow } from './SelectArrow.js';
import { useTreeSelectPassThroughProps } from './useTreeSelectPassthoughProps.js';
import { useTreeSelectLocale } from './useTreeSelectLocale.js';
import { treeSelectDefaultProps } from './defaultProps.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-918e41e2.js';
import '../_chunks/dep-734a21a0.js';
import '../_chunks/dep-68f7a306.js';
import '../_chunks/dep-a74f6fff.js';
import '../_chunks/dep-d23d346c.js';
import '../_chunks/dep-9ea787ca.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-0e2dfd87.js';
import '../_chunks/dep-f50ff346.js';
import '../_chunks/dep-51592cde.js';
import '../_chunks/dep-ae94c4e7.js';
import '../_chunks/dep-7f6754ac.js';
import '../_chunks/dep-2509667d.js';
import '../_chunks/dep-b817c90e.js';
import '../_chunks/dep-fe9825b6.js';
import '../_chunks/dep-ebc05da7.js';
import '../_chunks/dep-3160df29.js';
import '../_chunks/dep-c91b3852.js';
import '../_chunks/dep-9e44c34c.js';
import '../_chunks/dep-0c62d47a.js';
import '../_chunks/dep-e2fe68b7.js';
import '../_chunks/dep-44a03722.js';
import '../_chunks/dep-f5616354.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../_chunks/dep-12260644.js';
import '../_chunks/dep-ec84085d.js';
import '../_chunks/dep-66273dbc.js';
import '../_chunks/dep-2ac048c0.js';
import '../_chunks/dep-b989427d.js';
import '../tree/Tree.js';
import 'react-transition-group';
import '../tree/useTreeConfig.js';
import '../locale/LocalReceiver.js';
import '../tree/useControllable.js';
import '../tree/TreeItem.js';
import 'tdesign-icons-react';
import '../loading/index.js';
import '../loading/Loading.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-8d5556d7.js';
import '../_util/easing.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../_chunks/dep-59b9253f.js';
import '../_chunks/dep-d1b4ab24.js';
import '../_chunks/dep-8368bb87.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../_util/useRipple.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../hooks/useGlobalIcon.js';
import '../checkbox/index.js';
import '../_chunks/dep-62166e7d.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../common/Check.js';
import '../_util/helper.js';
import '../_chunks/dep-8fe8d164.js';
import '../_chunks/dep-31043569.js';
import '../checkbox/defaultProps.js';
import '../tree/useStore.js';
import '../_chunks/dep-91b4e41f.js';
import '../_chunks/dep-51754e76.js';
import '../_chunks/dep-6be1e491.js';
import '../_chunks/dep-c4881228.js';
import '../_util/useUpdateEffect.js';
import '../_util/useLayoutEffect.js';
import '../_common/js/tree/tree-store.js';
import '../_chunks/dep-cc25e35c.js';
import '../_chunks/dep-7483bc68.js';
import '../_chunks/dep-269fe2ba.js';
import '../_chunks/dep-9f757569.js';
import '../_common/js/tree/tree-node.js';
import '../_chunks/dep-99cf9839.js';
import '../_chunks/dep-1f300d2c.js';
import '../_chunks/dep-e103618e.js';
import '../_common/js/tree/tree-node-model.js';
import '../_chunks/dep-5e5947bc.js';
import '../_chunks/dep-dcadd2e9.js';
import '../_chunks/dep-1efa5ad5.js';
import '../_common/js/log/log.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-popper';
import '../popup/hooks/useTrigger.js';
import 'react-is';
import '../popup/utils/ref.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-05d10538.js';
import '../_chunks/dep-652c1652.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../select-input/useSingle.js';
import '../input/index.js';
import '../input/Input.js';
import '../input/InputGroup.js';
import '../input/defaultProps.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../_util/useDragSorter.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/useTagList.js';
import 'lodash';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/defaultProps.js';
import '../tag-input/useHover.js';
import '../tag-input/defaultProps.js';
import '../select-input/useOverlayInnerStyle.js';
import '../select-input/defaultProps.js';
import '../common/FakeArrow.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var useMergeFn = function useMergeFn() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return usePersistFn(function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return fns.forEach(function (fn) {
      return fn === null || fn === void 0 ? void 0 : fn.apply(void 0, args);
    });
  });
};

var TreeSelect = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useTreeSelectLocale = useTreeSelectLocale(props),
      placeholder = _useTreeSelectLocale.placeholder,
      empty = _useTreeSelectLocale.empty,
      loadingItem = _useTreeSelectLocale.loadingItem;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var className = props.className,
      onInputChange = props.onInputChange,
      readonly = props.readonly,
      disabled = props.disabled,
      multiple = props.multiple,
      prefixIcon = props.prefixIcon,
      loading = props.loading,
      size = props.size,
      max = props.max,
      data = props.data,
      _props$filter = props.filter,
      filter = _props$filter === void 0 ? function (text, option) {
    return option.label.includes(text);
  } : _props$filter,
      rawFilterable = props.filterable,
      onClear = props.onClear,
      valueDisplay = props.valueDisplay,
      treeProps = props.treeProps,
      inputProps = props.inputProps,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      onSearch = props.onSearch,
      onRemove = props.onRemove;
  var selectInputProps = useTreeSelectPassThroughProps(props);

  var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];

  var _useControlled3 = useControlled(props, "popupVisible", props.onPopupVisibleChange),
      _useControlled4 = _slicedToArray(_useControlled3, 2),
      popupVisible = _useControlled4[0],
      setPopupVisible = _useControlled4[1];

  var _useSwitch = useSwitch(),
      _useSwitch2 = _slicedToArray(_useSwitch, 2),
      hover = _useSwitch2[0],
      hoverAction = _useSwitch2[1];

  var _useControlled5 = useControlled(props, "inputValue", onInputChange),
      _useControlled6 = _slicedToArray(_useControlled5, 2),
      filterInput = _useControlled6[0],
      setFilterInput = _useControlled6[1];

  var treeRef = useRef();

  var _useTreeSelectUtils = useTreeSelectUtils(props, treeRef),
      normalizeValue = _useTreeSelectUtils.normalizeValue,
      formatValue = _useTreeSelectUtils.formatValue,
      getNodeItem = _useTreeSelectUtils.getNodeItem;

  var filterable = rawFilterable || !!props.filter;
  var normalizedValue = useMemo(function () {
    var calcValue = Array.isArray(value) ? value : [value];
    return calcValue.reduce(function (result, value2) {
      var normalized = normalizeValue(value2);
      normalized.value && result.push(normalized);
      return result;
    }, []);
  }, [normalizeValue, value, data]);
  var internalInputValue = useMemo(function () {
    if (multiple) return normalizedValue;
    return filterable && popupVisible ? filterInput : normalizedValue[0] || "";
  }, [multiple, normalizedValue, filterable, popupVisible, filterInput]);
  var inputPlaceholader = useMemo(function () {
    if (filterable && !multiple && popupVisible && normalizedValue.length) {
      return typeof normalizedValue[0].label === "string" ? normalizedValue[0].label : String(normalizedValue[0].value);
    }

    return placeholder;
  }, [filterable, multiple, popupVisible, normalizedValue, placeholder]);
  var showLoading = !disabled && loading;
  var showFakePlaceholder = multiple && !filterable && !normalizedValue.length;
  var handleFilter = useCallback(function (node) {
    return filterable ? filter(filterInput, node) : true;
  }, [filter, filterInput, filterable]);
  var handleSingleChange = usePersistFn(function (value2, context) {
    var $value = value2.length ? value2[0] : null;
    onChange(formatValue($value, context.node.label), _objectSpread(_objectSpread({}, context), {}, {
      trigger: $value === null ? "uncheck" : "check"
    }));
    setPopupVisible(false, {
      trigger: "trigger-element-click"
    });
  });
  var handleMultiChange = usePersistFn(function (value2, context) {
    (max === 0 || value2.length <= max) && onChange(value2.map(function (value3) {
      var _getNodeItem;

      return formatValue(value3, (_getNodeItem = getNodeItem(value3)) === null || _getNodeItem === void 0 ? void 0 : _getNodeItem.label);
    }), _objectSpread(_objectSpread({}, context), {}, {
      trigger: value2.length > normalizedValue.length ? "check" : "uncheck"
    }));
  });
  var handleClear = usePersistFn(function (ctx) {
    ctx.e.stopPropagation();
    onChange(multiple ? [] : formatValue(null), {
      node: null,
      trigger: "clear",
      e: ctx.e
    });
    onClear === null || onClear === void 0 ? void 0 : onClear(ctx);
    setPopupVisible(false, {
      trigger: "trigger-element-click"
    });
  });
  var handleRemove = usePersistFn(function (index, e) {
    var node = getNodeItem(normalizedValue[index].value);
    onChange(normalizedValue.filter(function (value2, i) {
      return i !== index;
    }).map(function (_ref) {
      var value2 = _ref.value,
          label = _ref.label;
      return formatValue(value2, label);
    }), {
      node: node,
      trigger: "tag-remove",
      e: e
    });
    onRemove === null || onRemove === void 0 ? void 0 : onRemove({
      value: node.value,
      data: {
        value: node.value,
        label: node.label
      },
      e: e
    });
  });
  var handleTagChange = usePersistFn(function (tags, ctx) {
    switch (ctx.trigger) {
      case "clear":
        handleClear({
          e: ctx.e
        });
        break;

      case "tag-remove":
        handleRemove(ctx.index, ctx.e);
        break;

      case "backspace":
        handleRemove(ctx.index);
    }
  });
  var handleBlur = usePersistFn(function (v, ctx) {
    onBlur === null || onBlur === void 0 ? void 0 : onBlur({
      value: multiple ? normalizedValue : normalizedValue[0],
      e: ctx.e
    });
  });
  var handleFocus = usePersistFn(function (v, ctx) {
    onFocus === null || onFocus === void 0 ? void 0 : onFocus({
      value: multiple ? normalizedValue : normalizedValue[0],
      e: ctx.e
    });
  });
  var handleEnter = usePersistFn(function (text) {
    onSearch === null || onSearch === void 0 ? void 0 : onSearch(text);
  });
  var handleFilterChange = usePersistFn(function (value2) {
    return setFilterInput(value2);
  });
  useEffect(function () {
    popupVisible && setFilterInput("");
  }, [popupVisible]);
  useEffect(function () {
    setFilterInput("");
  }, [value]);

  var renderTree = function renderTree() {
    if (readonly) return empty;
    if (showLoading) return loadingItem;
    return /* @__PURE__ */React.createElement(Tree, _objectSpread(_objectSpread({
      ref: treeRef,
      hover: true,
      transition: true,
      expandAll: true,
      filter: handleFilter,
      data: data,
      disabled: disabled,
      empty: empty,
      allowFoldNodeOnFilter: true
    }, multiple ? {
      checkable: true,
      onChange: handleMultiChange,
      value: normalizedValue.map(function (_ref2) {
        var value2 = _ref2.value;
        return value2;
      })
    } : {
      activable: true,
      actived: normalizedValue.map(function (_ref3) {
        var value2 = _ref3.value;
        return value2;
      }),
      onActive: handleSingleChange
    }), treeProps));
  };

  var renderCollapsedItems = useMemo(function () {
    return props.collapsedItems ? function () {
      return props.collapsedItems({
        value: normalizedValue,
        collapsedSelectedItems: normalizedValue.slice(props.minCollapsedNum, normalizedValue.length),
        count: normalizedValue.length - props.minCollapsedNum
      });
    } : null;
  }, [normalizedValue, props]);

  var renderLabel = function renderLabel() {
    return showFakePlaceholder ? /* @__PURE__ */React.createElement(React.Fragment, null, prefixIcon, /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix, "-tree-select--placeholder")
    }, placeholder)) : prefixIcon;
  };

  var normalizedValueDisplay = function normalizedValueDisplay() {
    if (typeof valueDisplay === "string") return valueDisplay;
    if (multiple) return function (_ref4) {
      var onClose = _ref4.onClose;
      return valueDisplay({
        value: normalizedValue,
        onClose: onClose
      });
    };
    return normalizedValue.length ? valueDisplay({
      value: normalizedValue[0],
      onClose: noop
    }) : "";
  };

  return /* @__PURE__ */React.createElement(SelectInput, _objectSpread(_objectSpread(_objectSpread({
    status: props.status,
    tips: props.tips
  }, props.selectInputProps), selectInputProps), {}, {
    ref: ref,
    className: classNames("".concat(classPrefix, "-tree-select"), _defineProperty({}, "".concat(classPrefix, "-tree-select--without-input"), multiple && !filterable), className),
    value: internalInputValue,
    inputValue: filterInput,
    panel: renderTree(),
    allowInput: multiple || filterable,
    inputProps: _objectSpread(_objectSpread({}, inputProps), {}, {
      size: size
    }),
    tagInputProps: {
      size: size,
      excessTagsDisplayType: "break-line",
      inputProps: inputProps,
      tagProps: props.tagProps
    },
    placeholder: inputPlaceholader,
    popupVisible: popupVisible && !disabled,
    onInputChange: handleFilterChange,
    onPopupVisibleChange: useMergeFn(setPopupVisible),
    onFocus: useMergeFn(handleFocus, function () {
      return setPopupVisible(true, {
        trigger: "trigger-element-click"
      });
    }),
    onBlur: useMergeFn(handleBlur),
    onClear: handleClear,
    onTagChange: handleTagChange,
    onEnter: handleEnter,
    onMouseenter: hoverAction.on,
    onMouseleave: hoverAction.off,
    suffixIcon: readonly ? null : /* @__PURE__ */React.createElement(SelectArrow, {
      isActive: popupVisible,
      isHighlight: hover || popupVisible,
      disabled: disabled
    }),
    collapsedItems: renderCollapsedItems,
    label: renderLabel(),
    valueDisplay: valueDisplay && normalizedValueDisplay()
  }));
});
TreeSelect.displayName = "TreeSelect";
TreeSelect.defaultProps = treeSelectDefaultProps;

export { TreeSelect as default };
//# sourceMappingURL=TreeSelect.js.map
