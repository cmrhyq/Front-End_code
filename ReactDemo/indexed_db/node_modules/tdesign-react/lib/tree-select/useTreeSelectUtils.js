/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-1e32006c.js';
import { useMemo } from 'react';
import { TreeStore } from '../_common/js/tree/tree-store.js';
import { usePersistFn } from '../_util/usePersistFn.js';
import { treeSelectDefaultProps } from './defaultProps.js';
import '../_chunks/dep-cc25e35c.js';
import '../_chunks/dep-7483bc68.js';
import '../_chunks/dep-269fe2ba.js';
import '../_chunks/dep-68f7a306.js';
import '../_chunks/dep-a74f6fff.js';
import '../_chunks/dep-d23d346c.js';
import '../_chunks/dep-9ea787ca.js';
import '../_chunks/dep-4e0da095.js';
import '../_chunks/dep-0e2dfd87.js';
import '../_chunks/dep-f50ff346.js';
import '../_chunks/dep-2ac048c0.js';
import '../_chunks/dep-3160df29.js';
import '../_chunks/dep-b989427d.js';
import '../_chunks/dep-7f6754ac.js';
import '../_chunks/dep-2509667d.js';
import '../_chunks/dep-9f757569.js';
import '../_chunks/dep-c4881228.js';
import '../_chunks/dep-ebc05da7.js';
import '../_chunks/dep-e2fe68b7.js';
import '../_chunks/dep-fe9825b6.js';
import '../_chunks/dep-0c62d47a.js';
import '../_chunks/dep-9e44c34c.js';
import '../_chunks/dep-ae94c4e7.js';
import '../_chunks/dep-8fe8d164.js';
import '../_chunks/dep-12260644.js';
import '../_chunks/dep-ec84085d.js';
import '../_chunks/dep-66273dbc.js';
import '../_chunks/dep-44a03722.js';
import '../_chunks/dep-734a21a0.js';
import '../_chunks/dep-51592cde.js';
import '../_chunks/dep-b817c90e.js';
import '../_chunks/dep-c91b3852.js';
import '../_common/js/tree/tree-node.js';
import '../_chunks/dep-99cf9839.js';
import '../_chunks/dep-59b9253f.js';
import '../_chunks/dep-7909fefa.js';
import '../_chunks/dep-d1b4ab24.js';
import '../_chunks/dep-1f300d2c.js';
import '../_chunks/dep-e103618e.js';
import '../_common/js/tree/tree-node-model.js';
import '../_chunks/dep-5e5947bc.js';
import '../_chunks/dep-dcadd2e9.js';
import '../_chunks/dep-1efa5ad5.js';
import '../_chunks/dep-51754e76.js';
import '../_chunks/dep-6be1e491.js';
import '../_common/js/log/log.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var useTreeSelectUtils = function useTreeSelectUtils(_ref, treeRef) {
  var data = _ref.data,
      treeProps = _ref.treeProps,
      valueType = _ref.valueType;
  var defaultStore = useMemo(function () {
    var store = new TreeStore(_objectSpread(_objectSpread({}, treeSelectDefaultProps.treeProps), treeProps));
    store.append(data);
    return store;
  }, [data, treeProps]);
  var getNodeItem = usePersistFn(function (value) {
    var _defaultStore$getNode;

    if (treeRef.current) {
      return treeRef.current.getItem(value);
    }

    return (_defaultStore$getNode = defaultStore.getNode(value)) === null || _defaultStore$getNode === void 0 ? void 0 : _defaultStore$getNode.getModel();
  });
  var formatValue = usePersistFn(function (value) {
    var _treeProps$keys$value, _treeProps$keys, _treeProps$keys$label, _treeProps$keys2, _ref2;

    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(value);
    var valueKey = (_treeProps$keys$value = treeProps === null || treeProps === void 0 ? void 0 : (_treeProps$keys = treeProps.keys) === null || _treeProps$keys === void 0 ? void 0 : _treeProps$keys.value) !== null && _treeProps$keys$value !== void 0 ? _treeProps$keys$value : "value";
    var labelKey = (_treeProps$keys$label = treeProps === null || treeProps === void 0 ? void 0 : (_treeProps$keys2 = treeProps.keys) === null || _treeProps$keys2 === void 0 ? void 0 : _treeProps$keys2.label) !== null && _treeProps$keys$label !== void 0 ? _treeProps$keys$label : "label";
    return value && valueType === "object" ? (_ref2 = {}, _defineProperty(_ref2, valueKey, value), _defineProperty(_ref2, labelKey, label), _ref2) : value;
  });
  var normalizeValue = usePersistFn(function (value) {
    var _treeProps$keys$value2, _treeProps$keys3, _node$label;

    var valueKey = (_treeProps$keys$value2 = treeProps === null || treeProps === void 0 ? void 0 : (_treeProps$keys3 = treeProps.keys) === null || _treeProps$keys3 === void 0 ? void 0 : _treeProps$keys3.value) !== null && _treeProps$keys$value2 !== void 0 ? _treeProps$keys$value2 : "value";
    var realValue = valueType === "value" ? value : value === null || value === void 0 ? void 0 : value[valueKey];
    var node = getNodeItem(realValue);
    return {
      value: realValue,
      label: (_node$label = node === null || node === void 0 ? void 0 : node.label) !== null && _node$label !== void 0 ? _node$label : String(realValue)
    };
  });
  return {
    getNodeItem: getNodeItem,
    formatValue: formatValue,
    normalizeValue: normalizeValue
  };
};

export { useTreeSelectUtils };
//# sourceMappingURL=useTreeSelectUtils.js.map
