/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../../../_chunks/dep-1e32006c.js';
import { _ as _toConsumableArray } from '../../../../_chunks/dep-59b9253f.js';
import React, { useRef, useEffect } from 'react';
import { throttle } from 'lodash';
import { Color } from '../../../../_common/js/color-picker/color.js';
import { Input } from '../../../../input/index.js';
import { InputNumber } from '../../../../input-number/index.js';
import { FORMAT_INPUT_CONFIG } from './config.js';
import '../../../../_chunks/dep-7909fefa.js';
import '../../../../_chunks/dep-d1b4ab24.js';
import '../../../../_chunks/dep-9615f03f.js';
import '../../../../_chunks/dep-cc25e35c.js';
import 'tinycolor2';
import '../../../../_common/js/color-picker/cmyk.js';
import '../../../../_common/js/color-picker/gradient.js';
import '../../../../input/Input.js';
import '../../../../_chunks/dep-4e0da095.js';
import '../../../../_chunks/dep-8368bb87.js';
import 'classnames';
import 'tdesign-icons-react';
import '../../../../_chunks/dep-d23d346c.js';
import '../../../../_chunks/dep-9ea787ca.js';
import '../../../../_chunks/dep-0e2dfd87.js';
import '../../../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../../../hooks/useConfig.js';
import '../../../../_chunks/dep-918e41e2.js';
import '../../../../_chunks/dep-734a21a0.js';
import '../../../../_chunks/dep-68f7a306.js';
import '../../../../_chunks/dep-a74f6fff.js';
import '../../../../_chunks/dep-f50ff346.js';
import '../../../../_chunks/dep-51592cde.js';
import '../../../../_chunks/dep-ae94c4e7.js';
import '../../../../_chunks/dep-7f6754ac.js';
import '../../../../_chunks/dep-2509667d.js';
import '../../../../_chunks/dep-b817c90e.js';
import '../../../../_chunks/dep-fe9825b6.js';
import '../../../../_chunks/dep-ebc05da7.js';
import '../../../../_chunks/dep-3160df29.js';
import '../../../../_chunks/dep-c91b3852.js';
import '../../../../_chunks/dep-9e44c34c.js';
import '../../../../_chunks/dep-0c62d47a.js';
import '../../../../_chunks/dep-e2fe68b7.js';
import '../../../../_chunks/dep-44a03722.js';
import '../../../../_chunks/dep-f5616354.js';
import '../../../../_common/js/global-config/locale/zh_CN.js';
import '../../../../_common/js/global-config/default-config.js';
import '../../../../hooks/useGlobalIcon.js';
import '../../../../_common/js/utils/helper.js';
import '../../../../input/InputGroup.js';
import '../../../../hooks/useControlled.js';
import '../../../../_chunks/dep-12260644.js';
import '../../../../_chunks/dep-ec84085d.js';
import '../../../../_chunks/dep-66273dbc.js';
import '../../../../_chunks/dep-2ac048c0.js';
import '../../../../_chunks/dep-b989427d.js';
import '../../../../_util/noop.js';
import '../../../../locale/LocalReceiver.js';
import '../../../../input/defaultProps.js';
import '../../../../input-number/InputNumber.js';
import '../../../../button/index.js';
import '../../../../button/Button.js';
import '../../../../_util/useRipple.js';
import '../../../../_util/useAnimation.js';
import '../../../../_util/setStyle.js';
import '../../../../_util/dom.js';
import 'raf';
import '../../../../_chunks/dep-8d5556d7.js';
import '../../../../_util/easing.js';
import '../../../../loading/index.js';
import '../../../../loading/Loading.js';
import '../../../../common/Portal.js';
import 'react-dom';
import '../../../../loading/gradient.js';
import '../../../../_common/js/loading/circle-adapter.js';
import '../../../../_common/js/utils/set-style.js';
import '../../../../loading/defaultProps.js';
import '../../../../loading/plugin.js';
import '../../../../button/defaultProps.js';
import '../../../../input-number/useInputNumber.js';
import '../../../../_util/useCommonClassName.js';
import '../../../../_common/js/input-number/number.js';
import '../../../../_chunks/dep-31043569.js';
import '../../../../_common/js/input-number/large-number.js';
import '../../../../_common/js/log/log.js';
import '../../../../input-number/defaultProps.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var FormatInputs = function FormatInputs(props) {
  var format = props.format,
      enableAlpha = props.enableAlpha,
      inputProps = props.inputProps,
      disabled = props.disabled,
      onInputChange = props.onInputChange,
      color = props.color;
  var formatValue = useRef({});
  var lastModelValue = useRef({});

  var object2color = function object2color(f) {
    return Color.object2color(formatValue.current, f);
  };

  var getFormatColorMap = function getFormatColorMap(type) {
    if (type === "encode") {
      return {
        HSV: color.getHsva(),
        HSL: color.getHsla(),
        RGB: color.getRgba(),
        CMYK: color.getCmyk(),
        CSS: {
          css: color.css
        },
        HEX: {
          hex: color.hex
        }
      };
    }

    return {
      HSV: object2color("HSV"),
      HSL: object2color("HSL"),
      RGB: object2color("RGB"),
      CMYK: object2color("CMYK"),
      CSS: formatValue.current.css,
      HEX: formatValue.current.hex
    };
  };

  var updateModelValue = function updateModelValue() {
    var values = getFormatColorMap("encode")[format];
    values.a = Math.round(color.alpha * 100);
    Object.keys(values).forEach(function (key) {
      formatValue.current[key] = values[key];
      lastModelValue.current[key] = values[key];
    });
  };

  updateModelValue();
  var throttleUpdate = throttle(updateModelValue, 100);

  var inputConfigs = function inputConfigs() {
    var configs = _toConsumableArray(FORMAT_INPUT_CONFIG[format]);

    if (enableAlpha) {
      configs.push({
        type: "inputNumber",
        key: "a",
        min: 0,
        max: 100,
        format: function format(value) {
          return "".concat(value, "%");
        },
        flex: 1.15
      });
    }

    return configs;
  };

  var handleInputChange = function handleInputChange(key, v) {
    if (v === lastModelValue[key]) {
      return;
    }

    formatValue.current[key] = v;
    lastModelValue.current[key] = v;
    var value = getFormatColorMap("decode")[format];
    onInputChange(value, formatValue.current.a / 100, key, v);
  };

  useEffect(function () {
    throttleUpdate();
  }, [color.saturation, color.hue, color.value, color.alpha, format, throttleUpdate]);
  return /* @__PURE__ */React.createElement("div", {
    className: "input-group"
  }, inputConfigs().map(function (config) {
    var commonProps = _objectSpread(_objectSpread({}, inputProps), {}, {
      title: formatValue.current[config.key],
      value: formatValue.current[config.key],
      align: "center",
      disabled: disabled,
      size: "small",
      onBlur: function onBlur(v) {
        return handleInputChange(config.key, v);
      },
      onEnter: function onEnter(v) {
        return handleInputChange(config.key, v);
      }
    });

    return /* @__PURE__ */React.createElement("div", {
      className: "input-group__item",
      key: config.key,
      style: {
        flex: config.flex || 1
      }
    }, config.type === "input" ? /* @__PURE__ */React.createElement(Input, _objectSpread(_objectSpread({}, commonProps), {}, {
      maxlength: format === "HEX" ? 9 : void 0
    })) : /* @__PURE__ */React.createElement(InputNumber, _objectSpread(_objectSpread({}, commonProps), {}, {
      min: config.min,
      max: config.max,
      step: 1,
      format: config.format,
      theme: "normal"
    })));
  }));
};

var FormatInput = /*#__PURE__*/React.memo(FormatInputs);

export { FormatInput as default };
//# sourceMappingURL=inputs.js.map
