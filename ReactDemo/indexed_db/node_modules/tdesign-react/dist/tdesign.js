/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TDesign = {}, global.React, global.ReactDOM));
})(this, (function (exports, React, ReactDOM) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var React__namespace = /*#__PURE__*/_interopNamespace(React);
  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

  function _typeof$1(obj) {
    "@babel/helpers - typeof";

    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof$1(obj);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _arrayLikeToArray$2(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _unsupportedIterableToArray$2(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest();
  }

  function _defineProperty$3(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectWithoutPropertiesLoose$2(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties$2(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$2(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var classnames$1 = {exports: {}};

  (function (module) {
    /* global define */
    (function () {

      var hasOwn = {}.hasOwnProperty;

      function classNames() {
        var classes = [];

        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;

          var argType = _typeof$1(arg);

          if (argType === 'string' || argType === 'number') {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);

              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === 'object') {
            if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
              classes.push(arg.toString());
              continue;
            }

            for (var key in arg) {
              if (hasOwn.call(arg, key) && arg[key]) {
                classes.push(key);
              }
            }
          }
        }

        return classes.join(' ');
      }

      if (module.exports) {
        classNames["default"] = classNames;
        module.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  })(classnames$1);

  var classNames$1 = classnames$1.exports;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */

  function listCacheClear$1() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear$1;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */

  function eq$6(value, other) {
    return value === other || value !== value && other !== other;
  }

  var eq_1 = eq$6;

  var eq$5 = eq_1;
  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function assocIndexOf$4(array, key) {
    var length = array.length;

    while (length--) {
      if (eq$5(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  var _assocIndexOf = assocIndexOf$4;

  var assocIndexOf$3 = _assocIndexOf;
  /** Used for built-in method references. */

  var arrayProto = Array.prototype;
  /** Built-in value references. */

  var splice = arrayProto.splice;
  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function listCacheDelete$1(key) {
    var data = this.__data__,
        index = assocIndexOf$3(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete$1;

  var assocIndexOf$2 = _assocIndexOf;
  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function listCacheGet$1(key) {
    var data = this.__data__,
        index = assocIndexOf$2(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet$1;

  var assocIndexOf$1 = _assocIndexOf;
  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function listCacheHas$1(key) {
    return assocIndexOf$1(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas$1;

  var assocIndexOf = _assocIndexOf;
  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */

  function listCacheSet$1(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  var _listCacheSet = listCacheSet$1;

  var listCacheClear = _listCacheClear,
      listCacheDelete = _listCacheDelete,
      listCacheGet = _listCacheGet,
      listCacheHas = _listCacheHas,
      listCacheSet = _listCacheSet;
  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function ListCache$4(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `ListCache`.


  ListCache$4.prototype.clear = listCacheClear;
  ListCache$4.prototype['delete'] = listCacheDelete;
  ListCache$4.prototype.get = listCacheGet;
  ListCache$4.prototype.has = listCacheHas;
  ListCache$4.prototype.set = listCacheSet;
  var _ListCache = ListCache$4;

  var ListCache$3 = _ListCache;
  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */

  function stackClear$1() {
    this.__data__ = new ListCache$3();
    this.size = 0;
  }

  var _stackClear = stackClear$1;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function stackDelete$1(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete$1;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function stackGet$1(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet$1;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function stackHas$1(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas$1;

  var freeGlobal$1 = _typeof$1(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal$1;

  var freeGlobal = _freeGlobal;
  /** Detect free variable `self`. */

  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof$1(self)) == 'object' && self && self.Object === Object && self;
  /** Used as a reference to the global object. */

  var root$a = freeGlobal || freeSelf || Function('return this')();
  var _root = root$a;

  var root$9 = _root;
  /** Built-in value references. */

  var _Symbol2 = root$9.Symbol;
  var _Symbol$6 = _Symbol2;

  var _Symbol$5 = _Symbol$6;
  /** Used for built-in method references. */

  var objectProto$i = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$h = objectProto$i.hasOwnProperty;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString$1 = objectProto$i.toString;
  /** Built-in value references. */

  var symToStringTag$1 = _Symbol$5 ? _Symbol$5.toStringTag : undefined;
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */

  function getRawTag$1(value) {
    var isOwn = hasOwnProperty$h.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }

    return result;
  }

  var _getRawTag = getRawTag$1;

  /** Used for built-in method references. */
  var objectProto$h = Object.prototype;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString = objectProto$h.toString;
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */

  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }

  var _objectToString = objectToString$1;

  var _Symbol$4 = _Symbol$6,
      getRawTag = _getRawTag,
      objectToString = _objectToString;
  /** `Object#toString` result references. */

  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';
  /** Built-in value references. */

  var symToStringTag = _Symbol$4 ? _Symbol$4.toStringTag : undefined;
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  function baseGetTag$a(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }

    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }

  var _baseGetTag = baseGetTag$a;

  function isObject$b(value) {
    var type = _typeof$1(value);

    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject$b;

  var baseGetTag$9 = _baseGetTag,
      isObject$a = isObject_1;
  /** `Object#toString` result references. */

  var asyncTag = '[object AsyncFunction]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */

  function isFunction$4(value) {
    if (!isObject$a(value)) {
      return false;
    } // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.


    var tag = baseGetTag$9(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction$4;

  var root$8 = _root;
  /** Used to detect overreaching core-js shims. */

  var coreJsData$1 = root$8['__core-js_shared__'];
  var _coreJsData = coreJsData$1;

  var coreJsData = _coreJsData;
  /** Used to detect methods masquerading as native. */

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();
  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */


  function isMasked$1(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  var _isMasked = isMasked$1;

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$2 = funcProto$2.toString;
  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */

  function toSource$2(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  var _toSource = toSource$2;

  var isFunction$3 = isFunction_1,
      isMasked = _isMasked,
      isObject$9 = isObject_1,
      toSource$1 = _toSource;
  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  /** Used to detect host constructors (Safari). */

  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  /** Used for built-in method references. */

  var funcProto$1 = Function.prototype,
      objectProto$g = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$1 = funcProto$1.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$g = objectProto$g.hasOwnProperty;
  /** Used to detect if a method is native. */

  var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$g).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */

  function baseIsNative$1(value) {
    if (!isObject$9(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction$3(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource$1(value));
  }

  var _baseIsNative = baseIsNative$1;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

  function getValue$1(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue$1;

  var baseIsNative = _baseIsNative,
      getValue = _getValue;
  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */

  function getNative$7(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative$7;

  var getNative$6 = _getNative,
      root$7 = _root;
  /* Built-in method references that are verified to be native. */

  var Map$4 = getNative$6(root$7, 'Map');
  var _Map = Map$4;

  var getNative$5 = _getNative;
  /* Built-in method references that are verified to be native. */

  var nativeCreate$4 = getNative$5(Object, 'create');
  var _nativeCreate = nativeCreate$4;

  var nativeCreate$3 = _nativeCreate;
  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */

  function hashClear$1() {
    this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear$1;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function hashDelete$1(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete$1;

  var nativeCreate$2 = _nativeCreate;
  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';
  /** Used for built-in method references. */

  var objectProto$f = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$f = objectProto$f.hasOwnProperty;
  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function hashGet$1(key) {
    var data = this.__data__;

    if (nativeCreate$2) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? undefined : result;
    }

    return hasOwnProperty$f.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet$1;

  var nativeCreate$1 = _nativeCreate;
  /** Used for built-in method references. */

  var objectProto$e = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$e = objectProto$e.hasOwnProperty;
  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function hashHas$1(key) {
    var data = this.__data__;
    return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$e.call(data, key);
  }

  var _hashHas = hashHas$1;

  var nativeCreate = _nativeCreate;
  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */

  function hashSet$1(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet$1;

  var hashClear = _hashClear,
      hashDelete = _hashDelete,
      hashGet = _hashGet,
      hashHas = _hashHas,
      hashSet = _hashSet;
  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Hash$1(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `Hash`.


  Hash$1.prototype.clear = hashClear;
  Hash$1.prototype['delete'] = hashDelete;
  Hash$1.prototype.get = hashGet;
  Hash$1.prototype.has = hashHas;
  Hash$1.prototype.set = hashSet;
  var _Hash = Hash$1;

  var Hash = _Hash,
      ListCache$2 = _ListCache,
      Map$3 = _Map;
  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */

  function mapCacheClear$1() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map$3 || ListCache$2)(),
      'string': new Hash()
    };
  }

  var _mapCacheClear = mapCacheClear$1;

  function isKeyable$1(value) {
    var type = _typeof$1(value);

    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  var _isKeyable = isKeyable$1;

  var isKeyable = _isKeyable;
  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */

  function getMapData$4(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  var _getMapData = getMapData$4;

  var getMapData$3 = _getMapData;
  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function mapCacheDelete$1(key) {
    var result = getMapData$3(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete$1;

  var getMapData$2 = _getMapData;
  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function mapCacheGet$1(key) {
    return getMapData$2(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet$1;

  var getMapData$1 = _getMapData;
  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function mapCacheHas$1(key) {
    return getMapData$1(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas$1;

  var getMapData = _getMapData;
  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */

  function mapCacheSet$1(key, value) {
    var data = getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet$1;

  var mapCacheClear = _mapCacheClear,
      mapCacheDelete = _mapCacheDelete,
      mapCacheGet = _mapCacheGet,
      mapCacheHas = _mapCacheHas,
      mapCacheSet = _mapCacheSet;
  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function MapCache$3(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `MapCache`.


  MapCache$3.prototype.clear = mapCacheClear;
  MapCache$3.prototype['delete'] = mapCacheDelete;
  MapCache$3.prototype.get = mapCacheGet;
  MapCache$3.prototype.has = mapCacheHas;
  MapCache$3.prototype.set = mapCacheSet;
  var _MapCache = MapCache$3;

  var ListCache$1 = _ListCache,
      Map$2 = _Map,
      MapCache$2 = _MapCache;
  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE$1 = 200;
  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */

  function stackSet$1(key, value) {
    var data = this.__data__;

    if (data instanceof ListCache$1) {
      var pairs = data.__data__;

      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new MapCache$2(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet$1;

  var ListCache = _ListCache,
      stackClear = _stackClear,
      stackDelete = _stackDelete,
      stackGet = _stackGet,
      stackHas = _stackHas,
      stackSet = _stackSet;
  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Stack$3(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  } // Add methods to `Stack`.


  Stack$3.prototype.clear = stackClear;
  Stack$3.prototype['delete'] = stackDelete;
  Stack$3.prototype.get = stackGet;
  Stack$3.prototype.has = stackHas;
  Stack$3.prototype.set = stackSet;
  var _Stack = Stack$3;

  var getNative$4 = _getNative;

  var defineProperty$3 = function () {
    try {
      var func = getNative$4(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  var _defineProperty$2 = defineProperty$3;

  var defineProperty$2 = _defineProperty$2;
  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function baseAssignValue$3(object, key, value) {
    if (key == '__proto__' && defineProperty$2) {
      defineProperty$2(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue$3;

  var baseAssignValue$2 = _baseAssignValue,
      eq$4 = eq_1;
  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function assignMergeValue$2(object, key, value) {
    if (value !== undefined && !eq$4(object[key], value) || value === undefined && !(key in object)) {
      baseAssignValue$2(object, key, value);
    }
  }

  var _assignMergeValue = assignMergeValue$2;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */

  function createBaseFor$1(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }

  var _createBaseFor = createBaseFor$1;

  var createBaseFor = _createBaseFor;
  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */

  var baseFor$1 = createBaseFor();
  var _baseFor = baseFor$1;

  var _cloneBuffer = {exports: {}};

  (function (module, exports) {
    var root = _root;
    /** Detect free variable `exports`. */

    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */

    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }

      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
  })(_cloneBuffer, _cloneBuffer.exports);

  var root$6 = _root;
  /** Built-in value references. */

  var Uint8Array$2 = root$6.Uint8Array;
  var _Uint8Array = Uint8Array$2;

  var Uint8Array$1 = _Uint8Array;
  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */

  function cloneArrayBuffer$3(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer$3;

  var cloneArrayBuffer$2 = _cloneArrayBuffer;
  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */

  function cloneTypedArray$2(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray$2;

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */

  function copyArray$2(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  var _copyArray = copyArray$2;

  var isObject$8 = isObject_1;
  /** Built-in value references. */

  var objectCreate = Object.create;
  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */

  var baseCreate$1 = function () {
    function object() {}

    return function (proto) {
      if (!isObject$8(proto)) {
        return {};
      }

      if (objectCreate) {
        return objectCreate(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  var _baseCreate = baseCreate$1;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */

  function overArg$2(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg$2;

  var overArg$1 = _overArg;
  /** Built-in value references. */

  var getPrototype$3 = overArg$1(Object.getPrototypeOf, Object);
  var _getPrototype = getPrototype$3;

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */

  function isPrototype$4(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$d;
    return value === proto;
  }

  var _isPrototype = isPrototype$4;

  var baseCreate = _baseCreate,
      getPrototype$2 = _getPrototype,
      isPrototype$3 = _isPrototype;
  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneObject$2(object) {
    return typeof object.constructor == 'function' && !isPrototype$3(object) ? baseCreate(getPrototype$2(object)) : {};
  }

  var _initCloneObject = initCloneObject$2;

  function isObjectLike$d(value) {
    return value != null && _typeof$1(value) == 'object';
  }

  var isObjectLike_1 = isObjectLike$d;

  var baseGetTag$8 = _baseGetTag,
      isObjectLike$c = isObjectLike_1;
  /** `Object#toString` result references. */

  var argsTag$3 = '[object Arguments]';
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */

  function baseIsArguments$1(value) {
    return isObjectLike$c(value) && baseGetTag$8(value) == argsTag$3;
  }

  var _baseIsArguments = baseIsArguments$1;

  var baseIsArguments = _baseIsArguments,
      isObjectLike$b = isObjectLike_1;
  /** Used for built-in method references. */

  var objectProto$c = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$d = objectProto$c.hasOwnProperty;
  /** Built-in value references. */

  var propertyIsEnumerable$1 = objectProto$c.propertyIsEnumerable;
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */

  var isArguments$5 = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike$b(value) && hasOwnProperty$d.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');
  };
  var isArguments_1 = isArguments$5;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$c = Array.isArray;
  var isArray_1 = isArray$c;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$2 = 9007199254740991;
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */

  function isLength$3(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$2;
  }

  var isLength_1 = isLength$3;

  var isFunction$2 = isFunction_1,
      isLength$2 = isLength_1;
  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */

  function isArrayLike$5(value) {
    return value != null && isLength$2(value.length) && !isFunction$2(value);
  }

  var isArrayLike_1 = isArrayLike$5;

  var isArrayLike$4 = isArrayLike_1,
      isObjectLike$a = isObjectLike_1;
  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */

  function isArrayLikeObject$3(value) {
    return isObjectLike$a(value) && isArrayLike$4(value);
  }

  var isArrayLikeObject_1 = isArrayLikeObject$3;

  var isBuffer$5 = {exports: {}};

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */

  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  (function (module, exports) {
    var root = _root,
        stubFalse = stubFalse_1;
    /** Detect free variable `exports`. */

    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? root.Buffer : undefined;
    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */

    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  })(isBuffer$5, isBuffer$5.exports);

  var baseGetTag$7 = _baseGetTag,
      getPrototype$1 = _getPrototype,
      isObjectLike$9 = isObjectLike_1;
  /** `Object#toString` result references. */

  var objectTag$4 = '[object Object]';
  /** Used for built-in method references. */

  var funcProto = Function.prototype,
      objectProto$b = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString = funcProto.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$c = objectProto$b.hasOwnProperty;
  /** Used to infer the `Object` constructor. */

  var objectCtorString = funcToString.call(Object);
  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */

  function isPlainObject$3(value) {
    if (!isObjectLike$9(value) || baseGetTag$7(value) != objectTag$4) {
      return false;
    }

    var proto = getPrototype$1(value);

    if (proto === null) {
      return true;
    }

    var Ctor = hasOwnProperty$c.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  var isPlainObject_1 = isPlainObject$3;

  var baseGetTag$6 = _baseGetTag,
      isLength$1 = isLength_1,
      isObjectLike$8 = isObjectLike_1;
  /** `Object#toString` result references. */

  var argsTag$2 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      boolTag$4 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$3 = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag$6 = '[object Map]',
      numberTag$4 = '[object Number]',
      objectTag$3 = '[object Object]',
      regexpTag$3 = '[object RegExp]',
      setTag$6 = '[object Set]',
      stringTag$4 = '[object String]',
      weakMapTag$2 = '[object WeakMap]';
  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';
  /** Used to identify `toStringTag` values of typed arrays. */

  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false;
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */

  function baseIsTypedArray$1(value) {
    return isObjectLike$8(value) && isLength$1(value.length) && !!typedArrayTags[baseGetTag$6(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray$1;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */

  function baseUnary$5(func) {
    return function (value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary$5;

  var _nodeUtil = {exports: {}};

  (function (module, exports) {
    var freeGlobal = _freeGlobal;
    /** Detect free variable `exports`. */

    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */

    var freeProcess = moduleExports && freeGlobal.process;
    /** Used to access faster Node.js helpers. */

    var nodeUtil = function () {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        } // Legacy `process.binding('util')` for Node.js < 10.


        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    module.exports = nodeUtil;
  })(_nodeUtil, _nodeUtil.exports);

  var baseIsTypedArray = _baseIsTypedArray,
      baseUnary$4 = _baseUnary,
      nodeUtil$2 = _nodeUtil.exports;
  /* Node.js helper references. */

  var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */

  var isTypedArray$4 = nodeIsTypedArray ? baseUnary$4(nodeIsTypedArray) : baseIsTypedArray;
  var isTypedArray_1 = isTypedArray$4;

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

  function safeGet$2(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  var _safeGet = safeGet$2;

  var baseAssignValue$1 = _baseAssignValue,
      eq$3 = eq_1;
  /** Used for built-in method references. */

  var objectProto$a = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$b = objectProto$a.hasOwnProperty;
  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function assignValue$3(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty$b.call(object, key) && eq$3(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue$1(object, key, value);
    }
  }

  var _assignValue = assignValue$3;

  var assignValue$2 = _assignValue,
      baseAssignValue = _baseAssignValue;
  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */

  function copyObject$7(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue$2(object, key, newValue);
      }
    }

    return object;
  }

  var _copyObject = copyObject$7;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */

  function baseTimes$1(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  var _baseTimes = baseTimes$1;

  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  /** Used to detect unsigned integer values. */

  var reIsUint = /^(?:0|[1-9]\d*)$/;
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */

  function isIndex$4(value, length) {
    var type = _typeof$1(value);

    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  var _isIndex = isIndex$4;

  var baseTimes = _baseTimes,
      isArguments$4 = isArguments_1,
      isArray$b = isArray_1,
      isBuffer$4 = isBuffer$5.exports,
      isIndex$3 = _isIndex,
      isTypedArray$3 = isTypedArray_1;
  /** Used for built-in method references. */

  var objectProto$9 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$a = objectProto$9.hasOwnProperty;
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */

  function arrayLikeKeys$2(value, inherited) {
    var isArr = isArray$b(value),
        isArg = !isArr && isArguments$4(value),
        isBuff = !isArr && !isArg && isBuffer$4(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray$3(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$a.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
      isIndex$3(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys$2;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function nativeKeysIn$1(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  var _nativeKeysIn = nativeKeysIn$1;

  var isObject$7 = isObject_1,
      isPrototype$2 = _isPrototype,
      nativeKeysIn = _nativeKeysIn;
  /** Used for built-in method references. */

  var objectProto$8 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$9 = objectProto$8.hasOwnProperty;
  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeysIn$1(object) {
    if (!isObject$7(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype$2(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$9.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeysIn = baseKeysIn$1;

  var arrayLikeKeys$1 = _arrayLikeKeys,
      baseKeysIn = _baseKeysIn,
      isArrayLike$3 = isArrayLike_1;
  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */

  function keysIn$6(object) {
    return isArrayLike$3(object) ? arrayLikeKeys$1(object, true) : baseKeysIn(object);
  }

  var keysIn_1 = keysIn$6;

  var copyObject$6 = _copyObject,
      keysIn$5 = keysIn_1;
  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */

  function toPlainObject$1(value) {
    return copyObject$6(value, keysIn$5(value));
  }

  var toPlainObject_1 = toPlainObject$1;

  var assignMergeValue$1 = _assignMergeValue,
      cloneBuffer$1 = _cloneBuffer.exports,
      cloneTypedArray$1 = _cloneTypedArray,
      copyArray$1 = _copyArray,
      initCloneObject$1 = _initCloneObject,
      isArguments$3 = isArguments_1,
      isArray$a = isArray_1,
      isArrayLikeObject$2 = isArrayLikeObject_1,
      isBuffer$3 = isBuffer$5.exports,
      isFunction$1 = isFunction_1,
      isObject$6 = isObject_1,
      isPlainObject$2 = isPlainObject_1,
      isTypedArray$2 = isTypedArray_1,
      safeGet$1 = _safeGet,
      toPlainObject = toPlainObject_1;
  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */

  function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet$1(object, key),
        srcValue = safeGet$1(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      assignMergeValue$1(object, key, stacked);
      return;
    }

    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray$a(srcValue),
          isBuff = !isArr && isBuffer$3(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray$2(srcValue);
      newValue = srcValue;

      if (isArr || isBuff || isTyped) {
        if (isArray$a(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject$2(objValue)) {
          newValue = copyArray$1(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer$1(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray$1(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject$2(srcValue) || isArguments$3(srcValue)) {
        newValue = objValue;

        if (isArguments$3(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject$6(objValue) || isFunction$1(objValue)) {
          newValue = initCloneObject$1(srcValue);
        }
      } else {
        isCommon = false;
      }
    }

    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }

    assignMergeValue$1(object, key, newValue);
  }

  var _baseMergeDeep = baseMergeDeep$1;

  var Stack$2 = _Stack,
      assignMergeValue = _assignMergeValue,
      baseFor = _baseFor,
      baseMergeDeep = _baseMergeDeep,
      isObject$5 = isObject_1,
      keysIn$4 = keysIn_1,
      safeGet = _safeGet;
  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */

  function baseMerge$2(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }

    baseFor(source, function (srcValue, key) {
      stack || (stack = new Stack$2());

      if (isObject$5(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }

        assignMergeValue(object, key, newValue);
      }
    }, keysIn$4);
  }

  var _baseMerge = baseMerge$2;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */

  function identity$2(value) {
    return value;
  }

  var identity_1 = identity$2;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */

  function apply$2(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  var _apply = apply$2;

  var apply$1 = _apply;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$3 = Math.max;
  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */

  function overRest$2(func, start, transform) {
    start = nativeMax$3(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax$3(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return apply$1(func, this, otherArgs);
    };
  }

  var _overRest = overRest$2;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */

  function constant$1(value) {
    return function () {
      return value;
    };
  }

  var constant_1 = constant$1;

  var constant = constant_1,
      defineProperty$1 = _defineProperty$2,
      identity$1 = identity_1;
  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */

  var baseSetToString$1 = !defineProperty$1 ? identity$1 : function (func, string) {
    return defineProperty$1(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  var _baseSetToString = baseSetToString$1;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeNow = Date.now;
  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */

  function shortOut$1(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut$1;

  var baseSetToString = _baseSetToString,
      shortOut = _shortOut;
  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */

  var setToString$2 = shortOut(baseSetToString);
  var _setToString = setToString$2;

  var identity = identity_1,
      overRest$1 = _overRest,
      setToString$1 = _setToString;
  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */

  function baseRest$4(func, start) {
    return setToString$1(overRest$1(func, start, identity), func + '');
  }

  var _baseRest = baseRest$4;

  var eq$2 = eq_1,
      isArrayLike$2 = isArrayLike_1,
      isIndex$2 = _isIndex,
      isObject$4 = isObject_1;
  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */

  function isIterateeCall$4(value, index, object) {
    if (!isObject$4(object)) {
      return false;
    }

    var type = _typeof$1(index);

    if (type == 'number' ? isArrayLike$2(object) && isIndex$2(index, object.length) : type == 'string' && index in object) {
      return eq$2(object[index], value);
    }

    return false;
  }

  var _isIterateeCall = isIterateeCall$4;

  var baseRest$3 = _baseRest,
      isIterateeCall$3 = _isIterateeCall;
  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */

  function createAssigner$3(assigner) {
    return baseRest$3(function (object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;
      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

      if (guard && isIterateeCall$3(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }

      object = Object(object);

      while (++index < length) {
        var source = sources[index];

        if (source) {
          assigner(object, source, index, customizer);
        }
      }

      return object;
    });
  }

  var _createAssigner = createAssigner$3;

  var baseMerge$1 = _baseMerge,
      createAssigner$2 = _createAssigner;
  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */

  var merge$2 = createAssigner$2(function (object, source, srcIndex) {
    baseMerge$1(object, source, srcIndex);
  });
  var merge_1 = merge$2;

  var zhCN = {
    pagination: {
      itemsPerPage: "{size} \u6761/\u9875",
      jumpTo: "\u8DF3\u81F3",
      page: "\u9875",
      total: "\u5171 {total} \u9879\u6570\u636E"
    },
    cascader: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    calendar: {
      yearSelection: "{year} \u5E74",
      monthSelection: "{month} \u6708",
      yearRadio: "\u5E74",
      monthRadio: "\u6708",
      hideWeekend: "\u9690\u85CF\u5468\u672B",
      showWeekend: "\u663E\u793A\u5468\u672B",
      today: "\u4ECA\u5929",
      thisMonth: "\u672C\u6708",
      week: "\u4E00,\u4E8C,\u4E09,\u56DB,\u4E94,\u516D,\u65E5",
      cellMonth: "\u4E00\u6708,\u4E8C\u6708,\u4E09\u6708,\u56DB\u6708,\u4E94\u6708,\u516D\u6708,\u4E03\u6708,\u516B\u6708,\u4E5D\u6708,\u5341\u6708,\u5341\u4E00\u6708,\u5341\u4E8C\u6708"
    },
    transfer: {
      title: "{checked} / {total} \u9879",
      empty: "\u6682\u65E0\u6570\u636E",
      placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22"
    },
    timePicker: {
      now: "\u6B64\u523B",
      confirm: "\u786E\u5B9A",
      anteMeridiem: "\u4E0A\u5348",
      postMeridiem: "\u4E0B\u5348",
      placeholder: "\u9009\u62E9\u65F6\u95F4"
    },
    dialog: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    drawer: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    popconfirm: {
      confirm: {
        content: "\u786E\u5B9A"
      },
      cancel: {
        content: "\u53D6\u6D88"
      }
    },
    table: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A",
      filterInputPlaceholder: "\u8BF7\u8F93\u5165\u5185\u5BB9\uFF08\u65E0\u9ED8\u8BA4\u503C\uFF09",
      sortAscendingOperationText: "\u70B9\u51FB\u5347\u5E8F",
      sortCancelOperationText: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F",
      sortDescendingOperationText: "\u70B9\u51FB\u964D\u5E8F",
      clearFilterResultButtonText: "\u6E05\u7A7A\u7B5B\u9009",
      columnConfigButtonText: "\u5217\u914D\u7F6E",
      columnConfigTitleText: "\u8868\u683C\u5217\u914D\u7F6E",
      columnConfigDescriptionText: "\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217",
      confirmText: "\u786E\u8BA4",
      cancelText: "\u53D6\u6D88",
      resetText: "\u91CD\u7F6E",
      selectAllText: "\u5168\u9009",
      searchResultText: "\u641C\u7D22\u201C{result}\u201D\uFF0C\u627E\u5230 {count} \u6761\u7ED3\u679C"
    },
    select: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    tree: {
      empty: "\u6682\u65E0\u6570\u636E"
    },
    treeSelect: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    datePicker: {
      placeholder: {
        date: "\u8BF7\u9009\u62E9\u65E5\u671F",
        month: "\u8BF7\u9009\u62E9\u6708\u4EFD",
        year: "\u8BF7\u9009\u62E9\u5E74\u4EFD"
      },
      weekdays: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
      months: ["1 \u6708", "2 \u6708", "3 \u6708", "4 \u6708", "5 \u6708", "6 \u6708", "7 \u6708", "8 \u6708", "9 \u6708", "10 \u6708", "11 \u6708", "12 \u6708"],
      quarters: ["\u4E00\u5B63\u5EA6", "\u4E8C\u5B63\u5EA6", "\u4E09\u5B63\u5EA6", "\u56DB\u5B63\u5EA6"],
      rangeSeparator: " - ",
      direction: "ltr",
      format: "YYYY-MM-DD",
      dayAriaLabel: "\u65E5",
      weekAbbreviation: "\u5468",
      yearAriaLabel: "\u5E74",
      monthAriaLabel: "\u6708",
      confirm: "\u786E\u5B9A",
      selectTime: "\u9009\u62E9\u65F6\u95F4",
      selectDate: "\u9009\u62E9\u65E5\u671F",
      nextYear: "\u4E0B\u4E00\u5E74",
      preYear: "\u4E0A\u4E00\u5E74",
      nextMonth: "\u4E0B\u4E2A\u6708",
      preMonth: "\u4E0A\u4E2A\u6708",
      preDecade: "\u4E0A\u4E2A\u5341\u5E74",
      nextDecade: "\u4E0B\u4E2A\u5341\u5E74",
      now: "\u5F53\u524D"
    },
    upload: {
      sizeLimitMessage: "\u6587\u4EF6\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7 {sizeLimit}",
      cancelUploadText: "\u53D6\u6D88\u4E0A\u4F20",
      triggerUploadText: {
        fileInput: "\u9009\u62E9\u6587\u4EF6",
        image: "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247",
        normal: "\u70B9\u51FB\u4E0A\u4F20",
        reupload: "\u91CD\u65B0\u9009\u62E9",
        continueUpload: "\u7EE7\u7EED\u9009\u62E9",
        "delete": "\u5220\u9664",
        uploading: "\u4E0A\u4F20\u4E2D"
      },
      dragger: {
        dragDropText: "\u91CA\u653E\u9F20\u6807",
        draggingText: "\u62D6\u62FD\u5230\u6B64\u533A\u57DF",
        clickAndDragText: "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF"
      },
      file: {
        fileNameText: "\u6587\u4EF6\u540D",
        fileSizeText: "\u6587\u4EF6\u5927\u5C0F",
        fileStatusText: "\u72B6\u6001",
        fileOperationText: "\u64CD\u4F5C",
        fileOperationDateText: "\u4E0A\u4F20\u65E5\u671F"
      },
      progress: {
        uploadingText: "\u4E0A\u4F20\u4E2D",
        waitingText: "\u5F85\u4E0A\u4F20",
        failText: "\u4E0A\u4F20\u5931\u8D25",
        successText: "\u4E0A\u4F20\u6210\u529F"
      }
    },
    form: {
      errorMessage: {
        date: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        url: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        required: "${name}\u5FC5\u586B",
        max: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7 ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        min: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        len: "${name}\u5B57\u7B26\u957F\u5EA6\u5FC5\u987B\u662F ${validate}",
        "enum": "${name}\u53EA\u80FD\u662F${validate}\u7B49",
        idcard: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        telnumber: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        pattern: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        validator: "${name}\u4E0D\u7B26\u5408\u8981\u6C42",
        "boolean": "${name}\u6570\u636E\u7C7B\u578B\u5FC5\u987B\u662F\u5E03\u5C14\u7C7B\u578B",
        number: "${name}\u5FC5\u987B\u662F\u6570\u5B57"
      }
    },
    input: {
      placeholder: "\u8BF7\u8F93\u5165"
    },
    list: {
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u7B49",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"
    },
    alert: {
      expandText: "\u5C55\u5F00\u66F4\u591A",
      collapseText: "\u6536\u8D77"
    },
    anchor: {
      copySuccessText: "\u94FE\u63A5\u590D\u5236\u6210\u529F",
      copyText: "\u590D\u5236\u94FE\u63A5"
    },
    colorPicker: {
      swatchColorTitle: "\u7CFB\u7EDF\u9884\u8BBE\u989C\u8272",
      recentColorTitle: "\u6700\u8FD1\u4F7F\u7528\u989C\u8272",
      clearConfirmText: "\u786E\u5B9A\u6E05\u7A7A\u6700\u8FD1\u4F7F\u7528\u7684\u989C\u8272\u5417\uFF1F"
    }
  };

  var defaultConfig = {
    classPrefix: "t",
    animation: {
      include: ["ripple", "expand", "fade"],
      exclude: []
    },
    calendar: {
      firstDayOfWeek: 1,
      fillWithZero: true,
      controllerConfig: void 0
    },
    icon: {},
    input: {
      autocomplete: ""
    },
    dialog: {
      closeOnEscKeydown: true,
      closeOnOverlayClick: true,
      confirmBtnTheme: {
        "default": "primary",
        info: "primary",
        warning: "primary",
        danger: "primary",
        success: "primary"
      }
    },
    popconfirm: {
      confirmBtnTheme: {
        "default": "primary",
        warning: "primary",
        danger: "primary"
      }
    },
    table: {
      expandIcon: void 0,
      sortIcon: void 0,
      filterIcon: void 0,
      treeExpandAndFoldIcon: void 0,
      hideSortTips: false
    },
    select: {
      clearIcon: void 0,
      filterable: false
    },
    drawer: {
      closeOnEscKeydown: true,
      closeOnOverlayClick: true,
      size: "small"
    },
    tree: {
      folderIcon: void 0
    },
    datePicker: {
      firstDayOfWeek: 1
    },
    steps: {
      errorIcon: void 0
    },
    tag: {
      closeIcon: void 0
    },
    form: {
      requiredMark: true
    }
  };

  function ownKeys$3b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var EAnimationType = /* @__PURE__ */function (EAnimationType2) {
    EAnimationType2["ripple"] = "ripple";
    EAnimationType2["expand"] = "expand";
    EAnimationType2["fade"] = "fade";
    return EAnimationType2;
  }(EAnimationType || {});
  var defaultClassPrefix = "t";
  var defaultAnimation = {
    include: ["ripple"
    /* ripple */
    , "expand"
    /* expand */
    , "fade"
    /* fade */
    ],
    exclude: []
  };
  var defaultGlobalConfig = _objectSpread$3a({
    animation: defaultAnimation,
    classPrefix: defaultClassPrefix
  }, merge_1(zhCN, defaultConfig));
  var defaultContext = {
    globalConfig: defaultGlobalConfig
  };
  var ConfigContext$1 = /*#__PURE__*/React.createContext(defaultContext);

  var useConfig$1 = (function () {
    return React.useContext(ConfigContext$1).globalConfig;
  });

  var _excluded$C = ["width", "className", "style", "children"];

  function ownKeys$3a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$39(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Aside = function Aside(props) {
    var width = props.width,
        className = props.className,
        style = props.style,
        children = props.children,
        otherAsideProps = _objectWithoutProperties$2(props, _excluded$C);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var asideClassNames = classNames$1("".concat(classPrefix, "-layout__sider"), className);
    var asideWidth = isNaN(Number(width)) ? width : "".concat(width, "px");

    var asideStyle = _objectSpread$39({
      width: asideWidth,
      maxWidth: asideWidth,
      minWidth: asideWidth,
      flex: "0 0 ".concat(asideWidth)
    }, style);

    return /* @__PURE__ */React__default["default"].createElement("aside", _objectSpread$39({
      className: asideClassNames,
      style: asideStyle
    }, otherAsideProps), children);
  };

  Aside.defaultProps = {
    width: 232
  };
  Aside.displayName = "Aside";

  var _excluded$B = ["className", "style", "children", "height"],
      _excluded2$1 = ["className", "style", "children", "height"],
      _excluded3 = ["className", "style", "children"],
      _excluded4 = ["direction", "className", "style", "children"];

  function ownKeys$39(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$38(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$39(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$39(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Header$1 = function Header(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var className = props.className,
        _props$style = props.style,
        style = _props$style === void 0 ? {} : _props$style,
        children = props.children,
        height = props.height,
        others = _objectWithoutProperties$2(props, _excluded$B);

    var renderHeight = isNaN(Number(height)) ? height : "".concat(height, "px");
    var headerClassNames = classNames$1("".concat(classPrefix, "-layout__header"), className);
    return /* @__PURE__ */React__default["default"].createElement("header", _objectSpread$38({
      className: headerClassNames,
      style: _objectSpread$38({
        height: renderHeight
      }, style)
    }, others), children);
  };

  var Footer = function Footer(props) {
    var _useConfig2 = useConfig$1(),
        classPrefix = _useConfig2.classPrefix;

    var className = props.className,
        _props$style2 = props.style,
        style = _props$style2 === void 0 ? {} : _props$style2,
        children = props.children,
        height = props.height,
        others = _objectWithoutProperties$2(props, _excluded2$1);

    var renderHeight = isNaN(Number(height)) ? height : "".concat(height, "px");
    var footerClassNames = classNames$1("".concat(classPrefix, "-layout__footer"), className);
    return /* @__PURE__ */React__default["default"].createElement("footer", _objectSpread$38({
      className: footerClassNames,
      style: _objectSpread$38({
        height: renderHeight
      }, style)
    }, others), children);
  };

  var Content = function Content(props) {
    var _useConfig3 = useConfig$1(),
        classPrefix = _useConfig3.classPrefix;

    var className = props.className,
        style = props.style,
        children = props.children,
        others = _objectWithoutProperties$2(props, _excluded3);

    var contentClassNames = classNames$1("".concat(classPrefix, "-layout__content"), className);
    return /* @__PURE__ */React__default["default"].createElement("main", _objectSpread$38({
      className: contentClassNames,
      style: style
    }, others), children);
  };

  var Layout$1 = function Layout(props) {
    var _classNames;

    var direction = props.direction,
        className = props.className,
        style = props.style,
        children = props.children,
        otherLayoutProps = _objectWithoutProperties$2(props, _excluded4);

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        asides = _useState2[0],
        setAsides = _useState2[1];

    React.useEffect(function () {
      React__default["default"].Children.forEach(children, function (child) {
        if (!child || _typeof$1(child) !== "object") return;
        if (child.type === Aside) setAsides([child]);
      });
    }, [children]);

    var _useConfig4 = useConfig$1(),
        classPrefix = _useConfig4.classPrefix;

    var layoutClassNames = classNames$1("".concat(classPrefix, "-layout"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-layout--with-sider"), !!asides.length), _defineProperty$3(_classNames, "".concat(classPrefix, "-layout__direction-").concat(direction), direction), _classNames), className);
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$38({
      className: layoutClassNames,
      style: style
    }, otherLayoutProps), children);
  };

  Layout$1.Header = Header$1;
  Layout$1.Content = Content;
  Layout$1.Footer = Footer;
  Layout$1.Aside = Aside;
  Header$1.displayName = "Header";
  Content.displayName = "Content";
  Footer.displayName = "Footer";
  Layout$1.displayName = "Layout";

  var Layout = Layout$1;

  var raf$2 = {exports: {}};

  var performanceNow = {exports: {}};

  (function () {
    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

    if (typeof performance !== "undefined" && performance !== null && performance.now) {
      performanceNow.exports = function () {
        return performance.now();
      };
    } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
      performanceNow.exports = function () {
        return (getNanoSeconds() - nodeLoadTime) / 1e6;
      };

      hrtime = process.hrtime;

      getNanoSeconds = function getNanoSeconds() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };

      moduleLoadTime = getNanoSeconds();
      upTime = process.uptime() * 1e9;
      nodeLoadTime = moduleLoadTime - upTime;
    } else if (Date.now) {
      performanceNow.exports = function () {
        return Date.now() - loadTime;
      };

      loadTime = Date.now();
    } else {
      performanceNow.exports = function () {
        return new Date().getTime() - loadTime;
      };

      loadTime = new Date().getTime();
    }
  }).call(commonjsGlobal);

  var now$2 = performanceNow.exports,
      root$5 = typeof window === 'undefined' ? commonjsGlobal : window,
      vendors = ['moz', 'webkit'],
      suffix = 'AnimationFrame',
      raf = root$5['request' + suffix],
      caf = root$5['cancel' + suffix] || root$5['cancelRequest' + suffix];

  for (var i = 0; !raf && i < vendors.length; i++) {
    raf = root$5[vendors[i] + 'Request' + suffix];
    caf = root$5[vendors[i] + 'Cancel' + suffix] || root$5[vendors[i] + 'CancelRequest' + suffix];
  } // Some versions of FF have rAF but not cAF


  if (!raf || !caf) {
    var last$2 = 0,
        id = 0,
        queue = [],
        frameDuration = 1000 / 60;

    raf = function raf(callback) {
      if (queue.length === 0) {
        var _now = now$2(),
            next = Math.max(0, frameDuration - (_now - last$2));

        last$2 = next + _now;
        setTimeout(function () {
          var cp = queue.slice(0); // Clear queue here to prevent
          // callbacks from appending listeners
          // to the current frame's queue

          queue.length = 0;

          for (var i = 0; i < cp.length; i++) {
            if (!cp[i].cancelled) {
              try {
                cp[i].callback(last$2);
              } catch (e) {
                setTimeout(function () {
                  throw e;
                }, 0);
              }
            }
          }
        }, Math.round(next));
      }

      queue.push({
        handle: ++id,
        callback: callback,
        cancelled: false
      });
      return id;
    };

    caf = function caf(handle) {
      for (var i = 0; i < queue.length; i++) {
        if (queue[i].handle === handle) {
          queue[i].cancelled = true;
        }
      }
    };
  }

  raf$2.exports = function (fn) {
    // Wrap in a new function to prevent
    // `cancel` potentially being assigned
    // to the native rAF function
    return raf.call(root$5, fn);
  };

  raf$2.exports.cancel = function () {
    caf.apply(root$5, arguments);
  };

  raf$2.exports.polyfill = function (object) {
    if (!object) {
      object = root$5;
    }

    object.requestAnimationFrame = raf;
    object.cancelAnimationFrame = caf;
  };

  var raf$1 = raf$2.exports;

  var baseGetTag$5 = _baseGetTag,
      isArray$9 = isArray_1,
      isObjectLike$7 = isObjectLike_1;
  /** `Object#toString` result references. */

  var stringTag$3 = '[object String]';
  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */

  function isString(value) {
    return typeof value == 'string' || !isArray$9(value) && isObjectLike$7(value) && baseGetTag$5(value) == stringTag$3;
  }

  var isString_1 = isString;

  var easeInOutCubic = function easeInOutCubic(current, start, end, duration) {
    var change = (end - start) / 2;
    var time = current / (duration / 2);

    if (time < 1) {
      return change * time * time * time + start;
    }

    time -= 2;
    return change * (time * time * time + 2) + start;
  };

  var canUseDocument = !!(typeof window !== "undefined" && window.document && window.document.createElement);

  var trim = function trim(str) {
    return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
  };

  var on$1 = function () {
    if (canUseDocument && document.addEventListener) {
      return function (element, event, handler) {
        if (element && event && handler) {
          element.addEventListener(event, handler, false);
        }
      };
    }

    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent("on".concat(event), handler);
      }
    };
  }();
  var off$1 = function () {
    if (canUseDocument && document.removeEventListener) {
      return function (element, event, handler) {
        if (element && event) {
          element.removeEventListener(event, handler, false);
        }
      };
    }

    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent("on".concat(event), handler);
      }
    };
  }();
  function hasClass$1(el, cls) {
    if (!el || !cls) return false;
    if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");

    if (el.classList) {
      return el.classList.contains(cls);
    }

    return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
  }
  var addClass$1 = function addClass(el, cls) {
    if (!el) return;
    var curClass = el.className;
    var classes = (cls || "").split(" ");

    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;

      if (el.classList) {
        el.classList.add(clsName);
      } else if (!hasClass$1(el, clsName)) {
        curClass += " ".concat(clsName);
      }
    }

    if (!el.classList) {
      el.className = curClass;
    }
  };
  var removeClass$2 = function removeClass(el, cls) {
    if (!el || !cls) return;
    var classes = cls.split(" ");
    var curClass = " ".concat(el.className, " ");

    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;

      if (el.classList) {
        el.classList.remove(clsName);
      } else if (hasClass$1(el, clsName)) {
        curClass = curClass.replace(" ".concat(clsName, " "), " ");
      }
    }

    if (!el.classList) {
      el.className = trim(curClass);
    }
  };
  var getScrollContainer = function getScrollContainer() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "body";

    if (isString_1(container)) {
      return container ? document.querySelector(container) : window;
    }

    if (typeof container === "function") {
      return container();
    }

    return container;
  };
  var isNodeOverflow = function isNodeOverflow(ele) {
    var _ele$clientWidth = ele.clientWidth,
        clientWidth = _ele$clientWidth === void 0 ? 0 : _ele$clientWidth,
        _ele$scrollWidth = ele.scrollWidth,
        scrollWidth = _ele$scrollWidth === void 0 ? 0 : _ele$scrollWidth;

    if (scrollWidth > clientWidth) {
      return true;
    }

    return false;
  };
  var getAttach$1 = function getAttach(node) {
    var attachNode = typeof node === "function" ? node() : node;

    if (!attachNode) {
      return document.body;
    }

    if (isString_1(attachNode)) {
      return document.querySelector(attachNode);
    }

    if (attachNode instanceof HTMLElement) {
      return attachNode;
    }

    return document.body;
  };
  var getCssVarsValue = function getCssVarsValue(name, element) {
    if (!canUseDocument) return;
    var el = element || document.documentElement;
    return getComputedStyle(el).getPropertyValue(name);
  };

  var rowDefaultProps = {
    align: "top",
    gutter: 0,
    justify: "start",
    tag: "div"
  };
  var colDefaultProps = {
    offset: 0,
    order: 0,
    pull: 0,
    push: 0,
    tag: "div"
  };

  var _excluded$A = ["align", "gutter", "justify", "tag", "style", "className", "children"];

  function ownKeys$38(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$37(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$38(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$38(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var calcSize = function calcSize(width) {
    var smWidth = getCssVarsValue("--td-screen-sm") || 768;
    var mdWidth = getCssVarsValue("--td-screen-md") || 992;
    var lgWidth = getCssVarsValue("--td-screen-lg") || 1200;
    var xlWidth = getCssVarsValue("--td-screen-xl") || 1400;
    var xxlWidth = getCssVarsValue("--td-screen-xxl") || 1880;
    var size = "xs";

    if (width >= xxlWidth) {
      size = "xxl";
    } else if (width >= xlWidth) {
      size = "xl";
    } else if (width >= lgWidth) {
      size = "lg";
    } else if (width >= mdWidth) {
      size = "md";
    } else if (width >= smWidth) {
      size = "sm";
    } else {
      size = "xs";
    }

    return size;
  };

  var calcRowStyle = function calcRowStyle(gutter, currentSize) {
    var rowStyle = {};

    if (typeof gutter === "number") {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter / -2, "px"),
        marginRight: "".concat(gutter / -2, "px")
      });
    } else if (Array.isArray(gutter) && gutter.length) {
      if (typeof gutter[0] === "number") {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[0] / -2, "px"),
          marginRight: "".concat(gutter[0] / -2, "px")
        });
      }

      if (typeof gutter[1] === "number") {
        Object.assign(rowStyle, {
          rowGap: "".concat(gutter[1], "px")
        });
      }

      if (isObject_1(gutter[0]) && gutter[0][currentSize] !== void 0) {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[0][currentSize] / -2, "px"),
          marginRight: "".concat(gutter[0][currentSize] / -2, "px")
        });
      }

      if (isObject_1(gutter[1]) && gutter[1][currentSize] !== void 0) {
        Object.assign(rowStyle, {
          rowGap: "".concat(gutter[1][currentSize], "px")
        });
      }
    } else if (isObject_1(gutter) && gutter[currentSize]) {
      if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[currentSize][0] / -2, "px"),
          marginRight: "".concat(gutter[currentSize][0] / -2, "px")
        });
        Object.assign(rowStyle, {
          rowGap: "".concat(gutter[currentSize][1], "px")
        });
      } else {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[currentSize] / -2, "px"),
          marginRight: "".concat(gutter[currentSize] / -2, "px")
        });
      }
    }

    return rowStyle;
  };

  var RowContext = /*#__PURE__*/React.createContext({
    gutter: void 0,
    size: void 0
  });
  var Row$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var align = props.align,
        gutter = props.gutter,
        justify = props.justify,
        tag = props.tag,
        propStyle = props.style,
        className = props.className,
        children = props.children,
        otherRowProps = _objectWithoutProperties$2(props, _excluded$A);

    var _useState = React.useState(canUseDocument ? calcSize(window.innerWidth) : "md"),
        _useState2 = _slicedToArray(_useState, 2),
        size = _useState2[0],
        setSize = _useState2[1];

    var updateSize = function updateSize() {
      var currentSize = calcSize(window.innerWidth);

      if (currentSize !== size) {
        setSize(size);
      }
    };

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var rowClassNames = classNames$1("".concat(classPrefix, "-row"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-row--").concat(justify), true), _defineProperty$3(_classNames, "".concat(classPrefix, "-row--").concat(align), true), _classNames));

    var rowStyle = _objectSpread$37(_objectSpread$37({}, calcRowStyle(gutter, size)), propStyle);

    React.useEffect(function () {
      window.addEventListener("resize", updateSize);
      return function () {
        window.removeEventListener("resize", updateSize);
      };
    });
    return /*#__PURE__*/React__default["default"].createElement(tag, _objectSpread$37({
      ref: ref,
      className: rowClassNames,
      style: rowStyle
    }, otherRowProps), /* @__PURE__ */React__default["default"].createElement(RowContext.Provider, {
      value: {
        gutter: gutter,
        size: size
      }
    }, children));
  });
  Row$1.displayName = "Row";
  Row$1.defaultProps = rowDefaultProps;

  var _excluded$z = ["flex", "offset", "order", "pull", "push", "span", "tag", "className", "children", "style"];

  function ownKeys$37(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$36(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$37(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$37(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var calcColPadding = function calcColPadding(gutter, currentSize) {
    var paddingObj = {};

    if (typeof gutter === "number") {
      Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter / 2, "px"),
        paddingRight: "".concat(gutter / 2, "px")
      });
    } else if (Array.isArray(gutter) && gutter.length) {
      if (typeof gutter[0] === "number") {
        Object.assign(paddingObj, {
          paddingLeft: "".concat(gutter[0] / 2, "px"),
          paddingRight: "".concat(gutter[0] / 2, "px")
        });
      }

      if (isObject_1(gutter[0]) && gutter[0][currentSize]) {
        Object.assign(paddingObj, {
          paddingLeft: "".concat(gutter[0][currentSize] / 2, "px"),
          paddingRight: "".concat(gutter[0][currentSize] / 2, "px")
        });
      }
    } else if (isObject_1(gutter) && gutter[currentSize]) {
      Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter[currentSize] / 2, "px"),
        paddingRight: "".concat(gutter[currentSize] / 2, "px")
      });
    }

    return paddingObj;
  };

  var parseFlex = function parseFlex(flex) {
    if (typeof flex === "number") {
      return "".concat(flex, " ").concat(flex, " auto");
    }

    if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
      return "0 0 ".concat(flex);
    }

    return flex;
  };

  var Col$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var flex = props.flex,
        offset = props.offset,
        order = props.order,
        pull = props.pull,
        push = props.push,
        span = props.span,
        tag = props.tag,
        className = props.className,
        children = props.children,
        propStyle = props.style,
        otherColProps = _objectWithoutProperties$2(props, _excluded$z);

    var _useContext = React.useContext(RowContext),
        rowGutter = _useContext.gutter,
        rowSize = _useContext.size;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
    var sizeClasses = allSizes.reduce(function (acc, currSize) {
      var _objectSpread2;

      var sizeProp = props[currSize];
      var sizeObj = {};

      if (typeof sizeProp === "number") {
        sizeObj.span = sizeProp;
      } else if (isObject_1(sizeProp)) {
        sizeObj = sizeProp || {};
      }

      return _objectSpread$36(_objectSpread$36({}, acc), {}, (_objectSpread2 = {}, _defineProperty$3(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-").concat(sizeObj.span), sizeObj.span !== void 0), _defineProperty$3(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-order-").concat(sizeObj.order), parseInt(sizeObj.order, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-offset-").concat(sizeObj.offset), parseInt(sizeObj.offset, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-push-").concat(sizeObj.push), parseInt(sizeObj.push, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-pull-").concat(sizeObj.pull), parseInt(sizeObj.pull, 10) >= 0), _objectSpread2));
    }, {});
    var colClassNames = classNames$1("".concat(classPrefix, "-col"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-col-").concat(span), span !== void 0), _defineProperty$3(_classNames, "".concat(classPrefix, "-col-offset-").concat(offset), parseInt(offset, 10) >= 0), _defineProperty$3(_classNames, "".concat(classPrefix, "-col-pull-").concat(pull), parseInt(pull, 10) >= 0), _defineProperty$3(_classNames, "".concat(classPrefix, "-col-push-").concat(push), parseInt(push, 10) >= 0), _defineProperty$3(_classNames, "".concat(classPrefix, "-col-order-").concat(order), parseInt(order, 10) >= 0), _classNames), sizeClasses);

    var colStyle = _objectSpread$36(_objectSpread$36({}, calcColPadding(rowGutter, rowSize)), propStyle);

    flex && (colStyle.flex = parseFlex(flex));
    return /*#__PURE__*/React__default["default"].createElement(tag, _objectSpread$36({
      ref: ref,
      className: colClassNames,
      style: colStyle
    }, otherColProps), children);
  });
  Col$1.displayName = "Col";
  Col$1.defaultProps = colDefaultProps;

  var Row = Row$1;
  var Col = Col$1;

  function getAttach(attach) {
    if (!canUseDocument) return null;
    var parent;

    if (typeof attach === "string") {
      parent = document.querySelector(attach);
    }

    if (typeof attach === "function") {
      parent = attach();
    }

    if (_typeof$1(attach) === "object" && attach instanceof window.HTMLElement) {
      parent = attach;
    }

    return parent || document.body;
  }
  var Portal = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var attach = props.attach,
        children = props.children,
        triggerNode = props.triggerNode;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var container = React.useMemo(function () {
      if (!canUseDocument) return null;
      var el = document.createElement("div");
      el.className = "".concat(classPrefix, "-portal-wrapper");
      return el;
    }, [classPrefix]);
    React.useEffect(function () {
      var parentElement = document.body;
      var el = null;

      if (typeof attach === "function") {
        el = attach(triggerNode);
      } else if (typeof attach === "string") {
        el = document.querySelector(attach);
      }

      if (el && el.nodeType === 1) {
        parentElement = el;
      }

      parentElement.appendChild(container);
      return function () {
        var _parentElement;

        (_parentElement = parentElement) === null || _parentElement === void 0 ? void 0 : _parentElement.removeChild(container);
      };
    }, [container, attach, triggerNode]);
    React.useImperativeHandle(ref, function () {
      return container;
    });
    return canUseDocument ? /*#__PURE__*/ReactDOM.createPortal(children, container) : null;
  });
  Portal.displayName = "Portal";

  function setStyle$1(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$2(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread();
  }

  function getIEVersion() {
    var _navigator = navigator,
        userAgent = _navigator.userAgent;
    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1;
    var isIE11 = userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv:11.0") > -1;

    if (isIE) {
      var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
      var match = userAgent.match(reIE);
      if (!match) return -1;
      var fIEVersion = parseFloat(match[1]);
      return fIEVersion < 7 ? 6 : fIEVersion;
    }

    if (isIE11) {
      return 11;
    }

    return Number.MAX_SAFE_INTEGER;
  }
  function getCharacterLength(str, maxCharacter) {
    var hasMaxCharacter = typeof maxCharacter === "number";

    if (!str || str.length === 0) {
      if (hasMaxCharacter) {
        return {
          length: 0,
          characters: str
        };
      }

      return 0;
    }

    var len = 0;

    for (var i = 0; i < str.length; i++) {
      var currentStringLength = 0;

      if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {
        currentStringLength = 2;
      } else {
        currentStringLength = 1;
      }

      if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
        return {
          length: len,
          characters: str.slice(0, i)
        };
      }

      len += currentStringLength;
    }

    if (hasMaxCharacter) {
      return {
        length: len,
        characters: str
      };
    }

    return len;
  }
  function getUnicodeLength(str) {
    return _toConsumableArray(str !== null && str !== void 0 ? str : "").length;
  }
  function limitUnicodeMaxLength(str, maxLength) {
    return _toConsumableArray(str !== null && str !== void 0 ? str : "").slice(0, maxLength).join("");
  }
  var DOM_STYLE_PROPS = ["padding-top", "padding-bottom", "padding-left", "padding-right", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "border-width", "box-sizing", "line-height", "letter-spacing"];
  function calculateNodeSize(targetElement) {
    var style = window.getComputedStyle(targetElement);
    var boxSizing = style.getPropertyValue("box-sizing") || style.getPropertyValue("-moz-box-sizing") || style.getPropertyValue("-webkit-box-sizing");
    var paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));
    var borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));
    var sizingStyle = DOM_STYLE_PROPS.map(function (name) {
      return "".concat(name, ":").concat(style.getPropertyValue(name));
    }).join(";");
    return {
      paddingSize: paddingSize,
      borderSize: borderSize,
      boxSizing: boxSizing,
      sizingStyle: sizingStyle
    };
  }

  function ownKeys$36(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$35(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$36(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$36(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function circleAdapter(circleElem) {
    var _window, _window$getComputedSt2, _window2, _window2$navigator;

    var basicStyle = {};

    if (!circleElem) {
      return;
    }

    var _window$getComputedSt = (_window = window) === null || _window === void 0 ? void 0 : (_window$getComputedSt2 = _window.getComputedStyle) === null || _window$getComputedSt2 === void 0 ? void 0 : _window$getComputedSt2.call(_window, circleElem),
        color = _window$getComputedSt.color,
        fontSize = _window$getComputedSt.fontSize;

    var ua = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$navigator = _window2.navigator) === null || _window2$navigator === void 0 ? void 0 : _window2$navigator.userAgent;
    var isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);
    var isIosWechat = /(?=.*iPhone)[?=.*MicroMessenger]/.test(ua) && !/Chrome/.test(ua);

    if (isSafari || isIosWechat) {
      basicStyle = {
        transformOrigin: "-1px -1px",
        transform: "scale(".concat(parseInt(fontSize, 10) / 14, ")")
      };
    }

    if (color && getIEVersion() > 11) {
      var matched = color.match(/[\d.]+/g);
      var endColor = matched ? "rgba(".concat(matched[0], ", ").concat(matched[1], ", ").concat(matched[2], ", 0)") : "";
      setStyle$1(circleElem, _objectSpread$35(_objectSpread$35({}, basicStyle), {}, {
        background: "conic-gradient(from 90deg at 50% 50%,".concat(endColor, " 0deg, ").concat(color, " 360deg)")
      }));
    } else {
      setStyle$1(circleElem, _objectSpread$35(_objectSpread$35({}, basicStyle), {}, {
        background: ""
      }));
    }
  }

  var GradientLoading = function GradientLoading() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var conicRef = React.useRef();
    var gradientClass = "".concat(classPrefix, "-loading__gradient");
    React.useEffect(function () {
      var el = conicRef === null || conicRef === void 0 ? void 0 : conicRef.current;
      circleAdapter(el);
    }, []);
    return /* @__PURE__ */React__default["default"].createElement("svg", {
      className: classNames$1(gradientClass, "".concat(classPrefix, "-icon-loading")),
      viewBox: "0 0 14 14",
      version: "1.1",
      width: "1em",
      height: "1em",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("foreignObject", {
      x: "1",
      y: "1",
      width: "12",
      height: "12"
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(gradientClass, "-conic"),
      ref: conicRef
    })));
  };

  var loadingDefaultProps = {
    delay: 0,
    fullscreen: false,
    indicator: true,
    inheritColor: false,
    loading: true,
    preventScrollThrough: true,
    showOverlay: true,
    size: "medium"
  };

  function ownKeys$35(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$34(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$35(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$35(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Loading$1 = function Loading(props) {
    var attach = props.attach,
        indicator = props.indicator,
        text = props.text,
        loading = props.loading,
        size = props.size,
        delay = props.delay,
        fullscreen = props.fullscreen,
        preventScrollThrough = props.preventScrollThrough,
        showOverlay = props.showOverlay,
        content = props.content,
        children = props.children,
        inheritColor = props.inheritColor,
        zIndex = props.zIndex,
        className = props.className,
        style = props.style;

    var _useState = React.useState(delay ? false : loading),
        _useState2 = _slicedToArray(_useState, 2),
        showLoading = _useState2[0],
        setShowLoading = _useState2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-loading");
    var centerClass = "".concat(classPrefix, "-loading--center");
    var inheritColorClass = "".concat(classPrefix, "-loading--inherit-color");
    var fullClass = "".concat(classPrefix, "-loading--full");
    var fullscreenClass = "".concat(classPrefix, "-loading__fullscreen");
    var lockClass = "".concat(classPrefix, "-loading--lock");
    var overlayClass = "".concat(classPrefix, "-loading__overlay");
    var relativeClass = "".concat(classPrefix, "-loading__parent");
    var textClass = "".concat(classPrefix, "-loading__text");
    React.useEffect(function () {
      var timer;

      if (delay && loading) {
        timer = setTimeout(function () {
          setShowLoading(loading);
        }, delay);
      } else {
        setShowLoading(loading);
      }

      return function () {
        clearTimeout(timer);
      };
    }, [delay, loading]);
    var calcStyles = React.useMemo(function () {
      var styles = {};

      if (zIndex !== void 0) {
        styles.zIndex = zIndex;
      }

      if (!["small", "medium", "large"].includes(size)) {
        styles.fontSize = size;
      }

      return style ? _objectSpread$34(_objectSpread$34({}, styles), style) : styles;
    }, [size, zIndex, style]);
    var sizeMap = {
      large: "".concat(classPrefix, "-size-l"),
      small: "".concat(classPrefix, "-size-s"),
      medium: "".concat(classPrefix, "-size-m")
    };
    var baseClasses = classNames$1(centerClass, sizeMap[size], _defineProperty$3({}, inheritColorClass, inheritColor), className);
    React.useEffect(function () {
      if (preventScrollThrough && fullscreen && canUseDocument && loading) {
        addClass$1(document.body, lockClass);
      }

      return function () {
        removeClass$2(document.body, lockClass);
      };
    }, [loading, preventScrollThrough, fullscreen, lockClass]);

    var commonContent = function commonContent() {
      var renderIndicator = /* @__PURE__ */React__default["default"].createElement(GradientLoading, null);

      if (indicator && typeof indicator !== "boolean") {
        renderIndicator = indicator;
      }

      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, indicator ? renderIndicator : null, text ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: textClass
      }, text) : null);
    };

    if (fullscreen) {
      return loading ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(name, fullscreenClass, centerClass, overlayClass),
        style: calcStyles
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: baseClasses
      }, commonContent())) : null;
    }

    if (content || children) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: relativeClass
      }, content || children, showLoading ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(name, baseClasses, fullClass, _defineProperty$3({}, overlayClass, showOverlay)),
        style: calcStyles
      }, commonContent()) : null);
    }

    if (attach) {
      return /* @__PURE__ */React__default["default"].createElement(Portal, {
        attach: attach
      }, loading ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(name, baseClasses, fullClass, _defineProperty$3({}, overlayClass, showOverlay)),
        style: calcStyles
      }, commonContent()) : null);
    }

    return loading ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(name, baseClasses),
      style: calcStyles
    }, commonContent()) : null;
  };

  Loading$1.displayName = "Loading";
  Loading$1.defaultProps = loadingDefaultProps;

  function ownKeys$34(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$33(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$34(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$34(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function createContainer$1(attach) {
    if (typeof attach === "string") return document.querySelector(attach);
    if (typeof attach === "function") return attach();
    return document.body;
  }

  var LoadingPlugin$1 = function LoadingPlugin(options) {
    if (options === false) return {
      hide: function hide() {
        return null;
      }
    };
    var props = typeof options === "boolean" ? {} : options;
    var attach = props.attach;
    var container = createContainer$1(attach);
    var div = document.createElement("div");
    div.setAttribute("style", "width: 100%; height: 100%; position: absolute; top: 0;");
    var defaultProps = {
      loading: true,
      attach: null,
      fullscreen: !attach,
      showOverlay: !!attach
    };
    ReactDOM__default["default"].render( /* @__PURE__ */React__default["default"].createElement(Loading$1, _objectSpread$33(_objectSpread$33(_objectSpread$33({}, defaultProps), props), {}, {
      attach: null
    })), div);
    container.appendChild(div);
    return {
      hide: function hide() {
        ReactDOM__default["default"].unmountComponentAtNode(div);
        div.remove();
      }
    };
  };

  var Loading = Loading$1;
  var loading = LoadingPlugin$1;
  var LoadingPlugin = LoadingPlugin$1;

  function _extends$1() {
    _extends$1 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends$1.apply(this, arguments);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  var propTypes = {exports: {}};

  var reactIs$3 = {exports: {}};

  var reactIs_development$2 = {};

  {
    (function () {
      // nor polyfill, then a plain number is used for performance.

      var hasSymbol = typeof Symbol === 'function' && Symbol["for"];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol["for"]('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
      // (unstable) APIs that have been removed. Can we remove the symbols?

      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol["for"]('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol["for"]('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol["for"]('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol["for"]('react.lazy') : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol["for"]('react.block') : 0xead9;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol["for"]('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol["for"]('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol["for"]('react.scope') : 0xead7;

      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || _typeof$1(type) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }

      function typeOf(object) {
        if (_typeof$1(object) === 'object' && object !== null) {
          var $$typeof = object.$$typeof;

          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;

              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;

                default:
                  var $$typeofType = type && type.$$typeof;

                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;

                    default:
                      return $$typeof;
                  }

              }

            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }

        return undefined;
      } // AsyncMode is deprecated along with isAsyncMode


      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }

      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }

      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }

      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }

      function isElement(object) {
        return _typeof$1(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }

      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }

      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }

      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }

      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }

      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }

      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }

      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }

      reactIs_development$2.AsyncMode = AsyncMode;
      reactIs_development$2.ConcurrentMode = ConcurrentMode;
      reactIs_development$2.ContextConsumer = ContextConsumer;
      reactIs_development$2.ContextProvider = ContextProvider;
      reactIs_development$2.Element = Element;
      reactIs_development$2.ForwardRef = ForwardRef;
      reactIs_development$2.Fragment = Fragment;
      reactIs_development$2.Lazy = Lazy;
      reactIs_development$2.Memo = Memo;
      reactIs_development$2.Portal = Portal;
      reactIs_development$2.Profiler = Profiler;
      reactIs_development$2.StrictMode = StrictMode;
      reactIs_development$2.Suspense = Suspense;
      reactIs_development$2.isAsyncMode = isAsyncMode;
      reactIs_development$2.isConcurrentMode = isConcurrentMode;
      reactIs_development$2.isContextConsumer = isContextConsumer;
      reactIs_development$2.isContextProvider = isContextProvider;
      reactIs_development$2.isElement = isElement;
      reactIs_development$2.isForwardRef = isForwardRef;
      reactIs_development$2.isFragment = isFragment;
      reactIs_development$2.isLazy = isLazy;
      reactIs_development$2.isMemo = isMemo;
      reactIs_development$2.isPortal = isPortal;
      reactIs_development$2.isProfiler = isProfiler;
      reactIs_development$2.isStrictMode = isStrictMode;
      reactIs_development$2.isSuspense = isSuspense;
      reactIs_development$2.isValidElementType = isValidElementType;
      reactIs_development$2.typeOf = typeOf;
    })();
  }

  {
    reactIs$3.exports = reactIs_development$2;
  }

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */


  var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
  var hasOwnProperty$8 = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      } // Detect buggy property enumeration order in older V8 versions.
      // https://bugs.chromium.org/p/v8/issues/detail?id=4118


      var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

      test1[5] = 'de';

      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


      var test2 = {};

      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }

      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });

      if (order2.join('') !== '0123456789') {
        return false;
      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });

      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }

      return true;
    } catch (err) {
      // We don't expect any of the above to throw, but better to be safe.
      return false;
    }
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;

    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);

      for (var key in from) {
        if (hasOwnProperty$8.call(from, key)) {
          to[key] = from[key];
        }
      }

      if (getOwnPropertySymbols$1) {
        symbols = getOwnPropertySymbols$1(from);

        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }

    return to;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;

  var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);

  var printWarning$1 = function printWarning() {};

  {
    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
    var loggedTypeFailures = {};
    var has$1 = has$2;

    printWarning$1 = function printWarning(text) {
      var message = 'Warning: ' + text;

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {
        /**/
      }
    };
  }
  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?Function} getStack Returns the component stack.
   * @private
   */


  function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
    {
      for (var typeSpecName in typeSpecs) {
        if (has$1(typeSpecs, typeSpecName)) {
          var error; // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.

          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof$1(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
              err.name = 'Invariant Violation';
              throw err;
            }

            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
          } catch (ex) {
            error = ex;
          }

          if (error && !(error instanceof Error)) {
            printWarning$1((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + _typeof$1(error) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
          }

          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning$1('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
          }
        }
      }
    }
  }
  /**
   * Resets warning cache when testing.
   *
   * @private
   */


  checkPropTypes$1.resetWarningCache = function () {
    {
      loggedTypeFailures = {};
    }
  };

  var checkPropTypes_1 = checkPropTypes$1;

  var ReactIs$1 = reactIs$3.exports;
  var assign = objectAssign;
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var has = has$2;
  var checkPropTypes = checkPropTypes_1;

  var printWarning = function printWarning() {};

  {
    printWarning = function printWarning(text) {
      var message = 'Warning: ' + text;

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }

  function emptyFunctionThatReturnsNull() {
    return null;
  }

  var factoryWithTypeCheckers = function factoryWithTypeCheckers(isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */

    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }
    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */


    var ANONYMOUS = '<<anonymous>>'; // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bigint: createPrimitiveTypeChecker('bigint'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */

    /*eslint-disable no-self-compare*/

    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }
    /*eslint-enable no-self-compare*/

    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */


    function PropTypeError(message, data) {
      this.message = message;
      this.data = data && _typeof$1(data) === 'object' ? data : {};
      this.stack = '';
    } // Make `instanceof Error` still work for returned errors.


    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }

      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            // New behavior only for users of `prop-types` package
            var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
            err.name = 'Invariant Violation';
            throw err;
          } else if (typeof console !== 'undefined') {
            // Old behavior for people using React.PropTypes
            var cacheKey = componentName + ':' + propName;

            if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3) {
              printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }

        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }

            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }

          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== expectedType) {
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
            expectedType: expectedType
          });
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }

        var propValue = props[propName];

        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }

        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!ReactIs$1.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        {
          if (arguments.length > 1) {
            printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
          } else {
            printWarning('Invalid argument supplied to oneOf, expected an array.');
          }
        }

        return emptyFunctionThatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type = getPreciseType(value);

          if (type === 'symbol') {
            return String(value);
          }

          return value;
        });
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }

        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }

        for (var key in propValue) {
          if (has(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

            if (error instanceof Error) {
              return error;
            }
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
        return emptyFunctionThatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (typeof checker !== 'function') {
          printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
          return emptyFunctionThatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        var expectedTypes = [];

        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);

          if (checkerResult == null) {
            return null;
          }

          if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
            expectedTypes.push(checkerResult.data.expectedType);
          }
        }

        var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function invalidValidatorError(componentName, location, propFullName, key, type) {
      return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        for (var key in shapeTypes) {
          var checker = shapeTypes[key];

          if (typeof checker !== 'function') {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        } // We need to check all keys in case some are required but missing from props.


        var allKeys = assign({}, props[propName], shapeTypes);

        for (var key in allKeys) {
          var checker = shapeTypes[key];

          if (has(shapeTypes, key) && typeof checker !== 'function') {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }

          if (!checker) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (_typeof$1(propValue)) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;

        case 'boolean':
          return !propValue;

        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }

          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);

          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;

            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value;

                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;

        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      // Native Symbol.
      if (propType === 'symbol') {
        return true;
      } // falsy value can't be a Symbol


      if (!propValue) {
        return false;
      } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      } // Fallback for non-spec compliant Symbols which are polyfilled.


      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    } // Equivalent of `typeof` but with special handling for array and regexp.


    function getPropType(propValue) {
      var propType = _typeof$1(propValue);

      if (Array.isArray(propValue)) {
        return 'array';
      }

      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }

      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }

      return propType;
    } // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.


    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }

      var propType = getPropType(propValue);

      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }

      return propType;
    } // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"


    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);

      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;

        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;

        default:
          return type;
      }
    } // Returns class name of the object, if any.


    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }

      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    var ReactIs = reactIs$3.exports; // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod

    var throwOnDirectAccess = true;
    propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  }

  var PropTypes = propTypes.exports;

  /**
   * Checks if a given element has a CSS class.
   * 
   * @param element the element
   * @param className the CSS class name
   */
  function hasClass(element, className) {
    if (element.classList) return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
  }

  /**
   * Adds a CSS class to a given element.
   * 
   * @param element the element
   * @param className the CSS class name
   */

  function addClass(element, className) {
    if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
  }

  function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
  }
  /**
   * Removes a CSS class from a given element.
   * 
   * @param element the element
   * @param className the CSS class name
   */


  function removeClass$1(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else if (typeof element.className === 'string') {
      element.className = replaceClassName(element.className, className);
    } else {
      element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
    }
  }

  var config = {
    disabled: false
  };

  var timeoutsShape = PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    enter: PropTypes.number,
    exit: PropTypes.number,
    appear: PropTypes.number
  }).isRequired]) ;
  var classNamesShape = PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    enter: PropTypes.string,
    exit: PropTypes.string,
    active: PropTypes.string
  }), PropTypes.shape({
    enter: PropTypes.string,
    enterDone: PropTypes.string,
    enterActive: PropTypes.string,
    exit: PropTypes.string,
    exitDone: PropTypes.string,
    exitActive: PropTypes.string
  })]) ;

  var TransitionGroupContext = /*#__PURE__*/React__default["default"].createContext(null);

  var forceReflow = function forceReflow(node) {
    return node.scrollTop;
  };

  var UNMOUNTED = 'unmounted';
  var EXITED = 'exited';
  var ENTERING = 'entering';
  var ENTERED = 'entered';
  var EXITING = 'exiting';
  /**
   * The Transition component lets you describe a transition from one component
   * state to another _over time_ with a simple declarative API. Most commonly
   * it's used to animate the mounting and unmounting of a component, but can also
   * be used to describe in-place transition states as well.
   *
   * ---
   *
   * **Note**: `Transition` is a platform-agnostic base component. If you're using
   * transitions in CSS, you'll probably want to use
   * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
   * instead. It inherits all the features of `Transition`, but contains
   * additional features necessary to play nice with CSS transitions (hence the
   * name of the component).
   *
   * ---
   *
   * By default the `Transition` component does not alter the behavior of the
   * component it renders, it only tracks "enter" and "exit" states for the
   * components. It's up to you to give meaning and effect to those states. For
   * example we can add styles to a component when it enters or exits:
   *
   * ```jsx
   * import { Transition } from 'react-transition-group';
   *
   * const duration = 300;
   *
   * const defaultStyle = {
   *   transition: `opacity ${duration}ms ease-in-out`,
   *   opacity: 0,
   * }
   *
   * const transitionStyles = {
   *   entering: { opacity: 1 },
   *   entered:  { opacity: 1 },
   *   exiting:  { opacity: 0 },
   *   exited:  { opacity: 0 },
   * };
   *
   * const Fade = ({ in: inProp }) => (
   *   <Transition in={inProp} timeout={duration}>
   *     {state => (
   *       <div style={{
   *         ...defaultStyle,
   *         ...transitionStyles[state]
   *       }}>
   *         I'm a fade Transition!
   *       </div>
   *     )}
   *   </Transition>
   * );
   * ```
   *
   * There are 4 main states a Transition can be in:
   *  - `'entering'`
   *  - `'entered'`
   *  - `'exiting'`
   *  - `'exited'`
   *
   * Transition state is toggled via the `in` prop. When `true` the component
   * begins the "Enter" stage. During this stage, the component will shift from
   * its current transition state, to `'entering'` for the duration of the
   * transition and then to the `'entered'` stage once it's complete. Let's take
   * the following example (we'll use the
   * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <Transition in={inProp} timeout={500}>
   *         {state => (
   *           // ...
   *         )}
   *       </Transition>
   *       <button onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the button is clicked the component will shift to the `'entering'` state
   * and stay there for 500ms (the value of `timeout`) before it finally switches
   * to `'entered'`.
   *
   * When `in` is `false` the same thing happens except the state moves from
   * `'exiting'` to `'exited'`.
   */

  var Transition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Transition, _React$Component);

    function Transition(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;

      if (props["in"]) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }

      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }

    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref["in"];

      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }

      return null;
    } // getSnapshotBeforeUpdate(prevProps) {
    //   let nextStatus = null
    //   if (prevProps !== this.props) {
    //     const { status } = this.state
    //     if (this.props.in) {
    //       if (status !== ENTERING && status !== ENTERED) {
    //         nextStatus = ENTERING
    //       }
    //     } else {
    //       if (status === ENTERING || status === ENTERED) {
    //         nextStatus = EXITING
    //       }
    //     }
    //   }
    //   return { nextStatus }
    // }
    ;

    var _proto = Transition.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;

      if (prevProps !== this.props) {
        var status = this.state.status;

        if (this.props["in"]) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }

      this.updateStatus(false, nextStatus);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };

    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;

      if (timeout != null && typeof timeout !== 'number') {
        exit = timeout.exit;
        enter = timeout.enter; // TODO: remove fallback for next major

        appear = timeout.appear !== undefined ? timeout.appear : enter;
      }

      return {
        exit: exit,
        enter: enter,
        appear: appear
      };
    };

    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }

      if (nextStatus !== null) {
        // nextStatus will always be ENTERING or EXITING.
        this.cancelNextCallback();

        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default["default"].findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
            // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
            // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

            if (node) forceReflow(node);
          }

          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };

    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;

      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;

      var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default["default"].findDOMNode(this), appearing],
          maybeNode = _ref2[0],
          maybeAppearing = _ref2[1];

      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
      // if we are mounting and running this it means appear _must_ be set

      if (!mounting && !enter || config.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }

      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function () {
        _this2.props.onEntering(maybeNode, maybeAppearing);

        _this2.onTransitionEnd(enterTimeout, function () {
          _this2.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };

    _proto.performExit = function performExit() {
      var _this3 = this;

      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default["default"].findDOMNode(this); // no exit animation skip right to EXITED

      if (!exit || config.disabled) {
        this.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
        return;
      }

      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function () {
        _this3.props.onExiting(maybeNode);

        _this3.onTransitionEnd(timeouts.exit, function () {
          _this3.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };

    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };

    _proto.safeSetState = function safeSetState(nextState, callback) {
      // This shouldn't be necessary, but there are weird race conditions with
      // setState callbacks and unmounting in testing, so always make sure that
      // we can cancel any pending setState callbacks after we unmount.
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };

    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;

      var active = true;

      this.nextCallback = function (event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };

      this.nextCallback.cancel = function () {
        active = false;
      };

      return this.nextCallback;
    };

    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default["default"].findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }

      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
            maybeNode = _ref3[0],
            maybeNextCallback = _ref3[1];

        this.props.addEndListener(maybeNode, maybeNextCallback);
      }

      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };

    _proto.render = function render() {
      var status = this.state.status;

      if (status === UNMOUNTED) {
        return null;
      }

      var _this$props = this.props,
          children = _this$props.children;
          _this$props["in"];
          _this$props.mountOnEnter;
          _this$props.unmountOnExit;
          _this$props.appear;
          _this$props.enter;
          _this$props.exit;
          _this$props.timeout;
          _this$props.addEndListener;
          _this$props.onEnter;
          _this$props.onEntering;
          _this$props.onEntered;
          _this$props.onExit;
          _this$props.onExiting;
          _this$props.onExited;
          _this$props.nodeRef;
          var childProps = _objectWithoutPropertiesLoose$2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

      return (
        /*#__PURE__*/
        // allows for nested Transitions
        React__default["default"].createElement(TransitionGroupContext.Provider, {
          value: null
        }, typeof children === 'function' ? children(status, childProps) : /*#__PURE__*/React__default["default"].cloneElement(React__default["default"].Children.only(children), childProps))
      );
    };

    return Transition;
  }(React__default["default"].Component);

  Transition.contextType = TransitionGroupContext;
  Transition.propTypes = {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: PropTypes.shape({
      current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),

    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

    /**
     * Show the component; triggers the enter or exit states
     */
    "in": PropTypes.bool,

    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: PropTypes.bool,

    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: PropTypes.bool,

    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: PropTypes.bool,

    /**
     * Enable or disable enter transitions.
     */
    enter: PropTypes.bool,

    /**
     * Enable or disable exit transitions.
     */
    exit: PropTypes.bool,

    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener) pt = pt.isRequired;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return pt.apply(void 0, [props].concat(args));
    },

    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: PropTypes.func,

    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: PropTypes.func,

    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,

    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: PropTypes.func,

    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: PropTypes.func,

    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: PropTypes.func,

    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: PropTypes.func
  } ; // Name the function so it is clearer in the documentation

  function noop$2() {}

  Transition.defaultProps = {
    "in": false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop$2,
    onEntering: noop$2,
    onEntered: noop$2,
    onExit: noop$2,
    onExiting: noop$2,
    onExited: noop$2
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition$1 = Transition;

  var _addClass = function addClass$1(node, classes) {
    return node && classes && classes.split(' ').forEach(function (c) {
      return addClass(node, c);
    });
  };

  var removeClass = function removeClass(node, classes) {
    return node && classes && classes.split(' ').forEach(function (c) {
      return removeClass$1(node, c);
    });
  };
  /**
   * A transition component inspired by the excellent
   * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
   * use it if you're using CSS transitions or animations. It's built upon the
   * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
   * component, so it inherits all of its props.
   *
   * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
   * and `exit` states of the transition. The first class is applied and then a
   * second `*-active` class in order to activate the CSS transition. After the
   * transition, matching `*-done` class names are applied to persist the
   * transition state.
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
   *         <div>
   *           {"I'll receive my-node-* classes"}
   *         </div>
   *       </CSSTransition>
   *       <button type="button" onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the `in` prop is set to `true`, the child component will first receive
   * the class `example-enter`, then the `example-enter-active` will be added in
   * the next tick. `CSSTransition` [forces a
   * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
   * between before adding the `example-enter-active`. This is an important trick
   * because it allows us to transition between `example-enter` and
   * `example-enter-active` even though they were added immediately one after
   * another. Most notably, this is what makes it possible for us to animate
   * _appearance_.
   *
   * ```css
   * .my-node-enter {
   *   opacity: 0;
   * }
   * .my-node-enter-active {
   *   opacity: 1;
   *   transition: opacity 200ms;
   * }
   * .my-node-exit {
   *   opacity: 1;
   * }
   * .my-node-exit-active {
   *   opacity: 0;
   *   transition: opacity 200ms;
   * }
   * ```
   *
   * `*-active` classes represent which styles you want to animate **to**, so it's
   * important to add `transition` declaration only to them, otherwise transitions
   * might not behave as intended! This might not be obvious when the transitions
   * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
   * the example above (minus `transition`), but it becomes apparent in more
   * complex transitions.
   *
   * **Note**: If you're using the
   * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
   * prop, make sure to define styles for `.appear-*` classes as well.
   */


  var CSSTransition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(CSSTransition, _React$Component);

    function CSSTransition() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.appliedClasses = {
        appear: {},
        enter: {},
        exit: {}
      };

      _this.onEnter = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
            node = _this$resolveArgument[0],
            appearing = _this$resolveArgument[1];

        _this.removeClasses(node, 'exit');

        _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

        if (_this.props.onEnter) {
          _this.props.onEnter(maybeNode, maybeAppearing);
        }
      };

      _this.onEntering = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
            node = _this$resolveArgument2[0],
            appearing = _this$resolveArgument2[1];

        var type = appearing ? 'appear' : 'enter';

        _this.addClass(node, type, 'active');

        if (_this.props.onEntering) {
          _this.props.onEntering(maybeNode, maybeAppearing);
        }
      };

      _this.onEntered = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
            node = _this$resolveArgument3[0],
            appearing = _this$resolveArgument3[1];

        var type = appearing ? 'appear' : 'enter';

        _this.removeClasses(node, type);

        _this.addClass(node, type, 'done');

        if (_this.props.onEntered) {
          _this.props.onEntered(maybeNode, maybeAppearing);
        }
      };

      _this.onExit = function (maybeNode) {
        var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
            node = _this$resolveArgument4[0];

        _this.removeClasses(node, 'appear');

        _this.removeClasses(node, 'enter');

        _this.addClass(node, 'exit', 'base');

        if (_this.props.onExit) {
          _this.props.onExit(maybeNode);
        }
      };

      _this.onExiting = function (maybeNode) {
        var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
            node = _this$resolveArgument5[0];

        _this.addClass(node, 'exit', 'active');

        if (_this.props.onExiting) {
          _this.props.onExiting(maybeNode);
        }
      };

      _this.onExited = function (maybeNode) {
        var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
            node = _this$resolveArgument6[0];

        _this.removeClasses(node, 'exit');

        _this.addClass(node, 'exit', 'done');

        if (_this.props.onExited) {
          _this.props.onExited(maybeNode);
        }
      };

      _this.resolveArguments = function (maybeNode, maybeAppearing) {
        return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
        : [maybeNode, maybeAppearing];
      };

      _this.getClassNames = function (type) {
        var classNames = _this.props.classNames;
        var isStringClassNames = typeof classNames === 'string';
        var prefix = isStringClassNames && classNames ? classNames + "-" : '';
        var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
        var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
        var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
        return {
          baseClassName: baseClassName,
          activeClassName: activeClassName,
          doneClassName: doneClassName
        };
      };

      return _this;
    }

    var _proto = CSSTransition.prototype;

    _proto.addClass = function addClass(node, type, phase) {
      var className = this.getClassNames(type)[phase + "ClassName"];

      var _this$getClassNames = this.getClassNames('enter'),
          doneClassName = _this$getClassNames.doneClassName;

      if (type === 'appear' && phase === 'done' && doneClassName) {
        className += " " + doneClassName;
      } // This is to force a repaint,
      // which is necessary in order to transition styles when adding a class name.


      if (phase === 'active') {
        if (node) forceReflow(node);
      }

      if (className) {
        this.appliedClasses[type][phase] = className;

        _addClass(node, className);
      }
    };

    _proto.removeClasses = function removeClasses(node, type) {
      var _this$appliedClasses$ = this.appliedClasses[type],
          baseClassName = _this$appliedClasses$.base,
          activeClassName = _this$appliedClasses$.active,
          doneClassName = _this$appliedClasses$.done;
      this.appliedClasses[type] = {};

      if (baseClassName) {
        removeClass(node, baseClassName);
      }

      if (activeClassName) {
        removeClass(node, activeClassName);
      }

      if (doneClassName) {
        removeClass(node, doneClassName);
      }
    };

    _proto.render = function render() {
      var _this$props = this.props;
          _this$props.classNames;
          var props = _objectWithoutPropertiesLoose$2(_this$props, ["classNames"]);

      return /*#__PURE__*/React__default["default"].createElement(Transition$1, _extends$1({}, props, {
        onEnter: this.onEnter,
        onEntered: this.onEntered,
        onEntering: this.onEntering,
        onExit: this.onExit,
        onExiting: this.onExiting,
        onExited: this.onExited
      }));
    };

    return CSSTransition;
  }(React__default["default"].Component);

  CSSTransition.defaultProps = {
    classNames: ''
  };
  CSSTransition.propTypes = _extends$1({}, Transition$1.propTypes, {
    /**
     * The animation classNames applied to the component as it appears, enters,
     * exits or has finished the transition. A single name can be provided, which
     * will be suffixed for each stage, e.g. `classNames="fade"` applies:
     *
     * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
     * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
     * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
     *
     * A few details to note about how these classes are applied:
     *
     * 1. They are _joined_ with the ones that are already defined on the child
     *    component, so if you want to add some base styles, you can use
     *    `className` without worrying that it will be overridden.
     *
     * 2. If the transition component mounts with `in={false}`, no classes are
     *    applied yet. You might be expecting `*-exit-done`, but if you think
     *    about it, a component cannot finish exiting if it hasn't entered yet.
     *
     * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
     *    allows you to define different behavior for when appearing is done and
     *    when regular entering is done, using selectors like
     *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
     *    an epic entrance animation when element first appears in the DOM using
     *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
     *    simply use `fade-enter-done` for defining both cases.
     *
     * Each individual classNames can also be specified independently like:
     *
     * ```js
     * classNames={{
     *  appear: 'my-appear',
     *  appearActive: 'my-active-appear',
     *  appearDone: 'my-done-appear',
     *  enter: 'my-enter',
     *  enterActive: 'my-active-enter',
     *  enterDone: 'my-done-enter',
     *  exit: 'my-exit',
     *  exitActive: 'my-active-exit',
     *  exitDone: 'my-done-exit',
     * }}
     * ```
     *
     * If you want to set these classes using CSS Modules:
     *
     * ```js
     * import styles from './styles.css';
     * ```
     *
     * you might want to use camelCase in your CSS file, that way could simply
     * spread them instead of listing them one by one:
     *
     * ```js
     * classNames={{ ...styles }}
     * ```
     *
     * @type {string | {
     *  appear?: string,
     *  appearActive?: string,
     *  appearDone?: string,
     *  enter?: string,
     *  enterActive?: string,
     *  enterDone?: string,
     *  exit?: string,
     *  exitActive?: string,
     *  exitDone?: string,
     * }}
     */
    classNames: classNamesShape,

    /**
     * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEnter: PropTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'enter-active' or
     * 'appear-active' class is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'enter' or
     * 'appear' classes are **removed** and the `done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntered: PropTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'exit' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExit: PropTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExiting: PropTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'exit' classes
     * are **removed** and the `exit-done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExited: PropTypes.func
  }) ;
  var CSSTransition$1 = CSSTransition;

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /**
   * Given `this.props.children`, return an object mapping key to child.
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */

  function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
      return mapFn && /*#__PURE__*/React.isValidElement(child) ? mapFn(child) : child;
    };

    var result = Object.create(null);
    if (children) React.Children.map(children, function (c) {
      return c;
    }).forEach(function (child) {
      // run the map function here instead so that the key is the computed one
      result[child.key] = mapper(child);
    });
    return result;
  }
  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */

  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list


    var nextKeysPending = Object.create(null);
    var pendingKeys = [];

    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }

    var i;
    var childMapping = {};

    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }

      childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`


    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
  }

  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }

  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function (child) {
      return /*#__PURE__*/React.cloneElement(child, {
        onExited: onExited.bind(null, child),
        "in": true,
        appear: getProp(child, 'appear', props),
        enter: getProp(child, 'enter', props),
        exit: getProp(child, 'exit', props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function (key) {
      var child = children[key];
      if (! /*#__PURE__*/React.isValidElement(child)) return;
      var hasPrev = (key in prevChildMapping);
      var hasNext = (key in nextChildMapping);
      var prevChild = prevChildMapping[key];
      var isLeaving = /*#__PURE__*/React.isValidElement(prevChild) && !prevChild.props["in"]; // item is new (entering)

      if (hasNext && (!hasPrev || isLeaving)) {
        // console.log('entering', key)
        children[key] = /*#__PURE__*/React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          "in": true,
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        // item is old (exiting)
        // console.log('leaving', key)
        children[key] = /*#__PURE__*/React.cloneElement(child, {
          "in": false
        });
      } else if (hasNext && hasPrev && /*#__PURE__*/React.isValidElement(prevChild)) {
        // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = /*#__PURE__*/React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          "in": prevChild.props["in"],
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      }
    });
    return children;
  }

  var values = Object.values || function (obj) {
    return Object.keys(obj).map(function (k) {
      return obj[k];
    });
  };

  var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
      return child;
    }
  };
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

  var TransitionGroup = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(TransitionGroup, _React$Component);

    function TransitionGroup(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;

      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited: handleExited,
        firstRender: true
      };
      return _this;
    }

    var _proto = TransitionGroup.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };

    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children,
          handleExited = _ref.handleExited,
          firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    } // node is `undefined` when user provided `nodeRef` prop
    ;

    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping) return;

      if (child.props.onExited) {
        child.props.onExited(node);
      }

      if (this.mounted) {
        this.setState(function (state) {
          var children = _extends$1({}, state.children);

          delete children[child.key];
          return {
            children: children
          };
        });
      }
    };

    _proto.render = function render() {
      var _this$props = this.props,
          Component = _this$props.component,
          childFactory = _this$props.childFactory,
          props = _objectWithoutPropertiesLoose$2(_this$props, ["component", "childFactory"]);

      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;

      if (Component === null) {
        return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, children);
      }

      return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, /*#__PURE__*/React__default["default"].createElement(Component, props, children));
    };

    return TransitionGroup;
  }(React__default["default"].Component);

  TransitionGroup.propTypes = {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: PropTypes.any,

    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: PropTypes.node,

    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: PropTypes.bool,

    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: PropTypes.bool,

    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: PropTypes.bool,

    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: PropTypes.func
  } ;
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup$1 = TransitionGroup;

  /**
   * Simple ponyfill for Object.fromEntries
   */

  var fromEntries = function fromEntries(entries) {
    return entries.reduce(function (acc, _ref) {
      var key = _ref[0],
          value = _ref[1];
      acc[key] = value;
      return acc;
    }, {});
  };
  /**
   * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs
   */

  var useIsomorphicLayoutEffect$1 = typeof window !== 'undefined' && window.document && window.document.createElement ? React__namespace.useLayoutEffect : React__namespace.useEffect;

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;

    if (uaData != null && uaData.brands) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }

    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }

    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }

    var _ref = isElement(element) ? getWindow(element) : window,
        visualViewport = _ref.visualViewport;

    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }

      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

    {
      var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';

      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();

      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$strategy = _options.strategy,
        strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;

      {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name; // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step

    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce$1(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
      .filter(function (value, index, self) {
        return self.indexOf(value) === index;
      }).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }

            break;

          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }

            break;

          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }

            break;

          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'effect':
            if (modifier.effect != null && typeof modifier.effect !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'requires':
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }

            break;

          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }

            break;

          case 'options':
          case 'data':
            break;

          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }

        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS$1 = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS$1 : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS$1, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }

            var _getComputedStyle = getComputedStyle$1(popper),
                marginTop = _getComputedStyle.marginTop,
                marginRight = _getComputedStyle.marginRight,
                marginBottom = _getComputedStyle.marginBottom,
                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer


            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }

          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }

            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce$1(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }

        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  var hasElementType = typeof Element !== 'undefined';
  var hasMap = typeof Map === 'function';
  var hasSet = typeof Set === 'function';
  var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView; // Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

  function equal(a, b) {
    // START: fast-deep-equal es6/index.js 3.1.1
    if (a === b) return true;

    if (a && b && _typeof$1(a) == 'object' && _typeof$1(b) == 'object') {
      if (a.constructor !== b.constructor) return false;
      var length, i, keys;

      if (Array.isArray(a)) {
        length = a.length;
        if (length != b.length) return false;

        for (i = length; i-- !== 0;) {
          if (!equal(a[i], b[i])) return false;
        }

        return true;
      } // START: Modifications:
      // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
      //    to co-exist with es5.
      // 2. Replace `for of` with es5 compliant iteration using `for`.
      //    Basically, take:
      //
      //    ```js
      //    for (i of a.entries())
      //      if (!b.has(i[0])) return false;
      //    ```
      //
      //    ... and convert to:
      //
      //    ```js
      //    it = a.entries();
      //    while (!(i = it.next()).done)
      //      if (!b.has(i.value[0])) return false;
      //    ```
      //
      //    **Note**: `i` access switches to `i.value`.


      var it;

      if (hasMap && a instanceof Map && b instanceof Map) {
        if (a.size !== b.size) return false;
        it = a.entries();

        while (!(i = it.next()).done) {
          if (!b.has(i.value[0])) return false;
        }

        it = a.entries();

        while (!(i = it.next()).done) {
          if (!equal(i.value[1], b.get(i.value[0]))) return false;
        }

        return true;
      }

      if (hasSet && a instanceof Set && b instanceof Set) {
        if (a.size !== b.size) return false;
        it = a.entries();

        while (!(i = it.next()).done) {
          if (!b.has(i.value[0])) return false;
        }

        return true;
      } // END: Modifications


      if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
        length = a.length;
        if (length != b.length) return false;

        for (i = length; i-- !== 0;) {
          if (a[i] !== b[i]) return false;
        }

        return true;
      }

      if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
      if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length) return false;

      for (i = length; i-- !== 0;) {
        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
      } // END: fast-deep-equal
      // START: react-fast-compare
      // custom handling for DOM elements


      if (hasElementType && a instanceof Element) return false; // custom handling for React/Preact

      for (i = length; i-- !== 0;) {
        if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
          // React-specific: avoid traversing React elements' _owner
          // Preact-specific: avoid traversing Preact elements' __v and __o
          //    __v = $_original / $_vnode
          //    __o = $_owner
          // These properties contain circular references and are not needed when
          // comparing the actual elements (and not their owners)
          // .$$typeof and ._store on just reasonable markers of elements
          continue;
        } // all other properties should be traversed as usual


        if (!equal(a[keys[i]], b[keys[i]])) return false;
      } // END: react-fast-compare
      // START: fast-deep-equal


      return true;
    }

    return a !== a && b !== b;
  } // end fast-deep-equal


  var reactFastCompare = function isEqual(a, b) {
    try {
      return equal(a, b);
    } catch (error) {
      if ((error.message || '').match(/stack|recursion/i)) {
        // warn on circular references, don't crash
        // browsers give this different errors name and messages:
        // chrome/safari: "RangeError", "Maximum call stack size exceeded"
        // firefox: "InternalError", too much recursion"
        // edge: "Error", "Out of stack space"
        console.warn('react-fast-compare cannot handle circular refs');
        return false;
      } // some other error. we should definitely know about these


      throw error;
    }
  };

  var EMPTY_MODIFIERS = [];
  var usePopper = function usePopper(referenceElement, popperElement, options) {
    if (options === void 0) {
      options = {};
    }

    var prevOptions = React__namespace.useRef(null);
    var optionsWithDefaults = {
      onFirstUpdate: options.onFirstUpdate,
      placement: options.placement || 'bottom',
      strategy: options.strategy || 'absolute',
      modifiers: options.modifiers || EMPTY_MODIFIERS
    };

    var _React$useState = React__namespace.useState({
      styles: {
        popper: {
          position: optionsWithDefaults.strategy,
          left: '0',
          top: '0'
        },
        arrow: {
          position: 'absolute'
        }
      },
      attributes: {}
    }),
        state = _React$useState[0],
        setState = _React$useState[1];

    var updateStateModifier = React__namespace.useMemo(function () {
      return {
        name: 'updateState',
        enabled: true,
        phase: 'write',
        fn: function fn(_ref) {
          var state = _ref.state;
          var elements = Object.keys(state.elements);
          setState({
            styles: fromEntries(elements.map(function (element) {
              return [element, state.styles[element] || {}];
            })),
            attributes: fromEntries(elements.map(function (element) {
              return [element, state.attributes[element]];
            }))
          });
        },
        requires: ['computeStyles']
      };
    }, []);
    var popperOptions = React__namespace.useMemo(function () {
      var newOptions = {
        onFirstUpdate: optionsWithDefaults.onFirstUpdate,
        placement: optionsWithDefaults.placement,
        strategy: optionsWithDefaults.strategy,
        modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
          name: 'applyStyles',
          enabled: false
        }])
      };

      if (reactFastCompare(prevOptions.current, newOptions)) {
        return prevOptions.current || newOptions;
      } else {
        prevOptions.current = newOptions;
        return newOptions;
      }
    }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
    var popperInstanceRef = React__namespace.useRef();
    useIsomorphicLayoutEffect$1(function () {
      if (popperInstanceRef.current) {
        popperInstanceRef.current.setOptions(popperOptions);
      }
    }, [popperOptions]);
    useIsomorphicLayoutEffect$1(function () {
      if (referenceElement == null || popperElement == null) {
        return;
      }

      var createPopper$1 = options.createPopper || createPopper;
      var popperInstance = createPopper$1(referenceElement, popperElement, popperOptions);
      popperInstanceRef.current = popperInstance;
      return function () {
        popperInstance.destroy();
        popperInstanceRef.current = null;
      };
    }, [referenceElement, popperElement, options.createPopper]);
    return {
      state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
      styles: state.styles,
      attributes: state.attributes,
      update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
      forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
    };
  };

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */

  function baseSlice$3(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }

  var _baseSlice = baseSlice$3;

  var baseSlice$2 = _baseSlice;
  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */

  function castSlice$2(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice$2(array, start, end);
  }

  var _castSlice = castSlice$2;

  /** Used to compose unicode character classes. */
  var rsAstralRange$3 = "\\ud800-\\udfff",
      rsComboMarksRange$4 = "\\u0300-\\u036f",
      reComboHalfMarksRange$4 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$4 = "\\u20d0-\\u20ff",
      rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
      rsVarRange$3 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsZWJ$3 = "\\u200d";
  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

  var reHasUnicode = RegExp('[' + rsZWJ$3 + rsAstralRange$3 + rsComboRange$4 + rsVarRange$3 + ']');
  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */

  function hasUnicode$4(string) {
    return reHasUnicode.test(string);
  }

  var _hasUnicode = hasUnicode$4;

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function asciiToArray$1(string) {
    return string.split('');
  }

  var _asciiToArray = asciiToArray$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = "\\ud800-\\udfff",
      rsComboMarksRange$3 = "\\u0300-\\u036f",
      reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$3 = "\\u20d0-\\u20ff",
      rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
      rsVarRange$2 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsAstral$1 = '[' + rsAstralRange$2 + ']',
      rsCombo$3 = '[' + rsComboRange$3 + ']',
      rsFitz$2 = "\\ud83c[\\udffb-\\udfff]",
      rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
      rsNonAstral$2 = '[^' + rsAstralRange$2 + ']',
      rsRegional$2 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair$2 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsZWJ$2 = "\\u200d";
  /** Used to compose unicode regexes. */

  var reOptMod$2 = rsModifier$2 + '?',
      rsOptVar$2 = '[' + rsVarRange$2 + ']?',
      rsOptJoin$2 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
      rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
      rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

  var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');
  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function unicodeToArray$1(string) {
    return string.match(reUnicode$1) || [];
  }

  var _unicodeToArray = unicodeToArray$1;

  var asciiToArray = _asciiToArray,
      hasUnicode$3 = _hasUnicode,
      unicodeToArray = _unicodeToArray;
  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function stringToArray$2(string) {
    return hasUnicode$3(string) ? unicodeToArray(string) : asciiToArray(string);
  }

  var _stringToArray = stringToArray$2;

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */

  function arrayMap$6(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  var _arrayMap = arrayMap$6;

  var baseGetTag$4 = _baseGetTag,
      isObjectLike$6 = isObjectLike_1;
  /** `Object#toString` result references. */

  var symbolTag$3 = '[object Symbol]';
  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */

  function isSymbol$4(value) {
    return _typeof$1(value) == 'symbol' || isObjectLike$6(value) && baseGetTag$4(value) == symbolTag$3;
  }

  var isSymbol_1 = isSymbol$4;

  var _Symbol$3 = _Symbol$6,
      arrayMap$5 = _arrayMap,
      isArray$8 = isArray_1,
      isSymbol$3 = isSymbol_1;
  /** Used as references for various `Number` constants. */

  var INFINITY$2 = 1 / 0;
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$2 = _Symbol$3 ? _Symbol$3.prototype : undefined,
      symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;
  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */

  function baseToString$2(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }

    if (isArray$8(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap$5(value, baseToString$2) + '';
    }

    if (isSymbol$3(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$2 ? '-0' : result;
  }

  var _baseToString = baseToString$2;

  var baseToString$1 = _baseToString;
  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */

  function toString$9(value) {
    return value == null ? '' : baseToString$1(value);
  }

  var toString_1 = toString$9;

  var castSlice$1 = _castSlice,
      hasUnicode$2 = _hasUnicode,
      stringToArray$1 = _stringToArray,
      toString$8 = toString_1;
  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */

  function createCaseFirst$1(methodName) {
    return function (string) {
      string = toString$8(string);
      var strSymbols = hasUnicode$2(string) ? stringToArray$1(string) : undefined;
      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
      var trailing = strSymbols ? castSlice$1(strSymbols, 1).join('') : string.slice(1);
      return chr[methodName]() + trailing;
    };
  }

  var _createCaseFirst = createCaseFirst$1;

  var createCaseFirst = _createCaseFirst;
  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */

  var upperFirst$1 = createCaseFirst('toUpperCase');
  var upperFirst_1 = upperFirst$1;

  var noop$1 = (function () {});

  var useControlled = function useControlled() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var valueKey = arguments.length > 1 ? arguments[1] : undefined;
    var onChange = arguments.length > 2 ? arguments[2] : undefined;
    var defaultOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var controlled = Reflect.has(props, valueKey);
    var value = props[valueKey];
    var defaultValue = defaultOptions["default".concat(upperFirst_1(valueKey))] || props["default".concat(upperFirst_1(valueKey))];

    var _useState = React.useState(defaultValue),
        _useState2 = _slicedToArray(_useState, 2),
        internalValue = _useState2[0],
        setInternalValue = _useState2[1];

    if (controlled) return [value, onChange || noop$1];
    return [internalValue, function (newValue) {
      setInternalValue(newValue);

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  };

  function useAnimation() {
    var _useConfig = useConfig$1(),
        animation = _useConfig.animation;

    var expand = EAnimationType.expand,
        ripple = EAnimationType.ripple,
        fade = EAnimationType.fade;
    var keepAnimation = React.useCallback(function (type) {
      var _animation$exclude, _animation$include;

      return animation && !((_animation$exclude = animation.exclude) !== null && _animation$exclude !== void 0 && _animation$exclude.includes(type)) && ((_animation$include = animation.include) === null || _animation$include === void 0 ? void 0 : _animation$include.includes(type));
    }, [animation]);
    return {
      keepExpand: keepAnimation(expand),
      keepRipple: keepAnimation(ripple),
      keepFade: keepAnimation(fade)
    };
  }

  var reactIs$2 = {exports: {}};

  var reactIs_development$1 = {};

  {
    (function () {
      // When adding new symbols to this file,
      // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
      // The Symbol used to tag the ReactElement-like types.

      var REACT_ELEMENT_TYPE = Symbol["for"]('react.element');
      var REACT_PORTAL_TYPE = Symbol["for"]('react.portal');
      var REACT_FRAGMENT_TYPE = Symbol["for"]('react.fragment');
      var REACT_STRICT_MODE_TYPE = Symbol["for"]('react.strict_mode');
      var REACT_PROFILER_TYPE = Symbol["for"]('react.profiler');
      var REACT_PROVIDER_TYPE = Symbol["for"]('react.provider');
      var REACT_CONTEXT_TYPE = Symbol["for"]('react.context');
      var REACT_SERVER_CONTEXT_TYPE = Symbol["for"]('react.server_context');
      var REACT_FORWARD_REF_TYPE = Symbol["for"]('react.forward_ref');
      var REACT_SUSPENSE_TYPE = Symbol["for"]('react.suspense');
      var REACT_SUSPENSE_LIST_TYPE = Symbol["for"]('react.suspense_list');
      var REACT_MEMO_TYPE = Symbol["for"]('react.memo');
      var REACT_LAZY_TYPE = Symbol["for"]('react.lazy');
      var REACT_OFFSCREEN_TYPE = Symbol["for"]('react.offscreen'); // -----------------------------------------------------------------------------

      var enableScopeAPI = false; // Experimental Create Event Handle API.

      var enableCacheElement = false;
      var enableTransitionTracing = false; // No known bugs, but needs performance testing

      var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
      // stuff. Intended to enable React core members to more easily debug scheduling
      // issues in DEV builds.

      var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol["for"]('react.module.reference');
      }

      function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') {
          return true;
        } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }

        if (_typeof$1(type) === 'object' && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }

        return false;
      }

      function typeOf(object) {
        if (_typeof$1(object) === 'object' && object !== null) {
          var $$typeof = object.$$typeof;

          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;

              switch (type) {
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                case REACT_SUSPENSE_LIST_TYPE:
                  return type;

                default:
                  var $$typeofType = type && type.$$typeof;

                  switch ($$typeofType) {
                    case REACT_SERVER_CONTEXT_TYPE:
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;

                    default:
                      return $$typeof;
                  }

              }

            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }

        return undefined;
      }

      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
          }
        }
        return false;
      }

      function isConcurrentMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
            hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

            console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
          }
        }
        return false;
      }

      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }

      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }

      function isElement(object) {
        return _typeof$1(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }

      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }

      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }

      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }

      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }

      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }

      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }

      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }

      function isSuspenseList(object) {
        return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
      }

      reactIs_development$1.ContextConsumer = ContextConsumer;
      reactIs_development$1.ContextProvider = ContextProvider;
      reactIs_development$1.Element = Element;
      reactIs_development$1.ForwardRef = ForwardRef;
      reactIs_development$1.Fragment = Fragment;
      reactIs_development$1.Lazy = Lazy;
      reactIs_development$1.Memo = Memo;
      reactIs_development$1.Portal = Portal;
      reactIs_development$1.Profiler = Profiler;
      reactIs_development$1.StrictMode = StrictMode;
      reactIs_development$1.Suspense = Suspense;
      reactIs_development$1.SuspenseList = SuspenseList;
      reactIs_development$1.isAsyncMode = isAsyncMode;
      reactIs_development$1.isConcurrentMode = isConcurrentMode;
      reactIs_development$1.isContextConsumer = isContextConsumer;
      reactIs_development$1.isContextProvider = isContextProvider;
      reactIs_development$1.isElement = isElement;
      reactIs_development$1.isForwardRef = isForwardRef;
      reactIs_development$1.isFragment = isFragment;
      reactIs_development$1.isLazy = isLazy;
      reactIs_development$1.isMemo = isMemo;
      reactIs_development$1.isPortal = isPortal;
      reactIs_development$1.isProfiler = isProfiler;
      reactIs_development$1.isStrictMode = isStrictMode;
      reactIs_development$1.isSuspense = isSuspense;
      reactIs_development$1.isSuspenseList = isSuspenseList;
      reactIs_development$1.isValidElementType = isValidElementType;
      reactIs_development$1.typeOf = typeOf;
    })();
  }

  {
    reactIs$2.exports = reactIs_development$1;
  }

  function supportRef(nodeOrComponent) {
    var _type$prototype, _nodeOrComponent$prot;

    var type = reactIs$2.exports.isMemo(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type;

    if (typeof type === "function" && !((_type$prototype = type.prototype) !== null && _type$prototype !== void 0 && _type$prototype.render)) {
      return false;
    }

    if (typeof nodeOrComponent === "function" && !((_nodeOrComponent$prot = nodeOrComponent.prototype) !== null && _nodeOrComponent$prot !== void 0 && _nodeOrComponent$prot.render)) {
      return false;
    }

    return true;
  }
  function getRefDom(domRef) {
    if (domRef.current && _typeof$1(domRef.current) === "object" && "currentElement" in domRef.current) {
      return domRef.current.currentElement;
    }

    return domRef.current;
  }

  function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

  function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function composeRefs() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }

    return function (instance) {
      var _iterator = _createForOfIteratorHelper$1(refs),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var ref = _step.value;

          if (typeof ref === "function") {
            ref(instance);
          } else if (ref) {
            ref.current = instance;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    };
  }

  var ESC_KEY = "Escape";
  function useTrigger(_ref) {
    var content = _ref.content,
        disabled = _ref.disabled,
        trigger = _ref.trigger,
        visible = _ref.visible,
        onVisibleChange = _ref.onVisibleChange,
        triggerRef = _ref.triggerRef;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var hasPopupMouseDown = React.useRef(false);
    var mouseDownTimer = React.useRef(0);
    var triggerDataKey = React.useRef("".concat(classPrefix, "-popup--").concat(Math.random().toFixed(10)));
    var shouldToggle = !disabled && content;
    React.useEffect(function () {
      if (!shouldToggle) return;

      var handleDocumentClick = function handleDocumentClick(e) {
        if (getRefDom(triggerRef).contains(e.target) || hasPopupMouseDown.current) {
          return;
        }

        visible && onVisibleChange(false, {
          e: e,
          trigger: "document"
        });
      };

      document.addEventListener("mousedown", handleDocumentClick);
      document.addEventListener("touchend", handleDocumentClick);
      return function () {
        document.removeEventListener("mousedown", handleDocumentClick);
        document.removeEventListener("touchend", handleDocumentClick);
      };
    }, [shouldToggle, visible, onVisibleChange, triggerRef]);

    function getPopupProps() {
      if (!shouldToggle) return {};
      return {
        onMouseEnter: function onMouseEnter(e) {
          if (trigger === "hover") {
            onVisibleChange(true, {
              e: e,
              trigger: "trigger-element-hover"
            });
          }
        },
        onMouseLeave: function onMouseLeave(e) {
          if (trigger === "hover") {
            onVisibleChange(false, {
              e: e,
              trigger: "trigger-element-hover"
            });
          }
        },
        onMouseDown: function onMouseDown() {
          clearTimeout(mouseDownTimer.current);
          hasPopupMouseDown.current = true;
          mouseDownTimer.current = window.setTimeout(function () {
            hasPopupMouseDown.current = false;
          });
        },
        onTouchEnd: function onTouchEnd() {
          clearTimeout(mouseDownTimer.current);
          hasPopupMouseDown.current = true;
          mouseDownTimer.current = window.setTimeout(function () {
            hasPopupMouseDown.current = false;
          });
        }
      };
    }

    function getTriggerProps(triggerNode) {
      if (!shouldToggle) return {};
      var triggerProps = {
        className: visible ? classNames$1(triggerNode.props.className, "".concat(classPrefix, "-popup-open")) : triggerNode.props.className,
        onClick: function onClick(e) {
          var _triggerNode$props$on, _triggerNode$props;

          if (trigger === "click") {
            onVisibleChange(!visible, {
              e: e,
              trigger: "trigger-element-click"
            });
          }

          (_triggerNode$props$on = (_triggerNode$props = triggerNode.props).onClick) === null || _triggerNode$props$on === void 0 ? void 0 : _triggerNode$props$on.call(_triggerNode$props, e);
        },
        onTouchStart: function onTouchStart(e) {
          var _triggerNode$props$on2, _triggerNode$props2;

          if (trigger === "hover") {
            onVisibleChange(true, {
              e: e,
              trigger: "trigger-element-hover"
            });
          }

          (_triggerNode$props$on2 = (_triggerNode$props2 = triggerNode.props).onTouchStart) === null || _triggerNode$props$on2 === void 0 ? void 0 : _triggerNode$props$on2.call(_triggerNode$props2, e);
        },
        onMouseEnter: function onMouseEnter(e) {
          var _triggerNode$props$on3, _triggerNode$props3;

          if (trigger === "hover") {
            onVisibleChange(true, {
              e: e,
              trigger: "trigger-element-hover"
            });
          }

          (_triggerNode$props$on3 = (_triggerNode$props3 = triggerNode.props).onMouseEnter) === null || _triggerNode$props$on3 === void 0 ? void 0 : _triggerNode$props$on3.call(_triggerNode$props3, e);
        },
        onMouseLeave: function onMouseLeave(e) {
          var _triggerNode$props$on4, _triggerNode$props4;

          if (trigger === "hover") {
            onVisibleChange(false, {
              e: e,
              trigger: "trigger-element-hover"
            });
          }

          (_triggerNode$props$on4 = (_triggerNode$props4 = triggerNode.props).onMouseLeave) === null || _triggerNode$props$on4 === void 0 ? void 0 : _triggerNode$props$on4.call(_triggerNode$props4, e);
        },
        onFocus: function onFocus() {
          var _triggerNode$props$on5, _triggerNode$props5;

          if (trigger === "focus") {
            onVisibleChange(true, {
              trigger: "trigger-element-focus"
            });
          }

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          (_triggerNode$props$on5 = (_triggerNode$props5 = triggerNode.props).onFocus) === null || _triggerNode$props$on5 === void 0 ? void 0 : _triggerNode$props$on5.call.apply(_triggerNode$props$on5, [_triggerNode$props5].concat(args));
        },
        onBlur: function onBlur() {
          var _triggerNode$props$on6, _triggerNode$props6;

          if (trigger === "focus") {
            onVisibleChange(false, {
              trigger: "trigger-element-blur"
            });
          }

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          (_triggerNode$props$on6 = (_triggerNode$props6 = triggerNode.props).onBlur) === null || _triggerNode$props$on6 === void 0 ? void 0 : _triggerNode$props$on6.call.apply(_triggerNode$props$on6, [_triggerNode$props6].concat(args));
        },
        onContextMenu: function onContextMenu(e) {
          var _triggerNode$props$on7, _triggerNode$props7;

          if (trigger === "context-menu") {
            onVisibleChange(true, {
              e: e,
              trigger: "context-menu"
            });
          }

          (_triggerNode$props$on7 = (_triggerNode$props7 = triggerNode.props).onContextMenu) === null || _triggerNode$props$on7 === void 0 ? void 0 : _triggerNode$props$on7.call(_triggerNode$props7, e);
        },
        onKeyDown: function onKeyDown(e) {
          var _triggerNode$props$on8, _triggerNode$props8;

          if ((e === null || e === void 0 ? void 0 : e.key) === ESC_KEY) {
            onVisibleChange(false, {
              e: e,
              trigger: "keydown-esc"
            });
          }

          (_triggerNode$props$on8 = (_triggerNode$props8 = triggerNode.props).onKeyDown) === null || _triggerNode$props$on8 === void 0 ? void 0 : _triggerNode$props$on8.call(_triggerNode$props8, e);
        }
      };

      if (supportRef(triggerNode)) {
        triggerProps.ref = composeRefs(triggerRef, triggerNode.ref);
      } else {
        triggerProps["data-popup"] = triggerDataKey.current;
      }

      return triggerProps;
    }

    function getTriggerNode(children) {
      var triggerNode = /*#__PURE__*/React.isValidElement(children) && !reactIs$2.exports.isFragment(children) ? children : /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-trigger")
      }, children);
      return /*#__PURE__*/React__default["default"].cloneElement(triggerNode, getTriggerProps(triggerNode));
    }

    function getTriggerDom() {
      return document.querySelector("[data-popup=\"".concat(triggerDataKey.current, "\"]"));
    }

    return {
      getTriggerNode: getTriggerNode,
      getPopupProps: getPopupProps,
      getTriggerDom: getTriggerDom
    };
  }

  var getTransitionParams = function getTransitionParams(_ref) {
    var classPrefix = _ref.classPrefix,
        expandAnimation = _ref.expandAnimation,
        fadeAnimation = _ref.fadeAnimation;
    if (!fadeAnimation) return {};
    var popupAnimationClassPrefix = expandAnimation ? "".concat(classPrefix, "-popup--animation-expand") : "".concat(classPrefix, "-popup--animation");
    return {
      classNames: {
        appear: "".concat(popupAnimationClassPrefix, "-enter ").concat(popupAnimationClassPrefix, "-enter-active"),
        appearActive: "".concat(popupAnimationClassPrefix, "-enter-active"),
        appearDone: "".concat(popupAnimationClassPrefix, "-enter-active ").concat(popupAnimationClassPrefix, "-enter-to"),
        enter: "".concat(popupAnimationClassPrefix, "-enter ").concat(popupAnimationClassPrefix, "-enter-active"),
        enterActive: "".concat(popupAnimationClassPrefix, "-enter-active"),
        enterDone: "".concat(popupAnimationClassPrefix, "-enter-active ").concat(popupAnimationClassPrefix, "-enter-to"),
        exit: "".concat(popupAnimationClassPrefix, "-leave ").concat(popupAnimationClassPrefix, "-leave-active"),
        exitActive: "".concat(popupAnimationClassPrefix, "-leave-active"),
        exitDone: "".concat(popupAnimationClassPrefix, "-leave-active ").concat(popupAnimationClassPrefix, "-leave-to")
      }
    };
  };

  var root$4 = _root;
  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */

  var now$1 = function now() {
    return root$4.Date.now();
  };

  var now_1 = now$1;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;
  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */

  function trimmedEndIndex$1(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}

    return index;
  }

  var _trimmedEndIndex = trimmedEndIndex$1;

  var trimmedEndIndex = _trimmedEndIndex;
  /** Used to match leading whitespace. */

  var reTrimStart = /^\s+/;
  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */

  function baseTrim$1(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
  }

  var _baseTrim = baseTrim$1;

  var baseTrim = _baseTrim,
      isObject$3 = isObject_1,
      isSymbol$2 = isSymbol_1;
  /** Used as references for various `Number` constants. */

  var NAN = 0 / 0;
  /** Used to detect bad signed hexadecimal string values. */

  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  /** Used to detect binary string values. */

  var reIsBinary = /^0b[01]+$/i;
  /** Used to detect octal string values. */

  var reIsOctal = /^0o[0-7]+$/i;
  /** Built-in method references without a dependency on `root`. */

  var freeParseInt = parseInt;
  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */

  function toNumber$3(value) {
    if (typeof value == 'number') {
      return value;
    }

    if (isSymbol$2(value)) {
      return NAN;
    }

    if (isObject$3(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject$3(other) ? other + '' : other;
    }

    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }

    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  var toNumber_1 = toNumber$3;

  var isObject$2 = isObject_1,
      now = now_1,
      toNumber$2 = toNumber_1;
  /** Error message constants. */

  var FUNC_ERROR_TEXT$1 = 'Expected a function';
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$2 = Math.max,
      nativeMin$1 = Math.min;
  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */

  function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }

    wait = toNumber$2(wait) || 0;

    if (isObject$2(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax$2(toNumber$2(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;
      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time; // Start the timer for the trailing edge.

      timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.

      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }

    function timerExpired() {
      var time = now();

      if (shouldInvoke(time)) {
        return trailingEdge(time);
      } // Restart the timer.


      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.

      if (trailing && lastArgs) {
        return invokeFunc(time);
      }

      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }

      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
      var time = now(),
          isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }

        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }

      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }

      return result;
    }

    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  var debounce_1 = debounce;

  var DEFAULT_OPTIONS = {
    debounceTime: 0,
    config: {
      attributes: true,
      childList: true,
      characterData: true,
      subtree: true
    }
  };
  function useMutationObservable(targetEl, cb) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;
    var observeRef = React.useRef(null);
    React.useEffect(function () {
      if (!cb || typeof cb !== "function") return;
      var debounceTime = options.debounceTime;
      observeRef.current = new MutationObserver(debounceTime > 0 ? debounce_1(cb, debounceTime) : cb);
    }, [cb, options]);
    React.useEffect(function () {
      if (!targetEl || !(targetEl !== null && targetEl !== void 0 && targetEl.nodeType)) return;
      var config = options.config;

      try {
        observeRef.current.observe(targetEl, config);
      } catch (e) {
        console.error(e);
      }

      return function () {
        observeRef.current.disconnect();
      };
    }, [targetEl, options]);
  }

  function useWindowSize() {
    var validWindow = (typeof window === "undefined" ? "undefined" : _typeof$1(window)) === "object";
    var getSize = React.useCallback(function () {
      return {
        width: validWindow ? window.innerWidth : void 0,
        height: validWindow ? window.innerHeight : void 0
      };
    }, [validWindow]);

    var _useState = React.useState(getSize()),
        _useState2 = _slicedToArray(_useState, 2),
        size = _useState2[0],
        setSize = _useState2[1];

    React.useEffect(function () {
      function handleResize() {
        setSize(getSize());
      }

      var debounceResize = debounce_1(handleResize, 400);

      if (validWindow) {
        window.addEventListener("resize", debounceResize);
        return function () {
          window.removeEventListener("resize", debounceResize);
          debounceResize.cancel();
        };
      }
    }, [getSize, validWindow]);
    return size;
  }

  var popupDefaultProps = {
    attach: "body",
    destroyOnClose: false,
    hideEmptyPopup: false,
    placement: "top",
    showArrow: false,
    trigger: "hover"
  };

  function ownKeys$33(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$32(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$33(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$33(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Popup$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var trigger = props.trigger,
        content = props.content,
        placement = props.placement,
        attach = props.attach,
        showArrow = props.showArrow,
        destroyOnClose = props.destroyOnClose,
        overlayClassName = props.overlayClassName,
        overlayInnerClassName = props.overlayInnerClassName,
        overlayStyle = props.overlayStyle,
        overlayInnerStyle = props.overlayInnerStyle,
        triggerElement = props.triggerElement,
        _props$children = props.children,
        children = _props$children === void 0 ? triggerElement : _props$children,
        disabled = props.disabled,
        zIndex = props.zIndex,
        _onScroll = props.onScroll,
        expandAnimation = props.expandAnimation,
        delay = props.delay,
        hideEmptyPopup = props.hideEmptyPopup,
        popperOptions = props.popperOptions,
        updateScrollTop = props.updateScrollTop;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useAnimation = useAnimation(),
        keepExpand = _useAnimation.keepExpand,
        keepFade = _useAnimation.keepFade;

    var _useWindowSize = useWindowSize(),
        windowHeight = _useWindowSize.height,
        windowWidth = _useWindowSize.width;

    var _useControlled = useControlled(props, "visible", props.onVisibleChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        visible = _useControlled2[0],
        onVisibleChange = _useControlled2[1];

    var _useState = React.useState(null),
        _useState2 = _slicedToArray(_useState, 2),
        popupElement = _useState2[0],
        setPopupElement = _useState2[1];

    var triggerRef = React.useRef(null);
    var popupRef = React.useRef(null);
    var portalRef = React.useRef(null);
    var contentRef = React.useRef(null);
    var popperRef = React.useRef(null);
    var DEFAULT_TRANSITION_TIMEOUT = 180;

    var _useMemo = React.useMemo(function () {
      if (Array.isArray(delay)) return delay;
      return [delay, delay];
    }, [delay]),
        _useMemo2 = _slicedToArray(_useMemo, 2),
        _useMemo2$ = _useMemo2[0],
        appearDelay = _useMemo2$ === void 0 ? 0 : _useMemo2$,
        _useMemo2$2 = _useMemo2[1],
        exitDelay = _useMemo2$2 === void 0 ? 0 : _useMemo2$2;

    var showOverlay = React.useMemo(function () {
      if (hideEmptyPopup && !content) return false;
      return visible || popupElement;
    }, [hideEmptyPopup, content, visible, popupElement]);
    var popperPlacement = React.useMemo(function () {
      return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
    }, [placement]);

    var _useTrigger = useTrigger({
      triggerRef: triggerRef,
      content: content,
      disabled: disabled,
      trigger: trigger,
      visible: visible,
      onVisibleChange: onVisibleChange
    }),
        getTriggerNode = _useTrigger.getTriggerNode,
        getPopupProps = _useTrigger.getPopupProps,
        getTriggerDom = _useTrigger.getTriggerDom;

    var triggerNode = getTriggerNode(children);
    useMutationObservable(getRefDom(triggerRef), function () {
      var _popperRef$current, _popperRef$current$up;

      (_popperRef$current = popperRef.current) === null || _popperRef$current === void 0 ? void 0 : (_popperRef$current$up = _popperRef$current.update) === null || _popperRef$current$up === void 0 ? void 0 : _popperRef$current$up.call(_popperRef$current);
    });
    React.useEffect(function () {
      var _popperRef$current2, _popperRef$current2$u;

      (_popperRef$current2 = popperRef.current) === null || _popperRef$current2 === void 0 ? void 0 : (_popperRef$current2$u = _popperRef$current2.update) === null || _popperRef$current2$u === void 0 ? void 0 : _popperRef$current2$u.call(_popperRef$current2);
    }, [visible, content, windowHeight, windowWidth]);
    React.useEffect(function () {
      if (!triggerRef.current) triggerRef.current = getTriggerDom();
      visible && (updateScrollTop === null || updateScrollTop === void 0 ? void 0 : updateScrollTop(contentRef.current));
    }, [visible, updateScrollTop, getTriggerDom]);

    function handleExited() {
      !destroyOnClose && popupElement && (popupElement.style.display = "none");
    }

    function handleEnter() {
      !destroyOnClose && popupElement && (popupElement.style.display = "block");
    }

    popperRef.current = usePopper(getRefDom(triggerRef), popupElement, _objectSpread$32({
      placement: popperPlacement
    }, popperOptions));
    var _popperRef$current3 = popperRef.current,
        styles = _popperRef$current3.styles,
        attributes = _popperRef$current3.attributes;

    function getOverlayStyle(overlayStyle2) {
      if (getRefDom(triggerRef) && popupRef.current && typeof overlayStyle2 === "function") {
        return _objectSpread$32({}, overlayStyle2(getRefDom(triggerRef), popupRef.current));
      }

      return _objectSpread$32({}, overlayStyle2);
    }

    var overlay = showOverlay && /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
      appear: true,
      "in": visible,
      timeout: {
        appear: DEFAULT_TRANSITION_TIMEOUT + appearDelay,
        enter: DEFAULT_TRANSITION_TIMEOUT + appearDelay,
        exit: DEFAULT_TRANSITION_TIMEOUT + exitDelay
      },
      nodeRef: portalRef,
      unmountOnExit: destroyOnClose,
      onEnter: handleEnter,
      onExited: handleExited
    }, /* @__PURE__ */React__default["default"].createElement(Portal, {
      triggerNode: getRefDom(triggerRef),
      attach: attach,
      ref: portalRef
    }, /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, _objectSpread$32({
      appear: true,
      timeout: {
        appear: appearDelay,
        enter: appearDelay,
        exit: exitDelay
      },
      "in": visible,
      nodeRef: popupRef
    }, getTransitionParams({
      classPrefix: classPrefix,
      fadeAnimation: keepFade,
      expandAnimation: expandAnimation && keepExpand
    })), /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$32(_objectSpread$32({
      ref: function ref(node) {
        if (node) {
          popupRef.current = node;
          setPopupElement(node);
        }
      },
      style: _objectSpread$32(_objectSpread$32({}, styles.popper), {}, {
        zIndex: zIndex
      }, getOverlayStyle(overlayStyle)),
      className: classNames$1("".concat(classPrefix, "-popup"), overlayClassName)
    }, attributes.popper), getPopupProps()), /* @__PURE__ */React__default["default"].createElement("div", {
      ref: contentRef,
      className: classNames$1("".concat(classPrefix, "-popup__content"), _defineProperty$3({}, "".concat(classPrefix, "-popup__content--arrow"), showArrow), overlayInnerClassName),
      style: getOverlayStyle(overlayInnerStyle),
      onScroll: function onScroll(e) {
        return _onScroll === null || _onScroll === void 0 ? void 0 : _onScroll({
          e: e
        });
      }
    }, showArrow ? /* @__PURE__ */React__default["default"].createElement("div", {
      style: styles.arrow,
      className: "".concat(classPrefix, "-popup__arrow")
    }) : null, content)))));
    React.useImperativeHandle(ref, function () {
      return {
        getPopper: function getPopper() {
          return popperRef.current;
        },
        getPopupElement: function getPopupElement() {
          return popupRef.current;
        },
        getPortalElement: function getPortalElement() {
          return portalRef.current;
        }
      };
    });
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, triggerNode, overlay);
  });
  Popup$1.displayName = "Popup";
  Popup$1.defaultProps = popupDefaultProps;

  var Popup = Popup$1;

  function setStyle(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  var period = 200;
  var noneRippleBg = "rgba(0, 0, 0, 0)";
  var defaultRippleColor = "rgba(0, 0, 0, 0.35)";

  var getRippleColor = function getRippleColor(el, fixedRippleColor) {
    var _el$dataset;

    if (fixedRippleColor) {
      return fixedRippleColor;
    }

    if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
      var rippleColor = el.dataset.ripple;
      return rippleColor;
    }

    var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");

    if (cssVariable) {
      return cssVariable;
    }

    return defaultRippleColor;
  };

  function useRipple(ref, fixedRippleColor) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useAnimation = useAnimation(),
        keepRipple = _useAnimation.keepRipple;

    var rippleContainer = React.useMemo(function () {
      if (!canUseDocument) return null;
      var container = document.createElement("div");
      container.className = "".concat(classPrefix, "-ripple");
      return container;
    }, [classPrefix]);
    var handleAddRipple = React.useCallback(function (e) {
      var el = ref === null || ref === void 0 ? void 0 : ref.current;
      var rippleColor = getRippleColor(el, fixedRippleColor);
      if (e.button !== 0 || !el || !keepRipple) return;
      if (el.classList.contains("".concat(classPrefix, "-is-active")) || el.classList.contains("".concat(classPrefix, "-is-disabled")) || el.classList.contains("".concat(classPrefix, "-is-checked")) || el.classList.contains("".concat(classPrefix, "-is-loading"))) return;
      var elStyle = getComputedStyle(el);
      var elBorder = parseInt(elStyle.borderWidth, 10);
      var border = elBorder > 0 ? elBorder : 0;
      var width = el.offsetWidth;
      var height = el.offsetHeight;

      if (rippleContainer.parentNode === null) {
        setStyle(rippleContainer, {
          position: "absolute",
          left: "".concat(0 - border, "px"),
          top: "".concat(0 - border, "px"),
          width: "".concat(width, "px"),
          height: "".concat(height, "px"),
          borderRadius: elStyle.borderRadius,
          pointerEvents: "none",
          overflow: "hidden"
        });
        el.appendChild(rippleContainer);
      }

      var ripple = document.createElement("div");
      ripple.className = "".concat(classPrefix, "-ripple__inner");
      setStyle(ripple, {
        marginTop: "0",
        marginLeft: "0",
        right: "".concat(width, "px"),
        width: "".concat(width + 20, "px"),
        height: "100%",
        transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
        transform: "skewX(-8deg)",
        pointerEvents: "none",
        position: "absolute",
        zIndex: 0,
        backgroundColor: rippleColor,
        opacity: "0.9"
      });
      var elMap = /* @__PURE__ */new WeakMap();

      for (var n = el.children.length, i = 0; i < n; ++i) {
        var child = el.children[i];

        if (child.style.zIndex === "" && child !== rippleContainer) {
          child.style.zIndex = "1";
          elMap.set(child, true);
        }
      }

      var initPosition = el.style.position ? el.style.position : getComputedStyle(el).position;

      if (initPosition === "" || initPosition === "static") {
        el.style.position = "relative";
      }

      rippleContainer.insertBefore(ripple, rippleContainer.firstChild);
      setTimeout(function () {
        ripple.style.transform = "translateX(".concat(width, "px)");
      }, 0);

      var handleClearRipple = function handleClearRipple() {
        var el2 = ref === null || ref === void 0 ? void 0 : ref.current;
        ripple.style.backgroundColor = noneRippleBg;
        if (!el2) return;
        el2.removeEventListener("pointerup", handleClearRipple, false);
        el2.removeEventListener("pointerleave", handleClearRipple, false);
        setTimeout(function () {
          ripple.remove();
          if (rippleContainer.children.length === 0) rippleContainer.remove();
        }, period * 2 + 100);
      };

      el.addEventListener("pointerup", handleClearRipple, false);
      el.addEventListener("pointerleave", handleClearRipple, false);
    }, [classPrefix, ref, fixedRippleColor, rippleContainer, keepRipple]);
    React.useEffect(function () {
      var el = ref === null || ref === void 0 ? void 0 : ref.current;
      if (!el) return;
      el.addEventListener("pointerdown", handleAddRipple, false);
      return function () {
        el.removeEventListener("pointerdown", handleAddRipple, false);
      };
    }, [handleAddRipple, fixedRippleColor, ref]);
  }

  var buttonDefaultProps = {
    block: false,
    ghost: false,
    loading: false,
    shape: "rectangle",
    size: "medium",
    type: "button",
    variant: "base"
  };

  var _excluded$y = ["type", "theme", "variant", "icon", "disabled", "loading", "size", "block", "ghost", "shape", "children", "content", "className", "suffix", "href", "tag", "onClick"];

  function ownKeys$32(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$31(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$32(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$32(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Button$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var type = props.type,
        theme = props.theme,
        variant = props.variant,
        icon = props.icon,
        disabled = props.disabled,
        loading = props.loading,
        size = props.size,
        block = props.block,
        ghost = props.ghost,
        shape = props.shape,
        children = props.children,
        content = props.content,
        className = props.className,
        suffix = props.suffix,
        href = props.href,
        tag = props.tag,
        onClick = props.onClick,
        buttonProps = _objectWithoutProperties$2(props, _excluded$y);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var btnRef = React.useRef();
    useRipple(ref || btnRef);
    var renderChildren = content !== null && content !== void 0 ? content : children;
    var iconNode = icon;
    if (loading) iconNode = /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: loading,
      inheritColor: true
    });
    var renderTheme = React.useMemo(function () {
      if (!theme) {
        if (variant === "base") return "primary";
        return "default";
      }

      return theme;
    }, [theme, variant]);
    var renderTag = React.useMemo(function () {
      if (!tag && href) return "a";
      return tag || "button";
    }, [tag, href]);
    return /*#__PURE__*/React__default["default"].createElement(renderTag, _objectSpread$31(_objectSpread$31({}, buttonProps), {}, {
      href: href,
      type: type,
      ref: ref || btnRef,
      disabled: disabled || loading,
      className: classNames$1(className, ["".concat(classPrefix, "-button"), "".concat(classPrefix, "-button--theme-").concat(renderTheme), "".concat(classPrefix, "-button--variant-").concat(variant)], (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-button--shape-").concat(shape), shape !== "rectangle"), _defineProperty$3(_classNames, "".concat(classPrefix, "-button--ghost"), ghost), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-loading"), loading), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-full-width"), block), _classNames)),
      onClick: !disabled && !loading ? onClick : void 0
    }), /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, iconNode, renderChildren && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-button__text")
    }, renderChildren), suffix && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-button__suffix")
    }, suffix)));
  });
  Button$1.displayName = "Button";
  Button$1.defaultProps = buttonDefaultProps;

  var Button = Button$1;

  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose$1(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var classnames = {
    exports: {}
  };
  /*!
    Copyright (c) 2018 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */

  (function (module) {
    /* global define */
    (function () {

      var hasOwn = {}.hasOwnProperty;

      function classNames() {
        var classes = [];

        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;

          var argType = _typeof$1(arg);

          if (argType === 'string' || argType === 'number') {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);

              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === 'object') {
            if (arg.toString === Object.prototype.toString) {
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }

        return classes.join(' ');
      }

      if (module.exports) {
        classNames["default"] = classNames;
        module.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  })(classnames);

  var classNames = classnames.exports;

  var DEFAULT_CLASS_PREFIX = "t";
  var DEFAULT_LOCALE = "zh-CN";
  var ConfigContext = /*#__PURE__*/React.createContext({
    classPrefix: DEFAULT_CLASS_PREFIX,
    locale: DEFAULT_LOCALE
  });

  var useConfig = function useConfig() {
    return React.useContext(ConfigContext);
  };

  function useCommonClassName$2() {
    var _useConfig = useConfig(),
        classPrefix = _useConfig.classPrefix;

    return React.useMemo(function () {
      return {
        SIZE: {
          "default": "",
          xs: "".concat(classPrefix, "-size-xs"),
          small: "".concat(classPrefix, "-size-s"),
          medium: "".concat(classPrefix, "-size-m"),
          large: "".concat(classPrefix, "-size-l"),
          xl: "".concat(classPrefix, "-size-xl"),
          block: "".concat(classPrefix, "-size-full-width")
        },
        STATUS: {
          loading: "".concat(classPrefix, "-is-loading"),
          disabled: "".concat(classPrefix, "-is-disabled"),
          focused: "".concat(classPrefix, "-is-focused"),
          success: "".concat(classPrefix, "-is-success"),
          error: "".concat(classPrefix, "-is-error"),
          warning: "".concat(classPrefix, "-is-warning"),
          selected: "".concat(classPrefix, "-is-selected"),
          active: "".concat(classPrefix, "-is-active"),
          checked: "".concat(classPrefix, "-is-checked"),
          current: "".concat(classPrefix, "-is-current"),
          hidden: "".concat(classPrefix, "-is-hidden"),
          visible: "".concat(classPrefix, "-is-visible"),
          expanded: "".concat(classPrefix, "-is-expanded"),
          indeterminate: "".concat(classPrefix, "-is-indeterminate")
        }
      };
    }, [classPrefix]);
  }

  function useSizeProps(size) {
    var COMMON_SIZE_CLASS_NAMES = useCommonClassName$2().SIZE;

    if (typeof size === "undefined") {
      return {};
    }

    if (!(size in COMMON_SIZE_CLASS_NAMES)) {
      return {
        className: "",
        style: {
          fontSize: size
        }
      };
    }

    return {
      className: COMMON_SIZE_CLASS_NAMES[size],
      style: {}
    };
  }

  var _excluded$x = ["icon", "id", "className", "size", "style"];

  function ownKeys$31(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$30(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$31(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$31(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function render(node, id, rootProps) {
    return /*#__PURE__*/React.createElement(node.tag, _objectSpread$30(_objectSpread$30({
      key: id
    }, node.attrs), rootProps), (node.children || []).map(function (child, index) {
      return render(child, "".concat(id, "-").concat(node.tag, "-").concat(index));
    }));
  }

  var IconBase = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var icon = props.icon,
        id = props.id,
        className = props.className,
        size = props.size,
        style = props.style,
        restProps = _objectWithoutProperties$1(props, _excluded$x);

    var _useSizeProps = useSizeProps(size),
        sizeClassName = _useSizeProps.className,
        sizeStyle = _useSizeProps.style;

    var cls = classNames("t-icon", "t-icon-".concat(id), className, sizeClassName);
    return render(icon, "".concat(id), _objectSpread$30({
      ref: ref,
      className: cls,
      style: _objectSpread$30(_objectSpread$30({}, style), sizeStyle)
    }, restProps));
  });

  function ownKeys$30(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2$(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$30(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$30(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$J = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 11V8.5H5v-1h2.5V5h1v2.5H11v1H8.5V11h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var AddRectangleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2$(_objectSpread$2$({}, props), {}, {
      id: "add-rectangle",
      ref: ref,
      icon: element$J
    }));
  });
  AddRectangleIcon.displayName = "AddRectangleIcon";

  function ownKeys$2$(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2_(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2$(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2$(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$I = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.35 8.65v3.85h1.3V8.65h3.85v-1.3H8.65V3.5h-1.3v3.85H3.5v1.3h3.85z",
        "fillOpacity": 0.9
      }
    }]
  };
  var AddIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2_(_objectSpread$2_({}, props), {}, {
      id: "add",
      ref: ref,
      icon: element$I
    }));
  });
  AddIcon.displayName = "AddIcon";

  function ownKeys$2_(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2Z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2_(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2_(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$H = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.77 11.98l1.38 1.37.7-.7-9.7-9.7-.7.7 1.2 1.21a7.9 7.9 0 00-2.53 2.91L1 8l.12.23a7.72 7.72 0 009.65 3.75zM10 11.2A6.67 6.67 0 012.11 8c.56-1 1.34-1.83 2.26-2.43l1.08 1.09a2.88 2.88 0 003.9 3.9l.64.64zM6.21 7.42l2.37 2.37a1.88 1.88 0 01-2.37-2.37zM14.88 8.23L15 8l-.12-.23a7.73 7.73 0 00-9.35-3.86l.8.8A6.7 6.7 0 0113.9 8a6.87 6.87 0 01-2.02 2.26l.7.7a7.9 7.9 0 002.3-2.73z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8c0 .37-.07.73-.2 1.06l-.82-.82.02-.24a1.88 1.88 0 00-2.12-1.86l-.82-.82A2.87 2.87 0 0110.88 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var BrowseOffIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2Z(_objectSpread$2Z({}, props), {}, {
      id: "browse-off",
      ref: ref,
      icon: element$H
    }));
  });
  BrowseOffIcon.displayName = "BrowseOffIcon";

  function ownKeys$2Z(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2Y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$G = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8a2.88 2.88 0 11-5.76 0 2.88 2.88 0 015.76 0zm-1 0a1.88 1.88 0 10-3.76 0 1.88 1.88 0 003.76 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.12 8.23A7.72 7.72 0 008 12.5c2.9 0 5.54-1.63 6.88-4.27L15 8l-.12-.23A7.73 7.73 0 008 3.5a7.74 7.74 0 00-6.88 4.27L1 8l.12.23zM8 11.5A6.73 6.73 0 012.11 8 6.73 6.73 0 0113.9 8 6.74 6.74 0 018 11.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var BrowseIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2Y(_objectSpread$2Y({}, props), {}, {
      id: "browse",
      ref: ref,
      icon: element$G
    }));
  });
  BrowseIcon.displayName = "BrowseIcon";

  function ownKeys$2Y(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2X(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$F = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 3H6V1.5H5V3H3a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V4a1 1 0 00-1-1h-2V1.5h-1V3zM5 5h1V4h4v1h1V4h2v2H3V4h2v1zM3 7h10v6H3V7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CalendarIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2X(_objectSpread$2X({}, props), {}, {
      id: "calendar",
      ref: ref,
      icon: element$F
    }));
  });
  CalendarIcon.displayName = "CalendarIcon";

  function ownKeys$2X(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2W(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2X(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2X(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$E = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 5v6l4.5-3L6 5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CaretRightSmallIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2W(_objectSpread$2W({}, props), {}, {
      id: "caret-right-small",
      ref: ref,
      icon: element$E
    }));
  });
  CaretRightSmallIcon.displayName = "CaretRightSmallIcon";

  function ownKeys$2W(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2V(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2W(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2W(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$D = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM4.5 8.2l.7-.7L7 9.3l3.8-3.8.7.7L7 10.7 4.5 8.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CheckCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2V(_objectSpread$2V({}, props), {}, {
      id: "check-circle-filled",
      ref: ref,
      icon: element$D
    }));
  });
  CheckCircleFilledIcon.displayName = "CheckCircleFilledIcon";

  function ownKeys$2V(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2U(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2V(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2V(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$C = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.5 8.2L7 10.7l4.5-4.5-.7-.7L7 9.3 5.2 7.5l-.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.11 2.18a7 7 0 117.78 11.64A7 7 0 014.1 2.18zm.56 10.8a6 6 0 106.66-9.97A6 6 0 004.67 13z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CheckCircleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2U(_objectSpread$2U({}, props), {}, {
      id: "check-circle",
      ref: ref,
      icon: element$C
    }));
  });
  CheckCircleIcon.displayName = "CheckCircleIcon";

  function ownKeys$2U(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2T(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2U(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2U(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$B = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.43 9.92l6.23-6.22.92.92-7.15 7.14L1.97 7.3l.92-.92 3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CheckIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2T(_objectSpread$2T({}, props), {}, {
      id: "check",
      ref: ref,
      icon: element$B
    }));
  });
  CheckIcon.displayName = "CheckIcon";

  function ownKeys$2T(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2S(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2T(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2T(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$A = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.54 6.46l.92-.92L8 9.08l3.54-3.54.92.92L8 10.92 3.54 6.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronDownIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2S(_objectSpread$2S({}, props), {}, {
      id: "chevron-down",
      ref: ref,
      icon: element$A
    }));
  });
  ChevronDownIcon.displayName = "ChevronDownIcon";

  function ownKeys$2S(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2R(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2S(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2S(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.04 4.46l-.92-.92L7.66 8l4.46 4.46.92-.92L9.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.04 4.46l-.92-.92L2.66 8l4.46 4.46.92-.92L4.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronLeftDoubleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2R(_objectSpread$2R({}, props), {}, {
      id: "chevron-left-double",
      ref: ref,
      icon: element$z
    }));
  });
  ChevronLeftDoubleIcon.displayName = "ChevronLeftDoubleIcon";

  function ownKeys$2R(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2Q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2R(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2R(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.54 3.54l.92.92L6.92 8l3.54 3.54-.92.92L5.08 8l4.46-4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronLeftIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2Q(_objectSpread$2Q({}, props), {}, {
      id: "chevron-left",
      ref: ref,
      icon: element$y
    }));
  });
  ChevronLeftIcon.displayName = "ChevronLeftIcon";

  function ownKeys$2Q(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2P(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$x = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.2 5.2L9 8l-2.8 2.8.71.7 3.5-3.5-3.5-3.5-.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 118 1a7 7 0 010 14zm0-1A6 6 0 108 2a6 6 0 000 12z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRightCircleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2P(_objectSpread$2P({}, props), {}, {
      id: "chevron-right-circle",
      ref: ref,
      icon: element$x
    }));
  });
  ChevronRightCircleIcon.displayName = "ChevronRightCircleIcon";

  function ownKeys$2P(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2O(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2P(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2P(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.96 11.54l.92.92L8.34 8 3.88 3.54l-.92.92L6.5 8l-3.54 3.54zm5 0l.92.92L13.34 8 8.88 3.54l-.92.92L11.5 8l-3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRightDoubleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2O(_objectSpread$2O({}, props), {}, {
      id: "chevron-right-double",
      ref: ref,
      icon: element$w
    }));
  });
  ChevronRightDoubleIcon.displayName = "ChevronRightDoubleIcon";

  function ownKeys$2O(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2N(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2O(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2O(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.46 12.46l-.92-.92L9.08 8 5.54 4.46l.92-.92L10.92 8l-4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRightIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2N(_objectSpread$2N({}, props), {}, {
      id: "chevron-right",
      ref: ref,
      icon: element$v
    }));
  });
  ChevronRightIcon.displayName = "ChevronRightIcon";

  function ownKeys$2N(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2M(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2N(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2N(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.46 9.54l-.92.92L8 6.92l-3.54 3.54-.92-.92L8 5.08l4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronUpIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2M(_objectSpread$2M({}, props), {}, {
      id: "chevron-up",
      ref: ref,
      icon: element$u
    }));
  });
  ChevronUpIcon.displayName = "ChevronUpIcon";

  function ownKeys$2M(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2L(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2M(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2M(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.67 4.95L8 7.29l2.33-2.34.7.7L8.7 8l2.34 2.35-.71.7L8 8.71l-2.33 2.34-.7-.7L7.3 8 4.96 5.65l.71-.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CloseCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2L(_objectSpread$2L({}, props), {}, {
      id: "close-circle-filled",
      ref: ref,
      icon: element$t
    }));
  });
  CloseCircleFilledIcon.displayName = "CloseCircleFilledIcon";

  function ownKeys$2L(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2K(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2L(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2L(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.98 10.31L7.3 8 5 5.69l.7-.7L8 7.28 10.31 5l.7.7L8.72 8l2.3 2.31-.7.7L8 8.72 5.69 11l-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1a7 7 0 110 14A7 7 0 018 1zm0 1a6 6 0 100 12A6 6 0 008 2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CloseCircleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2K(_objectSpread$2K({}, props), {}, {
      id: "close-circle",
      ref: ref,
      icon: element$s
    }));
  });
  CloseCircleIcon.displayName = "CloseCircleIcon";

  function ownKeys$2K(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2J(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2K(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2K(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 8.92L11.08 12l.92-.92L8.92 8 12 4.92 11.08 4 8 7.08 4.92 4 4 4.92 7.08 8 4 11.08l.92.92L8 8.92z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CloseIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2J(_objectSpread$2J({}, props), {}, {
      id: "close",
      ref: ref,
      icon: element$r
    }));
  });
  CloseIcon.displayName = "CloseIcon";

  function ownKeys$2J(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2I(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2J(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2J(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 12V6h1v6H6zM9 6v6h1V6H9z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.5 3H14v1h-1v10a1 1 0 01-1 1H4a1 1 0 01-1-1V4H2V3h3.5V1.8c0-.44.36-.8.8-.8h3.4c.44 0 .8.36.8.8V3zm-4 0h3V2h-3v1zM4 4v10h8V4H4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var DeleteIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2I(_objectSpread$2I({}, props), {}, {
      id: "delete",
      ref: ref,
      icon: element$q
    }));
  });
  DeleteIcon.displayName = "DeleteIcon";

  function ownKeys$2I(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2H(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2I(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2I(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.26 5.81L8.5 9.58V.5h-1v9.08L3.74 5.8l-.71.71 4.62 4.62c.2.2.5.2.7 0l4.62-4.62-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var DownloadIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2H(_objectSpread$2H({}, props), {}, {
      id: "download",
      ref: ref,
      icon: element$p
    }));
  });
  DownloadIcon.displayName = "DownloadIcon";

  function ownKeys$2H(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2G(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2H(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2H(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "fill": "currentColor",
        "opacity": 0.9,
        "fillOpacity": 0.9
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "d": "M14.13 4.95L10.9 1.71l.7-.71 3.25 3.24-.7.71zM5.97 13.11l-3.61.72a.3.3 0 01-.35-.35l.72-3.61 7.3-7.3 3.24 3.24-7.3 7.3zm5.89-7.3l-1.83-1.83-6.38 6.38-.46 2.29 2.29-.46 6.38-6.38zM15 11h-4v1h4v-1zM15 13H8.5v1H15v-1z"
        }
      }]
    }]
  };
  var Edit1Icon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2G(_objectSpread$2G({}, props), {}, {
      id: "edit-1",
      ref: ref,
      icon: element$o
    }));
  });
  Edit1Icon.displayName = "Edit1Icon";

  function ownKeys$2G(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2F(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2G(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2G(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 9a1 1 0 110-2 1 1 0 010 2zM7 8a1 1 0 102 0 1 1 0 00-2 0zM12 8a1 1 0 102 0 1 1 0 00-2 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var EllipsisIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2F(_objectSpread$2F({}, props), {}, {
      id: "ellipsis",
      ref: ref,
      icon: element$n
    }));
  });
  EllipsisIcon.displayName = "EllipsisIcon";

  function ownKeys$2F(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2E(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2F(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2F(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM8.5 4v5.5h-1V4h1zm-1.1 7h1.2v1.2H7.4V11z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ErrorCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2E(_objectSpread$2E({}, props), {}, {
      id: "error-circle-filled",
      ref: ref,
      icon: element$m
    }));
  });
  ErrorCircleFilledIcon.displayName = "ErrorCircleFilledIcon";

  function ownKeys$2E(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2D(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2E(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2E(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 4v5.5h-1V4h1zM8.6 10.5H7.4v1.2h1.2v-1.2z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zm-1 0A6 6 0 112 8a6 6 0 0112 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ErrorCircleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2D(_objectSpread$2D({}, props), {}, {
      id: "error-circle",
      ref: ref,
      icon: element$l
    }));
  });
  ErrorCircleIcon.displayName = "ErrorCircleIcon";

  function ownKeys$2D(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2C(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2D(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2D(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 1.92C4 1.34 4.52 1 5 1h4.37a1 1 0 01.71.3L13.71 5a1 1 0 01.29.7v6.38c0 .58-.52.92-1 .92H5c-.48 0-1-.34-1-.92V1.92zM5 2v10h8V6.01H9V2H5zm5 .65V5h2.32L10 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 5v9.01a1 1 0 001 1h8v-1H3V5H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var FileCopyIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2C(_objectSpread$2C({}, props), {}, {
      id: "file-copy",
      ref: ref,
      icon: element$k
    }));
  });
  FileCopyIcon.displayName = "FileCopyIcon";

  function ownKeys$2C(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2B(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2C(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2C(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v1.79l-4.25 2.5V14h-3.5V7.29L2 4.79V3zm11 0H3v1.21l4.25 2.5V13h1.5V6.71L13 4.21V3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var FilterIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2B(_objectSpread$2B({}, props), {}, {
      id: "filter",
      ref: ref,
      icon: element$j
    }));
  });
  FilterIcon.displayName = "FilterIcon";

  function ownKeys$2B(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2A(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2B(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2B(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.8 6.63a2.2 2.2 0 014.39 0c0 .97-.75 1.72-1.49 2.02a.34.34 0 00-.2.32v.8h-1v-.8c0-.56.33-1.04.82-1.24.5-.2.87-.66.87-1.1a1.2 1.2 0 00-2.39 0h-1zm1.67 4.54a.53.53 0 111.05 0 .53.53 0 01-1.05 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var HelpCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2A(_objectSpread$2A({}, props), {}, {
      id: "help-circle-filled",
      ref: ref,
      icon: element$i
    }));
  });
  HelpCircleFilledIcon.displayName = "HelpCircleFilledIcon";

  function ownKeys$2A(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2A(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2A(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 13V8h1v2.3l3-3 5.7 5.7H13V3H8V2h5a1 1 0 011 1v10a1 1 0 01-1 1H3a1 1 0 01-1-1zm4-4.3l-3 3V13h7.3L6 8.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 6a2 2 0 11-4 0 2 2 0 014 0zm-1 0a1 1 0 10-2 0 1 1 0 002 0zM6.28 5.56l-.7.7-1.42-1.4-1.41 1.4-.71-.7 1.41-1.41-1.41-1.42.7-.7 1.42 1.4 1.41-1.4.71.7-1.41 1.42 1.41 1.4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ImageErrorIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2z(_objectSpread$2z({}, props), {}, {
      id: "image-error",
      ref: ref,
      icon: element$h
    }));
  });
  ImageErrorIcon.displayName = "ImageErrorIcon";

  function ownKeys$2z(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 8a2 2 0 100-4 2 2 0 000 4zm0-1a1 1 0 100-2 1 1 0 000 2z",
        "fillOpacity": 0.9,
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 13a1 1 0 001 1h10a1 1 0 001-1V3a1 1 0 00-1-1H3a1 1 0 00-1 1v10zm1-1.3l3-3 4.3 4.3H3v-1.3zm0-1.4V3h10v10h-1.3L6 7.3l-3 3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ImageIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2y(_objectSpread$2y({}, props), {}, {
      id: "image",
      ref: ref,
      icon: element$g
    }));
  });
  ImageIcon.displayName = "ImageIcon";

  function ownKeys$2y(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2x(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var InfoCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2x(_objectSpread$2x({}, props), {}, {
      id: "info-circle-filled",
      ref: ref,
      icon: element$f
    }));
  });
  InfoCircleFilledIcon.displayName = "InfoCircleFilledIcon";

  function ownKeys$2x(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2w(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2x(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2x(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5 8.5h6v-1H5v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var MinusRectangleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2w(_objectSpread$2w({}, props), {}, {
      id: "minus-rectangle",
      ref: ref,
      icon: element$e
    }));
  });
  MinusRectangleIcon.displayName = "MinusRectangleIcon";

  function ownKeys$2w(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2v(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2w(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2w(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 1h1v14h-1V1zM14.72 12.44a.5.5 0 01-.35.54c-.07.02-.17.02-.38.02h-3.34l-.27-.01a.5.5 0 01-.37-.37l-.01-.27V5c0-.53 0-.8.04-.89a.5.5 0 01.8-.17c.07.07.18.3.4.8l3.34 7.34c.09.19.13.28.14.36zM11 12h2.45L11 6.62V12zM1.63 12.98c.07.02.17.02.38.02h3.34l.27-.01a.5.5 0 00.37-.37l.01-.27V5c0-.53 0-.8-.04-.89a.5.5 0 00-.8-.17c-.07.07-.18.3-.4.8l-3.34 7.34c-.09.19-.13.28-.14.36a.5.5 0 00.35.54zM5 6.62V12H2.55L5 6.62z",
        "fillOpacity": 0.9
      }
    }]
  };
  var MirrorIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2v(_objectSpread$2v({}, props), {}, {
      id: "mirror",
      ref: ref,
      icon: element$d
    }));
  });
  MirrorIcon.displayName = "MirrorIcon";

  function ownKeys$2v(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2u(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2v(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2v(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.4 4.46l-.91-.92L7.03 8l4.46 4.46.92-.92L8.86 8l3.55-3.54zM4.8 4v8h1.3V4H4.8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var PageFirstIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2u(_objectSpread$2u({}, props), {}, {
      id: "page-first",
      ref: ref,
      icon: element$c
    }));
  });
  PageFirstIcon.displayName = "PageFirstIcon";

  function ownKeys$2u(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2t(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2u(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2u(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.6 11.54l.91.92L8.97 8 4.51 3.54l-.92.92L7.14 8l-3.55 3.54zm7.6.46V4H9.9v8h1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var PageLastIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2t(_objectSpread$2t({}, props), {}, {
      id: "page-last",
      ref: ref,
      icon: element$b
    }));
  });
  PageLastIcon.displayName = "PageLastIcon";

  function ownKeys$2t(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2s(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2t(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2t(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 7.35h9v1.3h-9v-1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var RemoveIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2s(_objectSpread$2s({}, props), {}, {
      id: "remove",
      ref: ref,
      icon: element$a
    }));
  });
  RemoveIcon.displayName = "RemoveIcon";

  function ownKeys$2s(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2r(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2s(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2s(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$9 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 2h1v6.08A6 6 0 017.92 13H14v1H3a1 1 0 01-1-1V2zm4.9 11A5 5 0 003 9.1V13h3.9z",
        "fillOpacity": 0.9
      }
    }]
  };
  var RotationIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2r(_objectSpread$2r({}, props), {}, {
      id: "rotation",
      ref: ref,
      icon: element$9
    }));
  });
  RotationIcon.displayName = "RotationIcon";

  function ownKeys$2r(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2r(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2r(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$8 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 11.5a3.5 3.5 0 110-7 3.5 3.5 0 010 7zM8 13A5 5 0 108 3a5 5 0 000 10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var RoundIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2q(_objectSpread$2q({}, props), {}, {
      id: "round",
      ref: ref,
      icon: element$8
    }));
  });
  RoundIcon.displayName = "RoundIcon";

  function ownKeys$2q(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2p(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$7 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.71-3.54-3.53zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var SearchIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2p(_objectSpread$2p({}, props), {}, {
      id: "search",
      ref: ref,
      icon: element$7
    }));
  });
  SearchIcon.displayName = "SearchIcon";

  function ownKeys$2p(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2o(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2p(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2p(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$6 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 8a3 3 0 11-6 0 3 3 0 016 0zm-1 0a2 2 0 10-4 0 2 2 0 004 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1.25l6.06 3.38v6.75L8 14.75l-6.06-3.38V4.63L8 1.25zM2.94 5.21v5.58L8 13.6l5.06-2.82V5.2L8 2.4 2.94 5.21z",
        "fillOpacity": 0.9
      }
    }]
  };
  var SettingIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2o(_objectSpread$2o({}, props), {}, {
      id: "setting",
      ref: ref,
      icon: element$6
    }));
  });
  SettingIcon.displayName = "SettingIcon";

  function ownKeys$2o(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2n(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2o(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2o(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$5 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.6 1.82a.45.45 0 01.8 0l1.8 3.65 4.03.58c.37.05.52.5.25.77l-2.91 2.84.69 4a.45.45 0 01-.66.48L8 12.25l-3.6 1.9a.45.45 0 01-.65-.48l.68-4.01-2.9-2.84a.45.45 0 01.24-.77l4.03-.58 1.8-3.65z",
        "fillOpacity": 0.9
      }
    }]
  };
  var StarFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2n(_objectSpread$2n({}, props), {}, {
      id: "star-filled",
      ref: ref,
      icon: element$5
    }));
  });
  StarFilledIcon.displayName = "StarFilledIcon";

  function ownKeys$2n(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2m(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2n(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2n(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$4 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.5 5h1v2.97l2.85 2.86-.7.7L7.5 8.4V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var TimeFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2m(_objectSpread$2m({}, props), {}, {
      id: "time-filled",
      ref: ref,
      icon: element$4
    }));
  });
  TimeFilledIcon.displayName = "TimeFilledIcon";

  function ownKeys$2m(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2l(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2m(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2m(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$3 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 4v4.39L10 11l.7-.7-2.2-2.33V4h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var TimeIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2l(_objectSpread$2l({}, props), {}, {
      id: "time",
      ref: ref,
      icon: element$3
    }));
  });
  TimeIcon.displayName = "TimeIcon";

  function ownKeys$2l(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2k(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2l(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2l(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$2 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.74 6.68L7.5 2.9v8.59h1V2.91l3.76 3.77.71-.7-4.62-4.63a.5.5 0 00-.7 0L3.03 5.97l.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var UploadIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2k(_objectSpread$2k({}, props), {}, {
      id: "upload",
      ref: ref,
      icon: element$2
    }));
  });
  UploadIcon.displayName = "UploadIcon";

  function ownKeys$2k(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2j(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2k(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2k(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$1 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 7v2h1V7h2V6H7V4H6v2H4v1h2z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.7-3.54-3.52zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ZoomInIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2j(_objectSpread$2j({}, props), {}, {
      id: "zoom-in",
      ref: ref,
      icon: element$1
    }));
  });
  ZoomInIcon.displayName = "ZoomInIcon";

  function ownKeys$2j(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2i(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2j(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2j(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9 7H4V6h5v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.7-3.54-3.52zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ZoomOutIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2i(_objectSpread$2i({}, props), {}, {
      id: "zoom-out",
      ref: ref,
      icon: element
    }));
  });
  ZoomOutIcon.displayName = "ZoomOutIcon";

  var reactIs$1 = {exports: {}};

  var reactIs_development = {};

  {
    (function () {
      // nor polyfill, then a plain number is used for performance.

      var hasSymbol = typeof Symbol === 'function' && Symbol["for"];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol["for"]('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
      // (unstable) APIs that have been removed. Can we remove the symbols?

      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol["for"]('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol["for"]('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol["for"]('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol["for"]('react.lazy') : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol["for"]('react.block') : 0xead9;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol["for"]('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol["for"]('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol["for"]('react.scope') : 0xead7;

      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || _typeof$1(type) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }

      function typeOf(object) {
        if (_typeof$1(object) === 'object' && object !== null) {
          var $$typeof = object.$$typeof;

          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;

              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;

                default:
                  var $$typeofType = type && type.$$typeof;

                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;

                    default:
                      return $$typeof;
                  }

              }

            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }

        return undefined;
      } // AsyncMode is deprecated along with isAsyncMode


      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }

      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }

      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }

      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }

      function isElement(object) {
        return _typeof$1(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }

      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }

      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }

      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }

      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }

      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }

      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }

      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }

      reactIs_development.AsyncMode = AsyncMode;
      reactIs_development.ConcurrentMode = ConcurrentMode;
      reactIs_development.ContextConsumer = ContextConsumer;
      reactIs_development.ContextProvider = ContextProvider;
      reactIs_development.Element = Element;
      reactIs_development.ForwardRef = ForwardRef;
      reactIs_development.Fragment = Fragment;
      reactIs_development.Lazy = Lazy;
      reactIs_development.Memo = Memo;
      reactIs_development.Portal = Portal;
      reactIs_development.Profiler = Profiler;
      reactIs_development.StrictMode = StrictMode;
      reactIs_development.Suspense = Suspense;
      reactIs_development.isAsyncMode = isAsyncMode;
      reactIs_development.isConcurrentMode = isConcurrentMode;
      reactIs_development.isContextConsumer = isContextConsumer;
      reactIs_development.isContextProvider = isContextProvider;
      reactIs_development.isElement = isElement;
      reactIs_development.isForwardRef = isForwardRef;
      reactIs_development.isFragment = isFragment;
      reactIs_development.isLazy = isLazy;
      reactIs_development.isMemo = isMemo;
      reactIs_development.isPortal = isPortal;
      reactIs_development.isProfiler = isProfiler;
      reactIs_development.isStrictMode = isStrictMode;
      reactIs_development.isSuspense = isSuspense;
      reactIs_development.isValidElementType = isValidElementType;
      reactIs_development.typeOf = typeOf;
    })();
  }

  {
    reactIs$1.exports = reactIs_development;
  }

  var reactIs = reactIs$1.exports;
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
  TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

  function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) {
      return MEMO_STATICS;
    } // React v16.12 and above


    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
  }

  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;

  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      // don't hoist over string (html) components
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);

        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }

      var keys = getOwnPropertyNames(sourceComponent);

      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }

      var targetStatics = getStatics(targetComponent);
      var sourceStatics = getStatics(sourceComponent);

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

          try {
            // Avoid failures from read-only properties
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }
    }

    return targetComponent;
  }

  var hoistNonReactStatics_cjs = hoistNonReactStatics;

  function forwardRefWithStatics(component, statics) {
    return hoistNonReactStatics_cjs( /*#__PURE__*/React.forwardRef(component), statics);
  }

  function useGlobalIcon(tdIcon) {
    var _useConfig = useConfig$1(),
        globalIcon = _useConfig.icon;

    var resultIcon = {};
    Object.keys(tdIcon).forEach(function (key) {
      resultIcon[key] = (globalIcon === null || globalIcon === void 0 ? void 0 : globalIcon[key]) || tdIcon[key];
    });
    return resultIcon;
  }

  var _excluded$w = ["separate", "children", "className"];

  function ownKeys$2i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var InputGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var separate = props.separate,
        children = props.children,
        className = props.className,
        wrapperProps = _objectWithoutProperties$2(props, _excluded$w);

    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$2h({
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-input-group"), className, _defineProperty$3({}, "".concat(classPrefix, "-input-group--separate"), separate))
    }, wrapperProps), children);
  });
  InputGroup.displayName = "InputGroup";

  var baseMerge = _baseMerge,
      createAssigner$1 = _createAssigner;
  /**
   * This method is like `_.merge` except that it accepts `customizer` which
   * is invoked to produce the merged values of the destination and source
   * properties. If `customizer` returns `undefined`, merging is handled by the
   * method instead. The `customizer` is invoked with six arguments:
   * (objValue, srcValue, key, object, source, stack).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   if (_.isArray(objValue)) {
   *     return objValue.concat(srcValue);
   *   }
   * }
   *
   * var object = { 'a': [1], 'b': [2] };
   * var other = { 'a': [3], 'b': [4] };
   *
   * _.mergeWith(object, other, customizer);
   * // => { 'a': [1, 3], 'b': [2, 4] }
   */

  var mergeWith = createAssigner$1(function (object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
  });
  var mergeWith_1 = mergeWith;

  var merge$1 = function merge(src, config) {
    return mergeWith_1(src, config, function (objValue, srcValue) {
      if (Array.isArray(objValue)) {
        return srcValue;
      }
    });
  };
  function ConfigProvider(_ref) {
    var children = _ref.children,
        globalConfig = _ref.globalConfig;
    var mergedGlobalConfig = merge$1(defaultGlobalConfig, globalConfig);
    return /* @__PURE__ */React__default["default"].createElement(ConfigContext$1.Provider, {
      value: {
        globalConfig: mergedGlobalConfig
      }
    }, children);
  }
  ConfigProvider.displayName = "ConfigProvider";

  function ownKeys$2h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2h(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useLocaleReceiver(componentName, defaultLocale) {
    var _React$useContext = React__default["default"].useContext(ConfigContext$1),
        globalConfig = _React$useContext.globalConfig;

    function transformLocale(pattern, placement) {
      var REGEXP = /\{\s*([\w-]+)\s*\}/g;

      if (typeof pattern === "string") {
        if (!placement || !REGEXP.test(pattern)) return pattern;
        var translated = pattern.replace(REGEXP, function (_, key) {
          if (placement) return String(placement[key]);
          return "";
        });
        return translated;
      }

      if (Array.isArray(pattern)) {
        return pattern.map(function (p, index) {
          var translated = p.replace(REGEXP, function (_, key) {
            if (placement) return String(placement[index][key]);
            return "";
          });
          return translated;
        });
      }

      if (typeof pattern === "function") {
        return pattern(placement);
      }

      return "";
    }

    var componentLocale = React__default["default"].useMemo(function () {
      var locale = defaultLocale || {};
      var connectLocaleByName = globalConfig[componentName];
      var localeFromContext = componentName && globalConfig ? connectLocaleByName : {};
      return _objectSpread$2g(_objectSpread$2g({}, typeof locale === "function" ? locale() : locale), localeFromContext || {});
    }, [componentName, defaultLocale, globalConfig]);
    return [componentLocale, transformLocale];
  }

  var inputDefaultProps = {
    align: "left",
    autofocus: false,
    autoWidth: false,
    clearable: false,
    readonly: false,
    showClearIconOnEmpty: false,
    size: "medium",
    status: "default",
    type: "text",
    defaultValue: ""
  };

  var _excluded$v = ["type", "autoWidth", "placeholder", "disabled", "status", "size", "className", "inputClass", "style", "prefixIcon", "suffixIcon", "clearable", "tips", "align", "maxlength", "maxcharacter", "showClearIconOnEmpty", "autofocus", "autocomplete", "readonly", "label", "suffix", "showInput", "keepWrapperWidth", "format", "onClick", "onClear", "onEnter", "onKeydown", "onKeyup", "onKeypress", "onFocus", "onBlur", "onPaste", "onMouseenter", "onMouseleave", "onWheel", "onCompositionstart", "onCompositionend", "onChange"];

  function ownKeys$2g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var renderIcon$1 = function renderIcon(classPrefix, type, icon) {
    var result = null;
    if (icon) result = icon;
    if (typeof icon === "function") result = icon();
    var iconClassName = icon ? "".concat(classPrefix, "-input__").concat(type, "-icon") : "";

    if (result) {
      result = /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-input__").concat(type, " ").concat(iconClassName)
      }, result);
    }

    return result;
  };

  var Input$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var _useLocaleReceiver = useLocaleReceiver("input"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useGlobalIcon = useGlobalIcon({
      BrowseIcon: BrowseIcon,
      BrowseOffIcon: BrowseOffIcon,
      CloseCircleFilledIcon: CloseCircleFilledIcon
    }),
        BrowseIcon$1 = _useGlobalIcon.BrowseIcon,
        BrowseOffIcon$1 = _useGlobalIcon.BrowseOffIcon,
        CloseCircleFilledIcon$1 = _useGlobalIcon.CloseCircleFilledIcon;

    var type = props.type,
        autoWidth = props.autoWidth,
        _props$placeholder = props.placeholder,
        placeholder = _props$placeholder === void 0 ? t(local.placeholder) : _props$placeholder,
        disabled = props.disabled,
        status = props.status,
        size = props.size,
        className = props.className,
        inputClass = props.inputClass,
        style = props.style,
        prefixIcon = props.prefixIcon,
        suffixIcon = props.suffixIcon,
        clearable = props.clearable,
        tips = props.tips,
        align = props.align,
        maxlength = props.maxlength,
        maxcharacter = props.maxcharacter,
        showClearIconOnEmpty = props.showClearIconOnEmpty,
        autofocus = props.autofocus,
        autocomplete = props.autocomplete,
        readonly = props.readonly,
        label = props.label,
        suffix = props.suffix,
        _props$showInput = props.showInput,
        showInput = _props$showInput === void 0 ? true : _props$showInput,
        keepWrapperWidth = props.keepWrapperWidth,
        format = props.format,
        _onClick = props.onClick,
        onClear = props.onClear,
        onEnter = props.onEnter,
        onKeydown = props.onKeydown,
        onKeyup = props.onKeyup,
        onKeypress = props.onKeypress,
        onFocus = props.onFocus,
        onBlur = props.onBlur,
        onPaste = props.onPaste,
        onMouseenter = props.onMouseenter,
        onMouseleave = props.onMouseleave,
        onWheel = props.onWheel,
        onCompositionstart = props.onCompositionstart,
        onCompositionend = props.onCompositionend,
        onChangeFromProps = props.onChange,
        restProps = _objectWithoutProperties$2(props, _excluded$v);

    var _useControlled = useControlled(props, "value", onChangeFromProps),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onChange = _useControlled2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var composingRef = React.useRef(false);
    var inputRef = React.useRef();
    var inputPreRef = React.useRef();
    var wrapperRef = React.useRef();

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isHover = _useState2[0],
        toggleIsHover = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isFocused = _useState4[0],
        toggleIsFocused = _useState4[1];

    var _useState5 = React.useState(type),
        _useState6 = _slicedToArray(_useState5, 2),
        renderType = _useState6[0],
        setRenderType = _useState6[1];

    var _useState7 = React.useState(""),
        _useState8 = _slicedToArray(_useState7, 2),
        composingValue = _useState8[0],
        setComposingValue = _useState8[1];

    var isShowClearIcon = (clearable && value && !disabled || showClearIconOnEmpty) && isHover;
    var prefixIconContent = renderIcon$1(classPrefix, "prefix", prefixIcon);
    var suffixIconNew = suffixIcon;
    if (isShowClearIcon) suffixIconNew = /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon$1, {
      className: "".concat(classPrefix, "-input__suffix-clear"),
      onClick: handleClear
    });

    if (type === "password" && typeof suffixIcon === "undefined") {
      if (renderType === "password") {
        suffixIconNew = /* @__PURE__ */React__default["default"].createElement(BrowseOffIcon$1, {
          className: "".concat(classPrefix, "-input__suffix-clear"),
          onClick: togglePasswordVisible
        });
      } else if (renderType === "text") {
        suffixIconNew = /* @__PURE__ */React__default["default"].createElement(BrowseIcon$1, {
          className: "".concat(classPrefix, "-input__suffix-clear"),
          onClick: togglePasswordVisible
        });
      }
    }

    var suffixIconContent = renderIcon$1(classPrefix, "suffix", suffixIconNew);
    var labelContent = isFunction_1(label) ? label() : label;
    var suffixContent = isFunction_1(suffix) ? suffix() : suffix;
    React.useEffect(function () {
      var _inputPreRef$current, _inputPreRef$current2;

      if (!autoWidth) return;
      if (((_inputPreRef$current = inputPreRef.current) === null || _inputPreRef$current === void 0 ? void 0 : _inputPreRef$current.offsetWidth) === 0) return;
      if (inputRef.current) inputRef.current.style.width = "".concat((_inputPreRef$current2 = inputPreRef.current) === null || _inputPreRef$current2 === void 0 ? void 0 : _inputPreRef$current2.offsetWidth, "px");
    }, [autoWidth, value, placeholder, inputRef]);
    React.useEffect(function () {
      setRenderType(type);
    }, [type]);
    var renderInput = /* @__PURE__ */React__default["default"].createElement("input", {
      ref: inputRef,
      placeholder: placeholder,
      type: renderType,
      className: "".concat(classPrefix, "-input__inner"),
      value: composingRef.current ? composingValue : value !== null && value !== void 0 ? value : "",
      readOnly: readonly,
      disabled: disabled,
      autoComplete: autocomplete !== null && autocomplete !== void 0 ? autocomplete : local.autocomplete || void 0,
      autoFocus: autofocus,
      onChange: handleChange,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      onKeyPress: handleKeyPress,
      onCompositionStart: handleCompositionStart,
      onCompositionEnd: handleCompositionEnd,
      onFocus: handleFocus,
      onBlur: handleBlur,
      onPaste: handlePaste
    });
    var renderInputNode = /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(inputClass, "".concat(classPrefix, "-input"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-readonly"), readonly), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-focused"), isFocused), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-m"), size === "medium"), _defineProperty$3(_classNames, "".concat(classPrefix, "-align-").concat(align), align), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-").concat(status), status), _defineProperty$3(_classNames, "".concat(classPrefix, "-input--prefix"), prefixIcon || labelContent), _defineProperty$3(_classNames, "".concat(classPrefix, "-input--suffix"), suffixIconContent || suffixContent), _defineProperty$3(_classNames, "".concat(classPrefix, "-input--focused"), isFocused), _classNames)),
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      onWheel: handleWheel,
      onClick: function onClick(e) {
        return _onClick === null || _onClick === void 0 ? void 0 : _onClick({
          e: e
        });
      }
    }, prefixIconContent, labelContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-input__prefix")
    }, labelContent) : null, showInput && renderInput, autoWidth && /* @__PURE__ */React__default["default"].createElement("span", {
      ref: inputPreRef,
      className: "".concat(classPrefix, "-input__input-pre")
    }, value || props.placeholder), suffixContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-input__suffix")
    }, suffixContent) : null, suffixIconContent);

    function togglePasswordVisible() {
      var toggleType = renderType === "password" ? "text" : "password";
      setRenderType(toggleType);
    }

    function handleChange(e) {
      var value2 = e.currentTarget.value;

      if (composingRef.current) {
        setComposingValue(value2);
      } else {
        value2 = limitUnicodeMaxLength(value2, maxlength);

        if (typeof maxcharacter === "number" && maxcharacter >= 0) {
          var stringInfo = getCharacterLength(value2, maxcharacter);
          value2 = _typeof$1(stringInfo) === "object" && stringInfo.characters;
        }

        setComposingValue(value2);
        onChange(value2, {
          e: e
        });
      }
    }

    function handleClear(e) {
      onChange === null || onChange === void 0 ? void 0 : onChange("", {
        e: e
      });
      onClear === null || onClear === void 0 ? void 0 : onClear({
        e: e
      });
    }

    function handleKeyDown(e) {
      var key = e.key,
          value2 = e.currentTarget.value;
      key === "Enter" && (onEnter === null || onEnter === void 0 ? void 0 : onEnter(value2, {
        e: e
      }));
      onKeydown === null || onKeydown === void 0 ? void 0 : onKeydown(value2, {
        e: e
      });
    }

    function handleKeyUp(e) {
      var value2 = e.currentTarget.value;
      onKeyup === null || onKeyup === void 0 ? void 0 : onKeyup(value2, {
        e: e
      });
    }

    function handleKeyPress(e) {
      var value2 = e.currentTarget.value;
      onKeypress === null || onKeypress === void 0 ? void 0 : onKeypress(value2, {
        e: e
      });
    }

    function handleCompositionStart(e) {
      composingRef.current = true;
      var value2 = e.currentTarget.value;
      onCompositionstart === null || onCompositionstart === void 0 ? void 0 : onCompositionstart(value2, {
        e: e
      });
    }

    function handleCompositionEnd(e) {
      var value2 = e.currentTarget.value;

      if (composingRef.current) {
        composingRef.current = false;
        handleChange(e);
      }

      onCompositionend === null || onCompositionend === void 0 ? void 0 : onCompositionend(value2, {
        e: e
      });
    }

    function handleFocus(e) {
      if (readonly) return;
      var value2 = e.currentTarget.value;
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(value2, {
        e: e
      });
      toggleIsFocused(true);
    }

    function handleBlur(e) {
      if (readonly) return;
      var value2 = e.currentTarget.value;
      format && onChange(format(value2), {
        e: e
      });
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(value2, {
        e: e
      });
      toggleIsFocused(false);
    }

    function handlePaste(e) {
      var clipData = e.clipboardData;
      var pasteValue = clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain");
      onPaste === null || onPaste === void 0 ? void 0 : onPaste({
        e: e,
        pasteValue: pasteValue
      });
    }

    function handleMouseEnter(e) {
      toggleIsHover(true);
      onMouseenter === null || onMouseenter === void 0 ? void 0 : onMouseenter({
        e: e
      });
    }

    function handleMouseLeave(e) {
      toggleIsHover(false);
      onMouseleave === null || onMouseleave === void 0 ? void 0 : onMouseleave({
        e: e
      });
    }

    function handleWheel(e) {
      onWheel === null || onWheel === void 0 ? void 0 : onWheel({
        e: e
      });
    }

    React.useImperativeHandle(ref, function () {
      return {
        currentElement: wrapperRef.current,
        inputElement: inputRef.current,
        focus: function focus() {
          var _inputRef$current;

          return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
        },
        blur: function blur() {
          var _inputRef$current2;

          return (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.blur();
        },
        select: function select() {
          var _inputRef$current3;

          return (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.select();
        }
      };
    });
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$2f({
      ref: wrapperRef,
      style: style,
      className: classNames$1("".concat(classPrefix, "-input__wrap"), className, _defineProperty$3({}, "".concat(classPrefix, "-input--auto-width"), autoWidth && !keepWrapperWidth))
    }, restProps), renderInputNode, tips && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-input__tips"), "".concat(classPrefix, "-input__tips--").concat(status || "normal"))
    }, tips));
  }, {
    Group: InputGroup
  });
  Input$1.displayName = "Input";
  Input$1.defaultProps = inputDefaultProps;

  var Input = Input$1;

  var _excluded$u = ["prepend", "append", "children", "className", "style"];

  function ownKeys$2f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2f(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var InputAdornment$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var prepend = props.prepend,
        append = props.append,
        children = props.children,
        className = props.className,
        style = props.style,
        wrapperProps = _objectWithoutProperties$2(props, _excluded$u);

    var renderAddon = function renderAddon(type, classPrefix2, Content) {
      var result;

      if (typeof Content === "function") {
        result = /* @__PURE__ */React__default["default"].createElement(Content, null);
      } else if (typeof Content !== "undefined") {
        result = Content;
      }

      if (result || typeof result === "number") {
        result = /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(classPrefix2, "-input-adornment__").concat(type)
        }, result);
      }

      return result;
    };

    var renderChildren = function renderChildren() {
      return React__default["default"].Children.map(children, function (child) {
        if (!child) return null;

        if ( /*#__PURE__*/React__default["default"].isValidElement(child)) {
          return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$2e(_objectSpread$2e(_objectSpread$2e({}, wrapperProps), child.props), {}, {
            onChange: function onChange() {
              var _wrapperProps$onChang, _wrapperProps$onChang2, _child$props, _child$props$onChange, _child$props$onChange2;

              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              wrapperProps === null || wrapperProps === void 0 ? void 0 : (_wrapperProps$onChang = wrapperProps.onChange) === null || _wrapperProps$onChang === void 0 ? void 0 : (_wrapperProps$onChang2 = _wrapperProps$onChang.call) === null || _wrapperProps$onChang2 === void 0 ? void 0 : _wrapperProps$onChang2.call.apply(_wrapperProps$onChang2, [_wrapperProps$onChang, null].concat(args));
              (_child$props = child.props) === null || _child$props === void 0 ? void 0 : (_child$props$onChange = _child$props.onChange) === null || _child$props$onChange === void 0 ? void 0 : (_child$props$onChange2 = _child$props$onChange.call) === null || _child$props$onChange2 === void 0 ? void 0 : _child$props$onChange2.call.apply(_child$props$onChange2, [_child$props$onChange, null].concat(args));
            }
          }));
        }

        return child;
      });
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1("".concat(classPrefix, "-input-adornment"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-input-adornment--prepend"), !!prepend), _defineProperty$3(_classNames, "".concat(classPrefix, "-input-adornment--append"), !!append), _classNames))
    }, renderAddon("prepend", classPrefix, prepend), renderChildren(), renderAddon("append", classPrefix, append));
  });
  InputAdornment$1.displayName = "InputAdornment";

  var InputAdornment = InputAdornment$1;

  function renderTNode(tnode, defaultNode) {
    if (typeof tnode === "function") {
      return tnode();
    }

    return tnode || (typeof defaultNode === "function" ? defaultNode() : defaultNode);
  }

  var alertDefaultProps = {
    close: false,
    maxLine: 0,
    theme: "info"
  };

  var _excluded$t = ["message", "title", "operation", "theme", "icon", "close", "maxLine", "onClose", "className", "onClosed"];

  function ownKeys$2e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var transitionTime$1 = 200;
  var Alert$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useLocaleReceiver = useLocaleReceiver("alert"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon,
      InfoCircleFilledIcon: InfoCircleFilledIcon,
      CheckCircleFilledIcon: CheckCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon,
        InfoCircleFilledIcon$1 = _useGlobalIcon.InfoCircleFilledIcon,
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon;

    var message = props.message,
        title = props.title,
        operation = props.operation,
        theme = props.theme,
        icon = props.icon,
        close = props.close,
        maxLine = props.maxLine,
        onClose = props.onClose,
        className = props.className,
        _props$onClosed = props.onClosed,
        onClosed = _props$onClosed === void 0 ? noop$1 : _props$onClosed,
        alertProps = _objectWithoutProperties$2(props, _excluded$t);

    var _React$useState = React__default["default"].useState(false),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        closed = _React$useState2[0],
        setClosed = _React$useState2[1];

    var _React$useState3 = React__default["default"].useState(false),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        collapsed = _React$useState4[0],
        setCollapsed = _React$useState4[1];

    var iconMap = {
      success: CheckCircleFilledIcon$1,
      info: InfoCircleFilledIcon$1,
      error: ErrorCircleFilledIcon$1,
      warning: ErrorCircleFilledIcon$1
    };

    var handleClose = function handleClose(e) {
      setClosed(true);
      onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e
      });
    };

    var handleCollapse = function handleCollapse() {
      setCollapsed(!collapsed);
    };

    var renderIconNode = function renderIconNode() {
      if ( /*#__PURE__*/React__default["default"].isValidElement(icon)) {
        return /*#__PURE__*/React__default["default"].cloneElement(icon, {
          className: classNames$1(_defineProperty$3({}, icon.props.className, icon.props.className))
        });
      }

      return /*#__PURE__*/React__default["default"].createElement(iconMap[theme] || iconMap.info);
    };

    var renderMessage = function renderMessage() {
      if (+maxLine > 0 && Array.isArray(message)) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-alert__description")
        }, message.map(function (item, index) {
          if (!collapsed) {
            if (index < maxLine) {
              return /* @__PURE__ */React__default["default"].createElement("div", {
                key: index
              }, item);
            }
          } else {
            return /* @__PURE__ */React__default["default"].createElement("div", {
              key: index
            }, item);
          }

          return true;
        }), +maxLine > 0 ? /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-alert__collapse"),
          onClick: handleCollapse
        }, !collapsed ? t(local.expandText) : t(local.collapseText)) : null);
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-alert__description")
      }, message);
    };

    var renderClose = function renderClose() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-alert__close"),
        onClick: handleClose
      }, typeof close === "boolean" ? /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, null) : renderTNode(close));
    };

    var nodeRef = React.useRef();
    return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
      "in": !closed,
      unmountOnExit: true,
      classNames: {
        exitActive: "".concat(classPrefix, "-alert--closing")
      },
      nodeRef: nodeRef,
      timeout: transitionTime$1,
      onExited: onClosed
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$2d({
      ref: composeRefs(ref, nodeRef),
      className: classNames$1("".concat(classPrefix, "-alert"), "".concat(classPrefix, "-alert--").concat(theme), className)
    }, alertProps), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__icon")
    }, renderIconNode()), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__content")
    }, title ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__title")
    }, title) : null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__message")
    }, renderMessage(), operation ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__operation")
    }, operation) : null)), close ? renderClose() : null));
  });
  Alert$1.displayName = "Alert";
  Alert$1.defaultProps = alertDefaultProps;

  var Alert = Alert$1;

  var badgeDefaultProps = {
    count: 0,
    dot: false,
    maxCount: 99,
    shape: "circle",
    showZero: false,
    size: "medium"
  };

  var _excluded$s = ["color", "dot", "maxCount", "count", "size", "shape", "showZero", "offset", "className", "content", "children", "style"];

  function ownKeys$2d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Badge$1 = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
    var color = _ref.color,
        dot = _ref.dot,
        maxCount = _ref.maxCount,
        count = _ref.count,
        size = _ref.size,
        shape = _ref.shape,
        showZero = _ref.showZero,
        offset = _ref.offset,
        className = _ref.className,
        content = _ref.content,
        children = _ref.children,
        style = _ref.style,
        restProps = _objectWithoutProperties$2(_ref, _excluded$s);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var childNode = content || children;
    var badgeClassName = classNames$1(!childNode && "".concat(classPrefix, "-badge--static"), dot ? "".concat(classPrefix, "-badge--dot") : "".concat(classPrefix, "-badge--").concat(shape), size === "small" && "".concat(classPrefix, "-size-s"), !childNode && className);

    var getDisplayCount = function getDisplayCount() {
      if (typeof count === "number" && count > maxCount) {
        return "".concat(maxCount, "+");
      }

      return count;
    };

    var isHidden = !count;

    if (typeof count === "number") {
      isHidden = count < 1 && !showZero;
    }

    var getStyle = function getStyle() {
      var mergedStyle = _objectSpread$2c({}, style);

      if (color) mergedStyle.backgroundColor = color;

      if (offset) {
        if (offset[0]) {
          mergedStyle.right = +offset[0];
        }

        if (offset[1]) {
          mergedStyle.marginTop = +offset[1];
        }
      }

      return mergedStyle;
    };

    var badge = !isHidden ? /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$2c(_objectSpread$2c({}, childNode ? {} : restProps), {}, {
      className: badgeClassName,
      style: getStyle()
    }), !dot ? getDisplayCount() : null) : null;
    if (!childNode) return badge;
    return /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$2c(_objectSpread$2c({}, restProps), {}, {
      className: classNames$1("".concat(classPrefix, "-badge"), className),
      ref: ref
    }), childNode, badge);
  });
  Badge$1.displayName = "Badge";
  Badge$1.defaultProps = badgeDefaultProps;

  var Badge = Badge$1;

  var baseGetTag$3 = _baseGetTag,
      isObjectLike$5 = isObjectLike_1;
  /** `Object#toString` result references. */

  var boolTag$3 = '[object Boolean]';
  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */

  function isBoolean(value) {
    return value === true || value === false || isObjectLike$5(value) && baseGetTag$3(value) == boolTag$3;
  }

  var isBoolean_1 = isBoolean;

  var toString$7 = toString_1,
      upperFirst = upperFirst_1;
  /**
   * Converts the first character of `string` to upper case and the remaining
   * to lower case.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to capitalize.
   * @returns {string} Returns the capitalized string.
   * @example
   *
   * _.capitalize('FRED');
   * // => 'Fred'
   */

  function capitalize$1(string) {
    return upperFirst(toString$7(string).toLowerCase());
  }

  var capitalize_1 = capitalize$1;

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */

  function arrayReduce$1(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }

    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }

    return accumulator;
  }

  var _arrayReduce = arrayReduce$1;

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */

  function basePropertyOf$2(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  var _basePropertyOf = basePropertyOf$2;

  var basePropertyOf$1 = _basePropertyOf;
  /** Used to map Latin Unicode letters to basic Latin letters. */

  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    "\u0100": 'A',
    "\u0102": 'A',
    "\u0104": 'A',
    "\u0101": 'a',
    "\u0103": 'a',
    "\u0105": 'a',
    "\u0106": 'C',
    "\u0108": 'C',
    "\u010A": 'C',
    "\u010C": 'C',
    "\u0107": 'c',
    "\u0109": 'c',
    "\u010B": 'c',
    "\u010D": 'c',
    "\u010E": 'D',
    "\u0110": 'D',
    "\u010F": 'd',
    "\u0111": 'd',
    "\u0112": 'E',
    "\u0114": 'E',
    "\u0116": 'E',
    "\u0118": 'E',
    "\u011A": 'E',
    "\u0113": 'e',
    "\u0115": 'e',
    "\u0117": 'e',
    "\u0119": 'e',
    "\u011B": 'e',
    "\u011C": 'G',
    "\u011E": 'G',
    "\u0120": 'G',
    "\u0122": 'G',
    "\u011D": 'g',
    "\u011F": 'g',
    "\u0121": 'g',
    "\u0123": 'g',
    "\u0124": 'H',
    "\u0126": 'H',
    "\u0125": 'h',
    "\u0127": 'h',
    "\u0128": 'I',
    "\u012A": 'I',
    "\u012C": 'I',
    "\u012E": 'I',
    "\u0130": 'I',
    "\u0129": 'i',
    "\u012B": 'i',
    "\u012D": 'i',
    "\u012F": 'i',
    "\u0131": 'i',
    "\u0134": 'J',
    "\u0135": 'j',
    "\u0136": 'K',
    "\u0137": 'k',
    "\u0138": 'k',
    "\u0139": 'L',
    "\u013B": 'L',
    "\u013D": 'L',
    "\u013F": 'L',
    "\u0141": 'L',
    "\u013A": 'l',
    "\u013C": 'l',
    "\u013E": 'l',
    "\u0140": 'l',
    "\u0142": 'l',
    "\u0143": 'N',
    "\u0145": 'N',
    "\u0147": 'N',
    "\u014A": 'N',
    "\u0144": 'n',
    "\u0146": 'n',
    "\u0148": 'n',
    "\u014B": 'n',
    "\u014C": 'O',
    "\u014E": 'O',
    "\u0150": 'O',
    "\u014D": 'o',
    "\u014F": 'o',
    "\u0151": 'o',
    "\u0154": 'R',
    "\u0156": 'R',
    "\u0158": 'R',
    "\u0155": 'r',
    "\u0157": 'r',
    "\u0159": 'r',
    "\u015A": 'S',
    "\u015C": 'S',
    "\u015E": 'S',
    "\u0160": 'S',
    "\u015B": 's',
    "\u015D": 's',
    "\u015F": 's',
    "\u0161": 's',
    "\u0162": 'T',
    "\u0164": 'T',
    "\u0166": 'T',
    "\u0163": 't',
    "\u0165": 't',
    "\u0167": 't',
    "\u0168": 'U',
    "\u016A": 'U',
    "\u016C": 'U',
    "\u016E": 'U',
    "\u0170": 'U',
    "\u0172": 'U',
    "\u0169": 'u',
    "\u016B": 'u',
    "\u016D": 'u',
    "\u016F": 'u',
    "\u0171": 'u',
    "\u0173": 'u',
    "\u0174": 'W',
    "\u0175": 'w',
    "\u0176": 'Y',
    "\u0177": 'y',
    "\u0178": 'Y',
    "\u0179": 'Z',
    "\u017B": 'Z',
    "\u017D": 'Z',
    "\u017A": 'z',
    "\u017C": 'z',
    "\u017E": 'z',
    "\u0132": 'IJ',
    "\u0133": 'ij',
    "\u0152": 'Oe',
    "\u0153": 'oe',
    "\u0149": "'n",
    "\u017F": 's'
  };
  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */

  var deburrLetter$1 = basePropertyOf$1(deburredLetters);
  var _deburrLetter = deburrLetter$1;

  var deburrLetter = _deburrLetter,
      toString$6 = toString_1;
  /** Used to match Latin Unicode letters (excluding mathematical operators). */

  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
  /** Used to compose unicode character classes. */

  var rsComboMarksRange$2 = "\\u0300-\\u036f",
      reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$2 = "\\u20d0-\\u20ff",
      rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;
  /** Used to compose unicode capture groups. */

  var rsCombo$2 = '[' + rsComboRange$2 + ']';
  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */

  var reComboMark = RegExp(rsCombo$2, 'g');
  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */

  function deburr$1(string) {
    string = toString$6(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
  }

  var deburr_1 = deburr$1;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

  function asciiWords$1(string) {
    return string.match(reAsciiWord) || [];
  }

  var _asciiWords = asciiWords$1;

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */

  function hasUnicodeWord$1(string) {
    return reHasUnicodeWord.test(string);
  }

  var _hasUnicodeWord = hasUnicodeWord$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = "\\ud800-\\udfff",
      rsComboMarksRange$1 = "\\u0300-\\u036f",
      reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$1 = "\\u20d0-\\u20ff",
      rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
      rsDingbatRange = "\\u2700-\\u27bf",
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = "\\u2000-\\u206f",
      rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange$1 = "\\ufe0e\\ufe0f",
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  /** Used to compose unicode capture groups. */

  var rsApos$1 = "['\u2019]",
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo$1 = '[' + rsComboRange$1 + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange$1 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz$1 = "\\ud83c[\\udffb-\\udfff]",
      rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
      rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
      rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ$1 = "\\u200d";
  /** Used to compose unicode regexes. */

  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod$1 = rsModifier$1 + '?',
      rsOptVar$1 = '[' + rsVarRange$1 + ']?',
      rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
      rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;
  /** Used to match complex or compound words. */

  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

  function unicodeWords$1(string) {
    return string.match(reUnicodeWord) || [];
  }

  var _unicodeWords = unicodeWords$1;

  var asciiWords = _asciiWords,
      hasUnicodeWord = _hasUnicodeWord,
      toString$5 = toString_1,
      unicodeWords = _unicodeWords;
  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */

  function words$1(string, pattern, guard) {
    string = toString$5(string);
    pattern = guard ? undefined : pattern;

    if (pattern === undefined) {
      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }

    return string.match(pattern) || [];
  }

  var words_1 = words$1;

  var arrayReduce = _arrayReduce,
      deburr = deburr_1,
      words = words_1;
  /** Used to compose unicode capture groups. */

  var rsApos = "['\u2019]";
  /** Used to match apostrophes. */

  var reApos = RegExp(rsApos, 'g');
  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */

  function createCompounder$1(callback) {
    return function (string) {
      return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
  }

  var _createCompounder = createCompounder$1;

  var capitalize = capitalize_1,
      createCompounder = _createCompounder;
  /**
   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the camel cased string.
   * @example
   *
   * _.camelCase('Foo Bar');
   * // => 'fooBar'
   *
   * _.camelCase('--foo-bar--');
   * // => 'fooBar'
   *
   * _.camelCase('__FOO_BAR__');
   * // => 'fooBar'
   */

  var camelCase = createCompounder(function (result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
  });
  var camelCase_1 = camelCase;

  function ownKeys$2c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function omit$1(obj, fields) {
    var shallowCopy = _objectSpread$2b({}, obj);

    for (var i = 0; i < fields.length; i++) {
      var key = fields[i];
      delete shallowCopy[key];
    }

    return shallowCopy;
  }
  function pxCompat(param) {
    return typeof param === "number" ? "".concat(param, "px") : param;
  }

  var _excluded$r = ["allowUncheck", "type", "disabled", "name", "value", "onChange", "indeterminate", "children", "label", "className", "style", "readonly"];

  function ownKeys$2b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var CheckContext = /*#__PURE__*/React__default["default"].createContext(null);
  var Check = /*#__PURE__*/React.forwardRef(function (_props, ref) {
    var _classNames;

    var context = React.useContext(CheckContext);
    var props = context ? context.inject(_props) : _props;

    var _props$allowUncheck = props.allowUncheck,
        allowUncheck = _props$allowUncheck === void 0 ? false : _props$allowUncheck,
        type = props.type,
        disabled = props.disabled,
        name = props.name,
        value = props.value,
        onChange = props.onChange,
        indeterminate = props.indeterminate,
        children = props.children,
        label = props.label,
        className = props.className,
        style = props.style,
        readonly = props.readonly,
        htmlProps = _objectWithoutProperties$2(props, _excluded$r);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var TOnChange = onChange;

    var _useControlled = useControlled(props, "checked", TOnChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        internalChecked = _useControlled2[0],
        setInternalChecked = _useControlled2[1];

    var labelClassName = classNames$1("".concat(classPrefix, "-").concat(type), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-checked"), internalChecked), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-indeterminate"), indeterminate), _classNames));
    var input = /* @__PURE__ */React__default["default"].createElement("input", {
      readOnly: readonly,
      type: type === "radio-button" ? "radio" : type,
      className: "".concat(classPrefix, "-").concat(type, "__former"),
      checked: internalChecked,
      disabled: disabled,
      name: name,
      value: isBoolean_1(value) ? Number(value) : value,
      onClick: function onClick(e) {
        e.stopPropagation();

        if ((type === "radio-button" || type === "radio") && allowUncheck && internalChecked) {
          setInternalChecked(!e.currentTarget.checked, {
            e: e
          });
        }
      },
      onChange: function onChange(e) {
        return setInternalChecked(e.currentTarget.checked, {
          e: e
        });
      }
    });
    var showLabel = !!(children || label);

    var handleLabelClick = function handleLabelClick(event) {
      if (props.stopLabelTrigger) event.preventDefault();
    };

    return /* @__PURE__ */React__default["default"].createElement("label", _objectSpread$2a({
      ref: ref,
      className: labelClassName,
      title: props.title,
      style: style
    }, omit$1(htmlProps, ["checkAll"])), input, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-").concat(type, "__input")
    }), showLabel && /* @__PURE__ */React__default["default"].createElement("span", {
      key: "label",
      className: "".concat(classPrefix, "-").concat(type, "__label"),
      onClick: handleLabelClick
    }, children || label));
  });
  Check.displayName = "Check";

  function useCommonClassName$1() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return React.useMemo(function () {
      return {
        SIZE: {
          "default": "",
          xs: "".concat(classPrefix, "-size-xs"),
          small: "".concat(classPrefix, "-size-s"),
          medium: "".concat(classPrefix, "-size-m"),
          large: "".concat(classPrefix, "-size-l"),
          xl: "".concat(classPrefix, "-size-xl"),
          block: "".concat(classPrefix, "-size-full-width")
        },
        STATUS: {
          loading: "".concat(classPrefix, "-is-loading"),
          disabled: "".concat(classPrefix, "-is-disabled"),
          focused: "".concat(classPrefix, "-is-focused"),
          success: "".concat(classPrefix, "-is-success"),
          error: "".concat(classPrefix, "-is-error"),
          warning: "".concat(classPrefix, "-is-warning"),
          selected: "".concat(classPrefix, "-is-selected"),
          active: "".concat(classPrefix, "-is-active"),
          checked: "".concat(classPrefix, "-is-checked"),
          current: "".concat(classPrefix, "-is-current"),
          hidden: "".concat(classPrefix, "-is-hidden"),
          visible: "".concat(classPrefix, "-is-visible"),
          expanded: "".concat(classPrefix, "-is-expanded"),
          indeterminate: "".concat(classPrefix, "-is-indeterminate")
        }
      };
    }, [classPrefix]);
  }

  var radioDefaultProps = {
    allowUncheck: false,
    defaultChecked: false,
    value: false
  };
  var radioGroupDefaultProps = {
    size: "medium",
    variant: "outline"
  };

  function ownKeys$2a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$29(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var RadioGroup$1 = function RadioGroup(props) {
    var _classNames;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var disabled = props.disabled,
        children = props.children,
        onChange = props.onChange,
        size = props.size,
        variant = props.variant,
        _props$options = props.options,
        options = _props$options === void 0 ? [] : _props$options,
        className = props.className,
        style = props.style;

    var _useControlled = useControlled(props, "value", onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        internalValue = _useControlled2[0],
        setInternalValue = _useControlled2[1];

    var _useState = React.useState({}),
        _useState2 = _slicedToArray(_useState, 2),
        barStyle = _useState2[0],
        setBarStyle = _useState2[1];

    var groupRef = React.useRef(null);
    var checkedRadioCls = ".".concat(classPrefix, "-radio-button.").concat(classPrefix, "-is-checked");

    var _useCommonClassName = useCommonClassName$1(),
        sizeMap = _useCommonClassName.SIZE;

    var context = {
      inject: function inject(checkProps) {
        if (typeof checkProps.checked !== "undefined") {
          return checkProps;
        }

        var checkValue = checkProps.value;
        return _objectSpread$29(_objectSpread$29({}, checkProps), {}, {
          checked: internalValue === checkProps.value,
          disabled: checkProps.disabled || disabled,
          onChange: function onChange(checked, _ref) {
            var e = _ref.e;

            if (typeof checkProps.onChange === "function") {
              checkProps.onChange(checked, {
                e: e
              });
            }

            setInternalValue(checked ? checkValue : void 0, {
              e: e
            });
          }
        });
      }
    };

    var calcBarStyle = function calcBarStyle() {
      var _groupRef$current$que, _groupRef$current;

      if (!variant.includes("filled")) return;
      var checkedRadio = (_groupRef$current$que = (_groupRef$current = groupRef.current).querySelector) === null || _groupRef$current$que === void 0 ? void 0 : _groupRef$current$que.call(_groupRef$current, checkedRadioCls);
      if (!checkedRadio) return setBarStyle({
        width: 0
      });
      var offsetWidth = checkedRadio.offsetWidth,
          offsetLeft = checkedRadio.offsetLeft;
      setBarStyle({
        width: "".concat(offsetWidth, "px"),
        left: "".concat(offsetLeft, "px")
      });
    };

    React.useEffect(function () {
      calcBarStyle();
    }, [groupRef.current, internalValue]);
    useMutationObservable(groupRef.current, calcBarStyle);

    var renderBlock = function renderBlock() {
      if (!variant.includes("filled")) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        style: barStyle,
        className: "".concat(classPrefix, "-radio-group__bg-block")
      });
    };

    var renderOptions = function renderOptions() {
      return options.map(function (item) {
        if (typeof item === "string" || typeof item === "number") {
          return /* @__PURE__ */React__default["default"].createElement(Radio$1, {
            value: item,
            key: item
          }, item);
        }

        return /* @__PURE__ */React__default["default"].createElement(Radio$1, {
          value: item.value,
          key: item.value,
          disabled: item.disabled
        }, item.label);
      });
    };

    return /* @__PURE__ */React__default["default"].createElement(CheckContext.Provider, {
      value: context
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: groupRef,
      style: style,
      className: classNames$1("".concat(classPrefix, "-radio-group"), sizeMap[size], className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-radio-group__outline"), variant === "outline"), _defineProperty$3(_classNames, "".concat(classPrefix, "-radio-group--filled"), variant.includes("filled")), _defineProperty$3(_classNames, "".concat(classPrefix, "-radio-group--primary-filled"), variant === "primary-filled"), _classNames))
    }, children || renderOptions(), renderBlock()));
  };

  RadioGroup$1.displayName = "RadioGroup";
  RadioGroup$1.defaultProps = radioGroupDefaultProps;

  function ownKeys$29(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$28(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$29(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$29(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Radio$1 = forwardRefWithStatics(function (props, ref) {
    return /* @__PURE__ */React__default["default"].createElement(Check, _objectSpread$28({
      ref: ref,
      type: "radio"
    }, props));
  }, {
    Group: RadioGroup$1,
    Button: /*#__PURE__*/React.forwardRef(function (props, ref) {
      return /* @__PURE__ */React__default["default"].createElement(Check, _objectSpread$28({
        ref: ref,
        type: "radio-button"
      }, props));
    })
  });
  Radio$1.displayName = "Radio";
  Radio$1.defaultProps = radioDefaultProps;

  var Radio = Radio$1;

  var baseGetTag$2 = _baseGetTag,
      isObjectLike$4 = isObjectLike_1;
  /** `Object#toString` result references. */

  var numberTag$3 = '[object Number]';
  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */

  function isNumber(value) {
    return typeof value == 'number' || isObjectLike$4(value) && baseGetTag$2(value) == numberTag$3;
  }

  var isNumber_1 = isNumber;

  var checkboxDefaultProps = {
    checkAll: false,
    defaultChecked: false,
    disabled: void 0,
    indeterminate: false,
    readonly: false
  };
  var checkboxGroupDefaultProps = {
    max: void 0,
    defaultValue: []
  };

  function ownKeys$28(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$27(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$28(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$28(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var getCheckboxValue = function getCheckboxValue(v) {
    switch (_typeof$1(v)) {
      case "number":
        return v;

      case "string":
        return v;

      case "object":
        {
          var vs = v;
          return vs.value;
        }

      default:
        return void 0;
    }
  };

  var CheckboxGroup$2 = function CheckboxGroup(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var onChange = props.onChange,
        disabled = props.disabled,
        className = props.className,
        style = props.style,
        children = props.children,
        max = props.max,
        _props$options = props.options,
        options = _props$options === void 0 ? [] : _props$options;
    var intervalOptions = Array.isArray(options) && options.length > 0 ? options : React__default["default"].Children.map(children, function (child) {
      return child.props;
    }) || [];
    var optionsWithoutCheckAll = intervalOptions.filter(function (t) {
      return _typeof$1(t) !== "object" || !t.checkAll;
    });
    var optionsWithoutCheckAllValues = [];
    optionsWithoutCheckAll.forEach(function (v) {
      var vs = getCheckboxValue(v);
      optionsWithoutCheckAllValues.push(vs);
    });

    var _useControlled = useControlled(props, "value", onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        internalValue = _useControlled2[0],
        setInternalValue = _useControlled2[1];

    var _useState = React.useState(max),
        _useState2 = _slicedToArray(_useState, 2),
        localMax = _useState2[0],
        setLocalMax = _useState2[1];

    var checkedSet = React.useMemo(function () {
      if (!Array.isArray(internalValue)) return /* @__PURE__ */new Set([]);
      return new Set([].concat(internalValue));
    }, [internalValue]);
    var indeterminate = React.useMemo(function () {
      var list = Array.from(checkedSet);
      return list.length !== 0 && list.length !== optionsWithoutCheckAll.length;
    }, [checkedSet, optionsWithoutCheckAll]);
    var checkAllChecked = React.useMemo(function () {
      var list = Array.from(checkedSet);
      return list.length === optionsWithoutCheckAll.length;
    }, [checkedSet, optionsWithoutCheckAll]);
    React.useEffect(function () {
      if (!isNumber_1(max)) return;

      if (max < checkedSet.size) {
        console.warn("[TDesign] max should be less than the length of value, change is invalid");
      } else {
        setLocalMax(max);
      }
    }, [max, checkedSet]);
    var context = {
      inject: function inject(checkProps) {
        if (typeof checkProps.checked !== "undefined") {
          return checkProps;
        }

        var checkValue = checkProps.value;
        return _objectSpread$27(_objectSpread$27({}, checkProps), {}, {
          checked: checkProps.checkAll ? checkAllChecked : checkedSet.has(checkValue),
          indeterminate: checkProps.checkAll ? indeterminate : checkProps.indeterminate,
          disabled: checkProps.disabled || disabled || checkedSet.size >= localMax && !checkedSet.has(checkValue),
          onChange: function onChange(checked, _ref) {
            var e = _ref.e;

            if (typeof checkProps.onChange === "function") {
              checkProps.onChange(checked, {
                e: e
              });
            }

            if (checkProps.checkAll) {
              checkedSet.clear();

              if (checked) {
                optionsWithoutCheckAllValues.forEach(function (v) {
                  checkedSet.add(v);
                });
              }
            } else if (checked) {
              if (checkedSet.size >= localMax && isNumber_1(max)) return;
              checkedSet.add(checkValue);
            } else {
              checkedSet["delete"](checkValue);
            }

            setInternalValue(Array.from(checkedSet), {
              e: e,
              current: checkProps.checkAll ? void 0 : checkValue,
              type: checked ? "check" : "uncheck"
            });
          }
        });
      }
    };
    var useOptions = Array.isArray(options) && options.length !== 0;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-checkbox-group"), className),
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(CheckContext.Provider, {
      value: context
    }, useOptions ? options.map(function (v, index) {
      var type = _typeof$1(v);

      switch (type) {
        case "string":
          {
            var vs = v;
            return /* @__PURE__ */React__default["default"].createElement(Checkbox$1, {
              key: index,
              label: vs,
              value: vs
            }, v);
          }

        case "number":
          {
            var _vs = v;
            return /* @__PURE__ */React__default["default"].createElement(Checkbox$1, {
              key: index,
              label: _vs,
              value: _vs
            }, v);
          }

        case "object":
          {
            var _vs2 = v;
            return _vs2.checkAll ? /* @__PURE__ */React__default["default"].createElement(Checkbox$1, _objectSpread$27(_objectSpread$27({}, _vs2), {}, {
              key: "checkAll_".concat(index),
              indeterminate: indeterminate
            })) : /* @__PURE__ */React__default["default"].createElement(Checkbox$1, _objectSpread$27(_objectSpread$27({}, _vs2), {}, {
              key: index,
              disabled: _vs2.disabled || disabled
            }));
          }

        default:
          return null;
      }
    }) : children));
  };

  CheckboxGroup$2.displayName = "CheckboxGroup";
  CheckboxGroup$2.defaultProps = checkboxGroupDefaultProps;

  function ownKeys$27(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$26(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$27(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$27(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Checkbox$1 = forwardRefWithStatics(function (props, ref) {
    return /* @__PURE__ */React__default["default"].createElement(Check, _objectSpread$26({
      ref: ref,
      type: "checkbox"
    }, props));
  }, {
    Group: CheckboxGroup$2
  });
  Checkbox$1.displayName = "Checkbox";
  Checkbox$1.defaultProps = checkboxDefaultProps;

  var Checkbox = Checkbox$1;

  var logSet = /* @__PURE__ */new Set();
  var log = {
    warn: function warn(componentName, message) {
      console.warn("TDesign ".concat(componentName, " Warn: ").concat(message));
    },
    warnOnce: function warnOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Warn: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.warn(msgContent);
    },
    error: function error(componentName, message) {
      console.error("TDesign ".concat(componentName, " Error: ").concat(message));
    },
    errorOnce: function errorOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Error: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.error(msgContent);
    },
    info: function info(componentName, message) {
      console.info("TDesign ".concat(componentName, " Info: ").concat(message));
    }
  };

  function fillZero(length) {
    return new Array(length).fill(0).join("");
  }
  function isInputNumber(num) {
    if (!num) return true;
    if (typeof num === "number") return Number.isNaN(num);
    var r = /^[0-9|e|E|-]+\.*[0-9|e|E|-]*$/.test(num);
    if (!r) return false;
    var eCount = 0;
    var negativeCount = 0;
    var dotCount = 0;

    for (var i = 0, len = num.length; i < len; i++) {
      if (num[i] === ".") {
        dotCount += 1;
        if (dotCount > 1) return false;
      }

      if (/(e|E)+/.test(num[i])) {
        eCount += 1;
        if (eCount > 1) return false;
      }

      if (num[i] === "-") {
        negativeCount += 1;
        if (negativeCount > 2) return false;
      }
    }

    return true;
  }
  function removeInvalidZero(num) {
    var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (num.indexOf(".") !== -1) {
      log.error("InputNumber", "num is not a integer number.");
      return num;
    }

    if (!num || num === "0" && decimal) return "";
    if (num === "0") return num;
    return (decimal ? num.replace(/0+$/, "") : num.replace(/^0+/, "")) || "0";
  }
  function largeIntNumberAdd(num1, num2) {
    var decimal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var number1 = removeInvalidZero(num1, decimal);
    var number2 = removeInvalidZero(num2, decimal);
    var isFirstLarger = number1.length > number2.length;
    var maxNumber = isFirstLarger ? number1 : number2;
    var minNumber = isFirstLarger ? number2 : number1;
    var newNumber = [];
    var step = [];
    var diff = decimal ? 0 : maxNumber.length - minNumber.length;
    var len = decimal ? minNumber.length : maxNumber.length;

    for (var i = len - 1; i >= 0; i--) {
      var minIndex = i - diff;
      var count = Number(maxNumber[i]) + (Number(minNumber[minIndex]) || 0) + (step[i] || 0);

      if (count >= 10) {
        step[i - 1] = 1;
      }

      newNumber.unshift(String(count % 10));
    }

    if (step[-1]) {
      newNumber.unshift("1");
    }

    if (decimal) {
      return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join("");
    }

    return newNumber.join("");
  }
  function largePositiveNumberAdd(num1, num2) {
    var _num1$split = num1.split("."),
        _num1$split2 = _slicedToArray(_num1$split, 2),
        _num1$split2$ = _num1$split2[0],
        intNumber1 = _num1$split2$ === void 0 ? "0" : _num1$split2$,
        _num1$split2$2 = _num1$split2[1],
        decimalNumber1 = _num1$split2$2 === void 0 ? "0" : _num1$split2$2;

    var _num2$split = num2.split("."),
        _num2$split2 = _slicedToArray(_num2$split, 2),
        _num2$split2$ = _num2$split2[0],
        intNumber2 = _num2$split2$ === void 0 ? "0" : _num2$split2$,
        _num2$split2$2 = _num2$split2[1],
        decimalNumber2 = _num2$split2$2 === void 0 ? "0" : _num2$split2$2;

    var integerSum = largeIntNumberAdd(intNumber1, intNumber2);
    if (decimalNumber1 === "0" && decimalNumber2 === "0") return integerSum;
    var newDecimalNumber1 = removeInvalidZero(decimalNumber1, true);
    var newDecimalNumber2 = removeInvalidZero(decimalNumber2, true);
    var decimalNumberSum = largeIntNumberAdd(newDecimalNumber1, newDecimalNumber2, true);
    var decimalLength = decimalNumberSum.length;

    if (decimalLength > newDecimalNumber1.length && decimalLength > newDecimalNumber2.length) {
      return [removeInvalidZero(largeIntNumberAdd(integerSum, "1")), removeInvalidZero(decimalNumberSum.slice(1), true)].filter(function (v) {
        return v;
      }).join(".");
    }

    return [removeInvalidZero(integerSum), removeInvalidZero(decimalNumberSum, true)].filter(function (v) {
      return v;
    }).join(".");
  }

  function compareLargeIntegerNumber(num1, num2) {
    var number1 = removeInvalidZero(num1);
    var number2 = removeInvalidZero(num2);

    if (number1.length === number2.length) {
      for (var i = 0, len = number1.length; i < len; i++) {
        if (number1[i] > number2[i]) return 1;
        if (number1[i] < number2[i]) return -1;
      }

      return 0;
    }

    return number1.length > number2.length ? 1 : -1;
  }

  function compareLargeDecimalNumber(num1, num2) {
    var number1 = num1 && num1 !== "0" ? num1.replace(/0+$/, "") : "0";
    var number2 = num2 && num2 !== "0" ? num2.replace(/0+$/, "") : "0";
    var maxLength = Math.max(number1.length, number2.length);

    for (var i = 0, len = maxLength; i < len; i++) {
      if ((number1[i] || 0) > (number2[i] || 0)) return 1;
      if ((number1[i] || 0) < (number2[i] || 0)) return -1;
    }

    return 0;
  }

  function compareLargeNumber(num1, num2) {
    var _num1$split3 = num1.split("."),
        _num1$split4 = _slicedToArray(_num1$split3, 2),
        integer1 = _num1$split4[0],
        decimal1 = _num1$split4[1];

    var _num2$split3 = num2.split("."),
        _num2$split4 = _slicedToArray(_num2$split3, 2),
        integer2 = _num2$split4[0],
        decimal2 = _num2$split4[1];

    var result = compareLargeIntegerNumber(integer1.replace("-", ""), integer2.replace("-", ""));
    var integer1IsNegative = integer1.includes("-");
    var integer2IsNegative = integer2.includes("-");
    if (integer1IsNegative && !integer2IsNegative) return -1;
    if (!integer1IsNegative && integer2IsNegative) return 1;

    if (integer1IsNegative && integer2IsNegative) {
      if (result === 0) return 0;
      return result > 0 ? -1 : 1;
    }

    if (result === 0) {
      return compareLargeDecimalNumber(decimal1, decimal2);
    }

    return result;
  }
  function isInfinity(num) {
    return [-Infinity, Infinity].includes(Number(num));
  }
  function isSafeNumber(num) {
    return Number(num) < Number.MAX_SAFE_INTEGER && Number(num) > Number.MIN_SAFE_INTEGER;
  }
  function compareNumber(num1, num2, largeNumber) {
    var isSafeNumberCompare = isSafeNumber(num1) && isSafeNumber(num2) && !largeNumber;
    var isInfinityCompare = isInfinity(num1) || isInfinity(num2);

    if (isSafeNumberCompare || isInfinityCompare) {
      if (Number(num1) === Number(num2)) return 0;
      return Number(num1) > Number(num2) ? 1 : -1;
    }

    return compareLargeNumber(String(num1), String(num2));
  }
  function largeIntegerNumberSubtract(num1, num2, p) {
    if (num1 === num2) return "0";

    var _ref = p || {},
        decimal = _ref.decimal,
        stayZero = _ref.stayZero;

    var number1 = removeInvalidZero(num1);
    var number2 = removeInvalidZero(num2);
    var isFirstLarger = compareLargeIntegerNumber(number1, number2) > 0;
    var maxNumber = isFirstLarger ? number1 : number2;
    var minNumber = isFirstLarger ? number2 : number1;
    var newNumber = [];
    var step = [];
    var diff = decimal ? 0 : maxNumber.length - minNumber.length;
    var len = decimal ? minNumber.length : maxNumber.length;

    for (var i = len - 1; i >= 0; i--) {
      var minIndex = i - diff;
      var count = Number(maxNumber[i]) - (Number(minNumber[minIndex]) || 0) - (step[i] || 0);

      if (count < 0) {
        step[i - 1] = 1;
        count += 10;
      }

      newNumber.unshift(String(count));
    }

    if (decimal) {
      return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join("");
    }

    var finalNumber = newNumber.join("");

    if (!stayZero) {
      finalNumber = finalNumber.replace(/^0+/, "");
    }

    return removeInvalidZero(isFirstLarger ? finalNumber : "-".concat(finalNumber));
  }
  function largePositiveNumberSubtract(num1, num2) {
    if (num1 === num2) return "0";
    var isFirstLarger = compareNumber(num1, num2, true) > 0;
    var maxNumber = isFirstLarger ? num1 : num2;
    var minNumber = isFirstLarger ? num2 : num1;

    var _maxNumber$split = maxNumber.split("."),
        _maxNumber$split2 = _slicedToArray(_maxNumber$split, 2),
        intNumber1 = _maxNumber$split2[0],
        _maxNumber$split2$ = _maxNumber$split2[1],
        decimalNumber1 = _maxNumber$split2$ === void 0 ? "0" : _maxNumber$split2$;

    var _minNumber$split = minNumber.split("."),
        _minNumber$split2 = _slicedToArray(_minNumber$split, 2),
        intNumber2 = _minNumber$split2[0],
        _minNumber$split2$ = _minNumber$split2[1],
        decimalNumber2 = _minNumber$split2$ === void 0 ? "0" : _minNumber$split2$;

    var integerNumber = largeIntegerNumberSubtract(intNumber1, intNumber2);

    if (decimalNumber1 === "0" && decimalNumber2 === "0") {
      return isFirstLarger ? integerNumber : "-".concat(integerNumber);
    }

    var decimalNumber = "";
    var addOneNumber = decimalNumber1;

    if (decimalNumber1.length < decimalNumber2.length) {
      addOneNumber = "".concat(decimalNumber1).concat(fillZero(decimalNumber2.length - decimalNumber1.length));
    }

    if (compareLargeDecimalNumber(addOneNumber, decimalNumber2) >= 0) {
      decimalNumber = largeIntegerNumberSubtract(addOneNumber, decimalNumber2, {
        decimal: true
      });
    } else {
      if (decimalNumber1.length < decimalNumber2.length || decimalNumber1 === "0") {
        decimalNumber = largeIntegerNumberSubtract("1".concat(addOneNumber), decimalNumber2, {
          stayZero: true
        });
        decimalNumber = fillZero(decimalNumber2.length - decimalNumber.length) + decimalNumber;
      } else {
        decimalNumber = largeIntegerNumberSubtract(decimalNumber1, decimalNumber2, {
          decimal: true
        });
      }

      integerNumber = largeIntegerNumberSubtract(integerNumber, "1");
    }

    var finalNumber = decimalNumber ? [integerNumber, decimalNumber].join(".") : integerNumber;
    return isFirstLarger ? finalNumber : "-".concat(finalNumber);
  }
  function largeNumberSubtract(num1, num2) {
    var isFirstNegative = num1[0] === "-";
    var isSecondNegative = num2[0] === "-";

    if (isFirstNegative && !isSecondNegative) {
      var r = largePositiveNumberAdd(num1.slice(1), num2);
      return "-".concat(r);
    }

    if (isFirstNegative && isSecondNegative) {
      return largePositiveNumberSubtract(num2.slice(1), num1.slice(1));
    }

    if (!isFirstNegative && isSecondNegative) {
      return largePositiveNumberAdd(num1, num2.slice(1));
    }

    return largePositiveNumberSubtract(num1, num2);
  }
  function largeNumberAdd(num1, num2) {
    var isFirstNegative = num1[0] === "-";
    var isSecondNegative = num2[0] === "-";

    if (isFirstNegative && !isSecondNegative) {
      return largePositiveNumberSubtract(num2, num1.slice(1));
    }

    if (isFirstNegative && isSecondNegative) {
      var r = largePositiveNumberAdd(num2.slice(1), num1.slice(1));
      return "-".concat(r);
    }

    if (!isFirstNegative && isSecondNegative) {
      return largePositiveNumberSubtract(num1, num2.slice(1));
    }

    return largePositiveNumberAdd(num1, num2);
  }
  function largeNumberToFixed(number) {
    var decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (!largeNumber) return Number(number).toFixed(decimalPlaces);
    if (typeof number !== "string") return String(number);

    var _number$split = number.split("."),
        _number$split2 = _slicedToArray(_number$split, 2),
        num1 = _number$split2[0],
        num2 = _number$split2[1];

    if (!num2) {
      return decimalPlaces ? [number, fillZero(decimalPlaces)].join(".") : number;
    }

    if (decimalPlaces === 0) {
      return Number(num2[0]) >= 5 ? largePositiveNumberAdd(num1, "1") : num1;
    }

    var decimalNumber = num2.slice(0, decimalPlaces);

    if (num2.length < decimalPlaces) {
      decimalNumber += fillZero(decimalPlaces - num2.length);
    } else {
      decimalNumber = Number(num2[decimalPlaces]) >= 5 ? largePositiveNumberAdd(decimalNumber, "1") : decimalNumber;
    }

    return [num1, decimalNumber].join(".");
  }
  function formatENumber(num) {
    var _num$split = num.split("e"),
        _num$split2 = _slicedToArray(_num$split, 2),
        num1 = _num$split2[0],
        num2 = _num$split2[1];

    var _num$split3 = num.split("."),
        _num$split4 = _slicedToArray(_num$split3, 2),
        integer = _num$split4[0],
        _num$split4$ = _num$split4[1],
        initDecimal = _num$split4$ === void 0 ? "" : _num$split4$;

    var zeroCount = Number(num2);

    var _initDecimal$split = initDecimal.split("e"),
        _initDecimal$split2 = _slicedToArray(_initDecimal$split, 1),
        decimal = _initDecimal$split2[0];

    if (zeroCount > decimal.length) {
      var multipleZero = fillZero(zeroCount - decimal.length);
      return num1.replace(/(^0+|\.)/g, "") + multipleZero;
    }

    var n1 = integer.replace(/^0+/, "") + decimal.slice(0, zeroCount);
    var d2 = decimal.slice(zeroCount);
    return d2 ? [n1, d2].join(".") : n1;
  }

  function canAddNumber(num, max) {
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!num) return true;

    if (largeNumber && isString_1(num)) {
      return compareNumber(num, max, largeNumber) < 0;
    }

    return num < max;
  }
  function canReduceNumber(num, min) {
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!num) return true;

    if (largeNumber && isString_1(num)) {
      return compareNumber(num, min, largeNumber) > 0;
    }

    return num > min;
  }
  function formatToNumber(num, extra) {
    if (num === void 0 || num === null || num === "") return num;
    if (num === "-") return 0;
    if (num[num.length - 1] === ".") return num.slice(0, -1);
    var isLargeNumber = (extra === null || extra === void 0 ? void 0 : extra.largeNumber) && isString_1(num);
    var newNumber = num;

    if (isString_1(num) && num.includes("e") || isNumber_1(num)) {
      newNumber = isLargeNumber ? formatENumber(num) : Number(num);
    }

    if ((extra === null || extra === void 0 ? void 0 : extra.decimalPlaces) !== void 0) {
      newNumber = largeNumberToFixed(newNumber, extra.decimalPlaces, extra.largeNumber);
    }

    return isLargeNumber || (extra === null || extra === void 0 ? void 0 : extra.decimalPlaces) !== void 0 ? newNumber : Number(newNumber);
  }
  function putInRangeNumber(val, params) {
    if (val === "") return void 0;
    var max = params.max,
        min = params.min,
        lastValue = params.lastValue,
        largeNumber = params.largeNumber;
    if (!isInputNumber(val)) return lastValue;

    if (largeNumber && (isString_1(max) || max === Infinity) && (isString_1(min) || min === -Infinity)) {
      if (compareNumber(max, val, largeNumber) < 0) return max;
      if (compareNumber(min, val, largeNumber) > 0) return min;
      return val;
    }

    return Math.max(Number(min), Math.min(Number(max), Number(val)));
  }
  function positiveAdd(num1, num2) {
    var _num1$toString$split$, _num2$toString$split$;

    if (!num1 || !num2) return (num1 || 0) + (num2 || 0);
    var r1 = ((_num1$toString$split$ = num1.toString().split(".")[1]) === null || _num1$toString$split$ === void 0 ? void 0 : _num1$toString$split$.length) || 0;
    var r2 = ((_num2$toString$split$ = num2.toString().split(".")[1]) === null || _num2$toString$split$ === void 0 ? void 0 : _num2$toString$split$.length) || 0;
    if (!r1 || !r2) return num1 + num2;
    var newNumber1 = num1;
    var newNumber2 = num2;
    var diff = Math.abs(r1 - r2);
    var digit = Math.pow(10, Math.max(r1, r2));

    if (diff > 0) {
      var cm = Math.pow(10, diff);

      if (r1 > r2) {
        newNumber1 = Number(num1.toString().replace(".", ""));
        newNumber2 = Number(num2.toString().replace(".", "")) * cm;
      } else {
        newNumber1 = Number(num1.toString().replace(".", "")) * cm;
        newNumber2 = Number(num2.toString().replace(".", ""));
      }
    } else {
      newNumber1 = Number(num1.toString().replace(".", ""));
      newNumber2 = Number(num2.toString().replace(".", ""));
    }

    return (newNumber1 + newNumber2) / digit;
  }
  function positiveSubtract(num1, num2) {
    var _num1$toString$split$2, _num2$toString$split$2;

    if (!num1 || !num2) return (num1 || 0) - (num2 || 0);
    var r1 = ((_num1$toString$split$2 = num1.toString().split(".")[1]) === null || _num1$toString$split$2 === void 0 ? void 0 : _num1$toString$split$2.length) || 0;
    var r2 = ((_num2$toString$split$2 = num2.toString().split(".")[1]) === null || _num2$toString$split$2 === void 0 ? void 0 : _num2$toString$split$2.length) || 0;
    var digit = Math.pow(10, Math.max(r1, r2));
    var n = r1 >= r2 ? r1 : r2;
    return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));
  }
  function add(num1, num2) {
    if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));
    if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;
    if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));
    return positiveAdd(num1, num2);
  }
  function subtract(num1, num2) {
    if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;
    if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));
    if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));
    return positiveSubtract(num1, num2);
  }
  function getStepValue(p) {
    var op = p.op,
        step = p.step,
        _p$lastValue = p.lastValue,
        lastValue = _p$lastValue === void 0 ? 0 : _p$lastValue,
        max = p.max,
        min = p.min,
        largeNumber = p.largeNumber;

    if (step <= 0) {
      log.error("InputNumber", "step must be larger than 0.");
      return lastValue;
    }

    var tStep = isNumber_1(step) ? String(step) : step;
    var newVal;

    if (op === "add") {
      if (largeNumber && isString_1(lastValue)) {
        newVal = largeNumberAdd(String(lastValue), String(tStep));
      } else {
        newVal = add(Number(lastValue || 0), Number(step));
      }
    } else if (op === "reduce") {
      if (largeNumber && isString_1(lastValue)) {
        newVal = largeNumberSubtract(String(lastValue), String(tStep));
      } else {
        newVal = subtract(Number(lastValue || 0), Number(step));
      }
    }

    if (lastValue === void 0) {
      newVal = putInRangeNumber(newVal, {
        max: max,
        min: min,
        lastValue: lastValue,
        largeNumber: largeNumber
      });
    }

    return largeNumber ? newVal : Number(newVal);
  }
  function getMaxOrMinValidateResult(p) {
    var largeNumber = p.largeNumber,
        value = p.value,
        max = p.max,
        min = p.min;
    if (largeNumber === void 0) return void 0;

    if (largeNumber && isNumber_1(value)) {
      log.warn("InputNumber", "largeNumber value must be a string.");
    }

    var error;

    if (compareNumber(value, max, largeNumber) > 0) {
      error = "exceed-maximum";
    } else if (compareNumber(value, min, largeNumber) < 0) {
      error = "below-minimum";
    } else {
      error = void 0;
    }

    return error;
  }
  function canInputNumber(number, largeNumber) {
    if (!number && typeof number === "string") return true;
    var isNumber2 = largeNumber && isInputNumber(number) || !Number.isNaN(Number(number));
    if (!isNumber2 && !["-", ".", "e", "E"].includes(number.slice(-1))) return false;
    return true;
  }

  function useInputNumber(props) {
    var _classNames;

    var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE,
        STATUS = _useCommonClassName.STATUS;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onChange = _useControlled2[1];

    var _useState = React.useState(""),
        _useState2 = _slicedToArray(_useState, 2),
        userInput = _useState2[0],
        setUserInput = _useState2[1];

    var _useState3 = React.useState(""),
        _useState4 = _slicedToArray(_useState3, 2),
        displayValue = _useState4[0],
        setDisplayValue = _useState4[1];

    var _useState5 = React.useState(),
        _useState6 = _slicedToArray(_useState5, 2),
        isError = _useState6[0],
        setIsError = _useState6[1];

    var inputRef = React.useRef(null);
    var max = props.max,
        min = props.min,
        largeNumber = props.largeNumber,
        onValidate = props.onValidate;
    var disabledReduce = props.disabled || !canReduceNumber(value, props.min, props.largeNumber);
    var disabledAdd = props.disabled || !canAddNumber(value, props.max, props.largeNumber);
    var wrapClasses = classNames$1("".concat(classPrefix, "-input-number"), SIZE[props.size], (_classNames = {}, _defineProperty$3(_classNames, STATUS.disabled, props.disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-controls-right"), props.theme === "column"), _defineProperty$3(_classNames, "".concat(classPrefix, "-input-number--").concat(props.theme), props.theme), _defineProperty$3(_classNames, "".concat(classPrefix, "-input-number--auto-width"), props.autoWidth), _classNames));
    var reduceClasses = classNames$1("".concat(classPrefix, "-input-number__decrease"), _defineProperty$3({}, STATUS.disabled, disabledReduce));
    var addClasses = classNames$1("".concat(classPrefix, "-input-number__increase"), _defineProperty$3({}, STATUS.disabled, disabledAdd));

    var getUserInput = function getUserInput(value2) {
      var _inputRef$current$cur, _inputRef$current$cur2;

      if (!value2 && value2 !== 0) return "";
      var inputStr = String(value2);

      if (!((_inputRef$current$cur = (_inputRef$current$cur2 = inputRef.current.currentElement).contains) !== null && _inputRef$current$cur !== void 0 && _inputRef$current$cur.call(_inputRef$current$cur2, document.activeElement))) {
        inputStr = String(formatToNumber(inputStr, {
          decimalPlaces: props.decimalPlaces,
          largeNumber: props.largeNumber
        }));

        if (props.format) {
          inputStr = String(props.format(value2, {
            fixedNumber: inputStr
          }));
        }
      }

      return inputStr;
    };

    React.useEffect(function () {
      var inputValue = [void 0, null].includes(value) ? "" : String(value);
      setUserInput(getUserInput(inputValue));
    }, [value]);
    React.useEffect(function () {
      if ([void 0, "", null].includes(value)) return;
      var error = getMaxOrMinValidateResult({
        value: value,
        max: max,
        min: min,
        largeNumber: largeNumber
      });
      setIsError(error);
      onValidate === null || onValidate === void 0 ? void 0 : onValidate({
        error: error
      });
    }, [value, max, min, largeNumber, onValidate]);

    var handleStepValue = function handleStepValue(op) {
      return getStepValue({
        op: op,
        step: props.step,
        max: props.max,
        min: props.min,
        lastValue: value,
        largeNumber: props.largeNumber
      });
    };

    var handleReduce = function handleReduce(e) {
      if (disabledReduce || props.readonly) return;
      var newValue = handleStepValue("reduce");
      onChange(newValue, {
        type: "reduce",
        e: e
      });
    };

    var handleAdd = function handleAdd(e) {
      if (disabledAdd || props.readonly) return;
      var newValue = handleStepValue("add");
      onChange(newValue, {
        type: "add",
        e: e
      });
    };

    var onInnerInputChange = function onInnerInputChange(val, ctx) {
      if (!canInputNumber(val, props.largeNumber)) return;
      setUserInput(val);
      var isDelete = ctx.e.inputType === "deleteContentBackward";
      var newVal = isDelete || props.largeNumber || !val ? val : Number(val);

      if (newVal !== value && !["-", ".", "e", "E"].includes(val.slice(-1))) {
        onChange(newVal, {
          type: "input",
          e: ctx.e
        });
      }
    };

    var handleBlur = function handleBlur(value2, ctx) {
      var _props$onBlur;

      setUserInput(getUserInput(value2));
      var newValue = formatToNumber(value2, {
        decimalPlaces: props.decimalPlaces,
        largeNumber: props.largeNumber
      });

      if (newValue !== value2 && String(newValue) !== value2) {
        onChange(newValue, {
          type: "blur",
          e: ctx.e
        });
      }

      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, newValue, ctx);
    };

    var handleFocus = function handleFocus(_, ctx) {
      var _props$onFocus;

      setUserInput(value);
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value, ctx);
    };

    var handleKeydown = function handleKeydown(value2, ctx) {
      var _props$onKeydown;

      var e = ctx.e;
      var keyEvent = {
        ArrowUp: handleAdd,
        ArrowDown: handleReduce
      };
      var code = e.code || e.key;

      if (keyEvent[code] !== void 0) {
        keyEvent[code](e);
      }

      (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 ? void 0 : _props$onKeydown.call(props, value2, ctx);
    };

    var handleKeyup = function handleKeyup(value2, ctx) {
      var _props$onKeyup;

      (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 ? void 0 : _props$onKeyup.call(props, value2, ctx);
    };

    var handleKeypress = function handleKeypress(value2, ctx) {
      var _props$onKeypress;

      (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 ? void 0 : _props$onKeypress.call(props, value2, ctx);
    };

    var handleEnter = function handleEnter(value2, ctx) {
      var _props$onEnter;

      setUserInput(getUserInput(value2));
      var newValue = formatToNumber(value2, {
        decimalPlaces: props.decimalPlaces,
        largeNumber: props.largeNumber
      });

      if (newValue !== value2 && String(newValue) !== value2) {
        onChange(newValue, {
          type: "enter",
          e: ctx.e
        });
      }

      (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, ctx);
    };

    var focus = function focus() {
      inputRef.current.focus();
    };

    var blur = function blur() {
      inputRef.current.blur();
    };

    var listeners = {
      onBlur: handleBlur,
      onFocus: handleFocus,
      onKeydown: handleKeydown,
      onKeyup: handleKeyup,
      onKeypress: handleKeypress,
      onEnter: handleEnter,
      onClick: focus
    };
    return {
      classPrefix: classPrefix,
      wrapClasses: wrapClasses,
      reduceClasses: reduceClasses,
      addClasses: addClasses,
      inputRef: inputRef,
      listeners: listeners,
      displayValue: displayValue,
      setDisplayValue: setDisplayValue,
      isError: isError,
      setIsError: setIsError,
      userInput: userInput,
      setUserInput: setUserInput,
      value: value,
      focus: focus,
      blur: blur,
      onChange: onChange,
      handleReduce: handleReduce,
      handleAdd: handleAdd,
      onInnerInputChange: onInnerInputChange
    };
  }

  var inputNumberDefaultProps = {
    autoWidth: false,
    decimalPlaces: void 0,
    largeNumber: false,
    max: Infinity,
    min: -Infinity,
    placeholder: void 0,
    readonly: false,
    size: "medium",
    step: 1,
    theme: "row"
  };

  function ownKeys$26(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$25(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$26(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$26(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function TdInputNumber(props, ref) {
    var _useGlobalIcon = useGlobalIcon({
      ChevronDownIcon: ChevronDownIcon,
      RemoveIcon: RemoveIcon,
      ChevronUpIcon: ChevronUpIcon,
      AddIcon: AddIcon
    }),
        ChevronDownIcon$1 = _useGlobalIcon.ChevronDownIcon,
        RemoveIcon$1 = _useGlobalIcon.RemoveIcon,
        ChevronUpIcon$1 = _useGlobalIcon.ChevronUpIcon,
        AddIcon$1 = _useGlobalIcon.AddIcon;

    var _useInputNumber = useInputNumber(props),
        classPrefix = _useInputNumber.classPrefix,
        wrapClasses = _useInputNumber.wrapClasses,
        addClasses = _useInputNumber.addClasses,
        reduceClasses = _useInputNumber.reduceClasses,
        listeners = _useInputNumber.listeners,
        isError = _useInputNumber.isError,
        inputRef = _useInputNumber.inputRef,
        userInput = _useInputNumber.userInput,
        handleAdd = _useInputNumber.handleAdd,
        handleReduce = _useInputNumber.handleReduce,
        onInnerInputChange = _useInputNumber.onInnerInputChange;

    var wrapRef = React.useRef(null);
    var status = isError ? "error" : props.status;
    var addIcon = props.theme === "column" ? /* @__PURE__ */React__default["default"].createElement(ChevronUpIcon$1, {
      size: props.size
    }) : /* @__PURE__ */React__default["default"].createElement(AddIcon$1, {
      size: props.size
    });
    var reduceIcon = props.theme === "column" ? /* @__PURE__ */React__default["default"].createElement(ChevronDownIcon$1, {
      size: props.size
    }) : /* @__PURE__ */React__default["default"].createElement(RemoveIcon$1, {
      size: props.size
    });
    React.useImperativeHandle(ref, function () {
      return {
        currentElement: wrapRef.current,
        inputElement: inputRef.current
      };
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(wrapClasses, props.className),
      style: props.style,
      ref: wrapRef
    }, props.theme !== "normal" && /* @__PURE__ */React__default["default"].createElement(Button, {
      className: reduceClasses,
      disabled: props.disabled,
      onClick: handleReduce,
      variant: "outline",
      shape: "square",
      icon: reduceIcon
    }), /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$25(_objectSpread$25({
      ref: inputRef,
      autocomplete: "off",
      disabled: props.disabled,
      readonly: props.readonly,
      placeholder: props.placeholder,
      autoWidth: props.autoWidth,
      align: props.align || (props.theme === "row" ? "center" : void 0),
      status: status,
      label: props.label,
      suffix: props.suffix,
      value: userInput,
      onChange: onInnerInputChange,
      size: props.size
    }, listeners), props.inputProps || {})), props.theme !== "normal" && /* @__PURE__ */React__default["default"].createElement(Button, {
      className: addClasses,
      disabled: props.disabled,
      onClick: handleAdd,
      variant: "outline",
      shape: "square",
      icon: addIcon
    }), props.tips && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-input__tips"), "".concat(classPrefix, "-input__tips--").concat(status))
    }, props.tips));
  }

  var InputNumber$1 = /*#__PURE__*/React.forwardRef(TdInputNumber);
  InputNumber$1.displayName = "InputNumber";
  InputNumber$1.defaultProps = inputNumberDefaultProps;

  var InputNumber = InputNumber$1;

  var StepsContext$1 = /*#__PURE__*/React__default["default"].createContext({
    current: 0,
    theme: "default",
    readonly: false,
    onChange: null
  });

  var stepItemDefaultProps = {
    icon: true,
    status: "default"
  };
  var stepsDefaultProps = {
    layout: "horizontal",
    readonly: false,
    separator: "line",
    sequence: "positive",
    theme: "default"
  };

  var StepItem = function StepItem(props) {
    var _classNames;

    var index = props.index,
        icon = props.icon,
        title = props.title,
        content = props.content,
        value = props.value,
        children = props.children,
        style = props.style,
        status = props.status;

    var _useContext = React.useContext(StepsContext$1),
        current = _useContext.current,
        theme = _useContext.theme,
        onChange = _useContext.onChange,
        readonly = _useContext.readonly;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix,
        globalStepsConfig = _useConfig.steps;

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon,
      CheckIcon: CheckIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon,
        CheckIcon$1 = _useGlobalIcon.CheckIcon;

    var canClick = status !== "process" && !readonly;

    function renderIcon() {
      if (!icon) return null;
      var iconCls = "".concat(classPrefix, "-steps-item__icon--number");
      if (icon && icon !== true) return /* @__PURE__ */React__default["default"].createElement("span", {
        className: iconCls
      }, icon);
      if (theme !== "default") return null;
      if (status === "error") return /* @__PURE__ */React__default["default"].createElement("span", {
        className: iconCls
      }, globalStepsConfig.errorIcon || /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, null));
      if (status === "finish") return /* @__PURE__ */React__default["default"].createElement("span", {
        className: iconCls
      }, /* @__PURE__ */React__default["default"].createElement(CheckIcon$1, null));
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: iconCls
      }, Number(index) + 1);
    }

    function onStepClick(e) {
      if (!canClick) return;
      var currentValue = value !== null && value !== void 0 ? value : index;
      onChange(currentValue, current, {
        e: e
      });
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: style,
      className: classNames$1((_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-steps-item"), true), _defineProperty$3(_classNames, "".concat(classPrefix, "-steps-item--wait"), status === "default"), _defineProperty$3(_classNames, "".concat(classPrefix, "-steps-item--error"), status === "error"), _defineProperty$3(_classNames, "".concat(classPrefix, "-steps-item--finish"), status === "finish"), _defineProperty$3(_classNames, "".concat(classPrefix, "-steps-item--process"), status === "process"), _defineProperty$3(_classNames, props.className, !!props.className), _classNames))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-steps-item__inner"), _defineProperty$3({}, "".concat(classPrefix, "-steps-item--clickable"), canClick)),
      onClick: onStepClick
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-steps-item__icon"), _defineProperty$3({}, "".concat(classPrefix, "-steps-item-").concat(status), status))
    }, renderIcon()), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__content")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__title")
    }, title), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__description")
    }, content), children ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__extra")
    }, children) : null)));
  };

  StepItem.displayName = "StepItem";
  StepItem.defaultProps = stepItemDefaultProps;

  function ownKeys$25(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$24(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$25(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$25(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Steps$1 = forwardRefWithStatics(function (props, ref) {
    var _classnames;

    var style = props.style,
        readonly = props.readonly,
        layout = props.layout,
        theme = props.theme,
        sequence = props.sequence,
        separator = props.separator,
        children = props.children,
        options = props.options;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useControlled = useControlled(props, "current", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        current = _useControlled2[0],
        onChange = _useControlled2[1];

    var indexMap = React.useMemo(function () {
      var map = {};

      if (options) {
        options.forEach(function (item, index) {
          if (item.value !== void 0) map[item.value] = index;
        });
      } else {
        React__default["default"].Children.forEach(children, function (child, index) {
          if (! /*#__PURE__*/React__default["default"].isValidElement(child)) return;
          if (child.props.value !== void 0) map[child.props.value] = index;
        });
      }

      return map;
    }, [options, children]);
    var handleStatus = React.useCallback(function (item, index) {
      var _item$value;

      if (current === "FINISH") return "finish";
      if (item.status && item.status !== "default") return item.status;

      if (item.value === void 0) {
        if (sequence === "positive" && index < current) return "finish";
        if (sequence === "reverse" && index > current) return "finish";
      }

      if (item.value !== void 0) {
        var matchIndex = indexMap[current];

        if (matchIndex === void 0) {
          console.warn("TDesign Steps Warn: The current `value` is not exist.");
          return "default";
        }

        if (sequence === "positive" && index < matchIndex) return "finish";
        if (sequence === "reverse" && index > matchIndex) return "finish";
      }

      var key = (_item$value = item.value) !== null && _item$value !== void 0 ? _item$value : index;
      if (key === current) return "process";
      return "default";
    }, [current, sequence, indexMap]);
    var stepItemList = React.useMemo(function () {
      if (options) {
        var optionsDisplayList = sequence === "reverse" ? options.reverse() : options;
        return options.map(function (item, index) {
          var stepIndex = sequence === "reverse" ? optionsDisplayList.length - index - 1 : index;
          return /* @__PURE__ */React__default["default"].createElement(StepItem, _objectSpread$24(_objectSpread$24({
            key: index
          }, item), {}, {
            index: stepIndex,
            status: handleStatus(item, index)
          }));
        });
      }

      var childrenList = React__default["default"].Children.toArray(children);
      var childrenDisplayList = sequence === "reverse" ? childrenList.reverse() : childrenList;
      return childrenList.map(function (child, index) {
        var stepIndex = sequence === "reverse" ? childrenDisplayList.length - index - 1 : index;
        return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$24(_objectSpread$24({}, child.props), {}, {
          index: stepIndex,
          status: handleStatus(child.props, index)
        }));
      });
    }, [options, children, sequence, handleStatus]);
    return /* @__PURE__ */React__default["default"].createElement(StepsContext$1.Provider, {
      value: {
        current: current,
        theme: theme,
        readonly: readonly,
        onChange: onChange
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1((_classnames = {}, _defineProperty$3(_classnames, "".concat(classPrefix, "-steps"), true), _defineProperty$3(_classnames, "".concat(classPrefix, "-steps--").concat(theme, "-anchor"), theme), _defineProperty$3(_classnames, "".concat(classPrefix, "-steps--").concat(layout), layout), _defineProperty$3(_classnames, "".concat(classPrefix, "-steps--").concat(sequence), sequence), _defineProperty$3(_classnames, "".concat(classPrefix, "-steps--").concat(separator, "-separator"), separator), _defineProperty$3(_classnames, props.className, !!props.className), _classnames))
    }, stepItemList));
  }, {
    StepItem: StepItem
  });
  Steps$1.displayName = "Steps";
  Steps$1.defaultProps = stepsDefaultProps;

  var Steps = Steps$1;

  var Distance = "32px";
  var PlacementOffset = {
    center: {
      left: "50%",
      top: "50%",
      transform: "translateX(-50%) translateY(-50%)"
    },
    left: {
      left: Distance,
      top: "50%",
      transform: "translateY(-50%)"
    },
    bottom: {
      bottom: Distance,
      left: "50%",
      transform: "translateX(-50%)"
    },
    right: {
      right: Distance,
      top: "50%",
      transform: "translateY(-50%)"
    },
    top: {
      top: Distance,
      left: "50%",
      transform: "translateX(-50%)"
    },
    "top-left": {
      left: Distance,
      top: Distance
    },
    "top-right": {
      right: Distance,
      top: Distance
    },
    "bottom-left": {
      left: Distance,
      bottom: Distance
    },
    "bottom-right": {
      right: Distance,
      bottom: Distance
    }
  };

  function useMessageClass() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var tdMessagePrefix = "".concat(classPrefix, "-message");
    var tdMessageListClass = "".concat(tdMessagePrefix, "__list");

    var tdClassIsGenerator = function tdClassIsGenerator(append) {
      return "".concat(classPrefix, "-is-").concat(append);
    };

    var tdMessageClassGenerator = function tdMessageClassGenerator(append) {
      return "".concat(tdMessagePrefix, "__").concat(append);
    };

    var tdMessagePlacementClassGenerator = function tdMessagePlacementClassGenerator(placement) {
      return "".concat(tdMessagePrefix, "-placement--").concat(placement);
    };

    return {
      tdMessagePrefix: tdMessagePrefix,
      tdMessageListClass: tdMessageListClass,
      tdClassIsGenerator: tdClassIsGenerator,
      tdMessageClassGenerator: tdMessageClassGenerator,
      tdMessagePlacementClassGenerator: tdMessagePlacementClassGenerator
    };
  }

  function MessageClose(_ref) {
    var closeBtn = _ref.closeBtn,
        onCloseBtnClick = _ref.onCloseBtnClick;

    var _useMessageClass = useMessageClass(),
        tdMessageClassGenerator = _useMessageClass.tdMessageClassGenerator;

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon;

    var relCloseBtn = closeBtn;

    if (typeof closeBtn === "function") {
      relCloseBtn = closeBtn();
    }

    if (!relCloseBtn) {
      return null;
    }

    if (typeof relCloseBtn === "string" || typeof relCloseBtn === "number") {
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: tdMessageClassGenerator("close"),
        onClick: function onClick(e) {
          return onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
            e: e
          });
        }
      }, closeBtn);
    }

    if ( /*#__PURE__*/React__default["default"].isValidElement(relCloseBtn)) {
      var _onClick = relCloseBtn.props.onClick;
      return /*#__PURE__*/React__default["default"].cloneElement(relCloseBtn, {
        className: classNames$1(relCloseBtn.props.className, tdMessageClassGenerator("close")),
        onClick: function onClick(e) {
          _onClick === null || _onClick === void 0 ? void 0 : _onClick(e);
          onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
            e: e
          });
        }
      });
    }

    return /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, {
      className: tdMessageClassGenerator("close"),
      onClick: function onClick(e) {
        return onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
          e: e
        });
      }
    });
  }

  function MessageIcon(_ref) {
    var theme = _ref.theme,
        onCloseBtnClick = _ref.onCloseBtnClick;

    var _useGlobalIcon = useGlobalIcon({
      CheckCircleFilledIcon: CheckCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon,
      HelpCircleFilledIcon: HelpCircleFilledIcon,
      InfoCircleFilledIcon: InfoCircleFilledIcon
    }),
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon,
        HelpCircleFilledIcon$1 = _useGlobalIcon.HelpCircleFilledIcon,
        InfoCircleFilledIcon$1 = _useGlobalIcon.InfoCircleFilledIcon;

    var iconMap = {
      info: InfoCircleFilledIcon$1,
      success: CheckCircleFilledIcon$1,
      warning: ErrorCircleFilledIcon$1,
      error: ErrorCircleFilledIcon$1,
      question: HelpCircleFilledIcon$1,
      loading: Loading
    };
    var Icon = iconMap[theme];

    if (theme === "loading") {
      return /* @__PURE__ */React__default["default"].createElement(Icon, {
        loading: true
      });
    }

    return Icon ? /* @__PURE__ */React__default["default"].createElement(Icon, {
      onClick: function onClick(e) {
        return onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
          e: e
        });
      }
    }) : null;
  }

  function ownKeys$24(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$23(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$24(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$24(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var MessageComponent = function MessageComponent(props) {
    var _useMessageClass = useMessageClass(),
        tdMessagePrefix = _useMessageClass.tdMessagePrefix,
        tdClassIsGenerator = _useMessageClass.tdClassIsGenerator;

    var _props$theme = props.theme,
        theme = _props$theme === void 0 ? "info" : _props$theme,
        className = props.className,
        children = props.children,
        closeBtn = props.closeBtn,
        _props$onCloseBtnClic = props.onCloseBtnClick,
        onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop$1 : _props$onCloseBtnClic,
        style = props.style,
        _props$icon = props.icon,
        icon = _props$icon === void 0 ? true : _props$icon,
        content = props.content;
    var iconNode = icon;

    if (icon === true) {
      iconNode = /* @__PURE__ */React__default["default"].createElement(MessageIcon, {
        theme: theme,
        onCloseBtnClick: onCloseBtnClick
      });
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      key: "message",
      style: style,
      className: classNames$1(className, "".concat(tdMessagePrefix), tdClassIsGenerator(theme), closeBtn ? tdClassIsGenerator("closable") : "")
    }, iconNode, content ? content : children, /* @__PURE__ */React__default["default"].createElement(MessageClose, _objectSpread$23({}, props)));
  };

  var messageDefaultProps = {
    closeBtn: void 0,
    duration: 3e3,
    icon: true,
    theme: "info"
  };

  function ownKeys$23(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$22(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$23(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$23(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var globalConfig = {
    top: 32
  };

  var messageDefaultConfig = _objectSpread$22(_objectSpread$22({}, messageDefaultProps), {}, {
    duration: 3e3,
    placement: "top",
    zIndex: 5e3
  });

  var getMessageConfig = function getMessageConfig(options) {
    var currentOptions = _objectSpread$22({}, options);

    for (var i in currentOptions) {
      if (typeof currentOptions[i] === "undefined") {
        delete currentOptions[i];
      }
    }

    if (typeof currentOptions.duration !== "number" || currentOptions.duration < 0) {
      delete currentOptions.duration;
    }

    return _objectSpread$22(_objectSpread$22({}, messageDefaultConfig), currentOptions);
  };
  var setGlobalConfig$1 = function setGlobalConfig(options) {
    messageDefaultConfig = _objectSpread$22({}, getMessageConfig(options));
  };

  function ownKeys$22(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$21(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$22(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$22(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var MessageList = [];
  var keyIndex = 1;

  var MessageContainer = function MessageContainer(props) {
    var placement = props.placement,
        children = props.children,
        zIndex = props.zIndex,
        id = props.id;
    var style = {
      zIndex: zIndex
    };
    Object.keys(PlacementOffset[placement]).forEach(function (key) {
      style[key] = PlacementOffset[placement][key];
    });

    if (placement.includes("top")) {
      style.top = "".concat(globalConfig.top, "px");
    }

    var _useMessageClass = useMessageClass(),
        tdMessagePlacementClassGenerator = _useMessageClass.tdMessagePlacementClassGenerator,
        tdMessageListClass = _useMessageClass.tdMessageListClass;

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdMessageListClass, tdMessagePlacementClassGenerator(placement)),
      style: style,
      id: id
    }, children);
  };

  function createContainer(_ref) {
    var attach = _ref.attach,
        zIndex = _ref.zIndex,
        _ref$placement = _ref.placement,
        placement = _ref$placement === void 0 ? "top" : _ref$placement;
    var mountedDom = document.body;

    if (typeof attach === "string") {
      var result = document.querySelectorAll(attach);

      if (result.length >= 1) {
        mountedDom = result[0];
      }
    } else if (typeof attach === "function") {
      mountedDom = attach();
    }

    var containerId = "tdesign-message-container--".concat(placement);
    var container = Array.from(mountedDom.querySelectorAll("#".concat(containerId)));

    if (container.length < 1) {
      var div = document.createElement("div");
      ReactDOM__default["default"].render( /* @__PURE__ */React__default["default"].createElement(MessageContainer, {
        id: containerId,
        placement: placement,
        zIndex: zIndex
      }), div);
      mountedDom.appendChild(div);
      var container2 = Array.from(mountedDom.querySelectorAll("#".concat(containerId)));
      return container2[0];
    }

    return container[0];
  }

  function renderElement(theme, config) {
    var container = createContainer(config);

    var content = config.content,
        offset = config.offset,
        _config$onDurationEnd = config.onDurationEnd,
        onDurationEnd = _config$onDurationEnd === void 0 ? noop$1 : _config$onDurationEnd,
        _config$onCloseBtnCli = config.onCloseBtnClick,
        _onCloseBtnClick = _config$onCloseBtnCli === void 0 ? noop$1 : _config$onCloseBtnCli;

    var div = document.createElement("div");
    keyIndex += 1;
    var message = {
      close: function close() {
        ReactDOM__default["default"].unmountComponentAtNode(div);
        div.remove();
        message.closed = true;
      },
      key: keyIndex,
      closed: false
    };

    if (config.duration !== 0) {
      setTimeout(function () {
        if (!message.closed) {
          message.close();
          onDurationEnd();
        }
      }, config.duration);
    }

    var style = {};

    if (Array.isArray(offset) && offset.length === 2) {
      var _offset = _slicedToArray(offset, 2),
          left = _offset[0],
          top = _offset[1];

      style = _objectSpread$21(_objectSpread$21({}, config.style), {}, {
        left: left,
        top: top,
        position: "relative"
      });
    }

    return new Promise(function (resolve) {
      ReactDOM__default["default"].render( /* @__PURE__ */React__default["default"].createElement(MessageComponent, _objectSpread$21(_objectSpread$21({
        key: keyIndex
      }, config), {}, {
        theme: theme,
        style: style,
        onCloseBtnClick: function onCloseBtnClick(ctx) {
          _onCloseBtnClick(ctx);

          message.close();
        }
      }), content), div);
      container.appendChild(div);
      MessageList.push(message);
      resolve(message);
    });
  }

  function isConfig(content) {
    return Object.prototype.toString.call(content) === "[object Object]" && !!content.content;
  }

  var messageMethod = function messageMethod(theme, content, duration) {
    var config = {};

    if (isConfig(content)) {
      config = _objectSpread$21({
        duration: duration
      }, content);
    } else {
      config = {
        content: content,
        duration: duration
      };
    }

    return renderElement(theme, getMessageConfig(config));
  };

  var MessagePlugin$1 = function MessagePlugin(theme, message, duration) {
    return messageMethod(theme, message, duration);
  };

  MessagePlugin$1.info = function (content, duration) {
    return messageMethod("info", content, duration);
  };

  MessagePlugin$1.error = function (content, duration) {
    return messageMethod("error", content, duration);
  };

  MessagePlugin$1.warning = function (content, duration) {
    return messageMethod("warning", content, duration);
  };

  MessagePlugin$1.success = function (content, duration) {
    return messageMethod("success", content, duration);
  };

  MessagePlugin$1.question = function (content, duration) {
    return messageMethod("question", content, duration);
  };

  MessagePlugin$1.loading = function (content, duration) {
    return messageMethod("loading", content, duration);
  };

  MessagePlugin$1.config = function (options) {
    return setGlobalConfig$1(options);
  };

  MessagePlugin$1.close = function (messageInstance) {
    messageInstance.then(function (instance) {
      return instance.close();
    });
  };

  MessagePlugin$1.closeAll = function () {
    MessageList.forEach(function (message) {
      typeof message.close === "function" && message.close();
    });
    MessageList = [];
    return;
  };

  var Message = MessageComponent;
  var message = MessagePlugin$1;
  var MessagePlugin = MessagePlugin$1;

  var isArray$7 = isArray_1,
      isSymbol$1 = isSymbol_1;
  /** Used to match property names within property paths. */

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;
  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */

  function isKey$1(value, object) {
    if (isArray$7(value)) {
      return false;
    }

    var type = _typeof$1(value);

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol$1(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  var _isKey = isKey$1;

  var MapCache$1 = _MapCache;
  /** Error message constants. */

  var FUNC_ERROR_TEXT = 'Expected a function';
  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */

  function memoize$1(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize$1.Cache || MapCache$1)();
    return memoized;
  } // Expose `MapCache`.


  memoize$1.Cache = MapCache$1;
  var memoize_1 = memoize$1;

  var memoize = memoize_1;
  /** Used as the maximum memoize cache size. */

  var MAX_MEMOIZE_SIZE = 500;
  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */

  function memoizeCapped$1(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped$1;

  var memoizeCapped = _memoizeCapped;
  /** Used to match property names within property paths. */

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  /** Used to match backslashes in property paths. */

  var reEscapeChar = /\\(\\)?/g;
  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */

  var stringToPath$1 = memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46
    /* . */
    ) {
      result.push('');
    }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  var _stringToPath = stringToPath$1;

  var isArray$6 = isArray_1,
      isKey = _isKey,
      stringToPath = _stringToPath,
      toString$4 = toString_1;
  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */

  function castPath$6(value, object) {
    if (isArray$6(value)) {
      return value;
    }

    return isKey(value, object) ? [value] : stringToPath(toString$4(value));
  }

  var _castPath = castPath$6;

  var isSymbol = isSymbol_1;
  /** Used as references for various `Number` constants. */

  var INFINITY$1 = 1 / 0;
  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */

  function toKey$4(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
  }

  var _toKey = toKey$4;

  var castPath$5 = _castPath,
      toKey$3 = _toKey;
  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */

  function baseGet$3(object, path) {
    path = castPath$5(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey$3(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  var _baseGet = baseGet$3;

  var assignValue$1 = _assignValue,
      castPath$4 = _castPath,
      isIndex$1 = _isIndex,
      isObject$1 = isObject_1,
      toKey$2 = _toKey;
  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */

  function baseSet$2(object, path, value, customizer) {
    if (!isObject$1(object)) {
      return object;
    }

    path = castPath$4(path, object);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey$2(path[index]),
          newValue = value;

      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
        return object;
      }

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject$1(objValue) ? objValue : isIndex$1(path[index + 1]) ? [] : {};
        }
      }

      assignValue$1(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  var _baseSet = baseSet$2;

  var baseGet$2 = _baseGet,
      baseSet$1 = _baseSet,
      castPath$3 = _castPath;
  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */

  function basePickBy$1(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = baseGet$2(object, path);

      if (predicate(value, path)) {
        baseSet$1(result, castPath$3(path, object), value);
      }
    }

    return result;
  }

  var _basePickBy = basePickBy$1;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */

  function baseHasIn$1(object, key) {
    return object != null && key in Object(object);
  }

  var _baseHasIn = baseHasIn$1;

  var castPath$2 = _castPath,
      isArguments$2 = isArguments_1,
      isArray$5 = isArray_1,
      isIndex = _isIndex,
      isLength = isLength_1,
      toKey$1 = _toKey;
  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */

  function hasPath$1(object, path, hasFunc) {
    path = castPath$2(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey$1(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray$5(object) || isArguments$2(object));
  }

  var _hasPath = hasPath$1;

  var baseHasIn = _baseHasIn,
      hasPath = _hasPath;
  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */

  function hasIn$1(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  var hasIn_1 = hasIn$1;

  var basePickBy = _basePickBy,
      hasIn = hasIn_1;
  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */

  function basePick$1(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn(object, path);
    });
  }

  var _basePick = basePick$1;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */

  function arrayPush$3(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  var _arrayPush = arrayPush$3;

  var _Symbol$2 = _Symbol$6,
      isArguments$1 = isArguments_1,
      isArray$4 = isArray_1;
  /** Built-in value references. */

  var spreadableSymbol = _Symbol$2 ? _Symbol$2.isConcatSpreadable : undefined;
  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */

  function isFlattenable$1(value) {
    return isArray$4(value) || isArguments$1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  var _isFlattenable = isFlattenable$1;

  var arrayPush$2 = _arrayPush,
      isFlattenable = _isFlattenable;
  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */

  function baseFlatten$2(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten$2(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush$2(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  var _baseFlatten = baseFlatten$2;

  var baseFlatten$1 = _baseFlatten;
  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */

  function flatten$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten$1(array, 1) : [];
  }

  var flatten_1 = flatten$1;

  var flatten = flatten_1,
      overRest = _overRest,
      setToString = _setToString;
  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */

  function flatRest$2(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  var _flatRest = flatRest$2;

  var basePick = _basePick,
      flatRest$1 = _flatRest;
  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */

  var pick = flatRest$1(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  var pick_1 = pick;

  var baseGet$1 = _baseGet;
  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet$1(object, path);
    return result === undefined ? defaultValue : result;
  }

  var get_1 = get;

  function formatRowAttributes(attributes, params) {
    if (!attributes) return void 0;
    var attrList = attributes instanceof Array ? attributes : [attributes];
    var result = {};

    for (var i = 0; i < attrList.length; i++) {
      var attrItem = attrList[i];
      if (!attrItem) continue;
      var attrProperty = isFunction_1(attrItem) ? attrItem(params) : attrItem;
      result = attrProperty instanceof Array ? formatRowAttributes(attrProperty, params) : Object.assign(result, attrProperty);
    }

    return result;
  }
  function formatRowClassNames(rowClassNames, params, rowKey) {
    var rowClassList = rowClassNames instanceof Array ? rowClassNames : [rowClassNames];
    var row = params.row,
        rowIndex = params.rowIndex;
    var customClasses = [];

    for (var i = 0, len = rowClassList.length; i < len; i++) {
      var rName = rowClassList[i];
      var tClass = isFunction_1(rName) ? rName(params) : rName;

      if (isObject_1(tClass) && !(tClass instanceof Array)) {
        tClass[rowIndex] && (tClass = tClass[rowIndex]);
        var rowId = get_1(row, rowKey || "id");
        tClass[rowId] && (tClass = tClass[rowId]);
      } else if (tClass instanceof Array) {
        tClass = formatRowClassNames(tClass, params, rowKey);
      }

      customClasses = customClasses.concat(tClass);
    }

    return customClasses;
  }
  function isRowSelectedDisabled$1(selectColumn, row, rowIndex) {
    if (!selectColumn) return false;
    var disabled = isFunction_1(selectColumn.disabled) ? selectColumn.disabled({
      row: row,
      rowIndex: rowIndex
    }) : selectColumn.disabled;

    if (selectColumn.checkProps) {
      if (isFunction_1(selectColumn.checkProps)) {
        disabled = disabled || selectColumn.checkProps({
          row: row,
          rowIndex: rowIndex
        }).disabled;
      } else if (selectColumn.checkProps === "object") {
        disabled = disabled || selectColumn.checkProps.disabled;
      }
    }

    return !!disabled;
  }
  function getCurrentRowByKey(columns, key) {
    if (!columns || !key) return;
    var col = columns === null || columns === void 0 ? void 0 : columns.find(function (t) {
      return t.colKey === key;
    });
    if (col) return col;

    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i, _columns$i$children;

      if ((_columns$i = columns[i]) !== null && _columns$i !== void 0 && (_columns$i$children = _columns$i.children) !== null && _columns$i$children !== void 0 && _columns$i$children.length) {
        var _columns$i2;

        return getCurrentRowByKey((_columns$i2 = columns[i]) === null || _columns$i2 === void 0 ? void 0 : _columns$i2.children, key);
      }
    }
  }
  function getAffixProps(mainAffixProps, subAffixProps) {
    if (_typeof$1(mainAffixProps) === "object") return mainAffixProps;
    if (_typeof$1(subAffixProps) === "object") return subAffixProps;
    return {};
  }
  function getEditableKeysMap(keys, list, rowKey) {
    var map = {};

    for (var i = 0, len = list.length; i < len; i++) {
      var rowValue = get_1(list[i], rowKey);

      if (keys.includes(rowValue)) {
        map[rowValue] = true;
      }
    }

    return map;
  }

  function getScrollbarWidth$1() {
    var defaultScrollbarWidth = 6;
    if (!navigator) return defaultScrollbarWidth;
    if (/(Chrome|Safari)/i.test(navigator.userAgent)) return defaultScrollbarWidth;
    var scrollDiv = document.createElement("div");
    scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);

    if (/Firefox/.test(navigator.userAgent)) {
      scrollbarWidth -= 4;
    }

    if (getIEVersion() <= 11) {
      scrollbarWidth = 12;
    }

    return scrollbarWidth;
  }

  var lodash = {exports: {}};

  (function(module,exports){(function(){/** Used as a safe reference for `undefined` in pre-ES5 environments. */var undefined$1;/** Used as the semantic version number. */var VERSION='4.17.21';/** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Error message constants. */var CORE_ERROR_TEXT='Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',FUNC_ERROR_TEXT='Expected a function',INVALID_TEMPL_VAR_ERROR_TEXT='Invalid `variable` option passed into `_.template`';/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used as the maximum memoize cache size. */var MAX_MEMOIZE_SIZE=500;/** Used as the internal argument placeholder. */var PLACEHOLDER='__lodash_placeholder__';/** Used to compose bitmasks for cloning. */var CLONE_DEEP_FLAG=1,CLONE_FLAT_FLAG=2,CLONE_SYMBOLS_FLAG=4;/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** Used to compose bitmasks for function metadata. */var WRAP_BIND_FLAG=1,WRAP_BIND_KEY_FLAG=2,WRAP_CURRY_BOUND_FLAG=4,WRAP_CURRY_FLAG=8,WRAP_CURRY_RIGHT_FLAG=16,WRAP_PARTIAL_FLAG=32,WRAP_PARTIAL_RIGHT_FLAG=64,WRAP_ARY_FLAG=128,WRAP_REARG_FLAG=256,WRAP_FLIP_FLAG=512;/** Used as default options for `_.truncate`. */var DEFAULT_TRUNC_LENGTH=30,DEFAULT_TRUNC_OMISSION='...';/** Used to detect hot functions by number of calls within a span of milliseconds. */var HOT_COUNT=800,HOT_SPAN=16;/** Used to indicate the type of lazy iteratees. */var LAZY_FILTER_FLAG=1,LAZY_MAP_FLAG=2,LAZY_WHILE_FLAG=3;/** Used as references for various `Number` constants. */var INFINITY=1/0,MAX_SAFE_INTEGER=9007199254740991,MAX_INTEGER=1.7976931348623157e+308,NAN=0/0;/** Used as references for the maximum length and index of an array. */var MAX_ARRAY_LENGTH=4294967295,MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH-1,HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH>>>1;/** Used to associate wrap methods with their bit flags. */var wrapFlags=[['ary',WRAP_ARY_FLAG],['bind',WRAP_BIND_FLAG],['bindKey',WRAP_BIND_KEY_FLAG],['curry',WRAP_CURRY_FLAG],['curryRight',WRAP_CURRY_RIGHT_FLAG],['flip',WRAP_FLIP_FLAG],['partial',WRAP_PARTIAL_FLAG],['partialRight',WRAP_PARTIAL_RIGHT_FLAG],['rearg',WRAP_REARG_FLAG]];/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',asyncTag='[object AsyncFunction]',boolTag='[object Boolean]',dateTag='[object Date]',domExcTag='[object DOMException]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',nullTag='[object Null]',objectTag='[object Object]',promiseTag='[object Promise]',proxyTag='[object Proxy]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',undefinedTag='[object Undefined]',weakMapTag='[object WeakMap]',weakSetTag='[object WeakSet]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to match empty string literals in compiled template source. */var reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;/** Used to match HTML entities and HTML characters. */var reEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,reUnescapedHtml=/[&<>"']/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source);/** Used to match template delimiters. */var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g;/** Used to match property names within property paths. */var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;/**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);/** Used to match leading whitespace. */var reTrimStart=/^\s+/;/** Used to match a single whitespace character. */var reWhitespace=/\s/;/** Used to match wrap detail comments. */var reWrapComment=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,reWrapDetails=/\{\n\/\* \[wrapped with (.+)\] \*/,reSplitDetails=/,? & /;/** Used to match words composed of alphanumeric characters. */var reAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;/**
     * Used to validate the `validate` option in `_.template` variable.
     *
     * Forbids characters which could potentially change the meaning of the function argument definition:
     * - "()," (modification of function parameters)
     * - "=" (default value)
     * - "[]{}" (destructuring of function parameters)
     * - "/" (beginning of a comment)
     * - whitespace
     */var reForbiddenIdentifierChars=/[()=,{}\[\]\/\s]/;/** Used to match backslashes in property paths. */var reEscapeChar=/\\(\\)?/g;/**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;/** Used to match `RegExp` flags from their coerced string values. */var reFlags=/\w*$/;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/** Used to match Latin Unicode letters (excluding mathematical operators). */var reLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;/** Used to ensure capturing order of template delimiters. */var reNoMatch=/($^)/;/** Used to match unescaped characters in compiled string literals. */var reUnescapedString=/['\n\r\u2028\u2029\\]/g;/** Used to compose unicode character classes. */var rsAstralRange="\\ud800-\\udfff",rsComboMarksRange="\\u0300-\\u036f",reComboHalfMarksRange="\\ufe20-\\ufe2f",rsComboSymbolsRange="\\u20d0-\\u20ff",rsComboRange=rsComboMarksRange+reComboHalfMarksRange+rsComboSymbolsRange,rsDingbatRange="\\u2700-\\u27bf",rsLowerRange='a-z\\xdf-\\xf6\\xf8-\\xff',rsMathOpRange='\\xac\\xb1\\xd7\\xf7',rsNonCharRange='\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',rsPunctuationRange="\\u2000-\\u206f",rsSpaceRange=" \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",rsUpperRange='A-Z\\xc0-\\xd6\\xd8-\\xde',rsVarRange="\\ufe0e\\ufe0f",rsBreakRange=rsMathOpRange+rsNonCharRange+rsPunctuationRange+rsSpaceRange;/** Used to compose unicode capture groups. */var rsApos="['\u2019]",rsAstral='['+rsAstralRange+']',rsBreak='['+rsBreakRange+']',rsCombo='['+rsComboRange+']',rsDigits='\\d+',rsDingbat='['+rsDingbatRange+']',rsLower='['+rsLowerRange+']',rsMisc='[^'+rsAstralRange+rsBreakRange+rsDigits+rsDingbatRange+rsLowerRange+rsUpperRange+']',rsFitz="\\ud83c[\\udffb-\\udfff]",rsModifier='(?:'+rsCombo+'|'+rsFitz+')',rsNonAstral='[^'+rsAstralRange+']',rsRegional="(?:\\ud83c[\\udde6-\\uddff]){2}",rsSurrPair="[\\ud800-\\udbff][\\udc00-\\udfff]",rsUpper='['+rsUpperRange+']',rsZWJ="\\u200d";/** Used to compose unicode regexes. */var rsMiscLower='(?:'+rsLower+'|'+rsMisc+')',rsMiscUpper='(?:'+rsUpper+'|'+rsMisc+')',rsOptContrLower='(?:'+rsApos+'(?:d|ll|m|re|s|t|ve))?',rsOptContrUpper='(?:'+rsApos+'(?:D|LL|M|RE|S|T|VE))?',reOptMod=rsModifier+'?',rsOptVar='['+rsVarRange+']?',rsOptJoin='(?:'+rsZWJ+'(?:'+[rsNonAstral,rsRegional,rsSurrPair].join('|')+')'+rsOptVar+reOptMod+')*',rsOrdLower='\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',rsOrdUpper='\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',rsSeq=rsOptVar+reOptMod+rsOptJoin,rsEmoji='(?:'+[rsDingbat,rsRegional,rsSurrPair].join('|')+')'+rsSeq,rsSymbol='(?:'+[rsNonAstral+rsCombo+'?',rsCombo,rsRegional,rsSurrPair,rsAstral].join('|')+')';/** Used to match apostrophes. */var reApos=RegExp(rsApos,'g');/**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */var reComboMark=RegExp(rsCombo,'g');/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */var reUnicode=RegExp(rsFitz+'(?='+rsFitz+')|'+rsSymbol+rsSeq,'g');/** Used to match complex or compound words. */var reUnicodeWord=RegExp([rsUpper+'?'+rsLower+'+'+rsOptContrLower+'(?='+[rsBreak,rsUpper,'$'].join('|')+')',rsMiscUpper+'+'+rsOptContrUpper+'(?='+[rsBreak,rsUpper+rsMiscLower,'$'].join('|')+')',rsUpper+'?'+rsMiscLower+'+'+rsOptContrLower,rsUpper+'+'+rsOptContrUpper,rsOrdUpper,rsOrdLower,rsDigits,rsEmoji].join('|'),'g');/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */var reHasUnicode=RegExp('['+rsZWJ+rsAstralRange+rsComboRange+rsVarRange+']');/** Used to detect strings that need a more robust regexp to match words. */var reHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;/** Used to assign default `context` object properties. */var contextProps=['Array','Buffer','DataView','Date','Error','Float32Array','Float64Array','Function','Int8Array','Int16Array','Int32Array','Map','Math','Object','Promise','RegExp','Set','String','Symbol','TypeError','Uint8Array','Uint8ClampedArray','Uint16Array','Uint32Array','WeakMap','_','clearTimeout','isFinite','parseInt','setTimeout'];/** Used to make template sourceURLs easier to identify. */var templateCounter=-1;/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=false;/** Used to map Latin Unicode letters to basic Latin letters. */var deburredLetters={// Latin-1 Supplement block.
  '\xc0':'A','\xc1':'A','\xc2':'A','\xc3':'A','\xc4':'A','\xc5':'A','\xe0':'a','\xe1':'a','\xe2':'a','\xe3':'a','\xe4':'a','\xe5':'a','\xc7':'C','\xe7':'c','\xd0':'D','\xf0':'d','\xc8':'E','\xc9':'E','\xca':'E','\xcb':'E','\xe8':'e','\xe9':'e','\xea':'e','\xeb':'e','\xcc':'I','\xcd':'I','\xce':'I','\xcf':'I','\xec':'i','\xed':'i','\xee':'i','\xef':'i','\xd1':'N','\xf1':'n','\xd2':'O','\xd3':'O','\xd4':'O','\xd5':'O','\xd6':'O','\xd8':'O','\xf2':'o','\xf3':'o','\xf4':'o','\xf5':'o','\xf6':'o','\xf8':'o','\xd9':'U','\xda':'U','\xdb':'U','\xdc':'U','\xf9':'u','\xfa':'u','\xfb':'u','\xfc':'u','\xdd':'Y','\xfd':'y','\xff':'y','\xc6':'Ae','\xe6':'ae','\xde':'Th','\xfe':'th','\xdf':'ss',// Latin Extended-A block.
  "\u0100":'A',"\u0102":'A',"\u0104":'A',"\u0101":'a',"\u0103":'a',"\u0105":'a',"\u0106":'C',"\u0108":'C',"\u010A":'C',"\u010C":'C',"\u0107":'c',"\u0109":'c',"\u010B":'c',"\u010D":'c',"\u010E":'D',"\u0110":'D',"\u010F":'d',"\u0111":'d',"\u0112":'E',"\u0114":'E',"\u0116":'E',"\u0118":'E',"\u011A":'E',"\u0113":'e',"\u0115":'e',"\u0117":'e',"\u0119":'e',"\u011B":'e',"\u011C":'G',"\u011E":'G',"\u0120":'G',"\u0122":'G',"\u011D":'g',"\u011F":'g',"\u0121":'g',"\u0123":'g',"\u0124":'H',"\u0126":'H',"\u0125":'h',"\u0127":'h',"\u0128":'I',"\u012A":'I',"\u012C":'I',"\u012E":'I',"\u0130":'I',"\u0129":'i',"\u012B":'i',"\u012D":'i',"\u012F":'i',"\u0131":'i',"\u0134":'J',"\u0135":'j',"\u0136":'K',"\u0137":'k',"\u0138":'k',"\u0139":'L',"\u013B":'L',"\u013D":'L',"\u013F":'L',"\u0141":'L',"\u013A":'l',"\u013C":'l',"\u013E":'l',"\u0140":'l',"\u0142":'l',"\u0143":'N',"\u0145":'N',"\u0147":'N',"\u014A":'N',"\u0144":'n',"\u0146":'n',"\u0148":'n',"\u014B":'n',"\u014C":'O',"\u014E":'O',"\u0150":'O',"\u014D":'o',"\u014F":'o',"\u0151":'o',"\u0154":'R',"\u0156":'R',"\u0158":'R',"\u0155":'r',"\u0157":'r',"\u0159":'r',"\u015A":'S',"\u015C":'S',"\u015E":'S',"\u0160":'S',"\u015B":'s',"\u015D":'s',"\u015F":'s',"\u0161":'s',"\u0162":'T',"\u0164":'T',"\u0166":'T',"\u0163":'t',"\u0165":'t',"\u0167":'t',"\u0168":'U',"\u016A":'U',"\u016C":'U',"\u016E":'U',"\u0170":'U',"\u0172":'U',"\u0169":'u',"\u016B":'u',"\u016D":'u',"\u016F":'u',"\u0171":'u',"\u0173":'u',"\u0174":'W',"\u0175":'w',"\u0176":'Y',"\u0177":'y',"\u0178":'Y',"\u0179":'Z',"\u017B":'Z',"\u017D":'Z',"\u017A":'z',"\u017C":'z',"\u017E":'z',"\u0132":'IJ',"\u0133":'ij',"\u0152":'Oe',"\u0153":'oe',"\u0149":"'n","\u017F":'s'};/** Used to map characters to HTML entities. */var htmlEscapes={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'};/** Used to map HTML entities to characters. */var htmlUnescapes={'&amp;':'&','&lt;':'<','&gt;':'>','&quot;':'"','&#39;':"'"};/** Used to escape characters for inclusion in compiled string literals. */var stringEscapes={'\\':'\\',"'":"'",'\n':'n','\r':'r',"\u2028":'u2028',"\u2029":'u2029'};/** Built-in method references without a dependency on `root`. */var freeParseFloat=parseFloat,freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=_typeof$1(commonjsGlobal)=='object'&&commonjsGlobal&&commonjsGlobal.Object===Object&&commonjsGlobal;/** Detect free variable `self`. */var freeSelf=(typeof self==="undefined"?"undefined":_typeof$1(self))=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&'object'=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{// Use `util.types` for Node.js 10+.
  var types=freeModule&&freeModule.require&&freeModule.require('util').types;if(types){return types;}// Legacy `process.binding('util')` for Node.js < 10.
  return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,nodeIsDate=nodeUtil&&nodeUtil.isDate,nodeIsMap=nodeUtil&&nodeUtil.isMap,nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,nodeIsSet=nodeUtil&&nodeUtil.isSet,nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/*--------------------------------------------------------------------------*/ /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}/**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */function arrayAggregator(array,setter,iteratee,accumulator){var index=-1,length=array==null?0:array.length;while(++index<length){var value=array[index];setter(accumulator,value,iteratee(value),array);}return accumulator;}/**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */function arrayEach(array,iteratee){var index=-1,length=array==null?0:array.length;while(++index<length){if(iteratee(array[index],index,array)===false){break;}}return array;}/**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */function arrayEachRight(array,iteratee){var length=array==null?0:array.length;while(length--){if(iteratee(array[length],length,array)===false){break;}}return array;}/**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */function arrayEvery(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(!predicate(array[index],index,array)){return false;}}return true;}/**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */function arrayFilter(array,predicate){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(predicate(value,index,array)){result[resIndex++]=value;}}return result;}/**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */function arrayIncludes(array,value){var length=array==null?0:array.length;return !!length&&baseIndexOf(array,value,0)>-1;}/**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */function arrayIncludesWith(array,value,comparator){var index=-1,length=array==null?0:array.length;while(++index<length){if(comparator(value,array[index])){return true;}}return false;}/**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}/**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array==null?0:array.length;if(initAccum&&length){accumulator=array[++index];}while(++index<length){accumulator=iteratee(accumulator,array[index],index,array);}return accumulator;}/**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=array==null?0:array.length;if(initAccum&&length){accumulator=array[--length];}while(length--){accumulator=iteratee(accumulator,array[length],length,array);}return accumulator;}/**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */function arraySome(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(predicate(array[index],index,array)){return true;}}return false;}/**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */var asciiSize=baseProperty('length');/**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */function asciiToArray(string){return string.split('');}/**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */function asciiWords(string){return string.match(reAsciiWord)||[];}/**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */function baseFindKey(collection,predicate,eachFunc){var result;eachFunc(collection,function(value,key,collection){if(predicate(value,key,collection)){result=key;return false;}});return result;}/**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function baseFindIndex(array,predicate,fromIndex,fromRight){var length=array.length,index=fromIndex+(fromRight?1:-1);while(fromRight?index--:++index<length){if(predicate(array[index],index,array)){return index;}}return -1;}/**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function baseIndexOf(array,value,fromIndex){return value===value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex);}/**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function baseIndexOfWith(array,value,fromIndex,comparator){var index=fromIndex-1,length=array.length;while(++index<length){if(comparator(array[index],value)){return index;}}return -1;}/**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */function baseIsNaN(value){return value!==value;}/**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */function baseMean(array,iteratee){var length=array==null?0:array.length;return length?baseSum(array,iteratee)/length:NAN;}/**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */function baseProperty(key){return function(object){return object==null?undefined$1:object[key];};}/**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */function basePropertyOf(object){return function(key){return object==null?undefined$1:object[key];};}/**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){eachFunc(collection,function(value,index,collection){accumulator=initAccum?(initAccum=false,value):iteratee(accumulator,value,index,collection);});return accumulator;}/**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--){array[length]=array[length].value;}return array;}/**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index<length){var current=iteratee(array[index]);if(current!==undefined$1){result=result===undefined$1?current:result+current;}}return result;}/**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */function baseToPairs(object,props){return arrayMap(props,function(key){return [key,object[key]];});}/**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */function baseTrim(string){return string?string.slice(0,trimmedEndIndex(string)+1).replace(reTrimStart,''):string;}/**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */function baseUnary(func){return function(value){return func(value);};}/**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}/**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function cacheHas(cache,key){return cache.has(key);}/**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */function charsStartIndex(strSymbols,chrSymbols){var index=-1,length=strSymbols.length;while(++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */function charsEndIndex(strSymbols,chrSymbols){var index=strSymbols.length;while(index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */function countHolders(array,placeholder){var length=array.length,result=0;while(length--){if(array[length]===placeholder){++result;}}return result;}/**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */var deburrLetter=basePropertyOf(deburredLetters);/**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */var escapeHtmlChar=basePropertyOf(htmlEscapes);/**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */function escapeStringChar(chr){return '\\'+stringEscapes[chr];}/**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */function getValue(object,key){return object==null?undefined$1:object[key];}/**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */function hasUnicode(string){return reHasUnicode.test(string);}/**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */function hasUnicodeWord(string){return reHasUnicodeWord.test(string);}/**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */function iteratorToArray(iterator){var data,result=[];while(!(data=iterator.next()).done){result.push(data.value);}return result;}/**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */function replaceHolders(array,placeholder){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value===placeholder||value===PLACEHOLDER){array[index]=PLACEHOLDER;result[resIndex++]=index;}}return result;}/**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */function setToPairs(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=[value,value];});return result;}/**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function strictIndexOf(array,value,fromIndex){var index=fromIndex-1,length=array.length;while(++index<length){if(array[index]===value){return index;}}return -1;}/**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function strictLastIndexOf(array,value,fromIndex){var index=fromIndex+1;while(index--){if(array[index]===value){return index;}}return index;}/**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */function stringSize(string){return hasUnicode(string)?unicodeSize(string):asciiSize(string);}/**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */function stringToArray(string){return hasUnicode(string)?unicodeToArray(string):asciiToArray(string);}/**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */function trimmedEndIndex(string){var index=string.length;while(index--&&reWhitespace.test(string.charAt(index))){}return index;}/**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */var unescapeHtmlChar=basePropertyOf(htmlUnescapes);/**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */function unicodeSize(string){var result=reUnicode.lastIndex=0;while(reUnicode.test(string)){++result;}return result;}/**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */function unicodeToArray(string){return string.match(reUnicode)||[];}/**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */function unicodeWords(string){return string.match(reUnicodeWord)||[];}/*--------------------------------------------------------------------------*/ /**
     * Create a new pristine `lodash` function using the `context` object.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Util
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // Create a suped-up `defer` in Node.js.
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */var runInContext=function runInContext(context){context=context==null?root:_.defaults(root.Object(),context,_.pick(root,contextProps));/** Built-in constructor references. */var Array=context.Array,Date=context.Date,Error=context.Error,Function=context.Function,Math=context.Math,Object=context.Object,RegExp=context.RegExp,String=context.String,TypeError=context.TypeError;/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=context['__core-js_shared__'];/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to generate unique IDs. */var idCounter=0;/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */var nativeObjectToString=objectProto.toString;/** Used to infer the `Object` constructor. */var objectCtorString=funcToString.call(Object);/** Used to restore the original `_` reference in `_.noConflict`. */var oldDash=root._;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?context.Buffer:undefined$1,_Symbol=context.Symbol,Uint8Array=context.Uint8Array,allocUnsafe=Buffer?Buffer.allocUnsafe:undefined$1,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,spreadableSymbol=_Symbol?_Symbol.isConcatSpreadable:undefined$1,symIterator=_Symbol?_Symbol.iterator:undefined$1,symToStringTag=_Symbol?_Symbol.toStringTag:undefined$1;var defineProperty=function(){try{var func=getNative(Object,'defineProperty');func({},'',{});return func;}catch(e){}}();/** Mocked built-ins. */var ctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,ctxNow=Date&&Date.now!==root.Date.now&&Date.now,ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined$1,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=overArg(Object.keys,Object),nativeMax=Math.max,nativeMin=Math.min,nativeNow=Date.now,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse;/* Built-in method references that are verified to be native. */var DataView=getNative(context,'DataView'),Map=getNative(context,'Map'),Promise=getNative(context,'Promise'),Set=getNative(context,'Set'),WeakMap=getNative(context,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to store function metadata. */var metaMap=WeakMap&&new WeakMap();/** Used to lookup unminified function names. */var realNames={};/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=_Symbol?_Symbol.prototype:undefined$1,symbolValueOf=symbolProto?symbolProto.valueOf:undefined$1,symbolToString=symbolProto?symbolProto.toString:undefined$1;/*------------------------------------------------------------------------*/ /**
       * Creates a `lodash` object which wraps `value` to enable implicit method
       * chain sequences. Methods that operate on and return arrays, collections,
       * and functions can be chained together. Methods that retrieve a single value
       * or may return a primitive value will automatically end the chain sequence
       * and return the unwrapped value. Otherwise, the value must be unwrapped
       * with `_#value`.
       *
       * Explicit chain sequences, which must be unwrapped with `_#value`, may be
       * enabled using `_.chain`.
       *
       * The execution of chained methods is lazy, that is, it's deferred until
       * `_#value` is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion.
       * Shortcut fusion is an optimization to merge iteratee calls; this avoids
       * the creation of intermediate arrays and can greatly reduce the number of
       * iteratee executions. Sections of a chain sequence qualify for shortcut
       * fusion if the section is applied to an array and iteratees accept only
       * one argument. The heuristic for whether a section qualifies for shortcut
       * fusion is subject to change.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
       * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
       * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
       * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
       * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
       * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
       * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
       * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
       * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
       * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
       * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
       * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
       * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
       * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
       * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
       * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
       * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
       * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
       * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
       * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
       * `zipObject`, `zipObjectDeep`, and `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
       * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
       * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
       * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
       * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
       * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
       * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
       * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
       * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
       * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
       * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
       * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
       * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
       * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
       * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
       * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
       * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
       * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
       * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
       * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
       * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
       * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
       * `upperFirst`, `value`, and `words`
       *
       * @name _
       * @constructor
       * @category Seq
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // Returns an unwrapped value.
       * wrapped.reduce(_.add);
       * // => 6
       *
       * // Returns a wrapped value.
       * var squares = wrapped.map(square);
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */function lodash(value){if(isObjectLike(value)&&!isArray(value)&&!(value instanceof LazyWrapper)){if(value instanceof LodashWrapper){return value;}if(hasOwnProperty.call(value,'__wrapped__')){return wrapperClone(value);}}return new LodashWrapper(value);}/**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */var baseCreate=function(){function object(){}return function(proto){if(!isObject(proto)){return {};}if(objectCreate){return objectCreate(proto);}object.prototype=proto;var result=new object();object.prototype=undefined$1;return result;};}();/**
       * The function whose prototype chain sequence wrappers inherit from.
       *
       * @private
       */function baseLodash(){// No operation performed.
  }/**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable explicit method chain sequences.
       */function LodashWrapper(value,chainAll){this.__wrapped__=value;this.__actions__=[];this.__chain__=!!chainAll;this.__index__=0;this.__values__=undefined$1;}/**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB) as well as ES2015 template strings. Change the
       * following template settings to use alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */lodash.templateSettings={/**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */'escape':reEscape,/**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */'evaluate':reEvaluate,/**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */'interpolate':reInterpolate,/**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */'variable':'',/**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */'imports':{/**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */'_':lodash}};// Ensure wrappers are instances of `baseLodash`.
  lodash.prototype=baseLodash.prototype;lodash.prototype.constructor=lodash;LodashWrapper.prototype=baseCreate(baseLodash.prototype);LodashWrapper.prototype.constructor=LodashWrapper;/*------------------------------------------------------------------------*/ /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @constructor
       * @param {*} value The value to wrap.
       */function LazyWrapper(value){this.__wrapped__=value;this.__actions__=[];this.__dir__=1;this.__filtered__=false;this.__iteratees__=[];this.__takeCount__=MAX_ARRAY_LENGTH;this.__views__=[];}/**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */function lazyClone(){var result=new LazyWrapper(this.__wrapped__);result.__actions__=copyArray(this.__actions__);result.__dir__=this.__dir__;result.__filtered__=this.__filtered__;result.__iteratees__=copyArray(this.__iteratees__);result.__takeCount__=this.__takeCount__;result.__views__=copyArray(this.__views__);return result;}/**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */function lazyReverse(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__=-1;result.__filtered__=true;}else {result=this.clone();result.__dir__*=-1;}return result;}/**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */function lazyValue(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir<0,arrLength=isArr?array.length:0,view=getView(0,arrLength,this.__views__),start=view.start,end=view.end,length=end-start,index=isRight?end:start-1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr||!isRight&&arrLength==length&&takeCount==length){return baseWrapperValue(array,this.__actions__);}var result=[];outer:while(length--&&resIndex<takeCount){index+=dir;var iterIndex=-1,value=array[index];while(++iterIndex<iterLength){var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(type==LAZY_MAP_FLAG){value=computed;}else if(!computed){if(type==LAZY_FILTER_FLAG){continue outer;}else {break outer;}}}result[resIndex++]=value;}return result;}// Ensure `LazyWrapper` is an instance of `baseLodash`.
  LazyWrapper.prototype=baseCreate(baseLodash.prototype);LazyWrapper.prototype.constructor=LazyWrapper;/*------------------------------------------------------------------------*/ /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}/**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}/**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined$1:result;}return hasOwnProperty.call(data,key)?data[key]:undefined$1;}/**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined$1:hasOwnProperty.call(data,key);}/**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined$1?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.
  Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/*------------------------------------------------------------------------*/ /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */function listCacheClear(){this.__data__=[];this.size=0;}/**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else {splice.call(data,index,1);}--this.size;return true;}/**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined$1:data[index][1];}/**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else {data[index][1]=value;}return this;}// Add methods to `ListCache`.
  ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/*------------------------------------------------------------------------*/ /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}/**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function mapCacheGet(key){return getMapData(this,key).get(key);}/**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function mapCacheHas(key){return getMapData(this,key).has(key);}/**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}// Add methods to `MapCache`.
  MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/*------------------------------------------------------------------------*/ /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */function SetCache(values){var index=-1,length=values==null?0:values.length;this.__data__=new MapCache();while(++index<length){this.add(values[index]);}}/**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */function setCacheAdd(value){this.__data__.set(value,HASH_UNDEFINED);return this;}/**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */function setCacheHas(value){return this.__data__.has(value);}// Add methods to `SetCache`.
  SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;SetCache.prototype.has=setCacheHas;/*------------------------------------------------------------------------*/ /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}/**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */function stackClear(){this.__data__=new ListCache();this.size=0;}/**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}/**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function stackGet(key){return this.__data__.get(key);}/**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function stackHas(key){return this.__data__.has(key);}/**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}// Add methods to `Stack`.
  Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/*------------------------------------------------------------------------*/ /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
  key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
  isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
  isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
  isIndex(key,length)))){result.push(key);}}return result;}/**
       * A specialized version of `_.sample` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @returns {*} Returns the random element.
       */function arraySample(array){var length=array.length;return length?array[baseRandom(0,length-1)]:undefined$1;}/**
       * A specialized version of `_.sampleSize` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */function arraySampleSize(array,n){return shuffleSelf(copyArray(array),baseClamp(n,0,array.length));}/**
       * A specialized version of `_.shuffle` for arrays.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */function arrayShuffle(array){return shuffleSelf(copyArray(array));}/**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */function assignMergeValue(object,key,value){if(value!==undefined$1&&!eq(object[key],value)||value===undefined$1&&!(key in object)){baseAssignValue(object,key,value);}}/**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined$1&&!(key in object)){baseAssignValue(object,key,value);}}/**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return -1;}/**
       * Aggregates elements of `collection` on `accumulator` with keys transformed
       * by `iteratee` and values set by `setter`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */function baseAggregator(collection,setter,iteratee,accumulator){baseEach(collection,function(value,key,collection){setter(accumulator,value,iteratee(value),collection);});return accumulator;}/**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */function baseAssign(object,source){return object&&copyObject(source,keys(source),object);}/**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */function baseAssignIn(object,source){return object&&copyObject(source,keysIn(source),object);}/**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */function baseAssignValue(object,key,value){if(key=='__proto__'&&defineProperty){defineProperty(object,key,{'configurable':true,'enumerable':true,'value':value,'writable':true});}else {object[key]=value;}}/**
       * The base implementation of `_.at` without support for individual paths.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {string[]} paths The property paths to pick.
       * @returns {Array} Returns the picked elements.
       */function baseAt(object,paths){var index=-1,length=paths.length,result=Array(length),skip=object==null;while(++index<length){result[index]=skip?undefined$1:get(object,paths[index]);}return result;}/**
       * The base implementation of `_.clamp` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       */function baseClamp(number,lower,upper){if(number===number){if(upper!==undefined$1){number=number<=upper?number:upper;}if(lower!==undefined$1){number=number>=lower?number:lower;}}return number;}/**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */function baseClone(value,bitmask,customizer,key,object,stack){var result,isDeep=bitmask&CLONE_DEEP_FLAG,isFlat=bitmask&CLONE_FLAT_FLAG,isFull=bitmask&CLONE_SYMBOLS_FLAG;if(customizer){result=object?customizer(value,key,object,stack):customizer(value);}if(result!==undefined$1){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result=initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else {var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value)){return cloneBuffer(value,isDeep);}if(tag==objectTag||tag==argsTag||isFunc&&!object){result=isFlat||isFunc?{}:initCloneObject(value);if(!isDeep){return isFlat?copySymbolsIn(value,baseAssignIn(result,value)):copySymbols(value,baseAssign(result,value));}}else {if(!cloneableTags[tag]){return object?value:{};}result=initCloneByTag(value,tag,isDeep);}}// Check for circular references and return its corresponding clone.
  stack||(stack=new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);if(isSet(value)){value.forEach(function(subValue){result.add(baseClone(subValue,bitmask,customizer,subValue,value,stack));});}else if(isMap(value)){value.forEach(function(subValue,key){result.set(key,baseClone(subValue,bitmask,customizer,key,value,stack));});}var keysFunc=isFull?isFlat?getAllKeysIn:getAllKeys:isFlat?keysIn:keys;var props=isArr?undefined$1:keysFunc(value);arrayEach(props||value,function(subValue,key){if(props){key=subValue;subValue=value[key];}// Recursively populate clone (susceptible to call stack limits).
  assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack));});return result;}/**
       * The base implementation of `_.conforms` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       */function baseConforms(source){var props=keys(source);return function(object){return baseConformsTo(object,source,props);};}/**
       * The base implementation of `_.conformsTo` which accepts `props` to check.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       */function baseConformsTo(object,source,props){var length=props.length;if(object==null){return !length;}object=Object(object);while(length--){var key=props[length],predicate=source[key],value=object[key];if(value===undefined$1&&!(key in object)||!predicate(value)){return false;}}return true;}/**
       * The base implementation of `_.delay` and `_.defer` which accepts `args`
       * to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Array} args The arguments to provide to `func`.
       * @returns {number|Object} Returns the timer id or timeout object.
       */function baseDelay(func,wait,args){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined$1,args);},wait);}/**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=true,length=array.length,result=[],valuesLength=values.length;if(!length){return result;}if(iteratee){values=arrayMap(values,baseUnary(iteratee));}if(comparator){includes=arrayIncludesWith;isCommon=false;}else if(values.length>=LARGE_ARRAY_SIZE){includes=cacheHas;isCommon=false;values=new SetCache(values);}outer:while(++index<length){var value=array[index],computed=iteratee==null?value:iteratee(value);value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var valuesIndex=valuesLength;while(valuesIndex--){if(values[valuesIndex]===computed){continue outer;}}result.push(value);}else if(!includes(values,computed,comparator)){result.push(value);}}return result;}/**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */var baseEach=createBaseEach(baseForOwn);/**
       * The base implementation of `_.forEachRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */var baseEachRight=createBaseEach(baseForOwnRight,true);/**
       * The base implementation of `_.every` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */function baseEvery(collection,predicate){var result=true;baseEach(collection,function(value,index,collection){result=!!predicate(value,index,collection);return result;});return result;}/**
       * The base implementation of methods like `_.max` and `_.min` which accepts a
       * `comparator` to determine the extremum value.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The iteratee invoked per iteration.
       * @param {Function} comparator The comparator used to compare values.
       * @returns {*} Returns the extremum value.
       */function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index<length){var value=array[index],current=iteratee(value);if(current!=null&&(computed===undefined$1?current===current&&!isSymbol(current):comparator(current,computed))){var computed=current,result=value;}}return result;}/**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */function baseFill(array,value,start,end){var length=array.length;start=toInteger(start);if(start<0){start=-start>length?0:length+start;}end=end===undefined$1||end>length?length:toInteger(end);if(end<0){end+=length;}end=start>end?0:toLength(end);while(start<end){array[start++]=value;}return array;}/**
       * The base implementation of `_.filter` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */function baseFilter(collection,predicate){var result=[];baseEach(collection,function(value,index,collection){if(predicate(value,index,collection)){result.push(value);}});return result;}/**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */function baseFlatten(array,depth,predicate,isStrict,result){var index=-1,length=array.length;predicate||(predicate=isFlattenable);result||(result=[]);while(++index<length){var value=array[index];if(depth>0&&predicate(value)){if(depth>1){// Recursively flatten arrays (susceptible to call stack limits).
  baseFlatten(value,depth-1,predicate,isStrict,result);}else {arrayPush(result,value);}}else if(!isStrict){result[result.length]=value;}}return result;}/**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */var baseFor=createBaseFor();/**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */var baseForRight=createBaseFor(true);/**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys);}/**
       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */function baseForOwnRight(object,iteratee){return object&&baseForRight(object,iteratee,keys);}/**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from `props`.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the function names.
       */function baseFunctions(object,props){return arrayFilter(props,function(key){return isFunction(object[key]);});}/**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */function baseGet(object,path){path=castPath(path,object);var index=0,length=path.length;while(object!=null&&index<length){object=object[toKey(path[index++])];}return index&&index==length?object:undefined$1;}/**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */function baseGetTag(value){if(value==null){return value===undefined$1?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
       * The base implementation of `_.gt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       */function baseGt(value,other){return value>other;}/**
       * The base implementation of `_.has` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */function baseHas(object,key){return object!=null&&hasOwnProperty.call(object,key);}/**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */function baseHasIn(object,key){return object!=null&&key in Object(object);}/**
       * The base implementation of `_.inRange` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to check.
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       */function baseInRange(number,start,end){return number>=nativeMin(start,end)&&number<nativeMax(start,end);}/**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */function baseIntersection(arrays,iteratee,comparator){var includes=comparator?arrayIncludesWith:arrayIncludes,length=arrays[0].length,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),maxLength=Infinity,result=[];while(othIndex--){var array=arrays[othIndex];if(othIndex&&iteratee){array=arrayMap(array,baseUnary(iteratee));}maxLength=nativeMin(array.length,maxLength);caches[othIndex]=!comparator&&(iteratee||length>=120&&array.length>=120)?new SetCache(othIndex&&array):undefined$1;}array=arrays[0];var index=-1,seen=caches[0];outer:while(++index<length&&result.length<maxLength){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){othIndex=othLength;while(--othIndex){var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator))){continue outer;}}if(seen){seen.push(computed);}result.push(value);}}return result;}/**
       * The base implementation of `_.invert` and `_.invertBy` which inverts
       * `object` with values transformed by `iteratee` and set by `setter`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform values.
       * @param {Object} accumulator The initial inverted object.
       * @returns {Function} Returns `accumulator`.
       */function baseInverter(object,setter,iteratee,accumulator){baseForOwn(object,function(value,key,object){setter(accumulator,iteratee(value),key,object);});return accumulator;}/**
       * The base implementation of `_.invoke` without support for individual
       * method arguments.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */function baseInvoke(object,path,args){path=castPath(path,object);object=parent(object,path);var func=object==null?object:object[toKey(last(path))];return func==null?undefined$1:apply(func,object,args);}/**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}/**
       * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       */function baseIsArrayBuffer(value){return isObjectLike(value)&&baseGetTag(value)==arrayBufferTag;}/**
       * The base implementation of `_.isDate` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       */function baseIsDate(value){return isObjectLike(value)&&baseGetTag(value)==dateTag;}/**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}/**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}/**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */function baseIsMap(value){return isObjectLike(value)&&getTag(value)==mapTag;}/**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object==null){return !length;}object=Object(object);while(index--){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object)){return false;}}while(++index<length){data=matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(objValue===undefined$1&&!(key in object)){return false;}}else {var stack=new Stack();if(customizer){var result=customizer(objValue,srcValue,key,object,source,stack);}if(!(result===undefined$1?baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack):result)){return false;}}}return true;}/**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**
       * The base implementation of `_.isRegExp` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       */function baseIsRegExp(value){return isObjectLike(value)&&baseGetTag(value)==regexpTag;}/**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */function baseIsSet(value){return isObjectLike(value)&&getTag(value)==setTag;}/**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */function baseIteratee(value){// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if(typeof value=='function'){return value;}if(value==null){return identity;}if(_typeof$1(value)=='object'){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}/**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */function baseKeysIn(object){if(!isObject(object)){return nativeKeysIn(object);}var isProto=isPrototype(object),result=[];for(var key in object){if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){result.push(key);}}return result;}/**
       * The base implementation of `_.lt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       */function baseLt(value,other){return value<other;}/**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index]=iteratee(value,key,collection);});return result;}/**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */function baseMatches(source){var matchData=getMatchData(source);if(matchData.length==1&&matchData[0][2]){return matchesStrictComparable(matchData[0][0],matchData[0][1]);}return function(object){return object===source||baseIsMatch(object,source,matchData);};}/**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */function baseMatchesProperty(path,srcValue){if(isKey(path)&&isStrictComparable(srcValue)){return matchesStrictComparable(toKey(path),srcValue);}return function(object){var objValue=get(object,path);return objValue===undefined$1&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);};}/**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */function baseMerge(object,source,srcIndex,customizer,stack){if(object===source){return;}baseFor(source,function(srcValue,key){stack||(stack=new Stack());if(isObject(srcValue)){baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else {var newValue=customizer?customizer(safeGet(object,key),srcValue,key+'',object,source,stack):undefined$1;if(newValue===undefined$1){newValue=srcValue;}assignMergeValue(object,key,newValue);}},keysIn);}/**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=safeGet(object,key),srcValue=safeGet(source,key),stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key+'',object,source,stack):undefined$1;var isCommon=newValue===undefined$1;if(isCommon){var isArr=isArray(srcValue),isBuff=!isArr&&isBuffer(srcValue),isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);newValue=srcValue;if(isArr||isBuff||isTyped){if(isArray(objValue)){newValue=objValue;}else if(isArrayLikeObject(objValue)){newValue=copyArray(objValue);}else if(isBuff){isCommon=false;newValue=cloneBuffer(srcValue,true);}else if(isTyped){isCommon=false;newValue=cloneTypedArray(srcValue,true);}else {newValue=[];}}else if(isPlainObject(srcValue)||isArguments(srcValue)){newValue=objValue;if(isArguments(objValue)){newValue=toPlainObject(objValue);}else if(!isObject(objValue)||isFunction(objValue)){newValue=initCloneObject(srcValue);}}else {isCommon=false;}}if(isCommon){// Recursively merge objects and arrays (susceptible to call stack limits).
  stack.set(srcValue,newValue);mergeFunc(newValue,srcValue,srcIndex,customizer,stack);stack['delete'](srcValue);}assignMergeValue(object,key,newValue);}/**
       * The base implementation of `_.nth` which doesn't coerce arguments.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {number} n The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       */function baseNth(array,n){var length=array.length;if(!length){return;}n+=n<0?length:0;return isIndex(n,length)?array[n]:undefined$1;}/**
       * The base implementation of `_.orderBy` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {string[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */function baseOrderBy(collection,iteratees,orders){if(iteratees.length){iteratees=arrayMap(iteratees,function(iteratee){if(isArray(iteratee)){return function(value){return baseGet(value,iteratee.length===1?iteratee[0]:iteratee);};}return iteratee;});}else {iteratees=[identity];}var index=-1;iteratees=arrayMap(iteratees,baseUnary(getIteratee()));var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return {'criteria':criteria,'index':++index,'value':value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}/**
       * The base implementation of `_.pick` without support for individual
       * property identifiers.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @returns {Object} Returns the new object.
       */function basePick(object,paths){return basePickBy(object,paths,function(value,path){return hasIn(object,path);});}/**
       * The base implementation of  `_.pickBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @param {Function} predicate The function invoked per property.
       * @returns {Object} Returns the new object.
       */function basePickBy(object,paths,predicate){var index=-1,length=paths.length,result={};while(++index<length){var path=paths[index],value=baseGet(object,path);if(predicate(value,path)){baseSet(result,castPath(path,object),value);}}return result;}/**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */function basePropertyDeep(path){return function(object){return baseGet(object,path);};}/**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */function basePullAll(array,values,iteratee,comparator){var indexOf=comparator?baseIndexOfWith:baseIndexOf,index=-1,length=values.length,seen=array;if(array===values){values=copyArray(values);}if(iteratee){seen=arrayMap(array,baseUnary(iteratee));}while(++index<length){var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;while((fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1){if(seen!==array){splice.call(seen,fromIndex,1);}splice.call(array,fromIndex,1);}}return array;}/**
       * The base implementation of `_.pullAt` without support for individual
       * indexes or capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */function basePullAt(array,indexes){var length=array?indexes.length:0,lastIndex=length-1;while(length--){var index=indexes[length];if(length==lastIndex||index!==previous){var previous=index;if(isIndex(index)){splice.call(array,index,1);}else {baseUnset(array,index);}}}return array;}/**
       * The base implementation of `_.random` without support for returning
       * floating-point numbers.
       *
       * @private
       * @param {number} lower The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the random number.
       */function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}/**
       * The base implementation of `_.range` and `_.rangeRight` which doesn't
       * coerce arguments.
       *
       * @private
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @param {number} step The value to increment or decrement by.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the range of numbers.
       */function baseRange(start,end,step,fromRight){var index=-1,length=nativeMax(nativeCeil((end-start)/(step||1)),0),result=Array(length);while(length--){result[fromRight?length:++index]=start;start+=step;}return result;}/**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */function baseRepeat(string,n){var result='';if(!string||n<1||n>MAX_SAFE_INTEGER){return result;}// Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
  do{if(n%2){result+=string;}n=nativeFloor(n/2);if(n){string+=string;}}while(n);return result;}/**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */function baseRest(func,start){return setToString(overRest(func,start,identity),func+'');}/**
       * The base implementation of `_.sample`.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       */function baseSample(collection){return arraySample(values(collection));}/**
       * The base implementation of `_.sampleSize` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */function baseSampleSize(collection,n){var array=values(collection);return shuffleSelf(array,baseClamp(n,0,array.length));}/**
       * The base implementation of `_.set`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */function baseSet(object,path,value,customizer){if(!isObject(object)){return object;}path=castPath(path,object);var index=-1,length=path.length,lastIndex=length-1,nested=object;while(nested!=null&&++index<length){var key=toKey(path[index]),newValue=value;if(key==='__proto__'||key==='constructor'||key==='prototype'){return object;}if(index!=lastIndex){var objValue=nested[key];newValue=customizer?customizer(objValue,key,nested):undefined$1;if(newValue===undefined$1){newValue=isObject(objValue)?objValue:isIndex(path[index+1])?[]:{};}}assignValue(nested,key,newValue);nested=nested[key];}return object;}/**
       * The base implementation of `setData` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */var baseSetData=!metaMap?identity:function(func,data){metaMap.set(func,data);return func;};/**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */var baseSetToString=!defineProperty?identity:function(func,string){return defineProperty(func,'toString',{'configurable':true,'enumerable':false,'value':constant(string),'writable':true});};/**
       * The base implementation of `_.shuffle`.
       *
       * @private
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */function baseShuffle(collection){return shuffleSelf(values(collection));}/**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */function baseSlice(array,start,end){var index=-1,length=array.length;if(start<0){start=-start>length?0:length+start;}end=end>length?length:end;if(end<0){end+=length;}length=start>end?0:end-start>>>0;start>>>=0;var result=Array(length);while(++index<length){result[index]=array[index+start];}return result;}/**
       * The base implementation of `_.some` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */function baseSome(collection,predicate){var result;baseEach(collection,function(value,index,collection){result=predicate(value,index,collection);return !result;});return !!result;}/**
       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
       * performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */function baseSortedIndex(array,value,retHighest){var low=0,high=array==null?low:array.length;if(typeof value=='number'&&value===value&&high<=HALF_MAX_ARRAY_LENGTH){while(low<high){var mid=low+high>>>1,computed=array[mid];if(computed!==null&&!isSymbol(computed)&&(retHighest?computed<=value:computed<value)){low=mid+1;}else {high=mid;}}return high;}return baseSortedIndexBy(array,value,identity,retHighest);}/**
       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
       * which invokes `iteratee` for `value` and each element of `array` to compute
       * their sort ranking. The iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The iteratee invoked per element.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */function baseSortedIndexBy(array,value,iteratee,retHighest){var low=0,high=array==null?0:array.length;if(high===0){return 0;}value=iteratee(value);var valIsNaN=value!==value,valIsNull=value===null,valIsSymbol=isSymbol(value),valIsUndefined=value===undefined$1;while(low<high){var mid=nativeFloor((low+high)/2),computed=iteratee(array[mid]),othIsDefined=computed!==undefined$1,othIsNull=computed===null,othIsReflexive=computed===computed,othIsSymbol=isSymbol(computed);if(valIsNaN){var setLow=retHighest||othIsReflexive;}else if(valIsUndefined){setLow=othIsReflexive&&(retHighest||othIsDefined);}else if(valIsNull){setLow=othIsReflexive&&othIsDefined&&(retHighest||!othIsNull);}else if(valIsSymbol){setLow=othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol);}else if(othIsNull||othIsSymbol){setLow=false;}else {setLow=retHighest?computed<=value:computed<value;}if(setLow){low=mid+1;}else {high=mid;}}return nativeMin(high,MAX_ARRAY_INDEX);}/**
       * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */function baseSortedUniq(array,iteratee){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;if(!index||!eq(computed,seen)){var seen=computed;result[resIndex++]=value===0?0:value;}}return result;}/**
       * The base implementation of `_.toNumber` which doesn't ensure correct
       * conversions of binary, hexadecimal, or octal string values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       */function baseToNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}return +value;}/**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.
  if(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).
  return arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=true,result=[],seen=result;if(comparator){isCommon=false;includes=arrayIncludesWith;}else if(length>=LARGE_ARRAY_SIZE){var set=iteratee?null:createSet(array);if(set){return setToArray(set);}isCommon=false;includes=cacheHas;seen=new SetCache();}else {seen=iteratee?[]:result;}outer:while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var seenIndex=seen.length;while(seenIndex--){if(seen[seenIndex]===computed){continue outer;}}if(iteratee){seen.push(computed);}result.push(value);}else if(!includes(seen,computed,comparator)){if(seen!==result){seen.push(computed);}result.push(value);}}return result;}/**
       * The base implementation of `_.unset`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The property path to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       */function baseUnset(object,path){path=castPath(path,object);object=parent(object,path);return object==null||delete object[toKey(last(path))];}/**
       * The base implementation of `_.update`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to update.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */function baseUpdate(object,path,updater,customizer){return baseSet(object,path,updater(baseGet(object,path)),customizer);}/**
       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
       * without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */function baseWhile(array,predicate,isDrop,fromRight){var length=array.length,index=fromRight?length:-1;while((fromRight?index--:++index<length)&&predicate(array[index],index,array)){}return isDrop?baseSlice(array,fromRight?0:index,fromRight?index+1:length):baseSlice(array,fromRight?index+1:0,fromRight?length:index);}/**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to perform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */function baseWrapperValue(value,actions){var result=value;if(result instanceof LazyWrapper){result=result.value();}return arrayReduce(actions,function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args));},result);}/**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */function baseXor(arrays,iteratee,comparator){var length=arrays.length;if(length<2){return length?baseUniq(arrays[0]):[];}var index=-1,result=Array(length);while(++index<length){var array=arrays[index],othIndex=-1;while(++othIndex<length){if(othIndex!=index){result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);}}}return baseUniq(baseFlatten(result,1),iteratee,comparator);}/**
       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
       *
       * @private
       * @param {Array} props The property identifiers.
       * @param {Array} values The property values.
       * @param {Function} assignFunc The function to assign values.
       * @returns {Object} Returns the new object.
       */function baseZipObject(props,values,assignFunc){var index=-1,length=props.length,valsLength=values.length,result={};while(++index<length){var value=index<valsLength?values[index]:undefined$1;assignFunc(result,props[index],value);}return result;}/**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */function castArrayLikeObject(value){return isArrayLikeObject(value)?value:[];}/**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */function castFunction(value){return typeof value=='function'?value:identity;}/**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */function castPath(value,object){if(isArray(value)){return value;}return isKey(value,object)?[value]:stringToPath(toString(value));}/**
       * A `baseRest` alias which can be replaced with `identity` by module
       * replacement plugins.
       *
       * @private
       * @type {Function}
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */var castRest=baseRest;/**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */function castSlice(array,start,end){var length=array.length;end=end===undefined$1?length:end;return !start&&end>=length?array:baseSlice(array,start,end);}/**
       * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
       *
       * @private
       * @param {number|Object} id The timer id or timeout object of the timer to clear.
       */var clearTimeout=ctxClearTimeout||function(id){return root.clearTimeout(id);};/**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);buffer.copy(result);return result;}/**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}/**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));result.lastIndex=regexp.lastIndex;return result;}/**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{};}/**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**
       * Compares values to sort them in ascending order.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */function compareAscending(value,other){if(value!==other){var valIsDefined=value!==undefined$1,valIsNull=value===null,valIsReflexive=value===value,valIsSymbol=isSymbol(value);var othIsDefined=other!==undefined$1,othIsNull=other===null,othIsReflexive=other===other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive){return 1;}if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive){return -1;}}return 0;}/**
       * Used by `_.orderBy` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
       * specify an order of "desc" for descending or "asc" for ascending sort order
       * of corresponding values.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]|string[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index<length){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index>=ordersLength){return result;}var order=orders[index];return result*(order=='desc'?-1:1);}}// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index-other.index;}/**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */function composeArgs(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersLength=holders.length,leftIndex=-1,leftLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(leftLength+rangeLength),isUncurried=!isCurried;while(++leftIndex<leftLength){result[leftIndex]=partials[leftIndex];}while(++argsIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[holders[argsIndex]]=args[argsIndex];}}while(rangeLength--){result[leftIndex++]=args[argsIndex++];}return result;}/**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */function composeArgsRight(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersIndex=-1,holdersLength=holders.length,rightIndex=-1,rightLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(rangeLength+rightLength),isUncurried=!isCurried;while(++argsIndex<rangeLength){result[argsIndex]=args[argsIndex];}var offset=argsIndex;while(++rightIndex<rightLength){result[offset+rightIndex]=partials[rightIndex];}while(++holdersIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[offset+holders[holdersIndex]]=args[argsIndex++];}}return result;}/**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined$1;if(newValue===undefined$1){newValue=source[key];}if(isNew){baseAssignValue(object,key,newValue);}else {assignValue(object,key,newValue);}}return object;}/**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}/**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */function copySymbolsIn(source,object){return copyObject(source,getSymbolsIn(source),object);}/**
       * Creates a function like `_.groupBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} [initializer] The accumulator object initializer.
       * @returns {Function} Returns the new aggregator function.
       */function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee,2),accumulator);};}/**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */function createAssigner(assigner){return baseRest(function(object,sources){var index=-1,length=sources.length,customizer=length>1?sources[length-1]:undefined$1,guard=length>2?sources[2]:undefined$1;customizer=assigner.length>3&&typeof customizer=='function'?(length--,customizer):undefined$1;if(guard&&isIterateeCall(sources[0],sources[1],guard)){customizer=length<3?undefined$1:customizer;length=1;}object=Object(object);while(++index<length){var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}/**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection==null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index<length){if(iteratee(iterable[index],index,iterable)===false){break;}}return collection;};}/**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break;}}return object;};}/**
       * Creates a function that wraps `func` to invoke it with the optional `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createBind(func,bitmask,thisArg){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments);}return wrapper;}/**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */function createCaseFirst(methodName){return function(string){string=toString(string);var strSymbols=hasUnicode(string)?stringToArray(string):undefined$1;var chr=strSymbols?strSymbols[0]:string.charAt(0);var trailing=strSymbols?castSlice(strSymbols,1).join(''):string.slice(1);return chr[methodName]()+trailing;};}/**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string).replace(reApos,'')),callback,'');};}/**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */function createCtor(Ctor){return function(){// Use a `switch` statement to work with class constructors. See
  // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
  // for more details.
  var args=arguments;switch(args.length){case 0:return new Ctor();case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);// Mimic the constructor's `return` behavior.
  // See https://es5.github.io/#x13.2.2 for more details.
  return isObject(result)?result:thisBinding;};}/**
       * Creates a function that wraps `func` to enable currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {number} arity The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createCurry(func,bitmask,arity){var Ctor=createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length,placeholder=getHolder(wrapper);while(index--){args[index]=arguments[index];}var holders=length<3&&args[0]!==placeholder&&args[length-1]!==placeholder?[]:replaceHolders(args,placeholder);length-=holders.length;if(length<arity){return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,undefined$1,args,holders,undefined$1,undefined$1,arity-length);}var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return apply(fn,this,args);}return wrapper;}/**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} findIndexFunc The function to find the collection index.
       * @returns {Function} Returns the new find function.
       */function createFind(findIndexFunc){return function(collection,predicate,fromIndex){var iterable=Object(collection);if(!isArrayLike(collection)){var iteratee=getIteratee(predicate,3);collection=keys(collection);predicate=function predicate(key){return iteratee(iterable[key],key,iterable);};}var index=findIndexFunc(collection,predicate,fromIndex);return index>-1?iterable[iteratee?collection[index]:index]:undefined$1;};}/**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */function createFlow(fromRight){return flatRest(function(funcs){var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;if(fromRight){funcs.reverse();}while(index--){var func=funcs[index];if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(prereq&&!wrapper&&getFuncName(func)=='wrapper'){var wrapper=new LodashWrapper([],true);}}index=wrapper?index:length;while(++index<length){func=funcs[index];var funcName=getFuncName(func),data=funcName=='wrapper'?getData(func):undefined$1;if(data&&isLaziable(data[0])&&data[1]==(WRAP_ARY_FLAG|WRAP_CURRY_FLAG|WRAP_PARTIAL_FLAG|WRAP_REARG_FLAG)&&!data[4].length&&data[9]==1){wrapper=wrapper[getFuncName(data[0])].apply(wrapper,data[3]);}else {wrapper=func.length==1&&isLaziable(func)?wrapper[funcName]():wrapper.thru(func);}}return function(){var args=arguments,value=args[0];if(wrapper&&args.length==1&&isArray(value)){return wrapper.plant(value).value();}var index=0,result=length?funcs[index].apply(this,args):value;while(++index<length){result=funcs[index].call(this,result);}return result;};});}/**
       * Creates a function that wraps `func` to invoke it with optional `this`
       * binding of `thisArg`, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided
       *  to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask&WRAP_ARY_FLAG,isBind=bitmask&WRAP_BIND_FLAG,isBindKey=bitmask&WRAP_BIND_KEY_FLAG,isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),isFlip=bitmask&WRAP_FLIP_FLAG,Ctor=isBindKey?undefined$1:createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length;while(index--){args[index]=arguments[index];}if(isCurried){var placeholder=getHolder(wrapper),holdersCount=countHolders(args,placeholder);}if(partials){args=composeArgs(args,partials,holders,isCurried);}if(partialsRight){args=composeArgsRight(args,partialsRight,holdersRight,isCurried);}length-=holdersCount;if(isCurried&&length<arity){var newHolders=replaceHolders(args,placeholder);return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,thisArg,args,newHolders,argPos,ary,arity-length);}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;length=args.length;if(argPos){args=reorder(args,argPos);}else if(isFlip&&length>1){args.reverse();}if(isAry&&ary<length){args.length=ary;}if(this&&this!==root&&this instanceof wrapper){fn=Ctor||createCtor(fn);}return fn.apply(thisBinding,args);}return wrapper;}/**
       * Creates a function like `_.invertBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} toIteratee The function to resolve iteratees.
       * @returns {Function} Returns the new inverter function.
       */function createInverter(setter,toIteratee){return function(object,iteratee){return baseInverter(object,setter,toIteratee(iteratee),{});};}/**
       * Creates a function that performs a mathematical operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @param {number} [defaultValue] The value used for `undefined` arguments.
       * @returns {Function} Returns the new mathematical operation function.
       */function createMathOperation(operator,defaultValue){return function(value,other){var result;if(value===undefined$1&&other===undefined$1){return defaultValue;}if(value!==undefined$1){result=value;}if(other!==undefined$1){if(result===undefined$1){return other;}if(typeof value=='string'||typeof other=='string'){value=baseToString(value);other=baseToString(other);}else {value=baseToNumber(value);other=baseToNumber(other);}result=operator(value,other);}return result;};}/**
       * Creates a function like `_.over`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over iteratees.
       * @returns {Function} Returns the new over function.
       */function createOver(arrayFunc){return flatRest(function(iteratees){iteratees=arrayMap(iteratees,baseUnary(getIteratee()));return baseRest(function(args){var thisArg=this;return arrayFunc(iteratees,function(iteratee){return apply(iteratee,thisArg,args);});});});}/**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */function createPadding(length,chars){chars=chars===undefined$1?' ':baseToString(chars);var charsLength=chars.length;if(charsLength<2){return charsLength?baseRepeat(chars,length):chars;}var result=baseRepeat(chars,nativeCeil(length/stringSize(chars)));return hasUnicode(chars)?castSlice(stringToArray(result),0,length).join(''):result.slice(0,length);}/**
       * Creates a function that wraps `func` to invoke it with the `this` binding
       * of `thisArg` and `partials` prepended to the arguments it receives.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to
       *  the new function.
       * @returns {Function} Returns the new wrapped function.
       */function createPartial(func,bitmask,thisArg,partials){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength+argsLength),fn=this&&this!==root&&this instanceof wrapper?Ctor:func;while(++leftIndex<leftLength){args[leftIndex]=partials[leftIndex];}while(argsLength--){args[leftIndex++]=arguments[++argsIndex];}return apply(fn,isBind?thisArg:this,args);}return wrapper;}/**
       * Creates a `_.range` or `_.rangeRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new range function.
       */function createRange(fromRight){return function(start,end,step){if(step&&typeof step!='number'&&isIterateeCall(start,end,step)){end=step=undefined$1;}// Ensure the sign of `-0` is preserved.
  start=toFinite(start);if(end===undefined$1){end=start;start=0;}else {end=toFinite(end);}step=step===undefined$1?start<end?1:-1:toFinite(step);return baseRange(start,end,step,fromRight);};}/**
       * Creates a function that performs a relational operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @returns {Function} Returns the new relational operation function.
       */function createRelationalOperation(operator){return function(value,other){if(!(typeof value=='string'&&typeof other=='string')){value=toNumber(value);other=toNumber(other);}return operator(value,other);};}/**
       * Creates a function that wraps `func` to continue currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {Function} wrapFunc The function to create the `func` wrapper.
       * @param {*} placeholder The placeholder value.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=bitmask&WRAP_CURRY_FLAG,newHolders=isCurry?holders:undefined$1,newHoldersRight=isCurry?undefined$1:holders,newPartials=isCurry?partials:undefined$1,newPartialsRight=isCurry?undefined$1:partials;bitmask|=isCurry?WRAP_PARTIAL_FLAG:WRAP_PARTIAL_RIGHT_FLAG;bitmask&=~(isCurry?WRAP_PARTIAL_RIGHT_FLAG:WRAP_PARTIAL_FLAG);if(!(bitmask&WRAP_CURRY_BOUND_FLAG)){bitmask&=~(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG);}var newData=[func,bitmask,thisArg,newPartials,newHolders,newPartialsRight,newHoldersRight,argPos,ary,arity];var result=wrapFunc.apply(undefined$1,newData);if(isLaziable(func)){setData(result,newData);}result.placeholder=placeholder;return setWrapToString(result,func,bitmask);}/**
       * Creates a function like `_.round`.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */function createRound(methodName){var func=Math[methodName];return function(number,precision){number=toNumber(number);precision=precision==null?0:nativeMin(toInteger(precision),292);if(precision&&nativeIsFinite(number)){// Shift with exponential notation to avoid floating-point issues.
  // See [MDN](https://mdn.io/round#Examples) for more details.
  var pair=(toString(number)+'e').split('e'),value=func(pair[0]+'e'+(+pair[1]+precision));pair=(toString(value)+'e').split('e');return +(pair[0]+'e'+(+pair[1]-precision));}return func(number);};}/**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */var createSet=!(Set&&1/setToArray(new Set([,-0]))[1]==INFINITY)?noop:function(values){return new Set(values);};/**
       * Creates a `_.toPairs` or `_.toPairsIn` function.
       *
       * @private
       * @param {Function} keysFunc The function to get the keys of a given object.
       * @returns {Function} Returns the new pairs function.
       */function createToPairs(keysFunc){return function(object){var tag=getTag(object);if(tag==mapTag){return mapToArray(object);}if(tag==setTag){return setToPairs(object);}return baseToPairs(object,keysFunc(object));};}/**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags.
       *    1 - `_.bind`
       *    2 - `_.bindKey`
       *    4 - `_.curry` or `_.curryRight` of a bound function
       *    8 - `_.curry`
       *   16 - `_.curryRight`
       *   32 - `_.partial`
       *   64 - `_.partialRight`
       *  128 - `_.rearg`
       *  256 - `_.ary`
       *  512 - `_.flip`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=bitmask&WRAP_BIND_KEY_FLAG;if(!isBindKey&&typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var length=partials?partials.length:0;if(!length){bitmask&=~(WRAP_PARTIAL_FLAG|WRAP_PARTIAL_RIGHT_FLAG);partials=holders=undefined$1;}ary=ary===undefined$1?ary:nativeMax(toInteger(ary),0);arity=arity===undefined$1?arity:toInteger(arity);length-=holders?holders.length:0;if(bitmask&WRAP_PARTIAL_RIGHT_FLAG){var partialsRight=partials,holdersRight=holders;partials=holders=undefined$1;}var data=isBindKey?undefined$1:getData(func);var newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data){mergeData(newData,data);}func=newData[0];bitmask=newData[1];thisArg=newData[2];partials=newData[3];holders=newData[4];arity=newData[9]=newData[9]===undefined$1?isBindKey?0:func.length:nativeMax(newData[9]-length,0);if(!arity&&bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG)){bitmask&=~(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG);}if(!bitmask||bitmask==WRAP_BIND_FLAG){var result=createBind(func,bitmask,thisArg);}else if(bitmask==WRAP_CURRY_FLAG||bitmask==WRAP_CURRY_RIGHT_FLAG){result=createCurry(func,bitmask,arity);}else if((bitmask==WRAP_PARTIAL_FLAG||bitmask==(WRAP_BIND_FLAG|WRAP_PARTIAL_FLAG))&&!holders.length){result=createPartial(func,bitmask,thisArg,partials);}else {result=createHybrid.apply(undefined$1,newData);}var setter=data?baseSetData:setData;return setWrapToString(setter(result,newData),func,bitmask);}/**
       * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
       * of source objects to the destination object for all destination properties
       * that resolve to `undefined`.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */function customDefaultsAssignIn(objValue,srcValue,key,object){if(objValue===undefined$1||eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key)){return srcValue;}return objValue;}/**
       * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
       * objects into destination objects that are passed thru.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to merge.
       * @param {Object} object The parent object of `objValue`.
       * @param {Object} source The parent object of `srcValue`.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       * @returns {*} Returns the value to assign.
       */function customDefaultsMerge(objValue,srcValue,key,object,source,stack){if(isObject(objValue)&&isObject(srcValue)){// Recursively merge objects and arrays (susceptible to call stack limits).
  stack.set(srcValue,objValue);baseMerge(objValue,srcValue,undefined$1,customDefaultsMerge,stack);stack['delete'](srcValue);}return objValue;}/**
       * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
       * objects.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {string} key The key of the property to inspect.
       * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
       */function customOmitClone(value){return isPlainObject(value)?undefined$1:value;}/**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Check that cyclic values are equal.
  var arrStacked=stack.get(array);var othStacked=stack.get(other);if(arrStacked&&othStacked){return arrStacked==other&&othStacked==array;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined$1;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.
  while(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined$1){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).
  if(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}/**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.
  // Invalid dates are coerced to `NaN`.
  return eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,
  // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
  // for more details.
  return object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.
  var stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).
  stack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}/**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Check that cyclic values are equal.
  var objStacked=stack.get(object);var othStacked=stack.get(other);if(objStacked&&othStacked){return objStacked==other&&othStacked==object;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).
  if(!(compared===undefined$1?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.
  if(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}/**
       * A specialized version of `baseRest` which flattens the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */function flatRest(func){return setToString(overRest(func,undefined$1,flatten),func+'');}/**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */function getAllKeysIn(object){return baseGetAllKeys(object,keysIn,getSymbolsIn);}/**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */var getData=!metaMap?noop:function(func){return metaMap.get(func);};/**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */function getFuncName(func){var result=func.name+'',array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;while(length--){var data=array[length],otherFunc=data.func;if(otherFunc==null||otherFunc==func){return data.name;}}return result;}/**
       * Gets the argument placeholder value for `func`.
       *
       * @private
       * @param {Function} func The function to inspect.
       * @returns {*} Returns the placeholder value.
       */function getHolder(func){var object=hasOwnProperty.call(lodash,'placeholder')?lodash:func;return object.placeholder;}/**
       * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
       * this function returns the custom method, otherwise it returns `baseIteratee`.
       * If arguments are provided, the chosen function is invoked with them and
       * its result is returned.
       *
       * @private
       * @param {*} [value] The value to convert to an iteratee.
       * @param {number} [arity] The arity of the created iteratee.
       * @returns {Function} Returns the chosen function or its result.
       */function getIteratee(){var result=lodash.iteratee||iteratee;result=result===iteratee?baseIteratee:result;return arguments.length?result(arguments[0],arguments[1]):result;}/**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */function getMatchData(object){var result=keys(object),length=result.length;while(length--){var key=result[length],value=object[key];result[length]=[key,value,isStrictComparable(value)];}return result;}/**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined$1;}/**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined$1;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else {delete value[symToStringTag];}}return result;}/**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */var getSymbols=!nativeGetSymbols?stubArray:function(object){if(object==null){return [];}object=Object(object);return arrayFilter(nativeGetSymbols(object),function(symbol){return propertyIsEnumerable.call(object,symbol);});};/**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */var getSymbolsIn=!nativeGetSymbols?stubArray:function(object){var result=[];while(object){arrayPush(result,getSymbols(object));object=getPrototype(object);}return result;};/**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined$1,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */function getView(start,end,transforms){var index=-1,length=transforms.length;while(++index<length){var data=transforms[index],size=data.size;switch(data.type){case'drop':start+=size;break;case'dropRight':end-=size;break;case'take':end=nativeMin(end,start+size);break;case'takeRight':start=nativeMax(start,end-size);break;}}return {'start':start,'end':end};}/**
       * Extracts wrapper details from the `source` body comment.
       *
       * @private
       * @param {string} source The source to inspect.
       * @returns {Array} Returns the wrapper details.
       */function getWrapDetails(source){var match=source.match(reWrapDetails);return match?match[1].split(reSplitDetails):[];}/**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */function hasPath(object,path,hasFunc){path=castPath(path,object);var index=-1,length=path.length,result=false;while(++index<length){var key=toKey(path[index]);if(!(result=object!=null&&hasFunc(object,key))){break;}object=object[key];}if(result||++index!=length){return result;}length=object==null?0:object.length;return !!length&&isLength(length)&&isIndex(key,length)&&(isArray(object)||isArguments(object));}/**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */function initCloneArray(array){var length=array.length,result=new array.constructor(length);// Add properties assigned by `RegExp#exec`.
  if(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){result.index=array.index;result.input=array.input;}return result;}/**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */function initCloneByTag(object,tag,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return cloneDataView(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return new Ctor();case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return new Ctor();case symbolTag:return cloneSymbol(object);}}/**
       * Inserts wrapper `details` in a comment at the top of the `source` body.
       *
       * @private
       * @param {string} source The source to modify.
       * @returns {Array} details The details to insert.
       * @returns {string} Returns the modified source.
       */function insertWrapDetails(source,details){var length=details.length;if(!length){return source;}var lastIndex=length-1;details[lastIndex]=(length>1?'& ':'')+details[lastIndex];details=details.join(length>2?', ':' ');return source.replace(reWrapComment,'{\n/* [wrapped with '+details+'] */\n');}/**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */function isFlattenable(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol]);}/**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */function isIndex(value,length){var type=_typeof$1(value);length=length==null?MAX_SAFE_INTEGER:length;return !!length&&(type=='number'||type!='symbol'&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=_typeof$1(index);if(type=='number'?isArrayLike(object)&&isIndex(index,object.length):type=='string'&&index in object){return eq(object[index],value);}return false;}/**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */function isKey(value,object){if(isArray(value)){return false;}var type=_typeof$1(value);if(type=='number'||type=='symbol'||type=='boolean'||value==null||isSymbol(value)){return true;}return reIsPlainProp.test(value)||!reIsDeepProp.test(value)||object!=null&&value in Object(object);}/**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */function isKeyable(value){var type=_typeof$1(value);return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
       *  else `false`.
       */function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if(typeof other!='function'||!(funcName in LazyWrapper.prototype)){return false;}if(func===other){return true;}var data=getData(other);return !!data&&func===data[0];}/**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */function isMasked(func){return !!maskSrcKey&&maskSrcKey in func;}/**
       * Checks if `func` is capable of being masked.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
       */var isMaskable=coreJsData?isFunction:stubFalse;/**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */function isStrictComparable(value){return value===value&&!isObject(value);}/**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */function matchesStrictComparable(key,srcValue){return function(object){if(object==null){return false;}return object[key]===srcValue&&(srcValue!==undefined$1||key in Object(object));};}/**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */function memoizeCapped(func){var result=memoize(func,function(key){if(cache.size===MAX_MEMOIZE_SIZE){cache.clear();}return key;});var cache=result.cache;return result;}/**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers used to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and
       * `_.rearg` modify function arguments, making the order in which they are
       * executed important, preventing the merging of metadata. However, we make
       * an exception for a safe combined case where curried functions have `_.ary`
       * and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */function mergeData(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask|srcBitmask,isCommon=newBitmask<(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG|WRAP_ARY_FLAG);var isCombo=srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_CURRY_FLAG||srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_REARG_FLAG&&data[7].length<=source[8]||srcBitmask==(WRAP_ARY_FLAG|WRAP_REARG_FLAG)&&source[7].length<=source[8]&&bitmask==WRAP_CURRY_FLAG;// Exit early if metadata can't be merged.
  if(!(isCommon||isCombo)){return data;}// Use source `thisArg` if available.
  if(srcBitmask&WRAP_BIND_FLAG){data[2]=source[2];// Set when currying a bound function.
  newBitmask|=bitmask&WRAP_BIND_FLAG?0:WRAP_CURRY_BOUND_FLAG;}// Compose partial arguments.
  var value=source[3];if(value){var partials=data[3];data[3]=partials?composeArgs(partials,value,source[4]):value;data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4];}// Compose partial right arguments.
  value=source[5];if(value){partials=data[5];data[5]=partials?composeArgsRight(partials,value,source[6]):value;data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6];}// Use source `argPos` if available.
  value=source[7];if(value){data[7]=value;}// Use source `ary` if it's smaller.
  if(srcBitmask&WRAP_ARY_FLAG){data[8]=data[8]==null?source[8]:nativeMin(data[8],source[8]);}// Use source `arity` if one is not provided.
  if(data[9]==null){data[9]=source[9];}// Use source `func` and merge bitmasks.
  data[0]=source[0];data[1]=newBitmask;return data;}/**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */function nativeKeysIn(object){var result=[];if(object!=null){for(var key in Object(object)){result.push(key);}}return result;}/**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */function objectToString(value){return nativeObjectToString.call(value);}/**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */function overRest(func,start,transform){start=nativeMax(start===undefined$1?func.length-1:start,0);return function(){var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);while(++index<length){array[index]=args[start+index];}index=-1;var otherArgs=Array(start+1);while(++index<start){otherArgs[index]=args[index];}otherArgs[start]=transform(array);return apply(func,this,otherArgs);};}/**
       * Gets the parent value at `path` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path to get the parent value of.
       * @returns {*} Returns the parent value.
       */function parent(object,path){return path.length<2?object:baseGet(object,baseSlice(path,0,-1));}/**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */function reorder(array,indexes){var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);while(length--){var index=indexes[length];array[length]=isIndex(index,arrLength)?oldArray[index]:undefined$1;}return array;}/**
       * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */function safeGet(object,key){if(key==='constructor'&&typeof object[key]==='function'){return;}if(key=='__proto__'){return;}return object[key];}/**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity
       * function to avoid garbage collection pauses in V8. See
       * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */var setData=shortOut(baseSetData);/**
       * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @returns {number|Object} Returns the timer id or timeout object.
       */var setTimeout=ctxSetTimeout||function(func,wait){return root.setTimeout(func,wait);};/**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */var setToString=shortOut(baseSetToString);/**
       * Sets the `toString` method of `wrapper` to mimic the source of `reference`
       * with wrapper details in a comment at the top of the source body.
       *
       * @private
       * @param {Function} wrapper The function to modify.
       * @param {Function} reference The reference function.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Function} Returns `wrapper`.
       */function setWrapToString(wrapper,reference,bitmask){var source=reference+'';return setToString(wrapper,insertWrapDetails(source,updateWrapDetails(getWrapDetails(source),bitmask)));}/**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */function shortOut(func){var count=0,lastCalled=0;return function(){var stamp=nativeNow(),remaining=HOT_SPAN-(stamp-lastCalled);lastCalled=stamp;if(remaining>0){if(++count>=HOT_COUNT){return arguments[0];}}else {count=0;}return func.apply(undefined$1,arguments);};}/**
       * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @param {number} [size=array.length] The size of `array`.
       * @returns {Array} Returns `array`.
       */function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined$1?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}/**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */var stringToPath=memoizeCapped(function(string){var result=[];if(string.charCodeAt(0)===46/* . */){result.push('');}string.replace(rePropName,function(match,number,quote,subString){result.push(quote?subString.replace(reEscapeChar,'$1'):number||match);});return result;});/**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */function toKey(value){if(typeof value=='string'||isSymbol(value)){return value;}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return '';}/**
       * Updates wrapper `details` based on `bitmask` flags.
       *
       * @private
       * @returns {Array} details The details to modify.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Array} Returns `details`.
       */function updateWrapDetails(details,bitmask){arrayEach(wrapFlags,function(pair){var value='_.'+pair[0];if(bitmask&pair[1]&&!arrayIncludes(details,value)){details.push(value);}});return details.sort();}/**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper){return wrapper.clone();}var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);result.__actions__=copyArray(wrapper.__actions__);result.__index__=wrapper.__index__;result.__values__=wrapper.__values__;return result;}/*------------------------------------------------------------------------*/ /**
       * Creates an array of elements split into groups the length of `size`.
       * If `array` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the new array of chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */function chunk(array,size,guard){if(guard?isIterateeCall(array,size,guard):size===undefined$1){size=1;}else {size=nativeMax(toInteger(size),0);}var length=array==null?0:array.length;if(!length||size<1){return [];}var index=0,resIndex=0,result=Array(nativeCeil(length/size));while(index<length){result[resIndex++]=baseSlice(array,index,index+=size);}return result;}/**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */function compact(array){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value){result[resIndex++]=value;}}return result;}/**
       * Creates a new array concatenating `array` with any additional arrays
       * and/or values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to concatenate.
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var other = _.concat(array, 2, [3], [[4]]);
       *
       * console.log(other);
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */function concat(){var length=arguments.length;if(!length){return [];}var args=Array(length-1),array=arguments[0],index=length;while(index--){args[index-1]=arguments[index];}return arrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1));}/**
       * Creates an array of `array` values not included in the other given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * **Note:** Unlike `_.pullAll`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.without, _.xor
       * @example
       *
       * _.difference([2, 1], [2, 3]);
       * // => [1]
       */var difference=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true)):[];});/**
       * This method is like `_.difference` except that it accepts `iteratee` which
       * is invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */var differenceBy=baseRest(function(array,values){var iteratee=last(values);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),getIteratee(iteratee,2)):[];});/**
       * This method is like `_.difference` except that it accepts `comparator`
       * which is invoked to compare elements of `array` to `values`. The order and
       * references of result values are determined by the first array. The comparator
       * is invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       *
       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }]
       */var differenceWith=baseRest(function(array,values){var comparator=last(values);if(isArrayLikeObject(comparator)){comparator=undefined$1;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),undefined$1,comparator):[];});/**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */function drop(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);return baseSlice(array,n<0?0:n,length);}/**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */function dropRight(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);n=length-n;return baseSlice(array,0,n<0?0:n);}/**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.dropRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropRightWhile(users, ['active', false]);
       * // => objects for ['barney']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropRightWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */function dropRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true,true):[];}/**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.dropWhile(users, function(o) { return !o.active; });
       * // => objects for ['pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropWhile(users, ['active', false]);
       * // => objects for ['pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */function dropWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true):[];}/**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8, 10], '*', 1, 3);
       * // => [4, '*', '*', 10]
       */function fill(array,value,start,end){var length=array==null?0:array.length;if(!length){return [];}if(start&&typeof start!='number'&&isIterateeCall(array,value,start)){start=0;end=length;}return baseFill(array,value,start,end);}/**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(o) { return o.user == 'barney'; });
       * // => 0
       *
       * // The `_.matches` iteratee shorthand.
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findIndex(users, ['active', false]);
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.findIndex(users, 'active');
       * // => 2
       */function findIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseFindIndex(array,getIteratee(predicate,3),index);}/**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
       * // => 2
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastIndex(users, ['active', false]);
       * // => 2
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastIndex(users, 'active');
       * // => 0
       */function findLastIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=length-1;if(fromIndex!==undefined$1){index=toInteger(fromIndex);index=fromIndex<0?nativeMax(length+index,0):nativeMin(index,length-1);}return baseFindIndex(array,getIteratee(predicate,3),index,true);}/**
       * Flattens `array` a single level deep.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, [3, [4]], 5]]);
       * // => [1, 2, [3, [4]], 5]
       */function flatten(array){var length=array==null?0:array.length;return length?baseFlatten(array,1):[];}/**
       * Recursively flattens `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, [3, [4]], 5]]);
       * // => [1, 2, 3, 4, 5]
       */function flattenDeep(array){var length=array==null?0:array.length;return length?baseFlatten(array,INFINITY):[];}/**
       * Recursively flatten `array` up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * var array = [1, [2, [3, [4]], 5]];
       *
       * _.flattenDepth(array, 1);
       * // => [1, 2, [3, [4]], 5]
       *
       * _.flattenDepth(array, 2);
       * // => [1, 2, 3, [4], 5]
       */function flattenDepth(array,depth){var length=array==null?0:array.length;if(!length){return [];}depth=depth===undefined$1?1:toInteger(depth);return baseFlatten(array,depth);}/**
       * The inverse of `_.toPairs`; this method returns an object composed
       * from key-value `pairs`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} pairs The key-value pairs.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.fromPairs([['a', 1], ['b', 2]]);
       * // => { 'a': 1, 'b': 2 }
       */function fromPairs(pairs){var index=-1,length=pairs==null?0:pairs.length,result={};while(++index<length){var pair=pairs[index];result[pair[0]]=pair[1];}return result;}/**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias first
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.head([1, 2, 3]);
       * // => 1
       *
       * _.head([]);
       * // => undefined
       */function head(array){return array&&array.length?array[0]:undefined$1;}/**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it's used as the
       * offset from the end of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // Search from the `fromIndex`.
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       */function indexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseIndexOf(array,value,index);}/**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */function initial(array){var length=array==null?0:array.length;return length?baseSlice(array,0,-1):[];}/**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */var intersection=baseRest(function(arrays){var mapped=arrayMap(arrays,castArrayLikeObject);return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped):[];});/**
       * This method is like `_.intersection` except that it accepts `iteratee`
       * which is invoked for each element of each `arrays` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [2.1]
       *
       * // The `_.property` iteratee shorthand.
       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }]
       */var intersectionBy=baseRest(function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);if(iteratee===last(mapped)){iteratee=undefined$1;}else {mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,getIteratee(iteratee,2)):[];});/**
       * This method is like `_.intersection` except that it accepts `comparator`
       * which is invoked to compare elements of `arrays`. The order and references
       * of result values are determined by the first array. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.intersectionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }]
       */var intersectionWith=baseRest(function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);comparator=typeof comparator=='function'?comparator:undefined$1;if(comparator){mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,undefined$1,comparator):[];});/**
       * Converts all elements in `array` into a string separated by `separator`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to convert.
       * @param {string} [separator=','] The element separator.
       * @returns {string} Returns the joined string.
       * @example
       *
       * _.join(['a', 'b', 'c'], '~');
       * // => 'a~b~c'
       */function join(array,separator){return array==null?'':nativeJoin.call(array,separator);}/**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */function last(array){var length=array==null?0:array.length;return length?array[length-1]:undefined$1;}/**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // Search from the `fromIndex`.
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       */function lastIndexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=length;if(fromIndex!==undefined$1){index=toInteger(fromIndex);index=index<0?nativeMax(length+index,0):nativeMin(index,length-1);}return value===value?strictLastIndexOf(array,value,index):baseFindIndex(array,baseIsNaN,index,true);}/**
       * Gets the element at index `n` of `array`. If `n` is negative, the nth
       * element from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.11.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=0] The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       *
       * _.nth(array, 1);
       * // => 'b'
       *
       * _.nth(array, -2);
       * // => 'c';
       */function nth(array,n){return array&&array.length?baseNth(array,toInteger(n)):undefined$1;}/**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */var pull=baseRest(pullAll);/**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */function pullAll(array,values){return array&&array.length&&values&&values.length?basePullAll(array,values):array;}/**
       * This method is like `_.pullAll` except that it accepts `iteratee` which is
       * invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The iteratee is invoked with one argument: (value).
       *
       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
       *
       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
       * console.log(array);
       * // => [{ 'x': 2 }]
       */function pullAllBy(array,values,iteratee){return array&&array.length&&values&&values.length?basePullAll(array,values,getIteratee(iteratee,2)):array;}/**
       * This method is like `_.pullAll` except that it accepts `comparator` which
       * is invoked to compare elements of `array` to `values`. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
       *
       * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
       * console.log(array);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
       */function pullAllWith(array,values,comparator){return array&&array.length&&values&&values.length?basePullAll(array,values,undefined$1,comparator):array;}/**
       * Removes elements from `array` corresponding to `indexes` and returns an
       * array of removed elements.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       * var pulled = _.pullAt(array, [1, 3]);
       *
       * console.log(array);
       * // => ['a', 'c']
       *
       * console.log(pulled);
       * // => ['b', 'd']
       */var pullAt=flatRest(function(array,indexes){var length=array==null?0:array.length,result=baseAt(array,indexes);basePullAt(array,arrayMap(indexes,function(index){return isIndex(index,length)?+index:index;}).sort(compareAscending));return result;});/**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is invoked
       * with three arguments: (value, index, array).
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
       * to pull elements from an array by value.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */function remove(array,predicate){var result=[];if(!(array&&array.length)){return result;}var index=-1,indexes=[],length=array.length;predicate=getIteratee(predicate,3);while(++index<length){var value=array[index];if(predicate(value,index,array)){result.push(value);indexes.push(index);}}basePullAt(array,indexes);return result;}/**
       * Reverses `array` so that the first element becomes the last, the second
       * element becomes the second to last, and so on.
       *
       * **Note:** This method mutates `array` and is based on
       * [`Array#reverse`](https://mdn.io/Array/reverse).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.reverse(array);
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */function reverse(array){return array==null?array:nativeReverse.call(array);}/**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of
       * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
       * returned.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */function slice(array,start,end){var length=array==null?0:array.length;if(!length){return [];}if(end&&typeof end!='number'&&isIterateeCall(array,start,end)){start=0;end=length;}else {start=start==null?0:toInteger(start);end=end===undefined$1?length:toInteger(end);}return baseSlice(array,start,end);}/**
       * Uses a binary search to determine the lowest index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       */function sortedIndex(array,value){return baseSortedIndex(array,value);}/**
       * This method is like `_.sortedIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
       * // => 0
       */function sortedIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2));}/**
       * This method is like `_.indexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
       * // => 1
       */function sortedIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value);if(index<length&&eq(array[index],value)){return index;}}return -1;}/**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
       * // => 4
       */function sortedLastIndex(array,value){return baseSortedIndex(array,value,true);}/**
       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 1
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
       * // => 1
       */function sortedLastIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2),true);}/**
       * This method is like `_.lastIndexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
       * // => 3
       */function sortedLastIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value,true)-1;if(eq(array[index],value)){return index;}}return -1;}/**
       * This method is like `_.uniq` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniq([1, 1, 2]);
       * // => [1, 2]
       */function sortedUniq(array){return array&&array.length?baseSortedUniq(array):[];}/**
       * This method is like `_.uniqBy` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
       * // => [1.1, 2.3]
       */function sortedUniqBy(array,iteratee){return array&&array.length?baseSortedUniq(array,getIteratee(iteratee,2)):[];}/**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.tail([1, 2, 3]);
       * // => [2, 3]
       */function tail(array){var length=array==null?0:array.length;return length?baseSlice(array,1,length):[];}/**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */function take(array,n,guard){if(!(array&&array.length)){return [];}n=guard||n===undefined$1?1:toInteger(n);return baseSlice(array,0,n<0?0:n);}/**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */function takeRight(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);n=length-n;return baseSlice(array,n<0?0:n,length);}/**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.takeRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeRightWhile(users, ['active', false]);
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeRightWhile(users, 'active');
       * // => []
       */function takeRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),false,true):[];}/**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.takeWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeWhile(users, ['active', false]);
       * // => objects for ['barney', 'fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeWhile(users, 'active');
       * // => []
       */function takeWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3)):[];}/**
       * Creates an array of unique values, in order, from all given arrays using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([2], [1, 2]);
       * // => [2, 1]
       */var union=baseRest(function(arrays){return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true));});/**
       * This method is like `_.union` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which uniqueness is computed. Result values are chosen from the first
       * array in which the value occurs. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.unionBy([2.1], [1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */var unionBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),getIteratee(iteratee,2));});/**
       * This method is like `_.union` except that it accepts `comparator` which
       * is invoked to compare elements of `arrays`. Result values are chosen from
       * the first array in which the value occurs. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.unionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */var unionWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined$1;return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),undefined$1,comparator);});/**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */function uniq(array){return array&&array.length?baseUniq(array):[];}/**
       * This method is like `_.uniq` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * uniqueness is computed. The order of result values is determined by the
       * order they occur in the array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */function uniqBy(array,iteratee){return array&&array.length?baseUniq(array,getIteratee(iteratee,2)):[];}/**
       * This method is like `_.uniq` except that it accepts `comparator` which
       * is invoked to compare elements of `array`. The order of result values is
       * determined by the order they occur in the array.The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.uniqWith(objects, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
       */function uniqWith(array,comparator){comparator=typeof comparator=='function'?comparator:undefined$1;return array&&array.length?baseUniq(array,undefined$1,comparator):[];}/**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @since 1.2.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       *
       * _.unzip(zipped);
       * // => [['a', 'b'], [1, 2], [true, false]]
       */function unzip(array){if(!(array&&array.length)){return [];}var length=0;array=arrayFilter(array,function(group){if(isArrayLikeObject(group)){length=nativeMax(group.length,length);return true;}});return baseTimes(length,function(index){return arrayMap(array,baseProperty(index));});}/**
       * This method is like `_.unzip` except that it accepts `iteratee` to specify
       * how regrouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  regrouped values.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */function unzipWith(array,iteratee){if(!(array&&array.length)){return [];}var result=unzip(array);if(iteratee==null){return result;}return arrayMap(result,function(group){return apply(iteratee,undefined$1,group);});}/**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */var without=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[];});/**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */var xor=baseRest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});/**
       * This method is like `_.xor` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which by which they're compared. The order of result values is determined
       * by the order they occur in the arrays. The iteratee is invoked with one
       * argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2, 3.4]
       *
       * // The `_.property` iteratee shorthand.
       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */var xorBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2));});/**
       * This method is like `_.xor` except that it accepts `comparator` which is
       * invoked to compare elements of `arrays`. The order of result values is
       * determined by the order they occur in the arrays. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.xorWith(objects, others, _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */var xorWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined$1;return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined$1,comparator);});/**
       * Creates an array of grouped elements, the first of which contains the
       * first elements of the given arrays, the second of which contains the
       * second elements of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       */var zip=baseRest(unzip);/**
       * This method is like `_.fromPairs` except that it accepts two arrays,
       * one of property identifiers and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 0.4.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject(['a', 'b'], [1, 2]);
       * // => { 'a': 1, 'b': 2 }
       */function zipObject(props,values){return baseZipObject(props||[],values||[],assignValue);}/**
       * This method is like `_.zipObject` except that it supports property paths.
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
       */function zipObjectDeep(props,values){return baseZipObject(props||[],values||[],baseSet);}/**
       * This method is like `_.zip` except that it accepts `iteratee` to specify
       * how grouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  grouped values.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
       *   return a + b + c;
       * });
       * // => [111, 222]
       */var zipWith=baseRest(function(arrays){var length=arrays.length,iteratee=length>1?arrays[length-1]:undefined$1;iteratee=typeof iteratee=='function'?(arrays.pop(),iteratee):undefined$1;return unzipWith(arrays,iteratee);});/*------------------------------------------------------------------------*/ /**
       * Creates a `lodash` wrapper instance that wraps `value` with explicit method
       * chain sequences enabled. The result of such sequences must be unwrapped
       * with `_#value`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Seq
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _
       *   .chain(users)
       *   .sortBy('age')
       *   .map(function(o) {
       *     return o.user + ' is ' + o.age;
       *   })
       *   .head()
       *   .value();
       * // => 'pebbles is 1'
       */function chain(value){var result=lodash(value);result.__chain__=true;return result;}/**
       * This method invokes `interceptor` and returns `value`. The interceptor
       * is invoked with one argument; (value). The purpose of this method is to
       * "tap into" a method chain sequence in order to modify intermediate results.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    // Mutate input array.
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */function tap(value,interceptor){interceptor(value);return value;}/**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       * The purpose of this method is to "pass thru" values replacing intermediate
       * results in a method chain sequence.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */function thru(value,interceptor){return interceptor(value);}/**
       * This method is the wrapper version of `_.at`.
       *
       * @name at
       * @memberOf _
       * @since 1.0.0
       * @category Seq
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _(object).at(['a[0].b.c', 'a[1]']).value();
       * // => [3, 4]
       */var wrapperAt=flatRest(function(paths){var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function interceptor(object){return baseAt(object,paths);};if(length>1||this.__actions__.length||!(value instanceof LazyWrapper)||!isIndex(start)){return this.thru(interceptor);}value=value.slice(start,+start+(length?1:0));value.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined$1});return new LodashWrapper(value,this.__chain__).thru(function(array){if(length&&!array.length){array.push(undefined$1);}return array;});});/**
       * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
       *
       * @name chain
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // A sequence without explicit chaining.
       * _(users).head();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // A sequence with explicit chaining.
       * _(users)
       *   .chain()
       *   .head()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */function wrapperChain(){return chain(this);}/**
       * Executes the chain sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__);}/**
       * Gets the next value on a wrapped object following the
       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
       *
       * @name next
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the next iterator value.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 1 }
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 2 }
       *
       * wrapped.next();
       * // => { 'done': true, 'value': undefined }
       */function wrapperNext(){if(this.__values__===undefined$1){this.__values__=toArray(this.value());}var done=this.__index__>=this.__values__.length,value=done?undefined$1:this.__values__[this.__index__++];return {'done':done,'value':value};}/**
       * Enables the wrapper to be iterable.
       *
       * @name Symbol.iterator
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the wrapper object.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped[Symbol.iterator]() === wrapped;
       * // => true
       *
       * Array.from(wrapped);
       * // => [1, 2]
       */function wrapperToIterator(){return this;}/**
       * Creates a clone of the chain sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @param {*} value The value to plant.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2]).map(square);
       * var other = wrapped.plant([3, 4]);
       *
       * other.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */function wrapperPlant(value){var result,parent=this;while(parent instanceof baseLodash){var clone=wrapperClone(parent);clone.__index__=0;clone.__values__=undefined$1;if(result){previous.__wrapped__=clone;}else {result=clone;}var previous=clone;parent=parent.__wrapped__;}previous.__wrapped__=value;return result;}/**
       * This method is the wrapper version of `_.reverse`.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */function wrapperReverse(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;if(this.__actions__.length){wrapped=new LazyWrapper(this);}wrapped=wrapped.reverse();wrapped.__actions__.push({'func':thru,'args':[reverse],'thisArg':undefined$1});return new LodashWrapper(wrapped,this.__chain__);}return this.thru(reverse);}/**
       * Executes the chain sequence to resolve the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @since 0.1.0
       * @alias toJSON, valueOf
       * @category Seq
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__);}/*------------------------------------------------------------------------*/ /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the number of times the key was returned by `iteratee`. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': 1, '6': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */var countBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){++result[key];}else {baseAssignValue(result,key,1);}});/**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * Iteration is stopped once `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * **Note:** This method returns `true` for
       * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
       * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
       * elements of empty collections.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.every(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.every(users, 'active');
       * // => false
       */function every(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined$1;}return func(collection,getIteratee(predicate,3));}/**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * **Note:** Unlike `_.remove`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.reject
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, { 'age': 36, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.filter(users, 'active');
       * // => objects for ['barney']
       *
       * // Combining several predicates using `_.overEvery` or `_.overSome`.
       * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
       * // => objects for ['fred', 'barney']
       */function filter(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,getIteratee(predicate,3));}/**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.find(users, function(o) { return o.age < 40; });
       * // => object for 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.find(users, { 'age': 1, 'active': true });
       * // => object for 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.find(users, ['active', false]);
       * // => object for 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.find(users, 'active');
       * // => object for 'barney'
       */var find=createFind(findIndex);/**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=collection.length-1] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */var findLast=createFind(findLastIndex);/**
       * Creates a flattened array of values by running each element in `collection`
       * thru `iteratee` and flattening the mapped results. The iteratee is invoked
       * with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [n, n];
       * }
       *
       * _.flatMap([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */function flatMap(collection,iteratee){return baseFlatten(map(collection,iteratee),1);}/**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDeep([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */function flatMapDeep(collection,iteratee){return baseFlatten(map(collection,iteratee),INFINITY);}/**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDepth([1, 2], duplicate, 2);
       * // => [[1, 1], [2, 2]]
       */function flatMapDepth(collection,iteratee,depth){depth=depth===undefined$1?1:toInteger(depth);return baseFlatten(map(collection,iteratee),depth);}/**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */function forEach(collection,iteratee){var func=isArray(collection)?arrayEach:baseEach;return func(collection,getIteratee(iteratee,3));}/**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @alias eachRight
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEach
       * @example
       *
       * _.forEachRight([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `2` then `1`.
       */function forEachRight(collection,iteratee){var func=isArray(collection)?arrayEachRight:baseEachRight;return func(collection,getIteratee(iteratee,3));}/**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The order of grouped values
       * is determined by the order they occur in `collection`. The corresponding
       * value of each key is an array of elements responsible for generating the
       * key. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': [4.2], '6': [6.1, 6.3] }
       *
       * // The `_.property` iteratee shorthand.
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */var groupBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){result[key].push(value);}else {baseAssignValue(result,key,[value]);}});/**
       * Checks if `value` is in `collection`. If `collection` is a string, it's
       * checked for a substring of `value`, otherwise
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * is used for equality comparisons. If `fromIndex` is negative, it's used as
       * the offset from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {boolean} Returns `true` if `value` is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'a': 1, 'b': 2 }, 1);
       * // => true
       *
       * _.includes('abcd', 'bc');
       * // => true
       */function includes(collection,value,fromIndex,guard){collection=isArrayLike(collection)?collection:values(collection);fromIndex=fromIndex&&!guard?toInteger(fromIndex):0;var length=collection.length;if(fromIndex<0){fromIndex=nativeMax(length+fromIndex,0);}return isString(collection)?fromIndex<=length&&collection.indexOf(value,fromIndex)>-1:!!length&&baseIndexOf(collection,value,fromIndex)>-1;}/**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `path` is a function, it's invoked
       * for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke each method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invokeMap([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */var invokeMap=baseRest(function(collection,path,args){var index=-1,isFunc=typeof path=='function',result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value){result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args);});return result;});/**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the last element responsible for generating the key. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var array = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.keyBy(array, function(o) {
       *   return String.fromCharCode(o.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.keyBy(array, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       */var keyBy=createAggregator(function(result,value,key){baseAssignValue(result,key,value);});/**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,getIteratee(iteratee,3));}/**
       * This method is like `_.sortBy` except that it allows specifying the sort
       * orders of the iteratees to sort by. If `orders` is unspecified, all values
       * are sorted in ascending order. Otherwise, specify an order of "desc" for
       * descending or "asc" for ascending sort order of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @param {string[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // Sort by `user` in ascending order and by `age` in descending order.
       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       */function orderBy(collection,iteratees,orders,guard){if(collection==null){return [];}if(!isArray(iteratees)){iteratees=iteratees==null?[]:[iteratees];}orders=guard?undefined$1:orders;if(!isArray(orders)){orders=orders==null?[]:[orders];}return baseOrderBy(collection,iteratees,orders);}/**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, the second of which
       * contains elements `predicate` returns falsey for. The predicate is
       * invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * _.partition(users, function(o) { return o.active; });
       * // => objects for [['fred'], ['barney', 'pebbles']]
       *
       * // The `_.matches` iteratee shorthand.
       * _.partition(users, { 'age': 1, 'active': false });
       * // => objects for [['pebbles'], ['barney', 'fred']]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.partition(users, ['active', false]);
       * // => objects for [['barney', 'pebbles'], ['fred']]
       *
       * // The `_.property` iteratee shorthand.
       * _.partition(users, 'active');
       * // => objects for [['fred'], ['barney', 'pebbles']]
       */var partition=createAggregator(function(result,value,key){result[key?0:1].push(value);},function(){return [[],[]];});/**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` thru `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not given, the first element of `collection` is used as the initial
       * value. The iteratee is invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
       * and `sortBy`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduceRight
       * @example
       *
       * _.reduce([1, 2], function(sum, n) {
       *   return sum + n;
       * }, 0);
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       *   return result;
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
       */function reduce(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);}/**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduce
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */function reduceRight(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);}/**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.filter
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * _.reject(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.reject(users, { 'age': 40, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.reject(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.reject(users, 'active');
       * // => objects for ['barney']
       */function reject(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,negate(getIteratee(predicate,3)));}/**
       * Gets a random element from `collection`.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       */function sample(collection){var func=isArray(collection)?arraySample:baseSample;return func(collection);}/**
       * Gets `n` random elements at unique keys from `collection` up to the
       * size of `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @param {number} [n=1] The number of elements to sample.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the random elements.
       * @example
       *
       * _.sampleSize([1, 2, 3], 2);
       * // => [3, 1]
       *
       * _.sampleSize([1, 2, 3], 4);
       * // => [2, 3, 1]
       */function sampleSize(collection,n,guard){if(guard?isIterateeCall(collection,n,guard):n===undefined$1){n=1;}else {n=toInteger(n);}var func=isArray(collection)?arraySampleSize:baseSampleSize;return func(collection,n);}/**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */function shuffle(collection){var func=isArray(collection)?arrayShuffle:baseShuffle;return func(collection);}/**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable string keyed properties for objects.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the collection size.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */function size(collection){if(collection==null){return 0;}if(isArrayLike(collection)){return isString(collection)?stringSize(collection):collection.length;}var tag=getTag(collection);if(tag==mapTag||tag==setTag){return collection.size;}return baseKeys(collection).length;}/**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * Iteration is stopped once `predicate` returns truthy. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.some(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.some(users, 'active');
       * // => true
       */function some(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined$1;}return func(collection,getIteratee(predicate,3));}/**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection thru each iteratee. This method
       * performs a stable sort, that is, it preserves the original sort order of
       * equal elements. The iteratees are invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 30 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.sortBy(users, [function(o) { return o.user; }]);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
       *
       * _.sortBy(users, ['user', 'age']);
       * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
       */var sortBy=baseRest(function(collection,iteratees){if(collection==null){return [];}var length=iteratees.length;if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees=[];}else if(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees=[iteratees[0]];}return baseOrderBy(collection,baseFlatten(iteratees,1),[]);});/*------------------------------------------------------------------------*/ /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */var now=ctxNow||function(){return root.Date.now();};/*------------------------------------------------------------------------*/ /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it's called `n` or more times.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => Logs 'done saving!' after the two async saves have completed.
       */function after(n,func){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n<1){return func.apply(this,arguments);}};}/**
       * Creates a function that invokes `func`, with up to `n` arguments,
       * ignoring any additional arguments.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */function ary(func,n,guard){n=guard?undefined$1:n;n=func&&n==null?func.length:n;return createWrap(func,WRAP_ARY_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,n);}/**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it's called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery(element).on('click', _.before(5, addContactToList));
       * // => Allows adding up to 4 contacts to the list.
       */function before(n,func){var result;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n>0){result=func.apply(this,arguments);}if(n<=1){func=undefined$1;}return result;};}/**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and `partials` prepended to the arguments it receives.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * function greet(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * }
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */var bind=baseRest(function(func,thisArg,partials){var bitmask=WRAP_BIND_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bind));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(func,bitmask,thisArg,partials,holders);});/**
       * Creates a function that invokes the method at `object[key]` with `partials`
       * prepended to the arguments it receives.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist. See
       * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Function
       * @param {Object} object The object to invoke the method on.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */var bindKey=baseRest(function(object,key,partials){var bitmask=WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bindKey));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(key,bitmask,object,partials,holders);});/**
       * Creates a function that accepts arguments of `func` and either invokes
       * `func` returning its result, if at least `arity` number of arguments have
       * been provided, or returns a function that accepts the remaining `func`
       * arguments, and so on. The arity of `func` may be specified if `func.length`
       * is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */function curry(func,arity,guard){arity=guard?undefined$1:arity;var result=createWrap(func,WRAP_CURRY_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,undefined$1,arity);result.placeholder=curry.placeholder;return result;}/**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */function curryRight(func,arity,guard){arity=guard?undefined$1:arity;var result=createWrap(func,WRAP_CURRY_RIGHT_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,undefined$1,arity);result.placeholder=curryRight.placeholder;return result;}/**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined$1;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
  lastInvokeTime=time;// Start the timer for the trailing edge.
  timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
  return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,timeWaiting=wait-timeSinceLastCall;return maxing?nativeMin(timeWaiting,maxWait-timeSinceLastInvoke):timeWaiting;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
  // trailing edge, the system time has gone backwards and we're treating
  // it as the trailing edge, or we've hit the `maxWait` limit.
  return lastCallTime===undefined$1||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
  timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined$1;// Only invoke if we have `lastArgs` which means `func` has been
  // debounced at least once.
  if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined$1;return result;}function cancel(){if(timerId!==undefined$1){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined$1;}function flush(){return timerId===undefined$1?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined$1){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
  clearTimeout(timerId);timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined$1){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // => Logs 'deferred' after one millisecond.
       */var defer=baseRest(function(func,args){return baseDelay(func,1,args);});/**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => Logs 'later' after one second.
       */var delay=baseRest(function(func,wait,args){return baseDelay(func,toNumber(wait)||0,args);});/**
       * Creates a function that invokes `func` with arguments reversed.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to flip arguments for.
       * @returns {Function} Returns the new flipped function.
       * @example
       *
       * var flipped = _.flip(function() {
       *   return _.toArray(arguments);
       * });
       *
       * flipped('a', 'b', 'c', 'd');
       * // => ['d', 'c', 'b', 'a']
       */function flip(func){return createWrap(func,WRAP_FLIP_FLAG);}/**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */function memoize(func,resolver){if(typeof func!='function'||resolver!=null&&typeof resolver!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache=cache.set(key,result)||cache;return result;};memoized.cache=new(memoize.Cache||MapCache)();return memoized;}// Expose `MapCache`.
  memoize.Cache=MapCache;/**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new negated function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */function negate(predicate){if(typeof predicate!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return function(){var args=arguments;switch(args.length){case 0:return !predicate.call(this);case 1:return !predicate.call(this,args[0]);case 2:return !predicate.call(this,args[0],args[1]);case 3:return !predicate.call(this,args[0],args[1],args[2]);}return !predicate.apply(this,args);};}/**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first invocation. The `func` is
       * invoked with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // => `createApplication` is invoked once
       */function once(func){return before(2,func);}/**
       * Creates a function that invokes `func` with its arguments transformed.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms=[_.identity]]
       *  The argument transforms.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var func = _.overArgs(function(x, y) {
       *   return [x, y];
       * }, [square, doubled]);
       *
       * func(9, 3);
       * // => [81, 6]
       *
       * func(10, 5);
       * // => [100, 10]
       */var overArgs=castRest(function(func,transforms){transforms=transforms.length==1&&isArray(transforms[0])?arrayMap(transforms[0],baseUnary(getIteratee())):arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()));var funcsLength=transforms.length;return baseRest(function(args){var index=-1,length=nativeMin(args.length,funcsLength);while(++index<length){args[index]=transforms[index].call(this,args[index]);}return apply(func,this,args);});});/**
       * Creates a function that invokes `func` with `partials` prepended to the
       * arguments it receives. This method is like `_.bind` except it does **not**
       * alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 0.2.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // Partially applied with placeholders.
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */var partial=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partial));return createWrap(func,WRAP_PARTIAL_FLAG,undefined$1,partials,holders);});/**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to the arguments it receives.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // Partially applied with placeholders.
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */var partialRight=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partialRight));return createWrap(func,WRAP_PARTIAL_RIGHT_FLAG,undefined$1,partials,holders);});/**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified `indexes` where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, [2, 0, 1]);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       */var rearg=flatRest(function(func,indexes){return createWrap(func,WRAP_REARG_FLAG,undefined$1,undefined$1,undefined$1,indexes);});/**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as
       * an array.
       *
       * **Note:** This method is based on the
       * [rest parameter](https://mdn.io/rest_parameters).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.rest(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */function rest(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start===undefined$1?start:toInteger(start);return baseRest(func,start);}/**
       * Creates a function that invokes `func` with the `this` binding of the
       * create function and an array of arguments much like
       * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
       *
       * **Note:** This method is based on the
       * [spread operator](https://mdn.io/spread_operator).
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @param {number} [start=0] The start position of the spread.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */function spread(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start==null?0:nativeMax(toInteger(start),0);return baseRest(function(args){var array=args[start],otherArgs=castSlice(args,0,start);if(array){arrayPush(otherArgs,array);}return apply(func,this,otherArgs);});}/**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**
       * Creates a function that accepts up to one argument, ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.unary(parseInt));
       * // => [6, 8, 10]
       */function unary(func){return ary(func,1);}/**
       * Creates a function that provides `value` to `wrapper` as its first
       * argument. Any additional arguments provided to the function are appended
       * to those provided to the `wrapper`. The wrapper is invoked with the `this`
       * binding of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} [wrapper=identity] The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */function wrap(value,wrapper){return partial(castFunction(wrapper),value);}/*------------------------------------------------------------------------*/ /**
       * Casts `value` as an array if it's not one.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Lang
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast array.
       * @example
       *
       * _.castArray(1);
       * // => [1]
       *
       * _.castArray({ 'a': 1 });
       * // => [{ 'a': 1 }]
       *
       * _.castArray('abc');
       * // => ['abc']
       *
       * _.castArray(null);
       * // => [null]
       *
       * _.castArray(undefined);
       * // => [undefined]
       *
       * _.castArray();
       * // => []
       *
       * var array = [1, 2, 3];
       * console.log(_.castArray(array) === array);
       * // => true
       */function castArray(){if(!arguments.length){return [];}var value=arguments[0];return isArray(value)?value:[value];}/**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */function clone(value){return baseClone(value,CLONE_SYMBOLS_FLAG);}/**
       * This method is like `_.clone` except that it accepts `customizer` which
       * is invoked to produce the cloned value. If `customizer` returns `undefined`,
       * cloning is handled by the method instead. The `customizer` is invoked with
       * up to four arguments; (value [, index|key, object, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeepWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * }
       *
       * var el = _.cloneWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 0
       */function cloneWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseClone(value,CLONE_SYMBOLS_FLAG,customizer);}/**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */function cloneDeep(value){return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG);}/**
       * This method is like `_.cloneWith` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the deep cloned value.
       * @see _.cloneWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * }
       *
       * var el = _.cloneDeepWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 20
       */function cloneDeepWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG,customizer);}/**
       * Checks if `object` conforms to `source` by invoking the predicate
       * properties of `source` with the corresponding property values of `object`.
       *
       * **Note:** This method is equivalent to `_.conforms` when `source` is
       * partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
       * // => true
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
       * // => false
       */function conformsTo(object,source){return source==null||baseConformsTo(object,source,keys(source));}/**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */function eq(value,other){return value===other||value!==value&&other!==other;}/**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       * @see _.lt
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */var gt=createRelationalOperation(baseGt);/**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to
       *  `other`, else `false`.
       * @see _.lte
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */var gte=createRelationalOperation(function(value,other){return value>=other;});/**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */var isArray=Array.isArray;/**
       * Checks if `value` is classified as an `ArrayBuffer` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       * @example
       *
       * _.isArrayBuffer(new ArrayBuffer(2));
       * // => true
       *
       * _.isArrayBuffer(new Array(2));
       * // => false
       */var isArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):baseIsArrayBuffer;/**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */function isBoolean(value){return value===true||value===false||isObjectLike(value)&&baseGetTag(value)==boolTag;}/**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */var isBuffer=nativeIsBuffer||stubFalse;/**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */var isDate=nodeIsDate?baseUnary(nodeIsDate):baseIsDate;/**
       * Checks if `value` is likely a DOM element.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */function isElement(value){return isObjectLike(value)&&value.nodeType===1&&!isPlainObject(value);}/**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */function isEmpty(value){if(value==null){return true;}if(isArrayLike(value)&&(isArray(value)||typeof value=='string'||typeof value.splice=='function'||isBuffer(value)||isTypedArray(value)||isArguments(value))){return !value.length;}var tag=getTag(value);if(tag==mapTag||tag==setTag){return !value.size;}if(isPrototype(value)){return !baseKeys(value).length;}for(var key in value){if(hasOwnProperty.call(value,key)){return false;}}return true;}/**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are compared by strict equality, i.e. `===`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */function isEqual(value,other){return baseIsEqual(value,other);}/**
       * This method is like `_.isEqual` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with up to
       * six arguments: (objValue, othValue [, index|key, object, other, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, othValue) {
       *   if (isGreeting(objValue) && isGreeting(othValue)) {
       *     return true;
       *   }
       * }
       *
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqualWith(array, other, customizer);
       * // => true
       */function isEqualWith(value,other,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;var result=customizer?customizer(value,other):undefined$1;return result===undefined$1?baseIsEqual(value,other,undefined$1,customizer):!!result;}/**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */function isError(value){if(!isObjectLike(value)){return false;}var tag=baseGetTag(value);return tag==errorTag||tag==domExcTag||typeof value.message=='string'&&typeof value.name=='string'&&!isPlainObject(value);}/**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on
       * [`Number.isFinite`](https://mdn.io/Number/isFinite).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(3);
       * // => true
       *
       * _.isFinite(Number.MIN_VALUE);
       * // => true
       *
       * _.isFinite(Infinity);
       * // => false
       *
       * _.isFinite('3');
       * // => false
       */function isFinite(value){return typeof value=='number'&&nativeIsFinite(value);}/**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
       * Checks if `value` is an integer.
       *
       * **Note:** This method is based on
       * [`Number.isInteger`](https://mdn.io/Number/isInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
       * @example
       *
       * _.isInteger(3);
       * // => true
       *
       * _.isInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isInteger(Infinity);
       * // => false
       *
       * _.isInteger('3');
       * // => false
       */function isInteger(value){return typeof value=='number'&&value==toInteger(value);}/**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */function isObject(value){var type=_typeof$1(value);return value!=null&&(type=='object'||type=='function');}/**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */function isObjectLike(value){return value!=null&&_typeof$1(value)=='object';}/**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */var isMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;/**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */function isMatch(object,source){return object===source||baseIsMatch(object,source,getMatchData(source));}/**
       * This method is like `_.isMatch` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with five
       * arguments: (objValue, srcValue, index|key, object, source).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, srcValue) {
       *   if (isGreeting(objValue) && isGreeting(srcValue)) {
       *     return true;
       *   }
       * }
       *
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatchWith(object, source, customizer);
       * // => true
       */function isMatchWith(object,source,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseIsMatch(object,source,getMatchData(source),customizer);}/**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is based on
       * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
       * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
       * `undefined` and other non-number values.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */function isNaN(value){// An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return isNumber(value)&&value!=+value;}/**
       * Checks if `value` is a pristine native function.
       *
       * **Note:** This method can't reliably detect native functions in the presence
       * of the core-js package because core-js circumvents this kind of detection.
       * Despite multiple requests, the core-js maintainer has made it clear: any
       * attempt to fix the detection will be obstructed. As a result, we're left
       * with little choice but to throw an error. Unfortunately, this also affects
       * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
       * which rely on core-js.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */function isNative(value){if(isMaskable(value)){throw new Error(CORE_ERROR_TEXT);}return baseIsNative(value);}/**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */function isNull(value){return value===null;}/**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */function isNil(value){return value==null;}/**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */function isNumber(value){return typeof value=='number'||isObjectLike(value)&&baseGetTag(value)==numberTag;}/**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */function isPlainObject(value){if(!isObjectLike(value)||baseGetTag(value)!=objectTag){return false;}var proto=getPrototype(value);if(proto===null){return true;}var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;return typeof Ctor=='function'&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString;}/**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */var isRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):baseIsRegExp;/**
       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
       * double precision number which isn't the result of a rounded unsafe integer.
       *
       * **Note:** This method is based on
       * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
       * @example
       *
       * _.isSafeInteger(3);
       * // => true
       *
       * _.isSafeInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isSafeInteger(Infinity);
       * // => false
       *
       * _.isSafeInteger('3');
       * // => false
       */function isSafeInteger(value){return isInteger(value)&&value>=-MAX_SAFE_INTEGER&&value<=MAX_SAFE_INTEGER;}/**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */var isSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;/**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */function isString(value){return typeof value=='string'||!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag;}/**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */function isSymbol(value){return _typeof$1(value)=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}/**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */function isUndefined(value){return value===undefined$1;}/**
       * Checks if `value` is classified as a `WeakMap` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
       * @example
       *
       * _.isWeakMap(new WeakMap);
       * // => true
       *
       * _.isWeakMap(new Map);
       * // => false
       */function isWeakMap(value){return isObjectLike(value)&&getTag(value)==weakMapTag;}/**
       * Checks if `value` is classified as a `WeakSet` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
       * @example
       *
       * _.isWeakSet(new WeakSet);
       * // => true
       *
       * _.isWeakSet(new Set);
       * // => false
       */function isWeakSet(value){return isObjectLike(value)&&baseGetTag(value)==weakSetTag;}/**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       * @see _.gt
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */var lt=createRelationalOperation(baseLt);/**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to
       *  `other`, else `false`.
       * @see _.gte
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */var lte=createRelationalOperation(function(value,other){return value<=other;});/**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */function toArray(value){if(!value){return [];}if(isArrayLike(value)){return isString(value)?stringToArray(value):copyArray(value);}if(symIterator&&value[symIterator]){return iteratorToArray(value[symIterator]());}var tag=getTag(value),func=tag==mapTag?mapToArray:tag==setTag?setToArray:values;return func(value);}/**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */function toFinite(value){if(!value){return value===0?value:0;}value=toNumber(value);if(value===INFINITY||value===-INFINITY){var sign=value<0?-1:1;return sign*MAX_INTEGER;}return value===value?value:0;}/**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0;}/**
       * Converts `value` to an integer suitable for use as the length of an
       * array-like object.
       *
       * **Note:** This method is based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toLength(3.2);
       * // => 3
       *
       * _.toLength(Number.MIN_VALUE);
       * // => 0
       *
       * _.toLength(Infinity);
       * // => 4294967295
       *
       * _.toLength('3.2');
       * // => 3
       */function toLength(value){return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;}/**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=baseTrim(value);var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}/**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */function toPlainObject(value){return copyObject(value,keysIn(value));}/**
       * Converts `value` to a safe integer. A safe integer can be compared and
       * represented correctly.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toSafeInteger(3.2);
       * // => 3
       *
       * _.toSafeInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toSafeInteger(Infinity);
       * // => 9007199254740991
       *
       * _.toSafeInteger('3.2');
       * // => 3
       */function toSafeInteger(value){return value?baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER):value===0?value:0;}/**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */function toString(value){return value==null?'':baseToString(value);}/*------------------------------------------------------------------------*/ /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */var assign=createAssigner(function(object,source){if(isPrototype(source)||isArrayLike(source)){copyObject(source,keys(source),object);return;}for(var key in source){if(hasOwnProperty.call(source,key)){assignValue(object,key,source[key]);}}});/**
       * This method is like `_.assign` except that it iterates over own and
       * inherited source properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assign
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assignIn({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
       */var assignIn=createAssigner(function(object,source){copyObject(source,keysIn(source),object);});/**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */var assignInWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keysIn(source),object,customizer);});/**
       * This method is like `_.assign` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignInWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */var assignWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keys(source),object,customizer);});/**
       * Creates an array of values corresponding to `paths` of `object`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Array} Returns the picked values.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _.at(object, ['a[0].b.c', 'a[1]']);
       * // => [3, 4]
       */var at=flatRest(baseAt);/**
       * Creates an object that inherits from the `prototype` object. If a
       * `properties` object is given, its own enumerable string keyed properties
       * are assigned to the created object.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */function create(prototype,properties){var result=baseCreate(prototype);return properties==null?result:baseAssign(result,properties);}/**
       * Assigns own and inherited enumerable string keyed properties of source
       * objects to the destination object for all destination properties that
       * resolve to `undefined`. Source objects are applied from left to right.
       * Once a property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaultsDeep
       * @example
       *
       * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */var defaults=baseRest(function(object,sources){object=Object(object);var index=-1;var length=sources.length;var guard=length>2?sources[2]:undefined$1;if(guard&&isIterateeCall(sources[0],sources[1],guard)){length=1;}while(++index<length){var source=sources[index];var props=keysIn(source);var propsIndex=-1;var propsLength=props.length;while(++propsIndex<propsLength){var key=props[propsIndex];var value=object[key];if(value===undefined$1||eq(value,objectProto[key])&&!hasOwnProperty.call(object,key)){object[key]=source[key];}}}return object;});/**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaults
       * @example
       *
       * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
       * // => { 'a': { 'b': 2, 'c': 3 } }
       */var defaultsDeep=baseRest(function(args){args.push(undefined$1,customDefaultsMerge);return apply(mergeWith,undefined$1,args);});/**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(o) { return o.age < 40; });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // The `_.matches` iteratee shorthand.
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findKey(users, 'active');
       * // => 'barney'
       */function findKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwn);}/**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(o) { return o.age < 40; });
       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */function findLastKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwnRight);}/**
       * Iterates over own and inherited enumerable string keyed properties of an
       * object and invokes `iteratee` for each property. The iteratee is invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forInRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
       */function forIn(object,iteratee){return object==null?object:baseFor(object,getIteratee(iteratee,3),keysIn);}/**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
       */function forInRight(object,iteratee){return object==null?object:baseForRight(object,getIteratee(iteratee,3),keysIn);}/**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */function forOwn(object,iteratee){return object&&baseForOwn(object,getIteratee(iteratee,3));}/**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
       */function forOwnRight(object,iteratee){return object&&baseForOwnRight(object,getIteratee(iteratee,3));}/**
       * Creates an array of function property names from own enumerable properties
       * of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functionsIn
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functions(new Foo);
       * // => ['a', 'b']
       */function functions(object){return object==null?[]:baseFunctions(object,keys(object));}/**
       * Creates an array of function property names from own and inherited
       * enumerable properties of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functions
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functionsIn(new Foo);
       * // => ['a', 'b', 'c']
       */function functionsIn(object){return object==null?[]:baseFunctions(object,keysIn(object));}/**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */function get(object,path,defaultValue){var result=object==null?undefined$1:baseGet(object,path);return result===undefined$1?defaultValue:result;}/**
       * Checks if `path` is a direct property of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': 2 } };
       * var other = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b');
       * // => true
       *
       * _.has(object, ['a', 'b']);
       * // => true
       *
       * _.has(other, 'a');
       * // => false
       */function has(object,path){return object!=null&&hasPath(object,path,baseHas);}/**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */function hasIn(object,path){return object!=null&&hasPath(object,path,baseHasIn);}/**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite
       * property assignments of previous values.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Object
       * @param {Object} object The object to invert.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       */var invert=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}result[value]=key;},constant(identity));/**
       * This method is like `_.invert` except that the inverted object is generated
       * from the results of running each element of `object` thru `iteratee`. The
       * corresponding inverted value of each inverted key is an array of keys
       * responsible for generating the inverted value. The iteratee is invoked
       * with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Object
       * @param {Object} object The object to invert.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invertBy(object);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       *
       * _.invertBy(object, function(value) {
       *   return 'group' + value;
       * });
       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
       */var invertBy=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}if(hasOwnProperty.call(result,value)){result[value].push(key);}else {result[value]=[key];}},getIteratee);/**
       * Invokes the method at `path` of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
       *
       * _.invoke(object, 'a[0].b.c.slice', 1, 3);
       * // => [2, 3]
       */var invoke=baseRest(baseInvoke);/**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);}/**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * string keyed property of `object` thru `iteratee`. The iteratee is invoked
       * with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapValues
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */function mapKeys(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,iteratee(value,key,object),value);});return result;}/**
       * Creates an object with the same keys as `object` and values generated
       * by running each own enumerable string keyed property of `object` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapKeys
       * @example
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * _.mapValues(users, function(o) { return o.age; });
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       *
       * // The `_.property` iteratee shorthand.
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */function mapValues(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,key,iteratee(value,key,object));});return result;}/**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */var merge=createAssigner(function(object,source,srcIndex){baseMerge(object,source,srcIndex);});/**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});/**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable property paths of `object` that are not omitted.
       *
       * **Note:** This method is considerably slower than `_.pick`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to omit.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omit(object, ['a', 'c']);
       * // => { 'b': '2' }
       */var omit=flatRest(function(object,paths){var result={};if(object==null){return result;}var isDeep=false;paths=arrayMap(paths,function(path){path=castPath(path,object);isDeep||(isDeep=path.length>1);return path;});copyObject(object,getAllKeysIn(object),result);if(isDeep){result=baseClone(result,CLONE_DEEP_FLAG|CLONE_FLAT_FLAG|CLONE_SYMBOLS_FLAG,customOmitClone);}var length=paths.length;while(length--){baseUnset(result,paths[length]);}return result;});/**
       * The opposite of `_.pickBy`; this method creates an object composed of
       * the own and inherited enumerable string keyed properties of `object` that
       * `predicate` doesn't return truthy for. The predicate is invoked with two
       * arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omitBy(object, _.isNumber);
       * // => { 'b': '2' }
       */function omitBy(object,predicate){return pickBy(object,negate(getIteratee(predicate)));}/**
       * Creates an object composed of the picked `object` properties.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pick(object, ['a', 'c']);
       * // => { 'a': 1, 'c': 3 }
       */var pick=flatRest(function(object,paths){return object==null?{}:basePick(object,paths);});/**
       * Creates an object composed of the `object` properties `predicate` returns
       * truthy for. The predicate is invoked with two arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pickBy(object, _.isNumber);
       * // => { 'a': 1, 'c': 3 }
       */function pickBy(object,predicate){if(object==null){return {};}var props=arrayMap(getAllKeysIn(object),function(prop){return [prop];});predicate=getIteratee(predicate);return basePickBy(object,props,function(value,path){return predicate(value,path[0]);});}/**
       * This method is like `_.get` except that if the resolved value is a
       * function it's invoked with the `this` binding of its parent object and
       * its result is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a[0].b.c3', 'default');
       * // => 'default'
       *
       * _.result(object, 'a[0].b.c3', _.constant('default'));
       * // => 'default'
       */function result(object,path,defaultValue){path=castPath(path,object);var index=-1,length=path.length;// Ensure the loop is entered when path is empty.
  if(!length){length=1;object=undefined$1;}while(++index<length){var value=object==null?undefined$1:object[toKey(path[index])];if(value===undefined$1){index=length;value=defaultValue;}object=isFunction(value)?value.call(object):value;}return object;}/**
       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
       * it's created. Arrays are created for missing index properties while objects
       * are created for all other missing properties. Use `_.setWith` to customize
       * `path` creation.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, ['x', '0', 'y', 'z'], 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */function set(object,path,value){return object==null?object:baseSet(object,path,value);}/**
       * This method is like `_.set` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.setWith(object, '[0][1]', 'a', Object);
       * // => { '0': { '1': 'a' } }
       */function setWith(object,path,value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return object==null?object:baseSet(object,path,value,customizer);}/**
       * Creates an array of own enumerable string keyed-value pairs for `object`
       * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
       * entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entries
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairs(new Foo);
       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
       */var toPairs=createToPairs(keys);/**
       * Creates an array of own and inherited enumerable string keyed-value pairs
       * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
       * or set, its entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entriesIn
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairsIn(new Foo);
       * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
       */var toPairsIn=createToPairs(keysIn);/**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own
       * enumerable string keyed properties thru `iteratee`, with each invocation
       * potentially mutating the `accumulator` object. If `accumulator` is not
       * provided, a new object with the same `[[Prototype]]` will be used. The
       * iteratee is invoked with four arguments: (accumulator, value, key, object).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * }, []);
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */function transform(object,iteratee,accumulator){var isArr=isArray(object),isArrLike=isArr||isBuffer(object)||isTypedArray(object);iteratee=getIteratee(iteratee,4);if(accumulator==null){var Ctor=object&&object.constructor;if(isArrLike){accumulator=isArr?new Ctor():[];}else if(isObject(object)){accumulator=isFunction(Ctor)?baseCreate(getPrototype(object)):{};}else {accumulator={};}}(isArrLike?arrayEach:baseForOwn)(object,function(value,index,object){return iteratee(accumulator,value,index,object);});return accumulator;}/**
       * Removes the property at `path` of `object`.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 7 } }] };
       * _.unset(object, 'a[0].b.c');
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       *
       * _.unset(object, ['a', '0', 'b', 'c']);
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       */function unset(object,path){return object==null?true:baseUnset(object,path);}/**
       * This method is like `_.set` except that accepts `updater` to produce the
       * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
       * is invoked with one argument: (value).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.update(object, 'a[0].b.c', function(n) { return n * n; });
       * console.log(object.a[0].b.c);
       * // => 9
       *
       * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
       * console.log(object.x[0].y.z);
       * // => 0
       */function update(object,path,updater){return object==null?object:baseUpdate(object,path,castFunction(updater));}/**
       * This method is like `_.update` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.updateWith(object, '[0][1]', _.constant('a'), Object);
       * // => { '0': { '1': 'a' } }
       */function updateWith(object,path,updater,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return object==null?object:baseUpdate(object,path,castFunction(updater),customizer);}/**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */function values(object){return object==null?[]:baseValues(object,keys(object));}/**
       * Creates an array of the own and inherited enumerable string keyed property
       * values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */function valuesIn(object){return object==null?[]:baseValues(object,keysIn(object));}/*------------------------------------------------------------------------*/ /**
       * Clamps `number` within the inclusive `lower` and `upper` bounds.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Number
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       * @example
       *
       * _.clamp(-10, -5, 5);
       * // => -5
       *
       * _.clamp(10, -5, 5);
       * // => 5
       */function clamp(number,lower,upper){if(upper===undefined$1){upper=lower;lower=undefined$1;}if(upper!==undefined$1){upper=toNumber(upper);upper=upper===upper?upper:0;}if(lower!==undefined$1){lower=toNumber(lower);lower=lower===lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}/**
       * Checks if `n` is between `start` and up to, but not including, `end`. If
       * `end` is not specified, it's set to `start` with `start` then set to `0`.
       * If `start` is greater than `end` the params are swapped to support
       * negative ranges.
       *
       * @static
       * @memberOf _
       * @since 3.3.0
       * @category Number
       * @param {number} number The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       * @see _.range, _.rangeRight
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       *
       * _.inRange(-3, -2, -6);
       * // => true
       */function inRange(number,start,end){start=toFinite(start);if(end===undefined$1){end=start;start=0;}else {end=toFinite(end);}number=toNumber(number);return baseInRange(number,start,end);}/**
       * Produces a random number between the inclusive `lower` and `upper` bounds.
       * If only one argument is provided a number between `0` and the given number
       * is returned. If `floating` is `true`, or either `lower` or `upper` are
       * floats, a floating-point number is returned instead of an integer.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Number
       * @param {number} [lower=0] The lower bound.
       * @param {number} [upper=1] The upper bound.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */function random(lower,upper,floating){if(floating&&typeof floating!='boolean'&&isIterateeCall(lower,upper,floating)){upper=floating=undefined$1;}if(floating===undefined$1){if(typeof upper=='boolean'){floating=upper;upper=undefined$1;}else if(typeof lower=='boolean'){floating=lower;lower=undefined$1;}}if(lower===undefined$1&&upper===undefined$1){lower=0;upper=1;}else {lower=toFinite(lower);if(upper===undefined$1){upper=lower;lower=0;}else {upper=toFinite(upper);}}if(lower>upper){var temp=lower;lower=upper;upper=temp;}if(floating||lower%1||upper%1){var rand=nativeRandom();return nativeMin(lower+rand*(upper-lower+freeParseFloat('1e-'+((rand+'').length-1))),upper);}return baseRandom(lower,upper);}/*------------------------------------------------------------------------*/ /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */var camelCase=createCompounder(function(result,word,index){word=word.toLowerCase();return result+(index?capitalize(word):word);});/**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */function capitalize(string){return upperFirst(toString(string).toLowerCase());}/**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */function deburr(string){string=toString(string);return string&&string.replace(reLatin,deburrLetter).replace(reComboMark,'');}/**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search up to.
       * @returns {boolean} Returns `true` if `string` ends with `target`,
       *  else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */function endsWith(string,target,position){string=toString(string);target=baseToString(target);var length=string.length;position=position===undefined$1?length:baseClamp(toInteger(position),0,length);var end=position;position-=target.length;return position>=0&&string.slice(position,end)==target;}/**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */function escape(string){string=toString(string);return string&&reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string;}/**
       * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
       * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https://lodash\.com/\)'
       */function escapeRegExp(string){string=toString(string);return string&&reHasRegExpChar.test(string)?string.replace(reRegExpChar,'\\$&'):string;}/**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */var kebabCase=createCompounder(function(result,word,index){return result+(index?'-':'')+word.toLowerCase();});/**
       * Converts `string`, as space separated words, to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.lowerCase('--Foo-Bar--');
       * // => 'foo bar'
       *
       * _.lowerCase('fooBar');
       * // => 'foo bar'
       *
       * _.lowerCase('__FOO_BAR__');
       * // => 'foo bar'
       */var lowerCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toLowerCase();});/**
       * Converts the first character of `string` to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.lowerFirst('Fred');
       * // => 'fred'
       *
       * _.lowerFirst('FRED');
       * // => 'fRED'
       */var lowerFirst=createCaseFirst('toLowerCase');/**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */function pad(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;if(!length||strLength>=length){return string;}var mid=(length-strLength)/2;return createPadding(nativeFloor(mid),chars)+string+createPadding(nativeCeil(mid),chars);}/**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */function padEnd(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?string+createPadding(length-strLength,chars):string;}/**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padStart('abc', 6);
       * // => '   abc'
       *
       * _.padStart('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padStart('abc', 3);
       * // => 'abc'
       */function padStart(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?createPadding(length-strLength,chars)+string:string;}/**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
       * hexadecimal, in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the
       * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix=10] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */function parseInt(string,radix,guard){if(guard||radix==null){radix=0;}else if(radix){radix=+radix;}return nativeParseInt(toString(string).replace(reTrimStart,''),radix||0);}/**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=1] The number of times to repeat the string.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */function repeat(string,n,guard){if(guard?isIterateeCall(string,n,guard):n===undefined$1){n=1;}else {n=toInteger(n);}return baseRepeat(toString(string),n);}/**
       * Replaces matches for `pattern` in `string` with `replacement`.
       *
       * **Note:** This method is based on
       * [`String#replace`](https://mdn.io/String/replace).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to modify.
       * @param {RegExp|string} pattern The pattern to replace.
       * @param {Function|string} replacement The match replacement.
       * @returns {string} Returns the modified string.
       * @example
       *
       * _.replace('Hi Fred', 'Fred', 'Barney');
       * // => 'Hi Barney'
       */function replace(){var args=arguments,string=toString(args[0]);return args.length<3?string:string.replace(args[1],args[2]);}/**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */var snakeCase=createCompounder(function(result,word,index){return result+(index?'_':'')+word.toLowerCase();});/**
       * Splits `string` by `separator`.
       *
       * **Note:** This method is based on
       * [`String#split`](https://mdn.io/String/split).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to split.
       * @param {RegExp|string} separator The separator pattern to split by.
       * @param {number} [limit] The length to truncate results to.
       * @returns {Array} Returns the string segments.
       * @example
       *
       * _.split('a-b-c', '-', 2);
       * // => ['a', 'b']
       */function split(string,separator,limit){if(limit&&typeof limit!='number'&&isIterateeCall(string,separator,limit)){separator=limit=undefined$1;}limit=limit===undefined$1?MAX_ARRAY_LENGTH:limit>>>0;if(!limit){return [];}string=toString(string);if(string&&(typeof separator=='string'||separator!=null&&!isRegExp(separator))){separator=baseToString(separator);if(!separator&&hasUnicode(string)){return castSlice(stringToArray(string),0,limit);}}return string.split(separator,limit);}/**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */var startCase=createCompounder(function(result,word,index){return result+(index?' ':'')+upperFirst(word);});/**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`,
       *  else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */function startsWith(string,target,position){string=toString(string);position=position==null?0:baseClamp(toInteger(position),0,string.length);target=baseToString(target);return string.slice(position,position+target.length)==target;}/**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='lodash.templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */function template(string,options,guard){// Based on John Resig's `tmpl` implementation
  // (http://ejohn.org/blog/javascript-micro-templating/)
  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
  var settings=lodash.templateSettings;if(guard&&isIterateeCall(string,options,guard)){options=undefined$1;}string=toString(string);options=assignInWith({},options,settings,customDefaultsAssignIn);var imports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys);var isEscaping,isEvaluating,index=0,interpolate=options.interpolate||reNoMatch,source="__p += '";// Compile the regexp to match each delimiter.
  var reDelimiters=RegExp((options.escape||reNoMatch).source+'|'+interpolate.source+'|'+(interpolate===reInterpolate?reEsTemplate:reNoMatch).source+'|'+(options.evaluate||reNoMatch).source+'|$','g');// Use a sourceURL for easier debugging.
  // The sourceURL gets injected into the source that's eval-ed, so be careful
  // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
  // and escape the comment, thus injecting code that gets evaled.
  var sourceURL='//# sourceURL='+(hasOwnProperty.call(options,'sourceURL')?(options.sourceURL+'').replace(/\s/g,' '):'lodash.templateSources['+ ++templateCounter+']')+'\n';string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){interpolateValue||(interpolateValue=esTemplateValue);// Escape characters that can't be included in string literals.
  source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar);// Replace delimiters with snippets.
  if(escapeValue){isEscaping=true;source+="' +\n__e("+escapeValue+") +\n'";}if(evaluateValue){isEvaluating=true;source+="';\n"+evaluateValue+";\n__p += '";}if(interpolateValue){source+="' +\n((__t = ("+interpolateValue+")) == null ? '' : __t) +\n'";}index=offset+match.length;// The JS engine embedded in Adobe products needs `match` returned in
  // order to produce the correct `offset` value.
  return match;});source+="';\n";// If `variable` is not specified wrap a with-statement around the generated
  // code to add the data object to the top of the scope chain.
  var variable=hasOwnProperty.call(options,'variable')&&options.variable;if(!variable){source='with (obj) {\n'+source+'\n}\n';}// Throw an error if a forbidden character was found in `variable`, to prevent
  // potential command injection attacks.
  else if(reForbiddenIdentifierChars.test(variable)){throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);}// Cleanup code by stripping empty strings.
  source=(isEvaluating?source.replace(reEmptyStringLeading,''):source).replace(reEmptyStringMiddle,'$1').replace(reEmptyStringTrailing,'$1;');// Frame code as the function body.
  source='function('+(variable||'obj')+') {\n'+(variable?'':'obj || (obj = {});\n')+"var __t, __p = ''"+(isEscaping?', __e = _.escape':'')+(isEvaluating?', __j = Array.prototype.join;\n'+"function print() { __p += __j.call(arguments, '') }\n":';\n')+source+'return __p\n}';var result=attempt(function(){return Function(importsKeys,sourceURL+'return '+source).apply(undefined$1,importsValues);});// Provide the compiled function's source by its `toString` method or
  // the `source` property as a convenience for inlining compiled templates.
  result.source=source;if(isError(result)){throw result;}return result;}/**
       * Converts `string`, as a whole, to lower case just like
       * [String#toLowerCase](https://mdn.io/toLowerCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.toLower('--Foo-Bar--');
       * // => '--foo-bar--'
       *
       * _.toLower('fooBar');
       * // => 'foobar'
       *
       * _.toLower('__FOO_BAR__');
       * // => '__foo_bar__'
       */function toLower(value){return toString(value).toLowerCase();}/**
       * Converts `string`, as a whole, to upper case just like
       * [String#toUpperCase](https://mdn.io/toUpperCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.toUpper('--foo-bar--');
       * // => '--FOO-BAR--'
       *
       * _.toUpper('fooBar');
       * // => 'FOOBAR'
       *
       * _.toUpper('__foo_bar__');
       * // => '__FOO_BAR__'
       */function toUpper(value){return toString(value).toUpperCase();}/**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */function trim(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return baseTrim(string);}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars),start=charsStartIndex(strSymbols,chrSymbols),end=charsEndIndex(strSymbols,chrSymbols)+1;return castSlice(strSymbols,start,end).join('');}/**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimEnd('  abc  ');
       * // => '  abc'
       *
       * _.trimEnd('-_-abc-_-', '_-');
       * // => '-_-abc'
       */function trimEnd(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return string.slice(0,trimmedEndIndex(string)+1);}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),end=charsEndIndex(strSymbols,stringToArray(chars))+1;return castSlice(strSymbols,0,end).join('');}/**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimStart('  abc  ');
       * // => 'abc  '
       *
       * _.trimStart('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */function trimStart(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return string.replace(reTrimStart,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),start=charsStartIndex(strSymbols,stringToArray(chars));return castSlice(strSymbols,start).join('');}/**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object} [options={}] The options object.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.truncate('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */function truncate(string,options){var length=DEFAULT_TRUNC_LENGTH,omission=DEFAULT_TRUNC_OMISSION;if(isObject(options)){var separator='separator'in options?options.separator:separator;length='length'in options?toInteger(options.length):length;omission='omission'in options?baseToString(options.omission):omission;}string=toString(string);var strLength=string.length;if(hasUnicode(string)){var strSymbols=stringToArray(string);strLength=strSymbols.length;}if(length>=strLength){return string;}var end=length-stringSize(omission);if(end<1){return omission;}var result=strSymbols?castSlice(strSymbols,0,end).join(''):string.slice(0,end);if(separator===undefined$1){return result+omission;}if(strSymbols){end+=result.length-end;}if(isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;if(!separator.global){separator=RegExp(separator.source,toString(reFlags.exec(separator))+'g');}separator.lastIndex=0;while(match=separator.exec(substring)){var newEnd=match.index;}result=result.slice(0,newEnd===undefined$1?end:newEnd);}}else if(string.indexOf(baseToString(separator),end)!=end){var index=result.lastIndexOf(separator);if(index>-1){result=result.slice(0,index);}}return result+omission;}/**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
       * their corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional
       * HTML entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @since 0.6.0
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */function unescape(string){string=toString(string);return string&&reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string;}/**
       * Converts `string`, as space separated words, to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.upperCase('--foo-bar');
       * // => 'FOO BAR'
       *
       * _.upperCase('fooBar');
       * // => 'FOO BAR'
       *
       * _.upperCase('__foo_bar__');
       * // => 'FOO BAR'
       */var upperCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toUpperCase();});/**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */var upperFirst=createCaseFirst('toUpperCase');/**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */function words(string,pattern,guard){string=toString(string);pattern=guard?undefined$1:pattern;if(pattern===undefined$1){return hasUnicodeWord(string)?unicodeWords(string):asciiWords(string);}return string.match(pattern)||[];}/*------------------------------------------------------------------------*/ /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */var attempt=baseRest(function(func,args){try{return apply(func,undefined$1,args);}catch(e){return isError(e)?e:new Error(e);}});/**
       * Binds methods of an object to the object itself, overwriting the existing
       * method.
       *
       * **Note:** This method doesn't set the "length" property of bound functions.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} methodNames The object method names to bind.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'click': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view, ['click']);
       * jQuery(element).on('click', view.click);
       * // => Logs 'clicked docs' when clicked.
       */var bindAll=flatRest(function(object,methodNames){arrayEach(methodNames,function(key){key=toKey(key);baseAssignValue(object,key,bind(object[key],object));});return object;});/**
       * Creates a function that iterates over `pairs` and invokes the corresponding
       * function of the first predicate to return truthy. The predicate-function
       * pairs are invoked with the `this` binding and arguments of the created
       * function.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Array} pairs The predicate-function pairs.
       * @returns {Function} Returns the new composite function.
       * @example
       *
       * var func = _.cond([
       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
       *   [_.stubTrue,                      _.constant('no match')]
       * ]);
       *
       * func({ 'a': 1, 'b': 2 });
       * // => 'matches A'
       *
       * func({ 'a': 0, 'b': 1 });
       * // => 'matches B'
       *
       * func({ 'a': '1', 'b': '2' });
       * // => 'no match'
       */function cond(pairs){var length=pairs==null?0:pairs.length,toIteratee=getIteratee();pairs=!length?[]:arrayMap(pairs,function(pair){if(typeof pair[1]!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return [toIteratee(pair[0]),pair[1]];});return baseRest(function(args){var index=-1;while(++index<length){var pair=pairs[index];if(apply(pair[0],this,args)){return apply(pair[1],this,args);}}});}/**
       * Creates a function that invokes the predicate properties of `source` with
       * the corresponding property values of a given object, returning `true` if
       * all predicates return truthy, else `false`.
       *
       * **Note:** The created function is equivalent to `_.conformsTo` with
       * `source` partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 2, 'b': 1 },
       *   { 'a': 1, 'b': 2 }
       * ];
       *
       * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
       * // => [{ 'a': 1, 'b': 2 }]
       */function conforms(source){return baseConforms(baseClone(source,CLONE_DEEP_FLAG));}/**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */function constant(value){return function(){return value;};}/**
       * Checks `value` to determine whether a default value should be returned in
       * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
       * or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Util
       * @param {*} value The value to check.
       * @param {*} defaultValue The default value.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * _.defaultTo(1, 10);
       * // => 1
       *
       * _.defaultTo(undefined, 10);
       * // => 10
       */function defaultTo(value,defaultValue){return value==null||value!==value?defaultValue:value;}/**
       * Creates a function that returns the result of invoking the given functions
       * with the `this` binding of the created function, where each successive
       * invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flowRight
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow([_.add, square]);
       * addSquare(1, 2);
       * // => 9
       */var flow=createFlow();/**
       * This method is like `_.flow` except that it creates a function that
       * invokes the given functions from right to left.
       *
       * @static
       * @since 3.0.0
       * @memberOf _
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flow
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight([square, _.add]);
       * addSquare(1, 2);
       * // => 9
       */var flowRight=createFlow(true);/**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */function identity(value){return value;}/**
       * Creates a function that invokes `func` with the arguments of the created
       * function. If `func` is a property name, the created function returns the
       * property value for a given element. If `func` is an array or object, the
       * created function returns `true` for elements that contain the equivalent
       * source properties, otherwise it returns `false`.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Util
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
       * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, _.iteratee(['user', 'fred']));
       * // => [{ 'user': 'fred', 'age': 40 }]
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, _.iteratee('user'));
       * // => ['barney', 'fred']
       *
       * // Create custom iteratee shorthands.
       * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
       *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
       *     return func.test(string);
       *   };
       * });
       *
       * _.filter(['abc', 'def'], /ef/);
       * // => ['def']
       */function iteratee(func){return baseIteratee(typeof func=='function'?func:baseClone(func,CLONE_DEEP_FLAG));}/**
       * Creates a function that performs a partial deep comparison between a given
       * object and `source`, returning `true` if the given object has equivalent
       * property values, else `false`.
       *
       * **Note:** The created function is equivalent to `_.isMatch` with `source`
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * **Note:** Multiple values can be checked by combining several matchers
       * using `_.overSome`
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
       * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
       *
       * // Checking for several possible values
       * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
       * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
       */function matches(source){return baseMatches(baseClone(source,CLONE_DEEP_FLAG));}/**
       * Creates a function that performs a partial deep comparison between the
       * value at `path` of a given object to `srcValue`, returning `true` if the
       * object value is equivalent, else `false`.
       *
       * **Note:** Partial comparisons will match empty array and empty object
       * `srcValue` values against any array or object value, respectively. See
       * `_.isEqual` for a list of supported value comparisons.
       *
       * **Note:** Multiple values can be checked by combining several matchers
       * using `_.overSome`
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.find(objects, _.matchesProperty('a', 4));
       * // => { 'a': 4, 'b': 5, 'c': 6 }
       *
       * // Checking for several possible values
       * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
       * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
       */function matchesProperty(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,CLONE_DEEP_FLAG));}/**
       * Creates a function that invokes the method at `path` of a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': _.constant(2) } },
       *   { 'a': { 'b': _.constant(1) } }
       * ];
       *
       * _.map(objects, _.method('a.b'));
       * // => [2, 1]
       *
       * _.map(objects, _.method(['a', 'b']));
       * // => [2, 1]
       */var method=baseRest(function(path,args){return function(object){return baseInvoke(object,path,args);};});/**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path of `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */var methodOf=baseRest(function(object,args){return function(path){return baseInvoke(object,path,args);};});/**
       * Adds all own enumerable string keyed function properties of a source
       * object to the destination object. If `object` is a function, then methods
       * are added to its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);if(options==null&&!(isObject(source)&&(methodNames.length||!props.length))){options=source;source=object;object=this;methodNames=baseFunctions(source,keys(source));}var chain=!(isObject(options)&&'chain'in options)||!!options.chain,isFunc=isFunction(object);arrayEach(methodNames,function(methodName){var func=source[methodName];object[methodName]=func;if(isFunc){object.prototype[methodName]=function(){var chainAll=this.__chain__;if(chain||chainAll){var result=object(this.__wrapped__),actions=result.__actions__=copyArray(this.__actions__);actions.push({'func':func,'args':arguments,'thisArg':object});result.__chain__=chainAll;return result;}return func.apply(object,arrayPush([this.value()],arguments));};}});return object;}/**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */function noConflict(){if(root._===this){root._=oldDash;}return this;}/**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */function noop(){// No operation performed.
  }/**
       * Creates a function that gets the argument at index `n`. If `n` is negative,
       * the nth argument from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [n=0] The index of the argument to return.
       * @returns {Function} Returns the new pass-thru function.
       * @example
       *
       * var func = _.nthArg(1);
       * func('a', 'b', 'c', 'd');
       * // => 'b'
       *
       * var func = _.nthArg(-2);
       * func('a', 'b', 'c', 'd');
       * // => 'c'
       */function nthArg(n){n=toInteger(n);return baseRest(function(args){return baseNth(args,n);});}/**
       * Creates a function that invokes `iteratees` with the arguments it receives
       * and returns their results.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.over([Math.max, Math.min]);
       *
       * func(1, 2, 3, 4);
       * // => [4, 1]
       */var over=createOver(arrayMap);/**
       * Creates a function that checks if **all** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * Following shorthands are possible for providing predicates.
       * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
       * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overEvery([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => false
       *
       * func(NaN);
       * // => false
       */var overEvery=createOver(arrayEvery);/**
       * Creates a function that checks if **any** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * Following shorthands are possible for providing predicates.
       * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
       * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overSome([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => true
       *
       * func(NaN);
       * // => false
       *
       * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
       * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
       */var overSome=createOver(arraySome);/**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */function property(path){return isKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);}/**
       * The opposite of `_.property`; this method creates a function that returns
       * the value at a given path of `object`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */function propertyOf(object){return function(path){return object==null?undefined$1:baseGet(object,path);};}/**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. A step of `-1` is used if a negative
       * `start` is specified without an `end` or `step`. If `end` is not specified,
       * it's set to `start` with `start` then set to `0`.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.rangeRight
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(-4);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */var range=createRange();/**
       * This method is like `_.range` except that it populates values in
       * descending order.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.range
       * @example
       *
       * _.rangeRight(4);
       * // => [3, 2, 1, 0]
       *
       * _.rangeRight(-4);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 5);
       * // => [4, 3, 2, 1]
       *
       * _.rangeRight(0, 20, 5);
       * // => [15, 10, 5, 0]
       *
       * _.rangeRight(0, -4, -1);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.rangeRight(0);
       * // => []
       */var rangeRight=createRange(true);/**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */function stubArray(){return [];}/**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */function stubFalse(){return false;}/**
       * This method returns a new empty object.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Object} Returns the new empty object.
       * @example
       *
       * var objects = _.times(2, _.stubObject);
       *
       * console.log(objects);
       * // => [{}, {}]
       *
       * console.log(objects[0] === objects[1]);
       * // => false
       */function stubObject(){return {};}/**
       * This method returns an empty string.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {string} Returns the empty string.
       * @example
       *
       * _.times(2, _.stubString);
       * // => ['', '']
       */function stubString(){return '';}/**
       * This method returns `true`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `true`.
       * @example
       *
       * _.times(2, _.stubTrue);
       * // => [true, true]
       */function stubTrue(){return true;}/**
       * Invokes the iteratee `n` times, returning an array of the results of
       * each invocation. The iteratee is invoked with one argument; (index).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.times(3, String);
       * // => ['0', '1', '2']
       *
       *  _.times(4, _.constant(0));
       * // => [0, 0, 0, 0]
       */function times(n,iteratee){n=toInteger(n);if(n<1||n>MAX_SAFE_INTEGER){return [];}var index=MAX_ARRAY_LENGTH,length=nativeMin(n,MAX_ARRAY_LENGTH);iteratee=getIteratee(iteratee);n-=MAX_ARRAY_LENGTH;var result=baseTimes(length,iteratee);while(++index<n){iteratee(index);}return result;}/**
       * Converts `value` to a property path array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {*} value The value to convert.
       * @returns {Array} Returns the new property path array.
       * @example
       *
       * _.toPath('a.b.c');
       * // => ['a', 'b', 'c']
       *
       * _.toPath('a[0].b.c');
       * // => ['a', '0', 'b', 'c']
       */function toPath(value){if(isArray(value)){return arrayMap(value,toKey);}return isSymbol(value)?[value]:copyArray(stringToPath(toString(value)));}/**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */function uniqueId(prefix){var id=++idCounter;return toString(prefix)+id;}/*------------------------------------------------------------------------*/ /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {number} augend The first number in an addition.
       * @param {number} addend The second number in an addition.
       * @returns {number} Returns the total.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */var add=createMathOperation(function(augend,addend){return augend+addend;},0);/**
       * Computes `number` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */var ceil=createRound('ceil');/**
       * Divide two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} dividend The first number in a division.
       * @param {number} divisor The second number in a division.
       * @returns {number} Returns the quotient.
       * @example
       *
       * _.divide(6, 4);
       * // => 1.5
       */var divide=createMathOperation(function(dividend,divisor){return dividend/divisor;},1);/**
       * Computes `number` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */var floor=createRound('floor');/**
       * Computes the maximum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => undefined
       */function max(array){return array&&array.length?baseExtremum(array,identity,baseGt):undefined$1;}/**
       * This method is like `_.max` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.maxBy(objects, function(o) { return o.n; });
       * // => { 'n': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.maxBy(objects, 'n');
       * // => { 'n': 2 }
       */function maxBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseGt):undefined$1;}/**
       * Computes the mean of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the mean.
       * @example
       *
       * _.mean([4, 2, 8, 6]);
       * // => 5
       */function mean(array){return baseMean(array,identity);}/**
       * This method is like `_.mean` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be averaged.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the mean.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.meanBy(objects, function(o) { return o.n; });
       * // => 5
       *
       * // The `_.property` iteratee shorthand.
       * _.meanBy(objects, 'n');
       * // => 5
       */function meanBy(array,iteratee){return baseMean(array,getIteratee(iteratee,2));}/**
       * Computes the minimum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => undefined
       */function min(array){return array&&array.length?baseExtremum(array,identity,baseLt):undefined$1;}/**
       * This method is like `_.min` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.minBy(objects, function(o) { return o.n; });
       * // => { 'n': 1 }
       *
       * // The `_.property` iteratee shorthand.
       * _.minBy(objects, 'n');
       * // => { 'n': 1 }
       */function minBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseLt):undefined$1;}/**
       * Multiply two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} multiplier The first number in a multiplication.
       * @param {number} multiplicand The second number in a multiplication.
       * @returns {number} Returns the product.
       * @example
       *
       * _.multiply(6, 4);
       * // => 24
       */var multiply=createMathOperation(function(multiplier,multiplicand){return multiplier*multiplicand;},1);/**
       * Computes `number` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */var round=createRound('round');/**
       * Subtract two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {number} minuend The first number in a subtraction.
       * @param {number} subtrahend The second number in a subtraction.
       * @returns {number} Returns the difference.
       * @example
       *
       * _.subtract(6, 4);
       * // => 2
       */var subtract=createMathOperation(function(minuend,subtrahend){return minuend-subtrahend;},0);/**
       * Computes the sum of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 2, 8, 6]);
       * // => 20
       */function sum(array){return array&&array.length?baseSum(array,identity):0;}/**
       * This method is like `_.sum` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be summed.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the sum.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.sumBy(objects, function(o) { return o.n; });
       * // => 20
       *
       * // The `_.property` iteratee shorthand.
       * _.sumBy(objects, 'n');
       * // => 20
       */function sumBy(array,iteratee){return array&&array.length?baseSum(array,getIteratee(iteratee,2)):0;}/*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.
  lodash.after=after;lodash.ary=ary;lodash.assign=assign;lodash.assignIn=assignIn;lodash.assignInWith=assignInWith;lodash.assignWith=assignWith;lodash.at=at;lodash.before=before;lodash.bind=bind;lodash.bindAll=bindAll;lodash.bindKey=bindKey;lodash.castArray=castArray;lodash.chain=chain;lodash.chunk=chunk;lodash.compact=compact;lodash.concat=concat;lodash.cond=cond;lodash.conforms=conforms;lodash.constant=constant;lodash.countBy=countBy;lodash.create=create;lodash.curry=curry;lodash.curryRight=curryRight;lodash.debounce=debounce;lodash.defaults=defaults;lodash.defaultsDeep=defaultsDeep;lodash.defer=defer;lodash.delay=delay;lodash.difference=difference;lodash.differenceBy=differenceBy;lodash.differenceWith=differenceWith;lodash.drop=drop;lodash.dropRight=dropRight;lodash.dropRightWhile=dropRightWhile;lodash.dropWhile=dropWhile;lodash.fill=fill;lodash.filter=filter;lodash.flatMap=flatMap;lodash.flatMapDeep=flatMapDeep;lodash.flatMapDepth=flatMapDepth;lodash.flatten=flatten;lodash.flattenDeep=flattenDeep;lodash.flattenDepth=flattenDepth;lodash.flip=flip;lodash.flow=flow;lodash.flowRight=flowRight;lodash.fromPairs=fromPairs;lodash.functions=functions;lodash.functionsIn=functionsIn;lodash.groupBy=groupBy;lodash.initial=initial;lodash.intersection=intersection;lodash.intersectionBy=intersectionBy;lodash.intersectionWith=intersectionWith;lodash.invert=invert;lodash.invertBy=invertBy;lodash.invokeMap=invokeMap;lodash.iteratee=iteratee;lodash.keyBy=keyBy;lodash.keys=keys;lodash.keysIn=keysIn;lodash.map=map;lodash.mapKeys=mapKeys;lodash.mapValues=mapValues;lodash.matches=matches;lodash.matchesProperty=matchesProperty;lodash.memoize=memoize;lodash.merge=merge;lodash.mergeWith=mergeWith;lodash.method=method;lodash.methodOf=methodOf;lodash.mixin=mixin;lodash.negate=negate;lodash.nthArg=nthArg;lodash.omit=omit;lodash.omitBy=omitBy;lodash.once=once;lodash.orderBy=orderBy;lodash.over=over;lodash.overArgs=overArgs;lodash.overEvery=overEvery;lodash.overSome=overSome;lodash.partial=partial;lodash.partialRight=partialRight;lodash.partition=partition;lodash.pick=pick;lodash.pickBy=pickBy;lodash.property=property;lodash.propertyOf=propertyOf;lodash.pull=pull;lodash.pullAll=pullAll;lodash.pullAllBy=pullAllBy;lodash.pullAllWith=pullAllWith;lodash.pullAt=pullAt;lodash.range=range;lodash.rangeRight=rangeRight;lodash.rearg=rearg;lodash.reject=reject;lodash.remove=remove;lodash.rest=rest;lodash.reverse=reverse;lodash.sampleSize=sampleSize;lodash.set=set;lodash.setWith=setWith;lodash.shuffle=shuffle;lodash.slice=slice;lodash.sortBy=sortBy;lodash.sortedUniq=sortedUniq;lodash.sortedUniqBy=sortedUniqBy;lodash.split=split;lodash.spread=spread;lodash.tail=tail;lodash.take=take;lodash.takeRight=takeRight;lodash.takeRightWhile=takeRightWhile;lodash.takeWhile=takeWhile;lodash.tap=tap;lodash.throttle=throttle;lodash.thru=thru;lodash.toArray=toArray;lodash.toPairs=toPairs;lodash.toPairsIn=toPairsIn;lodash.toPath=toPath;lodash.toPlainObject=toPlainObject;lodash.transform=transform;lodash.unary=unary;lodash.union=union;lodash.unionBy=unionBy;lodash.unionWith=unionWith;lodash.uniq=uniq;lodash.uniqBy=uniqBy;lodash.uniqWith=uniqWith;lodash.unset=unset;lodash.unzip=unzip;lodash.unzipWith=unzipWith;lodash.update=update;lodash.updateWith=updateWith;lodash.values=values;lodash.valuesIn=valuesIn;lodash.without=without;lodash.words=words;lodash.wrap=wrap;lodash.xor=xor;lodash.xorBy=xorBy;lodash.xorWith=xorWith;lodash.zip=zip;lodash.zipObject=zipObject;lodash.zipObjectDeep=zipObjectDeep;lodash.zipWith=zipWith;// Add aliases.
  lodash.entries=toPairs;lodash.entriesIn=toPairsIn;lodash.extend=assignIn;lodash.extendWith=assignInWith;// Add methods to `lodash.prototype`.
  mixin(lodash,lodash);/*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.
  lodash.add=add;lodash.attempt=attempt;lodash.camelCase=camelCase;lodash.capitalize=capitalize;lodash.ceil=ceil;lodash.clamp=clamp;lodash.clone=clone;lodash.cloneDeep=cloneDeep;lodash.cloneDeepWith=cloneDeepWith;lodash.cloneWith=cloneWith;lodash.conformsTo=conformsTo;lodash.deburr=deburr;lodash.defaultTo=defaultTo;lodash.divide=divide;lodash.endsWith=endsWith;lodash.eq=eq;lodash.escape=escape;lodash.escapeRegExp=escapeRegExp;lodash.every=every;lodash.find=find;lodash.findIndex=findIndex;lodash.findKey=findKey;lodash.findLast=findLast;lodash.findLastIndex=findLastIndex;lodash.findLastKey=findLastKey;lodash.floor=floor;lodash.forEach=forEach;lodash.forEachRight=forEachRight;lodash.forIn=forIn;lodash.forInRight=forInRight;lodash.forOwn=forOwn;lodash.forOwnRight=forOwnRight;lodash.get=get;lodash.gt=gt;lodash.gte=gte;lodash.has=has;lodash.hasIn=hasIn;lodash.head=head;lodash.identity=identity;lodash.includes=includes;lodash.indexOf=indexOf;lodash.inRange=inRange;lodash.invoke=invoke;lodash.isArguments=isArguments;lodash.isArray=isArray;lodash.isArrayBuffer=isArrayBuffer;lodash.isArrayLike=isArrayLike;lodash.isArrayLikeObject=isArrayLikeObject;lodash.isBoolean=isBoolean;lodash.isBuffer=isBuffer;lodash.isDate=isDate;lodash.isElement=isElement;lodash.isEmpty=isEmpty;lodash.isEqual=isEqual;lodash.isEqualWith=isEqualWith;lodash.isError=isError;lodash.isFinite=isFinite;lodash.isFunction=isFunction;lodash.isInteger=isInteger;lodash.isLength=isLength;lodash.isMap=isMap;lodash.isMatch=isMatch;lodash.isMatchWith=isMatchWith;lodash.isNaN=isNaN;lodash.isNative=isNative;lodash.isNil=isNil;lodash.isNull=isNull;lodash.isNumber=isNumber;lodash.isObject=isObject;lodash.isObjectLike=isObjectLike;lodash.isPlainObject=isPlainObject;lodash.isRegExp=isRegExp;lodash.isSafeInteger=isSafeInteger;lodash.isSet=isSet;lodash.isString=isString;lodash.isSymbol=isSymbol;lodash.isTypedArray=isTypedArray;lodash.isUndefined=isUndefined;lodash.isWeakMap=isWeakMap;lodash.isWeakSet=isWeakSet;lodash.join=join;lodash.kebabCase=kebabCase;lodash.last=last;lodash.lastIndexOf=lastIndexOf;lodash.lowerCase=lowerCase;lodash.lowerFirst=lowerFirst;lodash.lt=lt;lodash.lte=lte;lodash.max=max;lodash.maxBy=maxBy;lodash.mean=mean;lodash.meanBy=meanBy;lodash.min=min;lodash.minBy=minBy;lodash.stubArray=stubArray;lodash.stubFalse=stubFalse;lodash.stubObject=stubObject;lodash.stubString=stubString;lodash.stubTrue=stubTrue;lodash.multiply=multiply;lodash.nth=nth;lodash.noConflict=noConflict;lodash.noop=noop;lodash.now=now;lodash.pad=pad;lodash.padEnd=padEnd;lodash.padStart=padStart;lodash.parseInt=parseInt;lodash.random=random;lodash.reduce=reduce;lodash.reduceRight=reduceRight;lodash.repeat=repeat;lodash.replace=replace;lodash.result=result;lodash.round=round;lodash.runInContext=runInContext;lodash.sample=sample;lodash.size=size;lodash.snakeCase=snakeCase;lodash.some=some;lodash.sortedIndex=sortedIndex;lodash.sortedIndexBy=sortedIndexBy;lodash.sortedIndexOf=sortedIndexOf;lodash.sortedLastIndex=sortedLastIndex;lodash.sortedLastIndexBy=sortedLastIndexBy;lodash.sortedLastIndexOf=sortedLastIndexOf;lodash.startCase=startCase;lodash.startsWith=startsWith;lodash.subtract=subtract;lodash.sum=sum;lodash.sumBy=sumBy;lodash.template=template;lodash.times=times;lodash.toFinite=toFinite;lodash.toInteger=toInteger;lodash.toLength=toLength;lodash.toLower=toLower;lodash.toNumber=toNumber;lodash.toSafeInteger=toSafeInteger;lodash.toString=toString;lodash.toUpper=toUpper;lodash.trim=trim;lodash.trimEnd=trimEnd;lodash.trimStart=trimStart;lodash.truncate=truncate;lodash.unescape=unescape;lodash.uniqueId=uniqueId;lodash.upperCase=upperCase;lodash.upperFirst=upperFirst;// Add aliases.
  lodash.each=forEach;lodash.eachRight=forEachRight;lodash.first=head;mixin(lodash,function(){var source={};baseForOwn(lodash,function(func,methodName){if(!hasOwnProperty.call(lodash.prototype,methodName)){source[methodName]=func;}});return source;}(),{'chain':false});/*------------------------------------------------------------------------*/ /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type {string}
       */lodash.VERSION=VERSION;// Assign default placeholders.
  arrayEach(['bind','bindKey','curry','curryRight','partial','partialRight'],function(methodName){lodash[methodName].placeholder=lodash;});// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
  arrayEach(['drop','take'],function(methodName,index){LazyWrapper.prototype[methodName]=function(n){n=n===undefined$1?1:nativeMax(toInteger(n),0);var result=this.__filtered__&&!index?new LazyWrapper(this):this.clone();if(result.__filtered__){result.__takeCount__=nativeMin(n,result.__takeCount__);}else {result.__views__.push({'size':nativeMin(n,MAX_ARRAY_LENGTH),'type':methodName+(result.__dir__<0?'Right':'')});}return result;};LazyWrapper.prototype[methodName+'Right']=function(n){return this.reverse()[methodName](n).reverse();};});// Add `LazyWrapper` methods that accept an `iteratee` value.
  arrayEach(['filter','map','takeWhile'],function(methodName,index){var type=index+1,isFilter=type==LAZY_FILTER_FLAG||type==LAZY_WHILE_FLAG;LazyWrapper.prototype[methodName]=function(iteratee){var result=this.clone();result.__iteratees__.push({'iteratee':getIteratee(iteratee,3),'type':type});result.__filtered__=result.__filtered__||isFilter;return result;};});// Add `LazyWrapper` methods for `_.head` and `_.last`.
  arrayEach(['head','last'],function(methodName,index){var takeName='take'+(index?'Right':'');LazyWrapper.prototype[methodName]=function(){return this[takeName](1).value()[0];};});// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
  arrayEach(['initial','tail'],function(methodName,index){var dropName='drop'+(index?'':'Right');LazyWrapper.prototype[methodName]=function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1);};});LazyWrapper.prototype.compact=function(){return this.filter(identity);};LazyWrapper.prototype.find=function(predicate){return this.filter(predicate).head();};LazyWrapper.prototype.findLast=function(predicate){return this.reverse().find(predicate);};LazyWrapper.prototype.invokeMap=baseRest(function(path,args){if(typeof path=='function'){return new LazyWrapper(this);}return this.map(function(value){return baseInvoke(value,path,args);});});LazyWrapper.prototype.reject=function(predicate){return this.filter(negate(getIteratee(predicate)));};LazyWrapper.prototype.slice=function(start,end){start=toInteger(start);var result=this;if(result.__filtered__&&(start>0||end<0)){return new LazyWrapper(result);}if(start<0){result=result.takeRight(-start);}else if(start){result=result.drop(start);}if(end!==undefined$1){end=toInteger(end);result=end<0?result.dropRight(-end):result.take(end-start);}return result;};LazyWrapper.prototype.takeRightWhile=function(predicate){return this.reverse().takeWhile(predicate).reverse();};LazyWrapper.prototype.toArray=function(){return this.take(MAX_ARRAY_LENGTH);};// Add `LazyWrapper` methods to `lodash.prototype`.
  baseForOwn(LazyWrapper.prototype,function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?'take'+(methodName=='last'?'Right':''):methodName],retUnwrapped=isTaker||/^find/.test(methodName);if(!lodashFunc){return;}lodash.prototype[methodName]=function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy||isArray(value);var interceptor=function interceptor(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker&&chainAll?result[0]:result;};if(useLazy&&checkIteratee&&typeof iteratee=='function'&&iteratee.length!=1){// Avoid lazy use if the iteratee has a "length" value other than `1`.
  isLazy=useLazy=false;}var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped&&!chainAll,onlyLazy=isLazy&&!isHybrid;if(!retUnwrapped&&useLazy){value=onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);result.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined$1});return new LodashWrapper(result,chainAll);}if(isUnwrapped&&onlyLazy){return func.apply(this,args);}result=this.thru(interceptor);return isUnwrapped?isTaker?result.value()[0]:result.value():result;};});// Add `Array` methods to `lodash.prototype`.
  arrayEach(['pop','push','shift','sort','splice','unshift'],function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?'tap':'thru',retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName]=function(){var args=arguments;if(retUnwrapped&&!this.__chain__){var value=this.value();return func.apply(isArray(value)?value:[],args);}return this[chainName](function(value){return func.apply(isArray(value)?value:[],args);});};});// Map minified method names to their real names.
  baseForOwn(LazyWrapper.prototype,function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name+'';if(!hasOwnProperty.call(realNames,key)){realNames[key]=[];}realNames[key].push({'name':methodName,'func':lodashFunc});}});realNames[createHybrid(undefined$1,WRAP_BIND_KEY_FLAG).name]=[{'name':'wrapper','func':undefined$1}];// Add methods to `LazyWrapper`.
  LazyWrapper.prototype.clone=lazyClone;LazyWrapper.prototype.reverse=lazyReverse;LazyWrapper.prototype.value=lazyValue;// Add chain sequence methods to the `lodash` wrapper.
  lodash.prototype.at=wrapperAt;lodash.prototype.chain=wrapperChain;lodash.prototype.commit=wrapperCommit;lodash.prototype.next=wrapperNext;lodash.prototype.plant=wrapperPlant;lodash.prototype.reverse=wrapperReverse;lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=wrapperValue;// Add lazy aliases.
  lodash.prototype.first=lodash.prototype.head;if(symIterator){lodash.prototype[symIterator]=wrapperToIterator;}return lodash;};/*--------------------------------------------------------------------------*/ // Export lodash.
  var _=runInContext();// Some AMD build optimizers, like r.js, check for condition patterns like:
  if(freeModule){// Export for Node.js.
  (freeModule.exports=_)._=_;// Export for CommonJS support.
  freeExports._=_;}else {// Export to the global object.
  root._=_;}}).call(commonjsGlobal);})(lodash,lodash.exports);

  function usePersistFn(fn) {
    var fnRef = React.useRef(fn);
    fnRef.current = fn;
    var persistFn = React.useRef();

    if (!persistFn.current) {
      persistFn.current = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return fnRef.current.apply(this, args);
      };
    }

    return persistFn.current;
  }

  var useDebounce = function useDebounce(func, delay, options) {
    var callback = usePersistFn(func);
    var debounced = React.useCallback(lodash.exports.debounce(callback, delay, options), [callback, delay, options]);
    React.useEffect(function () {
      return debounced.cancel;
    }, [debounced]);
    return debounced;
  };

  function ownKeys$21(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$20(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$21(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$21(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getColumnFixedStyles(col, index, rowAndColFixedPosition, tableColFixedClasses) {
    var _thClasses;

    var fixedPos = rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(col.colKey || index);
    if (!fixedPos) return {};
    var thClasses = (_thClasses = {}, _defineProperty$3(_thClasses, tableColFixedClasses.left, col.fixed === "left"), _defineProperty$3(_thClasses, tableColFixedClasses.right, col.fixed === "right"), _defineProperty$3(_thClasses, tableColFixedClasses.lastLeft, col.fixed === "left" && fixedPos.lastLeftFixedCol), _defineProperty$3(_thClasses, tableColFixedClasses.firstRight, col.fixed === "right" && fixedPos.firstRightFixedCol), _thClasses);
    var thStyles = {
      left: col.fixed === "left" ? "".concat(fixedPos.left, "px") : void 0,
      right: col.fixed === "right" ? "".concat(fixedPos.right, "px") : void 0
    };
    return {
      style: thStyles,
      classes: thClasses
    };
  }
  function getRowFixedStyles(rowId, rowIndex, rowLength, fixedRows, rowAndColFixedPosition, tableRowFixedClasses) {
    var _rowClasses;

    if (!fixedRows || !fixedRows.length) return {
      style: void 0,
      classes: void 0
    };
    var fixedTop = rowIndex < fixedRows[0];
    var fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];
    var firstFixedBottomRow = rowLength - fixedRows[1];
    var fixedPos = (rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(rowId)) || {};
    var rowClasses = (_rowClasses = {}, _defineProperty$3(_rowClasses, tableRowFixedClasses.top, fixedTop), _defineProperty$3(_rowClasses, tableRowFixedClasses.bottom, fixedBottom), _defineProperty$3(_rowClasses, tableRowFixedClasses.firstBottom, rowIndex === firstFixedBottomRow), _defineProperty$3(_rowClasses, tableRowFixedClasses.withoutBorderBottom, rowIndex === firstFixedBottomRow - 1), _rowClasses);
    var rowStyles = {
      top: fixedTop ? "".concat(fixedPos.top, "px") : void 0,
      bottom: fixedBottom ? "".concat(fixedPos.bottom, "px") : void 0
    };
    return {
      style: rowStyles,
      classes: rowClasses
    };
  }
  function useFixed(props, finalColumns) {
    var _props$scroll2;

    var columns = props.columns,
        tableLayout = props.tableLayout,
        tableContentWidth = props.tableContentWidth,
        fixedRows = props.fixedRows,
        firstFullRow = props.firstFullRow,
        lastFullRow = props.lastFullRow,
        maxHeight = props.maxHeight,
        headerAffixedTop = props.headerAffixedTop,
        bordered = props.bordered;

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        data = _useState2[0],
        setData = _useState2[1];

    var tableContentRef = React.useRef();

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isFixedHeader = _useState4[0],
        setIsFixedHeader = _useState4[1];

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        isWidthOverflow = _useState6[0],
        setIsWidthOverflow = _useState6[1];

    var tableElmRef = React.useRef();

    var _useState7 = React.useState(6),
        _useState8 = _slicedToArray(_useState7, 2),
        scrollbarWidth = _useState8[0],
        setScrollbarWidth = _useState8[1];

    var _useState9 = React.useState( /* @__PURE__ */new Map()),
        _useState10 = _slicedToArray(_useState9, 2),
        rowAndColFixedPosition = _useState10[0],
        setRowAndColFixedPosition = _useState10[1];

    var _useState11 = React.useState({
      left: false,
      right: false
    }),
        _useState12 = _slicedToArray(_useState11, 2),
        showColumnShadow = _useState12[0],
        setShowColumnShadow = _useState12[1];

    var _useState13 = React.useState({
      left: 0,
      top: 0
    }),
        _useState14 = _slicedToArray(_useState13, 2),
        virtualScrollHeaderPos = _useState14[0],
        setVirtualScrollHeaderPos = _useState14[1];

    var tableWidth = React.useRef(0);
    var tableElmWidth = React.useRef(0);
    var thWidthList = React.useRef({});

    var _useState15 = React.useState(false),
        _useState16 = _slicedToArray(_useState15, 2),
        isFixedColumn = _useState16[0],
        setIsFixedColumn = _useState16[1];

    var columnResizable = React.useMemo(function () {
      return props.resizable || false;
    }, [props.resizable]);
    var notNeedThWidthList = React.useMemo(function () {
      var _props$scroll;

      return !(props.headerAffixedTop || props.footerAffixedBottom || props.horizontalScrollAffixedBottom || ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual");
    }, [props.footerAffixedBottom, props.headerAffixedTop, props.horizontalScrollAffixedBottom, (_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.type]);
    var recalculateColWidth = React.useRef(null);

    function setUseFixedTableElmRef(val) {
      tableElmRef.current = val;
    }

    function setRecalculateColWidthFuncRef(val) {
      recalculateColWidth.current = val;
    }

    function getColumnMap(columns2) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Map();
      var levelNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var parent = arguments.length > 4 ? arguments[4] : undefined;

      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children;

        var col = columns2[i];

        if (["left", "right"].includes(col.fixed)) {
          setIsFixedColumn(true);
        }

        var key = col.colKey || i;
        var columnInfo = {
          col: col,
          parent: parent,
          index: i
        };
        map.set(key, columnInfo);

        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);
        }

        if (levelNodes[level]) {
          levelNodes[level].push(columnInfo);
        } else {
          levelNodes[level] = [columnInfo];
        }
      }

      return {
        newColumnsMap: map,
        levelNodes: levelNodes
      };
    }

    var setFixedLeftPos = function setFixedLeftPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children2;

        var col = columns2[i];
        if (col.fixed === "right") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i - 1;

        while (lastColIndex >= 0 && columns2[lastColIndex].fixed !== "left") {
          lastColIndex -= 1;
        }

        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === 0 ? (parent === null || parent === void 0 ? void 0 : parent.left) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i - 1);
        colInfo.left = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.left) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);

        if ((_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          setFixedLeftPos(col.children, initialColumnMap, colInfo);
        }
      }
    };

    var setFixedRightPos = function setFixedRightPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      for (var i = columns2.length - 1; i >= 0; i--) {
        var _col$children3;

        var col = columns2[i];
        if (col.fixed === "left") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i + 1;

        while (lastColIndex < columns2.length && columns2[lastColIndex].fixed !== "right") {
          lastColIndex += 1;
        }

        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === columns2.length - 1 ? (parent === null || parent === void 0 ? void 0 : parent.right) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i + 1);
        colInfo.right = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.right) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);

        if ((_col$children3 = col.children) !== null && _col$children3 !== void 0 && _col$children3.length) {
          setFixedRightPos(col.children, initialColumnMap, colInfo);
        }
      }
    };

    var setFixedColPosition = function setFixedColPosition(trList, initialColumnMap) {
      if (!trList) return;

      for (var i = 0, len = trList.length; i < len; i++) {
        var thList = trList[i].children;

        for (var j = 0, thLen = thList.length; j < thLen; j++) {
          var _obj$col;

          var th = thList[j];
          var colKey = th.dataset.colkey;

          if (!colKey) {
            log.warn("TDesign Table", "".concat(th.innerText, " missing colKey. colKey is required for fixed column feature."));
          }

          var obj = initialColumnMap.get(colKey || j);

          if (obj !== null && obj !== void 0 && (_obj$col = obj.col) !== null && _obj$col !== void 0 && _obj$col.fixed) {
            var _th$getBoundingClient;

            initialColumnMap.set(colKey, _objectSpread$20(_objectSpread$20({}, obj), {}, {
              width: th === null || th === void 0 ? void 0 : (_th$getBoundingClient = th.getBoundingClientRect) === null || _th$getBoundingClient === void 0 ? void 0 : _th$getBoundingClient.call(th).width
            }));
          }
        }
      }

      setFixedLeftPos(columns, initialColumnMap);
      setFixedRightPos(columns, initialColumnMap);
    };

    var setFixedRowPosition = function setFixedRowPosition(trList, initialColumnMap, thead, tfoot) {
      var _ref = fixedRows || [],
          _ref2 = _slicedToArray(_ref, 2),
          fixedTopRows = _ref2[0],
          fixedBottomRows = _ref2[1];

      var data2 = props.data,
          _props$rowKey = props.rowKey,
          rowKey = _props$rowKey === void 0 ? "id" : _props$rowKey;

      for (var i = 0; i < fixedTopRows; i++) {
        var _tr$getBoundingClient;

        var tr = trList[i];
        var rowId = get_1(data2[i], rowKey);
        var thisRowInfo = initialColumnMap.get(rowId) || {};
        var lastRowId = get_1(data2[i - 1], rowKey);
        var lastRowInfo = initialColumnMap.get(lastRowId) || {};
        var defaultBottom = 0;

        if (i === 0) {
          var _thead$getBoundingCli;

          defaultBottom = (thead === null || thead === void 0 ? void 0 : (_thead$getBoundingCli = thead.getBoundingClientRect) === null || _thead$getBoundingCli === void 0 ? void 0 : _thead$getBoundingCli.call(thead).height) || 0;
        }

        thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);
        initialColumnMap.set(rowId, _objectSpread$20(_objectSpread$20({}, thisRowInfo), {}, {
          height: tr === null || tr === void 0 ? void 0 : (_tr$getBoundingClient = tr.getBoundingClientRect) === null || _tr$getBoundingClient === void 0 ? void 0 : _tr$getBoundingClient.call(tr).height
        }));
      }

      for (var _i = data2.length - 1; _i >= data2.length - fixedBottomRows; _i--) {
        var _tr$getBoundingClient2;

        var _tr = trList[_i];

        var _rowId = get_1(data2[_i], rowKey);

        var _thisRowInfo = initialColumnMap.get(_rowId) || {};

        var _lastRowId = get_1(data2[_i + 1], rowKey);

        var _lastRowInfo = initialColumnMap.get(_lastRowId) || {};

        var _defaultBottom = 0;

        if (_i === data2.length - 1) {
          var _tfoot$getBoundingCli;

          _defaultBottom = (tfoot === null || tfoot === void 0 ? void 0 : (_tfoot$getBoundingCli = tfoot.getBoundingClientRect) === null || _tfoot$getBoundingCli === void 0 ? void 0 : _tfoot$getBoundingCli.call(tfoot).height) || 0;
        }

        _thisRowInfo.bottom = (_lastRowInfo.bottom || _defaultBottom) + (_lastRowInfo.height || 0);
        initialColumnMap.set(_rowId, _objectSpread$20(_objectSpread$20({}, _thisRowInfo), {}, {
          height: _tr === null || _tr === void 0 ? void 0 : (_tr$getBoundingClient2 = _tr.getBoundingClientRect) === null || _tr$getBoundingClient2 === void 0 ? void 0 : _tr$getBoundingClient2.call(_tr).height
        }));
      }
    };

    var updateRowAndColFixedPosition = function updateRowAndColFixedPosition(tableContentElm, initialColumnMap) {
      rowAndColFixedPosition.clear();
      if (!tableContentElm) return;
      var thead = tableContentElm.querySelector("thead");
      thead && setFixedColPosition(thead.children, initialColumnMap);
      var tbody = tableContentElm.querySelector("tbody");
      var tfoot = tableContentElm.querySelector("tfoot");
      tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);
      setRowAndColFixedPosition(initialColumnMap);
    };

    var shadowLastScrollLeft;

    var updateColumnFixedShadow = function updateColumnFixedShadow(target, extra) {
      if (!isFixedColumn || !target) return;
      var scrollLeft = target.scrollLeft;
      if (shadowLastScrollLeft === scrollLeft && (!extra || !extra.skipScrollLimit)) return;
      shadowLastScrollLeft = scrollLeft;
      var isShowRight = target.clientWidth + scrollLeft < target.scrollWidth;
      setShowColumnShadow({
        left: scrollLeft > 0,
        right: isShowRight
      });
    };

    var setIsLastOrFirstFixedCol = function setIsLastOrFirstFixedCol(levelNodes) {
      for (var t = 0; t < levelNodes.length; t++) {
        var nodes = levelNodes[t];

        for (var i = 0, len = nodes.length; i < len; i++) {
          var colMapInfo = nodes[i];
          var nextColMapInfo = nodes[i + 1];
          var parent = colMapInfo.parent;
          var isParentLastLeftFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.lastLeftFixedCol);

          if (isParentLastLeftFixedCol && colMapInfo.col.fixed === "left" && (nextColMapInfo === null || nextColMapInfo === void 0 ? void 0 : nextColMapInfo.col.fixed) !== "left") {
            colMapInfo.lastLeftFixedCol = true;
          }

          var lastColMapInfo = nodes[i - 1];
          var isParentFirstRightFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.firstRightFixedCol);

          if (isParentFirstRightFixedCol && colMapInfo.col.fixed === "right" && (lastColMapInfo === null || lastColMapInfo === void 0 ? void 0 : lastColMapInfo.col.fixed) !== "right") {
            colMapInfo.firstRightFixedCol = true;
          }
        }
      }
    };

    var updateFixedStatus = function updateFixedStatus() {
      var _getColumnMap = getColumnMap(columns),
          newColumnsMap = _getColumnMap.newColumnsMap,
          levelNodes = _getColumnMap.levelNodes;

      setIsLastOrFirstFixedCol(levelNodes);
      var timer = setTimeout(function () {
        if (isFixedColumn || fixedRows !== null && fixedRows !== void 0 && fixedRows.length) {
          updateRowAndColFixedPosition(tableContentRef.current, newColumnsMap);
        }

        clearTimeout(timer);
      }, 0);
      return function () {
        clearTimeout(timer);
      };
    };

    var updateFixedHeader = function updateFixedHeader() {
      var timer = setTimeout(function () {
        var _tRef$getBoundingClie;

        var tRef = tableContentRef === null || tableContentRef === void 0 ? void 0 : tableContentRef.current;
        if (!tRef) return;
        setIsFixedHeader(tRef.scrollHeight > tRef.clientHeight);
        setIsWidthOverflow(tRef.scrollWidth > tRef.clientWidth);
        var pos = tRef === null || tRef === void 0 ? void 0 : (_tRef$getBoundingClie = tRef.getBoundingClientRect) === null || _tRef$getBoundingClie === void 0 ? void 0 : _tRef$getBoundingClie.call(tRef);
        setVirtualScrollHeaderPos({
          top: pos === null || pos === void 0 ? void 0 : pos.top,
          left: pos === null || pos === void 0 ? void 0 : pos.left
        });
        clearTimeout(timer);
      }, 0);
    };

    var updateTableWidth = function updateTableWidth() {
      var _tableContentRef$curr, _tableContentRef$curr2, _tableElmRef$current;

      var rect = (_tableContentRef$curr = tableContentRef.current) === null || _tableContentRef$curr === void 0 ? void 0 : (_tableContentRef$curr2 = _tableContentRef$curr.getBoundingClientRect) === null || _tableContentRef$curr2 === void 0 ? void 0 : _tableContentRef$curr2.call(_tableContentRef$curr);
      if (!rect) return;
      var reduceWidth = isFixedHeader ? scrollbarWidth : 0;
      tableWidth.current = rect.width - reduceWidth - (props.bordered ? 1 : 0);
      var elmRect = tableElmRef === null || tableElmRef === void 0 ? void 0 : (_tableElmRef$current = tableElmRef.current) === null || _tableElmRef$current === void 0 ? void 0 : _tableElmRef$current.getBoundingClientRect();
      tableElmWidth.current = elmRect === null || elmRect === void 0 ? void 0 : elmRect.width;
    };

    var updateThWidthList = function updateThWidthList(trList) {
      if (trList instanceof HTMLCollection) {
        if (columnResizable) return;
        var widthMap = {};

        for (var i = 0, len = trList.length; i < len; i++) {
          var thList = trList[i].children;

          for (var j = 0, thLen = thList.length; j < thLen; j++) {
            var _th$getBoundingClient2;

            var th = thList[j];
            var colKey = th.dataset.colkey;
            widthMap[colKey] = th === null || th === void 0 ? void 0 : (_th$getBoundingClient2 = th.getBoundingClientRect) === null || _th$getBoundingClient2 === void 0 ? void 0 : _th$getBoundingClient2.call(th).width;
          }
        }

        thWidthList.current = widthMap;
      } else {
        Object.entries(trList).forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              colKey = _ref4[0],
              width = _ref4[1];

          thWidthList.current[colKey] = width;
        });
      }
    };

    var updateThWidthListHandler = function updateThWidthListHandler() {
      if (columnResizable && recalculateColWidth.current) {
        recalculateColWidth.current(finalColumns, thWidthList.current, tableLayout, tableElmWidth.current);
      }

      if (notNeedThWidthList) return;
      var timer = setTimeout(function () {
        var _tableContentRef$curr3;

        updateTableWidth();
        var thead = (_tableContentRef$curr3 = tableContentRef.current) === null || _tableContentRef$curr3 === void 0 ? void 0 : _tableContentRef$curr3.querySelector("thead");
        if (!thead) return;
        updateThWidthList(thead.children);
        clearTimeout(timer);
      }, 0);
    };

    var resetThWidthList = function resetThWidthList() {
      thWidthList.current = {};
    };

    var emitScrollEvent = function emitScrollEvent(e) {
      var _props$onScrollX, _props$onScrollY, _props$onScroll;

      (_props$onScrollX = props.onScrollX) === null || _props$onScrollX === void 0 ? void 0 : _props$onScrollX.call(props, {
        e: e
      });
      (_props$onScrollY = props.onScrollY) === null || _props$onScrollY === void 0 ? void 0 : _props$onScrollY.call(props, {
        e: e
      });
      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 ? void 0 : _props$onScroll.call(props, {
        e: e
      });
    };

    var getThWidthList = function getThWidthList() {
      return thWidthList.current || {};
    };

    React.useEffect(updateFixedStatus, [data, columns, bordered, tableLayout, tableContentWidth, isFixedHeader, isWidthOverflow, isFixedColumn, fixedRows, firstFullRow, lastFullRow, tableContentRef]);
    React.useEffect(function () {
      var timer = setTimeout(function () {
        if (isFixedColumn) {
          updateColumnFixedShadow(tableContentRef.current);
        }

        clearTimeout(timer);
      }, 0);
    }, [isFixedColumn, columns, tableContentRef]);
    React.useEffect(updateFixedHeader, [maxHeight, data, columns, bordered, tableContentRef]);
    React.useEffect(function () {
      resetThWidthList();

      if (columnResizable) {
        recalculateColWidth.current(finalColumns, thWidthList.current, tableLayout, tableElmWidth.current);
      }
    }, [finalColumns]);
    React.useEffect(updateThWidthListHandler, [data, columns, bordered, tableLayout, fixedRows, isFixedHeader, headerAffixedTop, tableContentWidth, notNeedThWidthList, tableContentRef]);
    var refreshTable = useDebounce(function () {
      updateTableWidth();
      updateFixedHeader();
      updateThWidthListHandler();

      if (isFixedColumn || isFixedHeader) {
        updateFixedStatus();
        updateColumnFixedShadow(tableContentRef.current, {
          skipScrollLimit: true
        });
      }
    }, 30);
    var onResize = refreshTable;

    function addTableResizeObserver(tableElement) {
      if (getIEVersion() < 11 || typeof window.ResizeObserver === "undefined") return;
      off$1(window, "resize", onResize);
      var resizeObserver = new window.ResizeObserver(function () {
        refreshTable();
      });
      resizeObserver.observe(tableElement);
      return function () {
        resizeObserver.unobserve(tableElement);
        resizeObserver.disconnect();
      };
    }

    React.useEffect(function () {
      var scrollWidth = getScrollbarWidth$1();
      setScrollbarWidth(scrollWidth);
      var isWatchResize = isFixedColumn || isFixedHeader || !notNeedThWidthList || !data.length;
      var timer = setTimeout(function () {
        updateTableWidth();

        if (columnResizable && recalculateColWidth.current) {
          recalculateColWidth.current(finalColumns, thWidthList.current, tableLayout, tableElmWidth.current);
        }

        if (isWatchResize && getIEVersion() < 11 || typeof window.ResizeObserver === "undefined") {
          on$1(window, "resize", onResize);
        }

        clearTimeout(timer);
      });
      return function () {
        if (isWatchResize && getIEVersion() < 11 || typeof window.ResizeObserver === "undefined") {
          off$1(window, "resize", onResize);
        }

        clearTimeout(timer);
      };
    }, [isFixedColumn]);
    return {
      tableWidth: tableWidth,
      tableElmWidth: tableElmWidth,
      thWidthList: thWidthList,
      isFixedHeader: isFixedHeader,
      isWidthOverflow: isWidthOverflow,
      tableContentRef: tableContentRef,
      isFixedColumn: isFixedColumn,
      showColumnShadow: showColumnShadow,
      rowAndColFixedPosition: rowAndColFixedPosition,
      virtualScrollHeaderPos: virtualScrollHeaderPos,
      scrollbarWidth: scrollbarWidth,
      setData: setData,
      refreshTable: refreshTable,
      emitScrollEvent: emitScrollEvent,
      updateThWidthListHandler: updateThWidthListHandler,
      updateColumnFixedShadow: updateColumnFixedShadow,
      setUseFixedTableElmRef: setUseFixedTableElmRef,
      getThWidthList: getThWidthList,
      updateThWidthList: updateThWidthList,
      setRecalculateColWidthFuncRef: setRecalculateColWidthFuncRef,
      addTableResizeObserver: addTableResizeObserver
    };
  }

  function useClassName() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var classNames = {
      tableBaseClass: {
        table: "".concat(classPrefix, "-table"),
        columnResizableTable: "".concat(classPrefix, "-table--column-resizable"),
        body: "".concat(classPrefix, "-table__body"),
        overflowVisible: "".concat(classPrefix, "-table--overflow-visible"),
        content: "".concat(classPrefix, "-table__content"),
        topContent: "".concat(classPrefix, "-table__top-content"),
        bottomContent: "".concat(classPrefix, "-table__bottom-content"),
        paginationWrap: "".concat(classPrefix, "-table__pagination-wrap"),
        tdLastRow: "".concat(classPrefix, "-table__td-last-row"),
        tdFirstCol: "".concat(classPrefix, "-table__td-first-col"),
        thCellInner: "".concat(classPrefix, "-table__th-cell-inner"),
        tableRowEdit: "".concat(classPrefix, "-table--row-edit"),
        cellEditable: "".concat(classPrefix, "-table__cell--editable"),
        cellEditWrap: "".concat(classPrefix, "-table__cell-wrap"),
        bordered: "".concat(classPrefix, "-table--bordered"),
        striped: "".concat(classPrefix, "-table--striped"),
        hover: "".concat(classPrefix, "-table--hoverable"),
        loading: "".concat(classPrefix, "-table--loading"),
        rowspanAndColspan: "".concat(classPrefix, "-table--rowspan-colspan"),
        empty: "".concat(classPrefix, "-table__empty"),
        emptyRow: "".concat(classPrefix, "-table__empty-row"),
        headerFixed: "".concat(classPrefix, "-table--header-fixed"),
        columnFixed: "".concat(classPrefix, "-table--column-fixed"),
        widthOverflow: "".concat(classPrefix, "-table--width-overflow"),
        multipleHeader: "".concat(classPrefix, "-table--multiple-header"),
        footerAffixed: "".concat(classPrefix, "-table--footer-affixed"),
        horizontalBarAffixed: "".concat(classPrefix, "-table--horizontal-bar-affixed"),
        affixedHeader: "".concat(classPrefix, "-table--affixed-header"),
        affixedHeaderElm: "".concat(classPrefix, "-table__affixed-header-elm"),
        affixedFooterElm: "".concat(classPrefix, "-table__affixed-footer-elm"),
        affixedFooterWrap: "".concat(classPrefix, "-table__affixed-footer-wrap"),
        scrollbarDivider: "".concat(classPrefix, "-table__scroll-bar-divider"),
        fullHeight: "".concat(classPrefix, "-table--full-height"),
        resizeLine: "".concat(classPrefix, "-table__resize-line"),
        obviousScrollbar: "".concat(classPrefix, "-table__scrollbar--obvious"),
        affixedHeaderWrap: "".concat(classPrefix, "-table__affixed-header-elm-wrap")
      },
      tdAlignClasses: {
        left: "".concat(classPrefix, "-align-left"),
        right: "".concat(classPrefix, "-align-right"),
        center: "".concat(classPrefix, "-align-center")
      },
      tableHeaderClasses: {
        header: "".concat(classPrefix, "-table__header"),
        thBordered: "".concat(classPrefix, "-table__header-th--bordered"),
        fixed: "".concat(classPrefix, "-table__header--fixed"),
        multipleHeader: "".concat(classPrefix, "-table__header--multiple")
      },
      tableFooterClasses: {
        footer: "".concat(classPrefix, "-table__footer"),
        fixed: "".concat(classPrefix, "-table__footer--fixed")
      },
      tableAlignClasses: {
        top: "".concat(classPrefix, "-vertical-align-top"),
        middle: "".concat(classPrefix, "-vertical-align-middle"),
        bottom: "".concat(classPrefix, "-vertical-align-bottom")
      },
      tableRowFixedClasses: {
        top: "".concat(classPrefix, "-table__row--fixed-top"),
        bottom: "".concat(classPrefix, "-table__row--fixed-bottom"),
        firstBottom: "".concat(classPrefix, "-table__row--fixed-bottom-first"),
        withoutBorderBottom: "".concat(classPrefix, "-table__row--without-border-bottom")
      },
      tableColFixedClasses: {
        left: "".concat(classPrefix, "-table__cell--fixed-left"),
        right: "".concat(classPrefix, "-table__cell--fixed-right"),
        lastLeft: "".concat(classPrefix, "-table__cell--fixed-left-last"),
        firstRight: "".concat(classPrefix, "-table__cell--fixed-right-first"),
        leftShadow: "".concat(classPrefix, "-table__content--scrollable-to-left"),
        rightShadow: "".concat(classPrefix, "-table__content--scrollable-to-right")
      },
      tableLayoutClasses: {
        auto: "".concat(classPrefix, "-table--layout-auto"),
        fixed: "".concat(classPrefix, "-table--layout-fixed")
      },
      tdEllipsisClass: "".concat(classPrefix, "-table-td--ellipsis"),
      tableFullRowClasses: {
        base: "".concat(classPrefix, "-table__row--full"),
        innerFullRow: "".concat(classPrefix, "-table__row-full-inner"),
        innerFullElement: "".concat(classPrefix, "-table__row-full-element"),
        firstFullRow: "".concat(classPrefix, "-table__first-full-row"),
        lastFullRow: "".concat(classPrefix, "-table__last-full-row")
      },
      tableExpandClasses: {
        iconBox: "".concat(classPrefix, "-table__expand-box"),
        iconCell: "".concat(classPrefix, "-table__expandable-icon-cell"),
        row: "".concat(classPrefix, "-table__expanded-row"),
        rowInner: "".concat(classPrefix, "-table__expanded-row-inner"),
        expanded: "".concat(classPrefix, "-table__row--expanded"),
        collapsed: "".concat(classPrefix, "-table__row--collapsed")
      },
      tableSortClasses: {
        sortable: "".concat(classPrefix, "-table__cell--sortable"),
        title: "".concat(classPrefix, "-table__cell--title"),
        trigger: "".concat(classPrefix, "-table__cell--sort-trigger"),
        doubleIcon: "".concat(classPrefix, "-table__double-icons"),
        sortIcon: "".concat(classPrefix, "-table__sort-icon"),
        iconDirection: {
          asc: "".concat(classPrefix, "-table-sort-asc"),
          desc: "".concat(classPrefix, "-table-sort-desc")
        },
        iconActive: "".concat(classPrefix, "-table__sort-icon--active"),
        iconDefault: "".concat(classPrefix, "-icon-sort--default")
      },
      tableSelectedClasses: {
        selected: "".concat(classPrefix, "-table__row--selected"),
        disabled: "".concat(classPrefix, "-table__row--disabled"),
        checkCell: "".concat(classPrefix, "-table__cell-check")
      },
      tableFilterClasses: {
        filterable: "".concat(classPrefix, "-table__cell--filterable"),
        popup: "".concat(classPrefix, "-table__filter-pop"),
        icon: "".concat(classPrefix, "-table__filter-icon"),
        popupContent: "".concat(classPrefix, "-table__filter-pop-content"),
        result: "".concat(classPrefix, "-table__filter-result"),
        inner: "".concat(classPrefix, "-table__row-filter-inner"),
        bottomButtons: "".concat(classPrefix, "-table__filter--bottom-buttons"),
        contentInner: "".concat(classPrefix, "-table__filter-pop-content-inner"),
        iconWrap: "".concat(classPrefix, "-table__filter-icon-wrap")
      },
      asyncLoadingClass: "".concat(classPrefix, "-table__async-loading"),
      isFocusClass: "".concat(classPrefix, "-is-focus"),
      isLoadingClass: "".concat(classPrefix, "-is-loading"),
      isLoadMoreClass: "".concat(classPrefix, "-is-load-more"),
      tableTreeClasses: {
        col: "".concat(classPrefix, "-table__tree-col"),
        inlineCol: "".concat(classPrefix, "-table__tree-col--inline"),
        icon: "".concat(classPrefix, "-table__tree-op-icon")
      },
      tableDraggableClasses: {
        rowDraggable: "".concat(classPrefix, "-table--row-draggable"),
        rowHandlerDraggable: "".concat(classPrefix, "-table--row-handler-draggable"),
        colDraggable: "".concat(classPrefix, "-table--col-draggable"),
        handle: "".concat(classPrefix, "-table__handle-draggable"),
        ghost: "".concat(classPrefix, "-table__ele--draggable-ghost"),
        chosen: "".concat(classPrefix, "-table__ele--draggable-chosen"),
        dragging: "".concat(classPrefix, "-table__ele--draggable-dragging")
      },
      virtualScrollClasses: {
        cursor: "".concat(classPrefix, "-table__virtual-scroll-cursor"),
        header: "".concat(classPrefix, "-table__virtual-scroll-header")
      },
      positiveRotate90: "".concat(classPrefix, "-positive-rotate-90"),
      negativeRotate180: "".concat(classPrefix, "-negative-rotate-180")
    };
    return classNames;
  }

  var tooltipDefaultProps = {
    destroyOnClose: true,
    placement: "top",
    showArrow: true,
    theme: "default"
  };

  var _excluded$q = ["theme", "showArrow", "destroyOnClose", "overlayClassName", "children", "duration", "placement"];

  function ownKeys$20(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$20(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$20(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Tooltip$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var theme = props.theme,
        _props$showArrow = props.showArrow,
        showArrow = _props$showArrow === void 0 ? true : _props$showArrow,
        _props$destroyOnClose = props.destroyOnClose,
        destroyOnClose = _props$destroyOnClose === void 0 ? true : _props$destroyOnClose,
        overlayClassName = props.overlayClassName,
        children = props.children,
        _props$duration = props.duration,
        duration = _props$duration === void 0 ? 0 : _props$duration,
        _props$placement = props.placement,
        placement = _props$placement === void 0 ? "top" : _props$placement,
        restProps = _objectWithoutProperties$2(props, _excluded$q);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(duration !== 0),
        _useState2 = _slicedToArray(_useState, 2),
        isTipShowed = _useState2[0],
        setTipshow = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        timeup = _useState4[0],
        setTimeup = _useState4[1];

    var popupRef = React.useRef();
    var timerRef = React.useRef(null);

    var _useState5 = React.useState([0, 0]),
        _useState6 = _slicedToArray(_useState5, 2),
        offset = _useState6[0],
        setOffset = _useState6[1];

    var toolTipClass = classNames$1("".concat(classPrefix, "-tooltip"), _defineProperty$3({}, "".concat(classPrefix, "-tooltip--").concat(theme), theme), overlayClassName);
    var isPlacedByMouse = placement === "mouse";

    var setVisible = function setVisible(v) {
      if (duration !== 0) setTimeup(false);
      setTipshow(v);
    };

    var calculatePos = function calculatePos(e) {
      var rect = e.target.getBoundingClientRect();
      var x = e.clientX - rect.left;
      var y = e.clientY - rect.top;
      return {
        x: x,
        y: y
      };
    };

    var getTriggerChildren = function getTriggerChildren(children2) {
      var _children2$type, _children2$props;

      var displayName = (_children2$type = children2.type) === null || _children2$type === void 0 ? void 0 : _children2$type.displayName;

      if ((children2.type === "button" || displayName === "Button") && children2 !== null && children2 !== void 0 && (_children2$props = children2.props) !== null && _children2$props !== void 0 && _children2$props.disabled) {
        var _children2$props2, _children2$props2$sty;

        var displayStyle = (_children2$props2 = children2.props) !== null && _children2$props2 !== void 0 && (_children2$props2$sty = _children2$props2.style) !== null && _children2$props2$sty !== void 0 && _children2$props2$sty.display ? children2.props.style.display : "inline-block";
        var child = /*#__PURE__*/React.cloneElement(children2, {
          style: _objectSpread$1$(_objectSpread$1$({}, children2.props.style), {}, {
            pointerEvents: "none"
          })
        });
        return /* @__PURE__ */React__default["default"].createElement("span", {
          style: {
            display: displayStyle,
            cursor: "not-allowed"
          }
        }, child);
      }

      return children2;
    };

    var handleShowTip = function handleShowTip(visible, _ref) {
      var e = _ref.e,
          trigger = _ref.trigger;

      if (duration === 0 || duration !== 0 && timeup) {
        if (visible && placement === "mouse" && (trigger === "trigger-element-hover" || trigger === "trigger-element-click")) {
          var _calculatePos = calculatePos(e),
              x = _calculatePos.x;

          setOffset([x, 0]);
        }

        setTipshow(visible);
      }
    };

    React.useEffect(function () {
      if (duration !== 0 && !timeup) {
        timerRef.current = window.setTimeout(function () {
          setTipshow(false);
          setTimeup(true);
        }, duration);
      }

      return function () {
        if (timerRef.current) window.clearTimeout(timerRef.current);
      };
    }, [duration, timeup]);
    React.useImperativeHandle(ref, function () {
      return _objectSpread$1$({
        setVisible: setVisible
      }, popupRef.current || {});
    });
    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$1$({
      ref: popupRef,
      destroyOnClose: destroyOnClose,
      showArrow: isPlacedByMouse ? false : showArrow,
      overlayClassName: toolTipClass,
      visible: isTipShowed,
      onVisibleChange: handleShowTip,
      popperOptions: {
        modifier: isPlacedByMouse ? [{
          name: "offset",
          options: {
            offset: offset
          }
        }] : []
      },
      placement: isPlacedByMouse ? "bottom-left" : placement
    }, restProps), /*#__PURE__*/React.isValidElement(children) ? getTriggerChildren(children) : children);
  });
  Tooltip$1.displayName = "Tooltip";
  Tooltip$1.defaultProps = tooltipDefaultProps;

  var Tooltip = Tooltip$1;

  function ownKeys$1$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1$(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function Ellipsis(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var root = React.useRef();

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isOverflow = _useState2[0],
        setIsOverflow = _useState2[1];

    var ellipsisClasses = classNames$1(["".concat(classPrefix, "-table__ellipsis"), "".concat(classPrefix, "-text-ellipsis")]);

    var onTriggerMouseenter = function onTriggerMouseenter() {
      if (!root.current) return;
      setIsOverflow(isNodeOverflow(root.current));
    };

    var onTriggerMouseleave = function onTriggerMouseleave() {
      setIsOverflow(isNodeOverflow(root.current));
    };

    var onMouseAround = useDebounce(function (e) {
      e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
    }, 80);
    var cellNode = props.children || props.content;
    var ellipsisContent = /* @__PURE__ */React__default["default"].createElement("div", {
      ref: root,
      className: ellipsisClasses,
      onMouseEnter: onMouseAround,
      onMouseLeave: onMouseAround
    }, cellNode);
    var content = null;

    if (isOverflow) {
      var rProps = _objectSpread$1_({
        content: props.popupContent || cellNode,
        destroyOnClose: true,
        zIndex: props.zIndex,
        attach: props.attach,
        placement: props.placement
      }, props.tooltipProps || {});

      content = /* @__PURE__ */React__default["default"].createElement(Tooltip, _objectSpread$1_({}, rProps), ellipsisContent);
    } else {
      content = ellipsisContent;
    }

    return content;
  }
  Ellipsis.displayName = "Ellipsis";

  function observe(element, root, callback, marginBottom) {
    if (!window || !window.IntersectionObserver) {
      callback();
      return null;
    }

    var io = null;

    try {
      io = new window.IntersectionObserver(function (entries) {
        var entry = entries[0];

        if (entry.isIntersecting) {
          callback();
          io.unobserve(element);
        }
      }, {
        rootMargin: "0px 0px ".concat(marginBottom, "px 0px"),
        root: root
      });
      io.observe(element);
    } catch (e) {
      console.error(e);
      callback();
    }

    return io;
  }

  function useLazyLoad(containerRef, childRef, params) {
    var tRowHeight = React.useMemo(function () {
      return Math.max(params.rowHeight || 48, 48);
    }, [params.rowHeight]);

    var _useState = React.useState(params.rowIndex === 0),
        _useState2 = _slicedToArray(_useState, 2),
        isInit = _useState2[0],
        setIsInit = _useState2[1];

    var hasLazyLoadHolder = React.useMemo(function () {
      return (params === null || params === void 0 ? void 0 : params.type) === "lazy" && !isInit;
    }, [isInit, params === null || params === void 0 ? void 0 : params.type]);

    var requestAnimationFrame = (typeof window === "undefined" ? false : window.requestAnimationFrame) || function (cb) {
      return setTimeout(cb, 16.6);
    };

    var init = function init() {
      if (!isInit) {
        requestAnimationFrame(function () {
          setIsInit(true);
        });
      }
    };

    React.useEffect(function () {
      if ((params === null || params === void 0 ? void 0 : params.type) !== "lazy") return;
      var timer = setTimeout(function () {
        var bufferSize = Math.max(10, params.bufferSize || 10);
        var height = tRowHeight * bufferSize;
        childRef && observe(childRef, containerRef, init, height);
        clearTimeout(timer);
      });
      return function () {
        clearTimeout(timer);
      };
    }, [childRef, containerRef, params.bufferSize, params === null || params === void 0 ? void 0 : params.type, tRowHeight]);
    return {
      hasLazyLoadHolder: hasLazyLoadHolder,
      tRowHeight: tRowHeight
    };
  }

  function getCellKey(row, rowKey, colKey, colIndex) {
    var rowValue = get_1(row, rowKey);

    if (rowValue === void 0) {
      log.error("Table", "rowKey is wrong, can not get unique identifier of row.");
    }

    return [rowValue, colKey || colIndex].join("_");
  }
  function useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan) {
    var _useState = React.useState( /* @__PURE__ */new Map()),
        _useState2 = _slicedToArray(_useState, 1),
        skipSpansMap = _useState2[0];

    var onTrRowspanOrColspan = function onTrRowspanOrColspan(params, skipSpansValue) {
      var rowIndex = params.rowIndex,
          colIndex = params.colIndex;
      if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;
      var maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);
      var maxColIndex = colIndex + (skipSpansValue.colspan || 1);

      for (var i = rowIndex; i < maxRowIndex; i++) {
        for (var j = colIndex; j < maxColIndex; j++) {
          if (i !== rowIndex || j !== colIndex) {
            if (!data[i] || !columns[j]) return;
            var cellKey = getCellKey(data[i], rowKey, columns[j].colKey, j);
            var state = skipSpansMap.get(cellKey) || {};
            state.skipped = true;
            skipSpansMap.set(cellKey, state);
          }
        }
      }
    };

    var updateSkipSpansMap = function updateSkipSpansMap(data2, columns2, rowspanAndColspan2) {
      skipSpansMap.clear();
      if (!data2 || !rowspanAndColspan2) return;

      for (var i = 0, len = data2.length; i < len; i++) {
        var row = data2[i];

        for (var j = 0, colLen = columns2.length; j < colLen; j++) {
          var col = columns2[j];
          var params = {
            row: row,
            col: col,
            rowIndex: i,
            colIndex: j
          };
          var cellKey = getCellKey(row, rowKey, col.colKey, j);
          var state = skipSpansMap.get(cellKey) || {};
          var o = rowspanAndColspan2(params) || {};

          if (o.rowspan || o.colspan || state.rowspan || state.colspan) {
            o.rowspan && (state.rowspan = o.rowspan);
            o.colspan && (state.colspan = o.colspan);
            skipSpansMap.set(cellKey, state);
          }

          onTrRowspanOrColspan === null || onTrRowspanOrColspan === void 0 ? void 0 : onTrRowspanOrColspan(params, state);
        }
      }
    };

    React.useEffect(function () {
      updateSkipSpansMap(data, columns, rowspanAndColspan);
    }, [data, columns, rowspanAndColspan]);
    return {
      skipSpansMap: skipSpansMap,
      updateSkipSpansMap: updateSkipSpansMap
    };
  }

  function ownKeys$1_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1_(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
  function renderCell(params, extra) {
    var col = params.col,
        row = params.row;

    if (isFunction_1(col.cell)) {
      return col.cell(params);
    }

    if (isFunction_1(col.render)) {
      return col.render(_objectSpread$1Z(_objectSpread$1Z({}, params), {}, {
        type: "cell"
      }));
    }

    var r = col.cell || col.render || get_1(row, col.colKey);
    if (![void 0, "", null].includes(r)) return r;
    if (extra !== null && extra !== void 0 && extra.cellEmptyContent) return extra.cellEmptyContent;
    return r;
  }
  function TR(props) {
    var _props$columns;

    var row = props.row,
        rowKey = props.rowKey,
        rowIndex = props.rowIndex,
        rowClassName = props.rowClassName,
        rowAttributes = props.rowAttributes,
        dataLength = props.dataLength,
        fixedRows = props.fixedRows,
        scroll = props.scroll,
        tableContentElm = props.tableContentElm,
        rowAndColFixedPosition = props.rowAndColFixedPosition;
    var trRef = React.useRef();

    var _useClassName = useClassName(),
        tdEllipsisClass = _useClassName.tdEllipsisClass,
        tableBaseClass = _useClassName.tableBaseClass,
        tableColFixedClasses = _useClassName.tableColFixedClasses,
        tableRowFixedClasses = _useClassName.tableRowFixedClasses,
        tdAlignClasses = _useClassName.tdAlignClasses,
        tableDraggableClasses = _useClassName.tableDraggableClasses;

    var trStyles = getRowFixedStyles(get_1(row, rowKey || "id"), rowIndex, dataLength, fixedRows, rowAndColFixedPosition, tableRowFixedClasses);
    var trAttributes = React.useMemo(function () {
      return formatRowAttributes(rowAttributes, {
        row: row,
        rowIndex: rowIndex,
        type: "body"
      }) || {};
    }, [row, rowAttributes, rowIndex]);
    var classes = React.useMemo(function () {
      var customClasses = formatRowClassNames(rowClassName, {
        row: row,
        rowIndex: rowIndex,
        type: "body"
      }, rowKey || "id");
      return [trStyles === null || trStyles === void 0 ? void 0 : trStyles.classes, customClasses];
    }, [row, rowClassName, rowIndex, rowKey, trStyles === null || trStyles === void 0 ? void 0 : trStyles.classes]);
    var useLazyLoadParams = React.useMemo(function () {
      return _objectSpread$1Z(_objectSpread$1Z({}, scroll), {}, {
        rowIndex: rowIndex
      });
    }, [scroll, rowIndex]);

    var _useLazyLoad = useLazyLoad(tableContentElm, trRef.current, useLazyLoadParams),
        hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder,
        tRowHeight = _useLazyLoad.tRowHeight;

    function renderEllipsisCell(cellParams, params) {
      var cellNode = params.cellNode;
      var col = cellParams.col;
      var content = isFunction_1(col.ellipsis) ? col.ellipsis(cellParams) : void 0;
      var tableElement = props.tableElm;
      return /* @__PURE__ */React__default["default"].createElement(Ellipsis, {
        placement: "top",
        attach: tableElement ? function () {
          return tableElement;
        } : void 0,
        popupContent: content,
        tooltipProps: _typeof$1(col.ellipsis) === "object" ? col.ellipsis : void 0
      }, cellNode);
    }

    function renderTd(params, extra) {
      var _ref;

      var col = params.col,
          colIndex = params.colIndex,
          rowIndex2 = params.rowIndex;
      var cellSpans = extra.cellSpans,
          dataLength2 = extra.dataLength,
          rowAndColFixedPosition2 = extra.rowAndColFixedPosition;
      var cellNode = renderCell(params, {
        cellEmptyContent: props.cellEmptyContent
      });
      var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition2, tableColFixedClasses);
      var customClasses = isFunction_1(col.className) ? col.className(_objectSpread$1Z(_objectSpread$1Z({}, params), {}, {
        type: "td"
      })) : col.className;
      var classes2 = [tdStyles.classes, customClasses, (_ref = {}, _defineProperty$3(_ref, tdEllipsisClass, col.ellipsis), _defineProperty$3(_ref, tableBaseClass.tdLastRow, rowIndex2 + cellSpans.rowspan === dataLength2), _defineProperty$3(_ref, tableBaseClass.tdFirstCol, colIndex === 0 && props.rowspanAndColspan), _defineProperty$3(_ref, tdAlignClasses[col.align], col.align && col.align !== "left"), _defineProperty$3(_ref, tableDraggableClasses.handle, col.colKey === "drag"), _ref)];

      var onClick = function onClick(e) {
        var _props$onCellClick;

        var p = _objectSpread$1Z(_objectSpread$1Z({}, params), {}, {
          e: e
        });

        (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, p);
      };

      var attrs = _objectSpread$1Z(_objectSpread$1Z({}, col.attrs), {}, {
        rowSpan: cellSpans.rowspan,
        colSpan: cellSpans.colspan
      });

      if (!col.colKey) return null;
      return /* @__PURE__ */React__default["default"].createElement("td", _objectSpread$1Z(_objectSpread$1Z({
        key: col.colKey,
        className: classNames$1(classes2),
        style: tdStyles.style
      }, attrs), {}, {
        onClick: onClick
      }), col.ellipsis ? renderEllipsisCell(params, {
        cellNode: cellNode
      }) : cellNode);
    }

    var columnVNodeList = (_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : _props$columns.map(function (col, colIndex) {
      var cellSpans = {};
      var params = {
        row: row,
        col: col,
        rowIndex: rowIndex,
        colIndex: colIndex
      };
      var spanState = null;

      if (props.skipSpansMap.size) {
        var _spanState, _spanState2;

        var cellKey = getCellKey(row, props.rowKey, col.colKey, colIndex);
        spanState = props.skipSpansMap.get(cellKey) || {};
        ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
        ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
        if (spanState.skipped) return null;
      }

      return renderTd(params, {
        dataLength: dataLength,
        rowAndColFixedPosition: rowAndColFixedPosition,
        columnLength: props.columns.length,
        cellSpans: cellSpans,
        cellEmptyContent: props.cellEmptyContent
      });
    });
    var rowParams = {
      row: row,
      index: rowIndex
    };
    return /* @__PURE__ */React__default["default"].createElement("tr", _objectSpread$1Z(_objectSpread$1Z({
      ref: trRef
    }, trAttributes), {}, {
      style: trStyles === null || trStyles === void 0 ? void 0 : trStyles.style,
      className: classNames$1(classes),
      onClick: function onClick(e) {
        var _props$onRowClick;

        return (_props$onRowClick = props.onRowClick) === null || _props$onRowClick === void 0 ? void 0 : _props$onRowClick.call(props, _objectSpread$1Z(_objectSpread$1Z({}, rowParams), {}, {
          e: e
        }));
      },
      onDoubleClick: function onDoubleClick(e) {
        var _props$onRowDblclick;

        return (_props$onRowDblclick = props.onRowDblclick) === null || _props$onRowDblclick === void 0 ? void 0 : _props$onRowDblclick.call(props, _objectSpread$1Z(_objectSpread$1Z({}, rowParams), {}, {
          e: e
        }));
      },
      onMouseDown: function onMouseDown(e) {
        var _props$onRowMousedown;

        return (_props$onRowMousedown = props.onRowMousedown) === null || _props$onRowMousedown === void 0 ? void 0 : _props$onRowMousedown.call(props, _objectSpread$1Z(_objectSpread$1Z({}, rowParams), {}, {
          e: e
        }));
      },
      onMouseEnter: function onMouseEnter(e) {
        var _props$onRowMouseente;

        return (_props$onRowMouseente = props.onRowMouseenter) === null || _props$onRowMouseente === void 0 ? void 0 : _props$onRowMouseente.call(props, _objectSpread$1Z(_objectSpread$1Z({}, rowParams), {}, {
          e: e
        }));
      },
      onMouseLeave: function onMouseLeave(e) {
        var _props$onRowMouseleav;

        return (_props$onRowMouseleav = props.onRowMouseleave) === null || _props$onRowMouseleav === void 0 ? void 0 : _props$onRowMouseleav.call(props, _objectSpread$1Z(_objectSpread$1Z({}, rowParams), {}, {
          e: e
        }));
      },
      onMouseUp: function onMouseUp(e) {
        var _props$onRowMouseup;

        return (_props$onRowMouseup = props.onRowMouseup) === null || _props$onRowMouseup === void 0 ? void 0 : _props$onRowMouseup.call(props, _objectSpread$1Z(_objectSpread$1Z({}, rowParams), {}, {
          e: e
        }));
      },
      onMouseOver: function onMouseOver(e) {
        var _props$onRowMouseover;

        return (_props$onRowMouseover = props.onRowMouseover) === null || _props$onRowMouseover === void 0 ? void 0 : _props$onRowMouseover.call(props, _objectSpread$1Z(_objectSpread$1Z({}, rowParams), {}, {
          e: e
        }));
      }
    }), hasLazyLoadHolder ? [/* @__PURE__ */React__default["default"].createElement("td", {
      key: rowIndex,
      style: {
        height: "".concat(tRowHeight, "px"),
        border: "none"
      }
    })] : columnVNodeList);
  }
  TR.displayName = "TR";

  function ownKeys$1Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
  function TBody(props) {
    var data = props.data,
        columns = props.columns,
        rowKey = props.rowKey,
        firstFullRow = props.firstFullRow,
        lastFullRow = props.lastFullRow;

    var _useLocaleReceiver = useLocaleReceiver("table"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        global = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useClassName = useClassName(),
        tableFullRowClasses = _useClassName.tableFullRowClasses,
        tableBaseClass = _useClassName.tableBaseClass;

    var _useRowspanAndColspan = useRowspanAndColspan(data, columns, rowKey, props.rowspanAndColspan),
        skipSpansMap = _useRowspanAndColspan.skipSpansMap;

    var tbodyClasses = React.useMemo(function () {
      return [tableBaseClass.body];
    }, [tableBaseClass.body]);
    var hasFullRowConfig = React.useMemo(function () {
      return firstFullRow || lastFullRow;
    }, [firstFullRow, lastFullRow]);

    var renderEmpty = function renderEmpty(columns2) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        className: classNames$1([tableBaseClass.emptyRow, _defineProperty$3({}, tableFullRowClasses.base, props.isWidthOverflow)])
      }, /* @__PURE__ */React__default["default"].createElement("td", {
        colSpan: columns2.length
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1([tableBaseClass.empty, _defineProperty$3({}, tableFullRowClasses.innerFullRow, props.isWidthOverflow)]),
        style: props.isWidthOverflow ? {
          width: "".concat(props.tableWidth, "px")
        } : {}
      }, props.empty || t(global.empty))));
    };

    var getFullRow = function getFullRow(columnLength2, type) {
      var tType = camelCase_1(type);
      var fullRowNode = {
        "first-full-row": firstFullRow,
        "last-full-row": lastFullRow
      }[type];
      if (!fullRowNode) return null;
      var isFixedToLeft = props.isWidthOverflow && columns.find(function (col) {
        return col.fixed === "left";
      });
      var classes = [tableFullRowClasses.base, tableFullRowClasses[tType]];
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        className: classNames$1(classes)
      }, /* @__PURE__ */React__default["default"].createElement("td", {
        colSpan: columnLength2
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(_defineProperty$3({}, tableFullRowClasses.innerFullRow, isFixedToLeft)),
        style: isFixedToLeft ? {
          width: "".concat(props.tableWidth, "px")
        } : {}
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFullRowClasses.innerFullElement
      }, fullRowNode))));
    };

    var columnLength = columns.length;
    var dataLength = data.length;
    var trNodeList = [];
    var properties = ["rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
    data === null || data === void 0 ? void 0 : data.forEach(function (row, rowIndex) {
      var trProps = _objectSpread$1Y(_objectSpread$1Y({}, pick_1(props, TABLE_PROPS)), {}, {
        rowKey: props.rowKey || "id",
        row: row,
        columns: columns,
        rowIndex: rowIndex,
        dataLength: dataLength,
        skipSpansMap: skipSpansMap
      }, pick_1(props, properties));

      if (props.onCellClick) {
        trProps.onCellClick = props.onCellClick;
      }

      var trNode = /* @__PURE__ */React__default["default"].createElement(TR, _objectSpread$1Y(_objectSpread$1Y({
        key: get_1(row, props.rowKey || "id") || rowIndex
      }, trProps), {}, {
        onRowMounted: props.handleRowMounted
      }));
      trNodeList.push(trNode);

      if (props.renderExpandedRow) {
        var p = {
          row: row,
          index: rowIndex,
          columns: columns,
          tableWidth: props.tableWidth,
          isWidthOverflow: props.isWidthOverflow
        };
        var expandedContent = props.renderExpandedRow(p);
        expandedContent && trNodeList.push(expandedContent);
      }
    });
    var list = /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, getFullRow(columnLength, "first-full-row"), trNodeList, getFullRow(columnLength, "last-full-row"));
    var isEmpty = !(data !== null && data !== void 0 && data.length) && !props.loading && !hasFullRowConfig;
    var translate = "translate(0, ".concat(props.translateY, "px)");
    var posStyle = {
      transform: translate,
      "-ms-transform": translate,
      "-moz-transform": translate,
      "-webkit-transform": translate
    };
    return /* @__PURE__ */React__default["default"].createElement("tbody", {
      className: classNames$1(tbodyClasses),
      style: props.isVirtual && _objectSpread$1Y({}, posStyle)
    }, isEmpty ? renderEmpty(columns) : list);
  }
  TBody.displayName = "TBody";

  var affixDefaultProps = {
    container: function container() {
      return window;
    },
    offsetBottom: 0,
    offsetTop: 0
  };

  var Affix$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
        zIndex = props.zIndex,
        container = props.container,
        offsetBottom = props.offsetBottom,
        offsetTop = props.offsetTop,
        className = props.className,
        style = props.style,
        onFixedChange = props.onFixedChange;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var affixRef = React.useRef(null);
    var affixWrapRef = React.useRef(null);
    var placeholderEL = React.useRef(null);
    var scrollContainer = React.useRef(null);
    var ticking = React.useRef(false);
    var handleScroll = React.useCallback(function () {
      if (!ticking.current) {
        window.requestAnimationFrame(function () {
          var _affixWrapRef$current, _affixWrapRef$current2;

          var _ref = (_affixWrapRef$current = (_affixWrapRef$current2 = affixWrapRef.current) === null || _affixWrapRef$current2 === void 0 ? void 0 : _affixWrapRef$current2.getBoundingClientRect()) !== null && _affixWrapRef$current !== void 0 ? _affixWrapRef$current : {
            top: 0
          },
              _ref$top = _ref.top,
              wrapToTop = _ref$top === void 0 ? 0 : _ref$top,
              _ref$width = _ref.width,
              wrapWidth = _ref$width === void 0 ? 0 : _ref$width,
              _ref$height = _ref.height,
              wrapHeight = _ref$height === void 0 ? 0 : _ref$height;

          var containerToTop = 0;

          if (scrollContainer.current instanceof HTMLElement) {
            containerToTop = scrollContainer.current.getBoundingClientRect().top;
          }

          var calcTop = wrapToTop - containerToTop;
          var containerHeight = scrollContainer.current[scrollContainer.current instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
          var calcBottom = containerToTop + containerHeight - (offsetBottom !== null && offsetBottom !== void 0 ? offsetBottom : 0);
          var fixedTop;

          if (offsetTop !== void 0 && calcTop <= offsetTop) {
            fixedTop = containerToTop + offsetTop;
          } else if (offsetBottom !== void 0 && wrapToTop >= calcBottom) {
            fixedTop = calcBottom;
          } else {
            fixedTop = false;
          }

          if (affixRef.current) {
            var affixed = fixedTop !== false;
            var placeholderStatus = affixWrapRef.current.contains(placeholderEL.current);

            if (affixed) {
              affixRef.current.className = "".concat(classPrefix, "-affix");
              affixRef.current.style.top = "".concat(fixedTop, "px");
              affixRef.current.style.width = "".concat(wrapWidth, "px");
              affixRef.current.style.height = "".concat(wrapHeight, "px");

              if (zIndex) {
                affixRef.current.style.zIndex = "".concat(zIndex);
              }

              if (!placeholderStatus) {
                placeholderEL.current.style.width = "".concat(wrapWidth, "px");
                placeholderEL.current.style.height = "".concat(wrapHeight, "px");
                affixWrapRef.current.appendChild(placeholderEL.current);
              }
            } else {
              affixRef.current.removeAttribute("class");
              affixRef.current.removeAttribute("style");
              placeholderStatus && placeholderEL.current.remove();
            }

            if (isFunction_1(onFixedChange)) {
              onFixedChange(affixed, {
                top: +fixedTop
              });
            }
          }

          ticking.current = false;
        });
      }

      ticking.current = true;
    }, [classPrefix, offsetBottom, offsetTop, onFixedChange, zIndex]);
    React.useImperativeHandle(ref, function () {
      return {
        handleScroll: handleScroll
      };
    });
    React.useEffect(function () {
      placeholderEL.current = document.createElement("div");
    }, []);
    React.useEffect(function () {
      scrollContainer.current = getScrollContainer(container);

      if (scrollContainer.current) {
        handleScroll();
        scrollContainer.current.addEventListener("scroll", handleScroll);
        window.addEventListener("resize", handleScroll);
        return function () {
          scrollContainer.current.removeEventListener("scroll", handleScroll);
          window.removeEventListener("resize", handleScroll);
        };
      }
    }, [container, handleScroll]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: affixWrapRef,
      className: className,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: affixRef
    }, children));
  });
  Affix$1.displayName = "Affix";
  Affix$1.defaultProps = affixDefaultProps;

  var Affix = Affix$1;

  function getNodeDepth(columns, depthMap) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var maxDepth = depth;

    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;

      var col = columns[i];
      depthMap.set(col, depth);

      if (col !== null && col !== void 0 && (_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        var deep = getNodeDepth(col.children, depthMap, depth + 1);

        if (deep > maxDepth) {
          maxDepth = deep;
        }
      }
    }

    return maxDepth;
  }
  function getChildrenNodeWidth(node) {
    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var countNew = count;
    var childrenList = (node === null || node === void 0 ? void 0 : node.children) || [];

    for (var i = 0, len = childrenList.length; i < len; i++) {
      var item = childrenList[i];

      if (item.children) {
        countNew = getChildrenNodeWidth(item, countNew);
      } else {
        countNew += 1;
      }
    }

    return countNew;
  }
  function getThRowspanAndColspan(columns) {
    var depthMap = /* @__PURE__ */new Map();
    var columnsDepth = getNodeDepth(columns, depthMap);
    var rowspanAndColspanMap = /* @__PURE__ */new Map();

    var loop = function loop(nodes, leafColumns2) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var _col$children2;

        var col = nodes[i];
        var rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;
        var colspan = col.children ? getChildrenNodeWidth(col) : 1;
        var span = {};
        rowspan > 1 && (span.rowspan = rowspan);
        colspan > 1 && (span.colspan = colspan);
        rowspanAndColspanMap.set(col, span);

        if (col !== null && col !== void 0 && (_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          loop(col.children, leafColumns2);
        } else {
          leafColumns2.push(col);
        }
      }
    };

    var leafColumns = [];
    loop(columns, leafColumns);
    return {
      rowspanAndColspanMap: rowspanAndColspanMap,
      leafColumns: leafColumns
    };
  }
  function getThList(columns) {
    var loop = function loop(nodes, thRows) {
      var _children;

      var thRowData = [];
      var children = [];

      for (var i = 0, len = nodes.length; i < len; i++) {
        var _node$children;

        var node = nodes[i];
        var thList = [node];
        thRowData = thRowData.concat(thList);

        if (node !== null && node !== void 0 && (_node$children = node.children) !== null && _node$children !== void 0 && _node$children.length) {
          children = children.concat(node.children);
        }
      }

      if ((_children = children) !== null && _children !== void 0 && _children.length) {
        loop(children, thRows);
      }

      thRows.push(thRowData);
      return thRowData;
    };

    var list = [];
    loop(columns, list);
    list = list.reverse();
    return list;
  }

  function ownKeys$1Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function renderTitle(col, index) {
    var params = {
      col: col,
      colIndex: index
    };

    if (isFunction_1(col.title)) {
      return col.title(params);
    }

    if (isFunction_1(col.render)) {
      return col.render(_objectSpread$1X(_objectSpread$1X({}, params), {}, {
        row: {},
        rowIndex: -1,
        type: "title"
      }));
    }

    return col.title;
  }
  function useTableHeader(_ref) {
    var columns = _ref.columns;

    var _useClassName = useClassName(),
        tableSortClasses = _useClassName.tableSortClasses,
        tableFilterClasses = _useClassName.tableFilterClasses;

    var spansAndLeafNodes = React.useMemo(function () {
      return getThRowspanAndColspan(columns);
    }, [columns]);
    var thList = React.useMemo(function () {
      return getThList(columns);
    }, [columns]);
    var isMultipleHeader = React.useMemo(function () {
      return thList.length > 1;
    }, [thList]);

    var renderTitleWidthIcon = function renderTitleWidthIcon(_ref2, col, colIndex, ellipsisTitle, attach) {
      var _classes;

      var _ref3 = _slicedToArray(_ref2, 3),
          title = _ref3[0],
          sortIcon = _ref3[1],
          filterIcon = _ref3[2];

      var classes = (_classes = {}, _defineProperty$3(_classes, tableSortClasses.sortable, !!sortIcon), _defineProperty$3(_classes, tableFilterClasses.filterable, !!filterIcon), _classes);
      var content = isFunction_1(ellipsisTitle) ? ellipsisTitle({
        col: col,
        colIndex: colIndex
      }) : void 0;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(classes)
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableSortClasses.title
      }, col.ellipsis && ellipsisTitle !== false && ellipsisTitle !== null ? /* @__PURE__ */React__default["default"].createElement(Ellipsis, {
        placement: "bottom",
        attach: attach ? function () {
          return attach;
        } : void 0,
        popupContent: content,
        tooltipProps: _typeof$1(ellipsisTitle) === "object" ? ellipsisTitle : void 0
      }, title) : /* @__PURE__ */React__default["default"].createElement("div", null, title), Boolean(sortIcon || filterIcon) && /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.iconWrap
      }, sortIcon, filterIcon)));
    };

    return {
      thList: thList,
      isMultipleHeader: isMultipleHeader,
      spansAndLeafNodes: spansAndLeafNodes,
      renderTitleWidthIcon: renderTitleWidthIcon
    };
  }

  function ownKeys$1X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1X(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function THead(props) {
    var _ref;

    var columnResizeParams = props.columnResizeParams;
    var theadRef = React.useRef(null);
    var classnames = useClassName();
    var tableHeaderClasses = classnames.tableHeaderClasses,
        tableBaseClass = classnames.tableBaseClass;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var theadClasses = [tableHeaderClasses.header, (_ref = {}, _defineProperty$3(_ref, tableHeaderClasses.fixed, props.isFixedHeader), _defineProperty$3(_ref, tableBaseClass.bordered, props.bordered && props.isMultipleHeader), _defineProperty$3(_ref, tableHeaderClasses.multipleHeader, props.isMultipleHeader), _ref)];

    var renderThNodeList = function renderThNodeList(rowAndColFixedPosition, thWidthList) {
      var thBorderMap = /* @__PURE__ */new Map();
      var thRowspanAndColspan = props.spansAndLeafNodes.rowspanAndColspanMap;
      return props.thList.map(function (row, rowIndex) {
        var thRow = row.map(function (col, index) {
          var _ref2, _col$children;

          var rowspanAndColspan = thRowspanAndColspan.get(col);

          if (index === 0 && rowspanAndColspan.rowspan > 1) {
            for (var j = rowIndex + 1; j < rowIndex + rowspanAndColspan.rowspan; j++) {
              thBorderMap.set(props.thList[j][0], true);
            }
          }

          var thStyles = getColumnFixedStyles(col, index, rowAndColFixedPosition, classnames.tableColFixedClasses);
          var colParams = {
            col: col,
            colIndex: index,
            row: {},
            rowIndex: -1
          };
          var customClasses = isFunction_1(col.className) ? col.className(_objectSpread$1W(_objectSpread$1W({}, colParams), {}, {
            type: "th"
          })) : col.className;
          var thClasses = [thStyles.classes, customClasses, (_ref2 = {}, _defineProperty$3(_ref2, tableHeaderClasses.thBordered, thBorderMap.get(col)), _defineProperty$3(_ref2, "".concat(classPrefix, "-table__th-").concat(col.colKey), col.colKey), _defineProperty$3(_ref2, classnames.tdAlignClasses[col.align], col.align && col.align !== "left"), _ref2)];
          var withoutChildren = !((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length);
          var width = withoutChildren && thWidthList !== null && thWidthList !== void 0 && thWidthList[col.colKey] ? "".concat(thWidthList === null || thWidthList === void 0 ? void 0 : thWidthList[col.colKey], "px") : void 0;

          var styles = _objectSpread$1W(_objectSpread$1W({}, thStyles.style || {}), {}, {
            width: width
          });

          var innerTh = renderTitle(col, index);
          if (!col.colKey) return null;
          var resizeColumnListener = props.resizable ? {
            onMouseDown: function onMouseDown(e) {
              var _columnResizeParams$o;

              return columnResizeParams === null || columnResizeParams === void 0 ? void 0 : (_columnResizeParams$o = columnResizeParams.onColumnMousedown) === null || _columnResizeParams$o === void 0 ? void 0 : _columnResizeParams$o.call(columnResizeParams, e, col);
            },
            onMouseMove: function onMouseMove(e) {
              var _columnResizeParams$o2;

              return columnResizeParams === null || columnResizeParams === void 0 ? void 0 : (_columnResizeParams$o2 = columnResizeParams.onColumnMouseover) === null || _columnResizeParams$o2 === void 0 ? void 0 : _columnResizeParams$o2.call(columnResizeParams, e);
            }
          } : {};
          var content = isFunction_1(col.ellipsisTitle) ? col.ellipsisTitle({
            col: col,
            colIndex: index
          }) : void 0;
          return /* @__PURE__ */React__default["default"].createElement("th", _objectSpread$1W(_objectSpread$1W({
            key: col.colKey,
            "data-colkey": col.colKey,
            className: classNames$1(thClasses),
            style: styles
          }, {
            rowSpan: rowspanAndColspan.rowspan,
            colSpan: rowspanAndColspan.colspan
          }), resizeColumnListener), /* @__PURE__ */React__default["default"].createElement("div", {
            className: tableBaseClass.thCellInner
          }, col.ellipsis && col.ellipsisTitle !== false && col.ellipsisTitle !== null ? /* @__PURE__ */React__default["default"].createElement(Ellipsis, {
            placement: "bottom",
            attach: theadRef.current ? function () {
              return theadRef.current.parentNode.parentNode;
            } : void 0,
            popupContent: content,
            tooltipProps: _typeof$1(col.ellipsisTitle) === "object" ? col.ellipsisTitle : void 0
          }, innerTh) : innerTh));
        });
        return /* @__PURE__ */React__default["default"].createElement("tr", {
          key: rowIndex
        }, thRow);
      });
    };

    return /* @__PURE__ */React__default["default"].createElement("thead", {
      ref: theadRef,
      className: classNames$1(theadClasses)
    }, renderThNodeList(props.rowAndColFixedPosition, props.thWidthList));
  }

  function ownKeys$1W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1W(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function TFoot(props) {
    var footData = props.footData,
        columns = props.columns,
        rowKey = props.rowKey,
        footerSummary = props.footerSummary;
    var tfooterRef = React.useRef();
    var classnames = useClassName();

    var _useRowspanAndColspan = useRowspanAndColspan(footData, columns, rowKey, props.rowspanAndColspanInFooter),
        skipSpansMap = _useRowspanAndColspan.skipSpansMap;

    var renderTFootCell = function renderTFootCell(p) {
      var col = p.col,
          row = p.row;

      if (isFunction_1(col.foot)) {
        return col.foot(p);
      }

      return col.foot || get_1(row, col.colKey);
    };

    var theadClasses = [classnames.tableFooterClasses.footer, _defineProperty$3({}, classnames.tableFooterClasses.fixed, props.isFixedHeader)];
    if (!columns) return null;
    var footerDomList = footData === null || footData === void 0 ? void 0 : footData.map(function (row, rowIndex) {
      var trAttributes = formatRowAttributes(props.rowAttributes, {
        row: row,
        rowIndex: rowIndex,
        type: "foot"
      });
      var customClasses = formatRowClassNames(props.rowClassName, {
        row: row,
        rowIndex: rowIndex,
        type: "foot"
      }, props.rowKey || "id");
      return /* @__PURE__ */React__default["default"].createElement("tr", _objectSpread$1V(_objectSpread$1V({
        key: rowIndex
      }, trAttributes), {}, {
        className: classNames$1(customClasses)
      }), columns.map(function (col, colIndex) {
        var _props$thWidthList;

        var cellSpans = {};
        var spanState = null;

        if (skipSpansMap.size) {
          var _spanState, _spanState2;

          var cellKey = getCellKey(row, rowKey, col.colKey, colIndex);
          spanState = skipSpansMap.get(cellKey) || {};
          ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
          ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
          if (spanState.skipped) return null;
        }

        var tdStyles = getColumnFixedStyles(col, colIndex, props.rowAndColFixedPosition, classnames.tableColFixedClasses);

        var style = _objectSpread$1V({}, tdStyles.style);

        if ((_props$thWidthList = props.thWidthList) !== null && _props$thWidthList !== void 0 && _props$thWidthList[col.colKey]) {
          style.width = "".concat(props.thWidthList[col.colKey] || 0, "px");
        }

        return /* @__PURE__ */React__default["default"].createElement("td", {
          key: col.colKey,
          rowSpan: cellSpans.rowspan,
          colSpan: cellSpans.colspan,
          className: classNames$1(tdStyles.classes),
          style: style
        }, renderTFootCell({
          row: row,
          rowIndex: rowIndex,
          col: col,
          colIndex: colIndex
        }));
      }));
    });
    if (!footerSummary && (!props.footData || !props.footData.length)) return null;
    return /* @__PURE__ */React__default["default"].createElement("tfoot", {
      ref: tfooterRef,
      className: classNames$1(theadClasses)
    }, footerSummary && /* @__PURE__ */React__default["default"].createElement("tr", {
      className: classnames.tableFullRowClasses.base
    }, /* @__PURE__ */React__default["default"].createElement("td", {
      colSpan: columns.length
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classnames.tableFullRowClasses.innerFullElement
    }, footerSummary))), footerDomList);
  }

  function isRowSelectedDisabled(selectColumn, row, rowIndex) {
    var disabled = isFunction_1(selectColumn.disabled) ? selectColumn.disabled({
      row: row,
      rowIndex: rowIndex
    }) : selectColumn.disabled;

    if (selectColumn.checkProps) {
      if (isFunction_1(selectColumn.checkProps)) {
        disabled = disabled || selectColumn.checkProps({
          row: row,
          rowIndex: rowIndex
        }).disabled;
      } else if (selectColumn.checkProps === "object") {
        disabled = disabled || selectColumn.checkProps.disabled;
      }
    }

    return !!disabled;
  }
  function getColWidthAttr(col, attrKey) {
    var attr = col[attrKey];
    return isNumber_1(attr) ? attr : parseFloat(attr);
  }

  var findAllChildren = function findAllChildren(col) {
    var loopQue = [];
    var result = [];

    if (col.children) {
      col.children.forEach(function (child) {
        return loopQue.push(child);
      });

      while (loopQue.length) {
        var child = loopQue.shift();

        if (!child.children || !child.children.length) {
          result.push(child);
        } else {
          child.children.forEach(function (child2) {
            return loopQue.push(child2);
          });
        }
      }
    }

    return result;
  };

  function setThWidthListByColumnDrag(dragCol, dragWidth, effectCol, options, callback) {
    var getThWidthList = options.getThWidthList,
        DEFAULT_MIN_WIDTH = options.DEFAULT_MIN_WIDTH;
    var thWidthList = getThWidthList();
    var dragChildrenCols = findAllChildren(dragCol);
    var effectChildrenCols = findAllChildren(effectCol);

    if (dragChildrenCols.length || effectChildrenCols.length) {
      var _effectCol$resize;

      var oldWidth = 0;
      var oldEffectWidth = 0;
      var notCalculateCols = [];
      var effectColsMinWidth = 0;
      var updateMap = {};

      if (!dragChildrenCols.length) {
        dragChildrenCols.push(dragCol);
      }

      if (!effectChildrenCols.length) {
        effectChildrenCols.push(effectCol);
      }

      dragChildrenCols.forEach(function (child) {
        oldWidth += thWidthList[child.colKey] || getColWidthAttr(child, "width");
        notCalculateCols.push(child.colKey);
      });
      effectChildrenCols.forEach(function (child) {
        var _child$resize;

        oldEffectWidth += thWidthList[child.colKey] || getColWidthAttr(child, "width");
        notCalculateCols.push(child.colKey);
        effectColsMinWidth += Math.max(((_child$resize = child.resize) === null || _child$resize === void 0 ? void 0 : _child$resize.minWidth) || DEFAULT_MIN_WIDTH, getColWidthAttr(child, "minWidth") || DEFAULT_MIN_WIDTH);
      });
      dragChildrenCols.forEach(function (child) {
        updateMap[child.colKey] = thWidthList[child.colKey] / oldWidth * dragWidth;
      });
      var remainWidth = Math.max(effectColsMinWidth, oldWidth + oldEffectWidth - dragWidth, Math.max(getColWidthAttr(effectCol, "minWidth") || DEFAULT_MIN_WIDTH, ((_effectCol$resize = effectCol.resize) === null || _effectCol$resize === void 0 ? void 0 : _effectCol$resize.minWidth) || DEFAULT_MIN_WIDTH));
      effectChildrenCols.forEach(function (child) {
        var _child$resize2;

        updateMap[child.colKey] = Math.max(((_child$resize2 = child.resize) === null || _child$resize2 === void 0 ? void 0 : _child$resize2.minWidth) || DEFAULT_MIN_WIDTH, getColWidthAttr(child, "minWidth") || DEFAULT_MIN_WIDTH, thWidthList[child.colKey] / oldEffectWidth * remainWidth);
      });
      callback(updateMap, notCalculateCols);
    } else {
      var _effectCol$resize2, _callback;

      var _oldWidth = thWidthList[dragCol.colKey] || getColWidthAttr(dragCol, "width");

      var _oldEffectWidth = thWidthList[effectCol.colKey] || getColWidthAttr(effectCol, "width");

      callback((_callback = {}, _defineProperty$3(_callback, dragCol.colKey, dragWidth), _defineProperty$3(_callback, effectCol.colKey, Math.max(((_effectCol$resize2 = effectCol.resize) === null || _effectCol$resize2 === void 0 ? void 0 : _effectCol$resize2.minWidth) || DEFAULT_MIN_WIDTH, getColWidthAttr(effectCol, "minWidth") || DEFAULT_MIN_WIDTH, _oldWidth + _oldEffectWidth - dragWidth)), _callback), [dragCol.colKey, effectCol.colKey]);
    }
  }

  var setMissingColumnWidth = function setMissingColumnWidth(columns, missingWidthCols, thWidthList, tableLayout, actualWidth, tableWidth) {
    var thMap = thWidthList;

    if (actualWidth < tableWidth) {
      var widthDiff = tableWidth - actualWidth;
      var remainCols = [];
      missingWidthCols.forEach(function (col) {
        var minWidth = getColWidthAttr(col, "minWidth");

        if (minWidth) {
          thMap[col.colKey] = minWidth;
          widthDiff -= minWidth;
        } else {
          remainCols.push(col);
        }
      });

      if (widthDiff > 0) {
        if (remainCols.length) {
          var avgWidth = widthDiff / remainCols.length;
          remainCols.forEach(function (col) {
            thMap[col.colKey] = avgWidth;
          });
        } else {
          var _avgWidth = widthDiff / missingWidthCols.length;

          missingWidthCols.forEach(function (col) {
            thMap[col.colKey] += _avgWidth;
          });
        }
      } else {
        remainCols.forEach(function (col) {
          thMap[col.colKey] = 100;
        });
      }
    } else if (tableLayout === "fixed") {
      missingWidthCols.forEach(function (col) {
        thMap[col.colKey] = getColWidthAttr(col, "minWidth") || 100;
      });
    } else {
      var extraWidth = 0;
      missingWidthCols.forEach(function (col) {
        extraWidth += getColWidthAttr(col, "minWidth") || 100;
      });
      var totalWidth = extraWidth + actualWidth;
      columns.forEach(function (col) {
        if (!thMap[col.colKey]) {
          var colWidth = getColWidthAttr(col, "minWidth") || 100;
          thMap[col.colKey] = colWidth / totalWidth * tableWidth;
        } else {
          thMap[col.colKey] = thMap[col.colKey] / totalWidth * tableWidth;
        }
      });
    }
  };

  var setNormalColumnWidth = function setNormalColumnWidth(columns, thWidthList, actualWidth, tableWidth, notCalculateWidthCols) {
    var thMap = thWidthList;
    columns.forEach(function (col) {
      if (notCalculateWidthCols.includes(col.colKey)) return;
      thMap[col.colKey] = thMap[col.colKey] / actualWidth * tableWidth;
    });
  };

  var setInitialColumnWidth = function setInitialColumnWidth(missingWidthCols, thWidthList) {
    var thMap = thWidthList;
    missingWidthCols.forEach(function (col) {
      thMap[col.colKey] = getColWidthAttr(col, "minWidth") || 100;
    });
  };

  function recalculateColumnWidth(columns, thWidthList, tableLayout, tableElmWidth, notCalculateWidthCols, callback) {
    var actualWidth = 0;
    var missingWidthCols = [];
    var thMap = {};
    columns.forEach(function (col) {
      if (!thWidthList[col.colKey]) {
        thMap[col.colKey] = getColWidthAttr(col, "width");
      } else {
        thMap[col.colKey] = thWidthList[col.colKey];
      }

      var originWidth = thMap[col.colKey];

      if (originWidth) {
        actualWidth += originWidth;
      } else {
        missingWidthCols.push(col);
      }
    });
    var tableWidth = tableElmWidth;
    var needUpdate = false;

    if (tableWidth > 0) {
      if (missingWidthCols.length) {
        setMissingColumnWidth(columns, missingWidthCols, thMap, tableLayout, actualWidth, tableWidth);
        needUpdate = true;
      } else {
        if (notCalculateWidthCols.length) {
          var sum = 0;
          notCalculateWidthCols.forEach(function (colKey) {
            sum += thMap[colKey];
          });
          actualWidth -= sum;
          tableWidth -= sum;
        }

        if (actualWidth !== tableWidth || notCalculateWidthCols.length) {
          setNormalColumnWidth(columns, thMap, actualWidth, tableWidth, notCalculateWidthCols);
          needUpdate = true;
        }
      }
    } else {
      setInitialColumnWidth(missingWidthCols, thMap);
      needUpdate = true;
    }

    if (needUpdate) {
      var addon = 0;
      Object.keys(thMap).forEach(function (key) {
        var width = thMap[key];
        addon += width - Math.floor(width);
        thMap[key] = Math.floor(width) + (addon > 1 ? 1 : 0);

        if (addon > 1) {
          addon -= 1;
        }
      });

      if (addon > 0.5) {
        thMap[columns[0].colKey] += 1;
      }
    }

    callback(thMap);
  }

  function ownKeys$1V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1V(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DEFAULT_MIN_WIDTH = 80;
  var DEFAULT_MAX_WIDTH = 600;
  function useColumnResize(tableContentRef, refreshTable, getThWidthList, updateThWidthList) {
    var resizeLineRef = React.useRef();
    var notCalculateWidthCols = React.useRef([]);
    var effectColMap = React.useRef({});

    var setEffectColMap = function setEffectColMap(nodes, parent) {
      if (!nodes) return;
      nodes.forEach(function (n, index) {
        var parentPrevCol = parent ? effectColMap.current[parent.colKey].prev : nodes[index + 1];
        var parentNextCol = parent ? effectColMap.current[parent.colKey].next : nodes[index - 1];
        var prev = index === 0 ? parentPrevCol : nodes[index - 1];
        var next = index === nodes.length - 1 ? parentNextCol : nodes[index + 1];
        effectColMap.current[n.colKey] = {
          prev: prev,
          next: next
        };
        setEffectColMap(n.children, n);
      });
    };

    var resizeLineParams = {
      isDragging: false,
      draggingCol: null,
      draggingStart: 0,
      effectCol: null
    };

    var _useState = React.useState({
      display: "none",
      left: "10px",
      height: "10px",
      bottom: "0"
    }),
        _useState2 = _slicedToArray(_useState, 2),
        resizeLineStyle = _useState2[0],
        setResizeLineStyle = _useState2[1];

    var setNotCalculateWidthCols = function setNotCalculateWidthCols(colKeys) {
      notCalculateWidthCols.current = colKeys;
    };

    var resizeLineLeft = "";

    var onColumnMouseover = function onColumnMouseover(e) {
      if (!resizeLineRef.current) return;
      var target = e.target.closest("th");
      var targetBoundRect = target.getBoundingClientRect();

      if (!resizeLineParams.isDragging) {
        var distance = 8;

        if (targetBoundRect.right - e.pageX <= distance) {
          target.style.cursor = "col-resize";
          resizeLineParams.draggingCol = target;
          resizeLineParams.effectCol = "next";
        } else if (e.pageX - targetBoundRect.left <= distance) {
          var prevEl = target.previousElementSibling;

          if (prevEl) {
            target.style.cursor = "col-resize";
            resizeLineParams.draggingCol = prevEl;
            resizeLineParams.effectCol = "prev";
          } else {
            target.style.cursor = "";
            resizeLineParams.draggingCol = null;
            resizeLineParams.effectCol = null;
          }
        } else {
          target.style.cursor = "";
          resizeLineParams.draggingCol = null;
          resizeLineParams.effectCol = null;
        }
      }
    };

    var onColumnMousedown = function onColumnMousedown(e, col) {
      var _tableContentRef$curr;

      if (!resizeLineParams.draggingCol) return;

      var getMinMaxColWidth = function getMinMaxColWidth(col2, effectPrevCol2) {
        var _targetCol$resize, _targetCol$resize2;

        var targetCol = null;

        if (resizeLineParams.effectCol === "next") {
          targetCol = col2;
        } else {
          targetCol = effectPrevCol2;
        }

        var propMinWidth = isNumber_1(targetCol.minWidth) ? targetCol.minWidth : parseFloat(targetCol.minWidth);
        return {
          minColWidth: Math.max(((_targetCol$resize = targetCol.resize) === null || _targetCol$resize === void 0 ? void 0 : _targetCol$resize.minWidth) || DEFAULT_MIN_WIDTH, propMinWidth || DEFAULT_MIN_WIDTH),
          maxColWidth: ((_targetCol$resize2 = targetCol.resize) === null || _targetCol$resize2 === void 0 ? void 0 : _targetCol$resize2.maxWidth) || DEFAULT_MAX_WIDTH
        };
      };

      var target = resizeLineParams.draggingCol;
      var targetBoundRect = target.getBoundingClientRect();
      var tableBoundRect = (_tableContentRef$curr = tableContentRef.current) === null || _tableContentRef$curr === void 0 ? void 0 : _tableContentRef$curr.getBoundingClientRect();
      var resizeLinePos = targetBoundRect.right - tableBoundRect.left;
      var colLeft = targetBoundRect.left - tableBoundRect.left;
      var effectNextCol = effectColMap.current[col.colKey].next;
      var effectPrevCol = effectColMap.current[col.colKey].prev;

      var _getMinMaxColWidth = getMinMaxColWidth(col, effectPrevCol),
          minColWidth = _getMinMaxColWidth.minColWidth,
          maxColWidth = _getMinMaxColWidth.maxColWidth;

      var minResizeLineLeft = colLeft + minColWidth;
      var maxResizeLineLeft = colLeft + maxColWidth;
      resizeLineParams.isDragging = true;
      resizeLineParams.draggingStart = e.pageX || 0;
      var parent = tableContentRef.current.parentElement.getBoundingClientRect();
      var resizeLineBottom = "".concat(parent.bottom - tableBoundRect.bottom, "px");

      if (resizeLineRef !== null && resizeLineRef !== void 0 && resizeLineRef.current) {
        setResizeLineStyle({
          display: "block",
          left: "".concat(resizeLinePos, "px"),
          height: "".concat(tableBoundRect.bottom - targetBoundRect.top, "px"),
          bottom: resizeLineBottom
        });
      }

      var onDragOver = function onDragOver(e2) {
        if (resizeLineParams.isDragging) {
          var left = resizeLinePos + e2.x - resizeLineParams.draggingStart;
          var lineLeft = "".concat(Math.min(Math.max(left, minResizeLineLeft), maxResizeLineLeft), "px");
          setResizeLineStyle({
            display: "block",
            left: lineLeft,
            height: "".concat(tableBoundRect.bottom - targetBoundRect.top, "px"),
            bottom: resizeLineBottom
          });
          resizeLineLeft = lineLeft;
        }
      };

      var onDragEnd = function onDragEnd() {
        if (resizeLineParams.isDragging) {
          var width = Math.ceil(parseInt(resizeLineLeft, 10) - colLeft) || 0;

          if (width <= minColWidth) {
            width = minColWidth;
          } else if (width >= maxColWidth) {
            width = maxColWidth;
          }

          if (resizeLineParams.effectCol === "next") {
            setThWidthListByColumnDrag(col, width, effectNextCol, {
              getThWidthList: getThWidthList,
              DEFAULT_MIN_WIDTH: DEFAULT_MIN_WIDTH
            }, function (updateMap, notCalculateCols) {
              updateThWidthList(updateMap);
              setNotCalculateWidthCols(notCalculateCols);
            });
          } else if (resizeLineParams.effectCol === "prev") {
            setThWidthListByColumnDrag(effectPrevCol, width, col, {
              getThWidthList: getThWidthList,
              DEFAULT_MIN_WIDTH: DEFAULT_MIN_WIDTH
            }, function (updateMap, notCalculateCols) {
              updateThWidthList(updateMap);
              setNotCalculateWidthCols(notCalculateCols);
            });
          }

          resizeLineParams.isDragging = false;
          resizeLineParams.draggingCol = null;
          resizeLineParams.effectCol = null;
          target.style.cursor = "";
          setResizeLineStyle(_objectSpread$1U(_objectSpread$1U({}, resizeLineStyle), {}, {
            display: "none",
            left: "0"
          }));
          document.removeEventListener("mousemove", onDragOver);
          document.removeEventListener("mouseup", onDragEnd);
          document.onselectstart = null;
          document.ondragstart = null;
        }

        refreshTable();
      };

      document.addEventListener("mouseup", onDragEnd);
      document.addEventListener("mousemove", onDragOver);

      document.onselectstart = function () {
        return false;
      };

      document.ondragstart = function () {
        return false;
      };
    };

    var recalculateColWidth = function recalculateColWidth(columns, thWidthList, tableLayout, tableElmWidth) {
      recalculateColumnWidth(columns, thWidthList, tableLayout, tableElmWidth, notCalculateWidthCols.current, function (widthMap) {
        updateThWidthList(widthMap);

        if (notCalculateWidthCols.current.length) {
          notCalculateWidthCols.current = [];
        }
      });
    };

    return {
      resizeLineRef: resizeLineRef,
      resizeLineStyle: resizeLineStyle,
      onColumnMouseover: onColumnMouseover,
      onColumnMousedown: onColumnMousedown,
      recalculateColWidth: recalculateColWidth,
      setEffectColMap: setEffectColMap
    };
  }

  function useAffix(props) {
    var tableContentRef = React.useRef();
    var affixHeaderRef = React.useRef();
    var affixFooterRef = React.useRef();
    var horizontalScrollbarRef = React.useRef();
    var paginationRef = React.useRef();

    var _useState = React.useState(true),
        _useState2 = _slicedToArray(_useState, 2),
        showAffixHeader = _useState2[0],
        setShowAffixHeader = _useState2[1];

    var _useState3 = React.useState(true),
        _useState4 = _slicedToArray(_useState3, 2),
        showAffixFooter = _useState4[0],
        setShowAffixFooter = _useState4[1];

    var _useState5 = React.useState(true),
        _useState6 = _slicedToArray(_useState5, 2),
        showAffixPagination = _useState6[0],
        setShowAffixPagination = _useState6[1];

    var isVirtualScroll = React.useMemo(function () {
      return props.scroll && props.scroll.type === "virtual" && (props.scroll.threshold || 100) < props.data.length;
    }, [props.data.length, props.scroll]);
    var isAffixed = React.useMemo(function () {
      return !!(props.headerAffixedTop || props.footerAffixedBottom || props.horizontalScrollAffixedBottom);
    }, [props.footerAffixedBottom, props.headerAffixedTop, props.horizontalScrollAffixedBottom]);
    var lastScrollLeft = 0;

    var onHorizontalScroll = function onHorizontalScroll(scrollElement) {
      if (!isAffixed && !isVirtualScroll) return;
      var target = scrollElement;

      if (!target && tableContentRef.current) {
        lastScrollLeft = 0;
        target = tableContentRef.current;
      }

      if (!target) return;
      var left = target.scrollLeft;
      if (lastScrollLeft === left) return;
      lastScrollLeft = left;
      var toUpdateScrollElement = [tableContentRef.current, affixHeaderRef.current, affixFooterRef.current, horizontalScrollbarRef.current];

      for (var i = 0, len = toUpdateScrollElement.length; i < len; i++) {
        if (toUpdateScrollElement[i] && scrollElement !== toUpdateScrollElement[i]) {
          toUpdateScrollElement[i].scrollLeft = left;
        }
      }
    };

    var isAffixedBottomElementShow = function isAffixedBottomElementShow(elementRect, tableRect, headerHeight) {
      return tableRect.top + headerHeight < elementRect.top && elementRect.top > elementRect.height;
    };

    var getOffsetTop = function getOffsetTop(props2) {
      if (typeof props2 === "boolean") return 0;
      return props2.offsetTop || 0;
    };

    var updateAffixHeaderOrFooter = function updateAffixHeaderOrFooter() {
      var _tableContentRef$curr, _tableContentRef$curr2, _tableContentRef$curr3, _affixFooterRef$curre;

      if (!isAffixed && !isVirtualScroll) return;
      var pos = (_tableContentRef$curr = tableContentRef.current) === null || _tableContentRef$curr === void 0 ? void 0 : _tableContentRef$curr.getBoundingClientRect();
      var headerRect = (_tableContentRef$curr2 = tableContentRef.current) === null || _tableContentRef$curr2 === void 0 ? void 0 : (_tableContentRef$curr3 = _tableContentRef$curr2.querySelector("thead")) === null || _tableContentRef$curr3 === void 0 ? void 0 : _tableContentRef$curr3.getBoundingClientRect();
      var headerHeight = headerRect.height || 0;
      var footerRect = (_affixFooterRef$curre = affixFooterRef.current) === null || _affixFooterRef$curre === void 0 ? void 0 : _affixFooterRef$curre.getBoundingClientRect();

      if ((props.headerAffixedTop || isVirtualScroll) && affixHeaderRef.current) {
        var offsetTop = getOffsetTop(props.headerAffixProps || props.headerAffixedTop);
        var footerHeight = (footerRect === null || footerRect === void 0 ? void 0 : footerRect.height) || 0;
        var r = Math.abs(pos.top) < pos.height - headerHeight - offsetTop - footerHeight;

        if (isVirtualScroll) {
          r = pos.top > -1 * headerRect.height;
        }

        setShowAffixHeader(r);
      }

      if (props.footerAffixedBottom && affixFooterRef.current) {
        var show = isAffixedBottomElementShow(footerRect, pos, headerHeight);
        setShowAffixFooter(show);
      } else if (props.horizontalScrollAffixedBottom && horizontalScrollbarRef.current) {
        var horizontalScrollbarRect = horizontalScrollbarRef.current.getBoundingClientRect();

        var _show = isAffixedBottomElementShow(horizontalScrollbarRect, pos, headerHeight);

        setShowAffixFooter(_show);
      }

      if (props.paginationAffixedBottom && paginationRef.current) {
        var pageRect = paginationRef.current.getBoundingClientRect();

        var _show2 = isAffixedBottomElementShow(pageRect, pos, headerHeight);

        setShowAffixPagination(_show2);
      }
    };

    var onDocumentScroll = function onDocumentScroll() {
      updateAffixHeaderOrFooter();
    };

    var onFootScroll = function onFootScroll() {
      onHorizontalScroll(affixFooterRef.current);
    };

    var onHeaderScroll = function onHeaderScroll() {
      onHorizontalScroll(affixHeaderRef.current);
    };

    var horizontalScrollbarScroll = function horizontalScrollbarScroll() {
      onHorizontalScroll(horizontalScrollbarRef.current);
    };

    var onTableContentScroll = function onTableContentScroll() {
      onHorizontalScroll(tableContentRef.current);
    };

    var onFootMouseEnter = function onFootMouseEnter() {
      on$1(affixFooterRef.current, "scroll", onFootScroll);
    };

    var onFootMouseLeave = function onFootMouseLeave() {
      off$1(affixFooterRef.current, "scroll", onFootScroll);
    };

    var onHeaderMouseEnter = function onHeaderMouseEnter() {
      on$1(affixHeaderRef.current, "scroll", onHeaderScroll);
    };

    var onHeaderMouseLeave = function onHeaderMouseLeave() {
      off$1(affixHeaderRef.current, "scroll", onHeaderScroll);
    };

    var onScrollbarMouseEnter = function onScrollbarMouseEnter() {
      on$1(horizontalScrollbarRef.current, "scroll", horizontalScrollbarScroll);
    };

    var onScrollbarMouseLeave = function onScrollbarMouseLeave() {
      off$1(horizontalScrollbarRef.current, "scroll", horizontalScrollbarScroll);
    };

    var onTableContentMouseEnter = function onTableContentMouseEnter() {
      on$1(tableContentRef.current, "scroll", onTableContentScroll);
    };

    var onTableContentMouseLeave = function onTableContentMouseLeave() {
      off$1(tableContentRef.current, "scroll", onTableContentScroll);
    };

    var addHorizontalScrollListeners = function addHorizontalScrollListeners() {
      if (affixHeaderRef.current) {
        on$1(affixHeaderRef.current, "mouseenter", onHeaderMouseEnter);
        on$1(affixHeaderRef.current, "mouseleave", onHeaderMouseLeave);
      }

      if (props.footerAffixedBottom && affixFooterRef.current) {
        on$1(affixFooterRef.current, "mouseenter", onFootMouseEnter);
        on$1(affixFooterRef.current, "mouseleave", onFootMouseLeave);
      }

      if (props.horizontalScrollAffixedBottom && horizontalScrollbarRef.current) {
        on$1(horizontalScrollbarRef.current, "mouseenter", onScrollbarMouseEnter);
        on$1(horizontalScrollbarRef.current, "mouseleave", onScrollbarMouseLeave);
      }

      if ((isAffixed || isVirtualScroll) && tableContentRef.current) {
        on$1(tableContentRef.current, "mouseenter", onTableContentMouseEnter);
        on$1(tableContentRef.current, "mouseleave", onTableContentMouseLeave);
      }
    };

    var removeHorizontalScrollListeners = function removeHorizontalScrollListeners() {
      if (affixHeaderRef.current) {
        off$1(affixHeaderRef.current, "mouseenter", onHeaderMouseEnter);
        off$1(affixHeaderRef.current, "mouseleave", onHeaderMouseLeave);
      }

      if (affixFooterRef.current) {
        off$1(affixFooterRef.current, "mouseenter", onFootMouseEnter);
        off$1(affixFooterRef.current, "mouseleave", onFootMouseLeave);
      }

      if (tableContentRef.current) {
        off$1(tableContentRef.current, "mouseenter", onTableContentMouseEnter);
        off$1(tableContentRef.current, "mouseleave", onTableContentMouseLeave);
      }

      if (horizontalScrollbarRef.current) {
        off$1(horizontalScrollbarRef.current, "mouseenter", onScrollbarMouseEnter);
        off$1(horizontalScrollbarRef.current, "mouseleave", onScrollbarMouseLeave);
      }
    };

    var addVerticalScrollListener = function addVerticalScrollListener() {
      if (!isAffixed && !props.paginationAffixedBottom) return;
      var timer = setTimeout(function () {
        if (isAffixed || props.paginationAffixedBottom) {
          on$1(document, "scroll", onDocumentScroll);
        } else {
          off$1(document, "scroll", onDocumentScroll);
        }

        clearTimeout(timer);
      });
    };

    React.useEffect(function () {
      var timer = setTimeout(function () {
        addHorizontalScrollListeners();
        onHorizontalScroll();
        updateAffixHeaderOrFooter();
        clearTimeout(timer);
      });
      return removeHorizontalScrollListeners;
    }, [affixHeaderRef, affixFooterRef, horizontalScrollbarRef, tableContentRef]);
    React.useEffect(function () {
      addVerticalScrollListener();
      return function () {
        off$1(document, "scroll", onDocumentScroll);
      };
    }, [isAffixed]);
    React.useEffect(function () {
      addHorizontalScrollListeners();
      onHorizontalScroll();
    }, [props.data, props.columns, props.headerAffixedTop, props.footerAffixedBottom, props.horizontalScrollAffixedBottom]);

    var setTableContentRef = function setTableContentRef(tableContent) {
      tableContentRef.current = tableContent;
      addVerticalScrollListener();
    };

    return {
      showAffixHeader: showAffixHeader,
      showAffixFooter: showAffixFooter,
      showAffixPagination: showAffixPagination,
      affixHeaderRef: affixHeaderRef,
      affixFooterRef: affixFooterRef,
      horizontalScrollbarRef: horizontalScrollbarRef,
      paginationRef: paginationRef,
      onHorizontalScroll: onHorizontalScroll,
      setTableContentRef: setTableContentRef,
      updateAffixHeaderOrFooter: updateAffixHeaderOrFooter
    };
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */

  function arrayEach$1(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  var _arrayEach = arrayEach$1;

  var overArg = _overArg;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeKeys$1 = overArg(Object.keys, Object);
  var _nativeKeys = nativeKeys$1;

  var isPrototype$1 = _isPrototype,
      nativeKeys = _nativeKeys;
  /** Used for built-in method references. */

  var objectProto$7 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$7 = objectProto$7.hasOwnProperty;
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeys$2(object) {
    if (!isPrototype$1(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeys = baseKeys$2;

  var arrayLikeKeys = _arrayLikeKeys,
      baseKeys$1 = _baseKeys,
      isArrayLike$1 = isArrayLike_1;
  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */

  function keys$4(object) {
    return isArrayLike$1(object) ? arrayLikeKeys(object) : baseKeys$1(object);
  }

  var keys_1 = keys$4;

  var copyObject$5 = _copyObject,
      keys$3 = keys_1;
  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssign$1(object, source) {
    return object && copyObject$5(source, keys$3(source), object);
  }

  var _baseAssign = baseAssign$1;

  var copyObject$4 = _copyObject,
      keysIn$3 = keysIn_1;
  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssignIn$1(object, source) {
    return object && copyObject$4(source, keysIn$3(source), object);
  }

  var _baseAssignIn = baseAssignIn$1;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */

  function arrayFilter$1(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  var _arrayFilter = arrayFilter$1;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */

  function stubArray$2() {
    return [];
  }

  var stubArray_1 = stubArray$2;

  var arrayFilter = _arrayFilter,
      stubArray$1 = stubArray_1;
  /** Used for built-in method references. */

  var objectProto$6 = Object.prototype;
  /** Built-in value references. */

  var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return arrayFilter(nativeGetSymbols$1(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var _getSymbols = getSymbols$3;

  var copyObject$3 = _copyObject,
      getSymbols$2 = _getSymbols;
  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbols$1(source, object) {
    return copyObject$3(source, getSymbols$2(source), object);
  }

  var _copySymbols = copySymbols$1;

  var arrayPush$1 = _arrayPush,
      getPrototype = _getPrototype,
      getSymbols$1 = _getSymbols,
      stubArray = stubArray_1;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush$1(result, getSymbols$1(object));
      object = getPrototype(object);
    }

    return result;
  };
  var _getSymbolsIn = getSymbolsIn$2;

  var copyObject$2 = _copyObject,
      getSymbolsIn$1 = _getSymbolsIn;
  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbolsIn$1(source, object) {
    return copyObject$2(source, getSymbolsIn$1(source), object);
  }

  var _copySymbolsIn = copySymbolsIn$1;

  var arrayPush = _arrayPush,
      isArray$3 = isArray_1;
  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray$3(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys$2;

  var baseGetAllKeys$1 = _baseGetAllKeys,
      getSymbols = _getSymbols,
      keys$2 = keys_1;
  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeys$2(object) {
    return baseGetAllKeys$1(object, keys$2, getSymbols);
  }

  var _getAllKeys = getAllKeys$2;

  var baseGetAllKeys = _baseGetAllKeys,
      getSymbolsIn = _getSymbolsIn,
      keysIn$2 = keysIn_1;
  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeysIn$2(object) {
    return baseGetAllKeys(object, keysIn$2, getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn$2;

  var getNative$3 = _getNative,
      root$3 = _root;
  /* Built-in method references that are verified to be native. */

  var DataView$1 = getNative$3(root$3, 'DataView');
  var _DataView = DataView$1;

  var getNative$2 = _getNative,
      root$2 = _root;
  /* Built-in method references that are verified to be native. */

  var Promise$2 = getNative$2(root$2, 'Promise');
  var _Promise = Promise$2;

  var getNative$1 = _getNative,
      root$1 = _root;
  /* Built-in method references that are verified to be native. */

  var Set$2 = getNative$1(root$1, 'Set');
  var _Set = Set$2;

  var getNative = _getNative,
      root = _root;
  /* Built-in method references that are verified to be native. */

  var WeakMap$2 = getNative(root, 'WeakMap');
  var _WeakMap = WeakMap$2;

  var DataView = _DataView,
      Map$1 = _Map,
      Promise$1 = _Promise,
      Set$1 = _Set,
      WeakMap$1 = _WeakMap,
      baseGetTag$1 = _baseGetTag,
      toSource = _toSource;
  /** `Object#toString` result references. */

  var mapTag$5 = '[object Map]',
      objectTag$2 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$5 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';
  var dataViewTag$3 = '[object DataView]';
  /** Used to detect maps, sets, and weakmaps. */

  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map$1),
      promiseCtorString = toSource(Promise$1),
      setCtorString = toSource(Set$1),
      weakMapCtorString = toSource(WeakMap$1);
  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  var getTag$5 = baseGetTag$1; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

  if (DataView && getTag$5(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$5(new Map$1()) != mapTag$5 || Promise$1 && getTag$5(Promise$1.resolve()) != promiseTag || Set$1 && getTag$5(new Set$1()) != setTag$5 || WeakMap$1 && getTag$5(new WeakMap$1()) != weakMapTag$1) {
    getTag$5 = function getTag(value) {
      var result = baseGetTag$1(value),
          Ctor = result == objectTag$2 ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$3;

          case mapCtorString:
            return mapTag$5;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag$5;

          case weakMapCtorString:
            return weakMapTag$1;
        }
      }

      return result;
    };
  }

  var _getTag = getTag$5;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$6 = objectProto$5.hasOwnProperty;
  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */

  function initCloneArray$1(array) {
    var length = array.length,
        result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

    if (length && typeof array[0] == 'string' && hasOwnProperty$6.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  var _initCloneArray = initCloneArray$1;

  var cloneArrayBuffer$1 = _cloneArrayBuffer;
  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */

  function cloneDataView$1(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView$1;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;
  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */

  function cloneRegExp$1(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp$1;

  var _Symbol$1 = _Symbol$6;
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$1 = _Symbol$1 ? _Symbol$1.prototype : undefined,
      symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;
  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */

  function cloneSymbol$1(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol$1;

  var cloneArrayBuffer = _cloneArrayBuffer,
      cloneDataView = _cloneDataView,
      cloneRegExp = _cloneRegExp,
      cloneSymbol = _cloneSymbol,
      cloneTypedArray = _cloneTypedArray;
  /** `Object#toString` result references. */

  var boolTag$2 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      mapTag$4 = '[object Map]',
      numberTag$2 = '[object Number]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$2 = '[object Symbol]';
  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';
  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneByTag$1(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag$2:
        return cloneArrayBuffer(object);

      case boolTag$2:
      case dateTag$2:
        return new Ctor(+object);

      case dataViewTag$2:
        return cloneDataView(object, isDeep);

      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return cloneTypedArray(object, isDeep);

      case mapTag$4:
        return new Ctor();

      case numberTag$2:
      case stringTag$2:
        return new Ctor(object);

      case regexpTag$2:
        return cloneRegExp(object);

      case setTag$4:
        return new Ctor();

      case symbolTag$2:
        return cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag$1;

  var getTag$4 = _getTag,
      isObjectLike$3 = isObjectLike_1;
  /** `Object#toString` result references. */

  var mapTag$3 = '[object Map]';
  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */

  function baseIsMap$1(value) {
    return isObjectLike$3(value) && getTag$4(value) == mapTag$3;
  }

  var _baseIsMap = baseIsMap$1;

  var baseIsMap = _baseIsMap,
      baseUnary$3 = _baseUnary,
      nodeUtil$1 = _nodeUtil.exports;
  /* Node.js helper references. */

  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */

  var isMap$1 = nodeIsMap ? baseUnary$3(nodeIsMap) : baseIsMap;
  var isMap_1 = isMap$1;

  var getTag$3 = _getTag,
      isObjectLike$2 = isObjectLike_1;
  /** `Object#toString` result references. */

  var setTag$3 = '[object Set]';
  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */

  function baseIsSet$1(value) {
    return isObjectLike$2(value) && getTag$3(value) == setTag$3;
  }

  var _baseIsSet = baseIsSet$1;

  var baseIsSet = _baseIsSet,
      baseUnary$2 = _baseUnary,
      nodeUtil = _nodeUtil.exports;
  /* Node.js helper references. */

  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */

  var isSet$1 = nodeIsSet ? baseUnary$2(nodeIsSet) : baseIsSet;
  var isSet_1 = isSet$1;

  var Stack$1 = _Stack,
      arrayEach = _arrayEach,
      assignValue = _assignValue,
      baseAssign = _baseAssign,
      baseAssignIn = _baseAssignIn,
      cloneBuffer = _cloneBuffer.exports,
      copyArray = _copyArray,
      copySymbols = _copySymbols,
      copySymbolsIn = _copySymbolsIn,
      getAllKeys$1 = _getAllKeys,
      getAllKeysIn$1 = _getAllKeysIn,
      getTag$2 = _getTag,
      initCloneArray = _initCloneArray,
      initCloneByTag = _initCloneByTag,
      initCloneObject = _initCloneObject,
      isArray$2 = isArray_1,
      isBuffer$2 = isBuffer$5.exports,
      isMap = isMap_1,
      isObject = isObject_1,
      isSet = isSet_1,
      keys$1 = keys_1,
      keysIn$1 = keysIn_1;
  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG$2 = 1,
      CLONE_FLAT_FLAG$1 = 2,
      CLONE_SYMBOLS_FLAG$2 = 4;
  /** `Object#toString` result references. */

  var argsTag$1 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      errorTag$2 = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      objectTag$1 = '[object Object]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag$1 = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$1 = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  /** Used to identify `toStringTag` values supported by `_.clone`. */

  var cloneableTags = {};
  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$2] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag$2] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */

  function baseClone$2(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG$2,
        isFlat = bitmask & CLONE_FLAT_FLAG$1,
        isFull = bitmask & CLONE_SYMBOLS_FLAG$2;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject(value)) {
      return value;
    }

    var isArr = isArray$2(value);

    if (isArr) {
      result = initCloneArray(value);

      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag$2(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer$2(value)) {
        return cloneBuffer(value, isDeep);
      }

      if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);

        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = initCloneByTag(value, tag, isDeep);
      }
    } // Check for circular references and return its corresponding clone.


    stack || (stack = new Stack$1());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone$2(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
      });
    }

    var keysFunc = isFull ? isFlat ? getAllKeysIn$1 : getAllKeys$1 : isFlat ? keysIn$1 : keys$1;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      } // Recursively populate clone (susceptible to call stack limits).


      assignValue(result, key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone$2;

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */

  function last$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  var last_1 = last$1;

  var baseGet = _baseGet,
      baseSlice$1 = _baseSlice;
  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */

  function parent$1(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice$1(path, 0, -1));
  }

  var _parent = parent$1;

  var castPath$1 = _castPath,
      last = last_1,
      parent = _parent,
      toKey = _toKey;
  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */

  function baseUnset$1(object, path) {
    path = castPath$1(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }

  var _baseUnset = baseUnset$1;

  var isPlainObject$1 = isPlainObject_1;
  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */

  function customOmitClone$1(value) {
    return isPlainObject$1(value) ? undefined : value;
  }

  var _customOmitClone = customOmitClone$1;

  var arrayMap$4 = _arrayMap,
      baseClone$1 = _baseClone,
      baseUnset = _baseUnset,
      castPath = _castPath,
      copyObject$1 = _copyObject,
      customOmitClone = _customOmitClone,
      flatRest = _flatRest,
      getAllKeysIn = _getAllKeysIn;
  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG$1 = 4;
  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */

  var omit = flatRest(function (object, paths) {
    var result = {};

    if (object == null) {
      return result;
    }

    var isDeep = false;
    paths = arrayMap$4(paths, function (path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject$1(object, getAllKeysIn(object), result);

    if (isDeep) {
      result = baseClone$1(result, CLONE_DEEP_FLAG$1 | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG$1, customOmitClone);
    }

    var length = paths.length;

    while (length--) {
      baseUnset(result, paths[length]);
    }

    return result;
  });
  var omit_1 = omit;

  var selectDefaultProps = {
    autoWidth: false,
    bordered: true,
    borderless: false,
    clearable: false,
    creatable: false,
    loading: false,
    max: 0,
    minCollapsedNum: 0,
    multiple: false,
    placeholder: void 0,
    readonly: false,
    reserveKeyword: false,
    showArrow: true,
    size: "medium",
    valueType: "value"
  };
  var optionGroupDefaultProps = {
    divider: true
  };

  function ownKeys$1U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1U(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var OptionGroup = function OptionGroup(props) {
    var children = props.children,
        label = props.label,
        selectedValue = props.selectedValue,
        onSelect = props.onSelect,
        divider = props.divider;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var childrenWithProps = React.Children.map(children, function (child) {
      if ( /*#__PURE__*/React.isValidElement(child)) {
        var addedProps = {
          selectedValue: selectedValue,
          onSelect: onSelect
        };
        return /*#__PURE__*/React.cloneElement(child, _objectSpread$1T({}, addedProps));
      }

      return child;
    });
    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(classPrefix, "-select-option-group"), _defineProperty$3({}, "".concat(classPrefix, "-select-option-group__divider"), divider))
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-select-option-group__header")
    }, label), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-select__list")
    }, childrenWithProps));
  };

  OptionGroup.defaultProps = optionGroupDefaultProps;

  var componentType = "select";

  var Option$1 = function Option(props) {
    var _classNames2;

    var propDisabled = props.disabled,
        propLabel = props.label,
        selectedValue = props.selectedValue,
        multiple = props.multiple,
        size = props.size,
        max = props.max,
        keys = props.keys,
        value = props.value,
        onSelect = props.onSelect,
        children = props.children,
        content = props.content,
        restData = props.restData,
        style = props.style,
        className = props.className;
    var selected;
    var label = propLabel || value;
    var disabled = propDisabled || multiple && Array.isArray(selectedValue) && max && selectedValue.length >= max;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var optionRef = React.useRef();
    useRipple(optionRef);

    if (!multiple) {
      selected = isNumber_1(selectedValue) || isString_1(selectedValue) ? value === selectedValue : value === get_1(selectedValue, (keys === null || keys === void 0 ? void 0 : keys.value) || "value");
    }

    if (multiple && Array.isArray(selectedValue)) {
      selected = selectedValue.some(function (item) {
        if (isNumber_1(item) || isString_1(item)) {
          return item === value;
        }

        return get_1(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") === value;
      });
    }

    var handleSelect = function handleSelect(event) {
      if (!disabled) {
        onSelect(value, {
          label: String(label),
          selected: selected,
          event: event,
          restData: restData
        });
      }
    };

    var renderItem = function renderItem(children2) {
      if (multiple) {
        var _classNames;

        return /* @__PURE__ */React__default["default"].createElement("label", {
          className: classNames$1("".concat(classPrefix, "-checkbox"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-checked"), selected), _classNames))
        }, /* @__PURE__ */React__default["default"].createElement("input", {
          type: "checkbox",
          className: classNames$1("".concat(classPrefix, "-checkbox__former")),
          value: "",
          disabled: disabled && !selected,
          onClick: function onClick(e) {
            return e.stopPropagation();
          }
        }), /* @__PURE__ */React__default["default"].createElement("span", {
          className: classNames$1("".concat(classPrefix, "-checkbox__input"))
        }), /* @__PURE__ */React__default["default"].createElement("span", {
          className: classNames$1("".concat(classPrefix, "-checkbox__label"))
        }, children2 || content || label));
      }

      return /* @__PURE__ */React__default["default"].createElement("span", null, children2 || content || label);
    };

    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1(className, "".concat(classPrefix, "-").concat(componentType, "-option"), (_classNames2 = {}, _defineProperty$3(_classNames2, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames2, "".concat(classPrefix, "-is-selected"), selected), _defineProperty$3(_classNames2, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$3(_classNames2, "".concat(classPrefix, "-size-l"), size === "large"), _classNames2)),
      key: value,
      onClick: handleSelect,
      ref: optionRef,
      style: style
    }, renderItem(children));
  };

  function setValueToOptionFormOptionDom(dom, valueToOption, keys) {
    var _valueToOption$value;

    var _dom$props = dom.props,
        value = _dom$props.value,
        label = _dom$props.label,
        children = _dom$props.children;
    valueToOption[value] = (_valueToOption$value = {}, _defineProperty$3(_valueToOption$value, (keys === null || keys === void 0 ? void 0 : keys.value) || "value", value), _defineProperty$3(_valueToOption$value, (keys === null || keys === void 0 ? void 0 : keys.label) || "label", label || children || value), _valueToOption$value);
  }

  var getValueToOption = function getValueToOption(children, options, keys) {
    var valueToOption = {};

    if (Array.isArray(options)) {
      options.forEach(function (option) {
        valueToOption[get_1(option, (keys === null || keys === void 0 ? void 0 : keys.value) || "value")] = option;
      });
      return valueToOption;
    }

    if (isPlainObject_1(children)) {
      if (children.type === Option$1) {
        setValueToOptionFormOptionDom(children, valueToOption, keys);
        return valueToOption;
      }

      if (children.type === OptionGroup) {
        var groupChildren = children.props.children;

        if (Array.isArray(groupChildren)) {
          groupChildren.forEach(function (item) {
            setValueToOptionFormOptionDom(item, valueToOption, keys);
          });
          return valueToOption;
        }
      }
    }

    if (Array.isArray(children)) {
      children.forEach(function (item) {
        if (item.type === Option$1) {
          setValueToOptionFormOptionDom(item, valueToOption, keys);
        }

        if (item.type === OptionGroup) {
          var _groupChildren = item.props.children;

          if (Array.isArray(_groupChildren)) {
            _groupChildren.forEach(function (groupItem) {
              setValueToOptionFormOptionDom(groupItem, valueToOption, keys);
            });
          }
        }
      });
    }

    return valueToOption;
  };
  var getSelectValueArr = function getSelectValueArr(values, activeValue, selected, valueType, keys, objVal) {
    values = Array.isArray(values) ? values : [];

    if (Array.isArray(values)) {
      var currentValues = _toConsumableArray(values);

      var isValueObj = valueType === "object";

      if (selected) {
        currentValues = currentValues.filter(function (item) {
          if (isValueObj) {
            if (isPlainObject_1(activeValue)) {
              return get_1(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") !== get_1(activeValue, (keys === null || keys === void 0 ? void 0 : keys.value) || "value");
            }

            return get_1(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") !== activeValue;
          }

          return item !== activeValue;
        });
      } else {
        var item = isValueObj ? objVal : activeValue;
        currentValues.push(item);
      }

      return currentValues;
    }
  };

  function FakeArrow(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return /* @__PURE__ */React__default["default"].createElement("svg", {
      style: props.style,
      className: classNames$1("".concat(classPrefix, "-fake-arrow"), _defineProperty$3({}, "".concat(classPrefix, "-fake-arrow--active"), (props === null || props === void 0 ? void 0 : props.isActive) && !(props !== null && props !== void 0 && props.disabled)), props === null || props === void 0 ? void 0 : props.overlayClassName),
      width: "16",
      height: "16",
      viewBox: "0 0 16 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M3.75 5.7998L7.99274 10.0425L12.2361 5.79921",
      stroke: "black",
      strokeOpacity: "0.9",
      strokeWidth: "1.3"
    }));
  }

  function ownKeys$1T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1T(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon", "onPaste", "onEnter", "onMouseenter", "onMouseleave"];
  var DEFAULT_KEYS$1 = {
    label: "label",
    value: "value"
  };

  function getInputValue(value, keys) {
    var iKeys = keys || DEFAULT_KEYS$1;
    return isObject_1(value) ? value[iKeys.label] : value;
  }

  function useSingle(props) {
    var value = props.value,
        keys = props.keys,
        loading = props.loading,
        disabled = props.disabled;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var inputRef = React.useRef();

    var _useControlled = useControlled(props, "inputValue", props.onInputChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        inputValue = _useControlled2[0],
        setInputValue = _useControlled2[1];

    var showLoading = React.useMemo(function () {
      return !disabled && loading;
    }, [loading, disabled]);

    var commonInputProps = _objectSpread$1S(_objectSpread$1S({}, pick_1(props, COMMON_PROPERTIES)), {}, {
      suffixIcon: showLoading ? /* @__PURE__ */React__default["default"].createElement(Loading, {
        loading: true,
        size: "small"
      }) : props.suffixIcon
    });

    var onInnerClear = function onInnerClear(context) {
      var _context$e, _props$onClear;

      context === null || context === void 0 ? void 0 : (_context$e = context.e) === null || _context$e === void 0 ? void 0 : _context$e.stopPropagation();
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, context);
      setInputValue("", {
        trigger: "clear"
      });
    };

    var onInnerInputChange = function onInnerInputChange(value2, context) {
      if (props.allowInput) {
        setInputValue(value2, _objectSpread$1S(_objectSpread$1S({}, context), {}, {
          trigger: "input"
        }));
      }
    };

    var renderSelectSingle = function renderSelectSingle(popupVisible) {
      var _props$inputProps;

      var singleValueDisplay = !props.multiple ? props.valueDisplay : null;
      var displayedValue = popupVisible && props.allowInput ? inputValue : getInputValue(value, keys);
      return /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$1S(_objectSpread$1S(_objectSpread$1S({
        ref: inputRef
      }, commonInputProps), {}, {
        autoWidth: props.autoWidth,
        placeholder: singleValueDisplay ? "" : props.placeholder,
        value: singleValueDisplay ? void 0 : displayedValue,
        label: /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, props.label, singleValueDisplay),
        onChange: onInnerInputChange,
        readonly: !props.allowInput,
        onClear: onInnerClear,
        onBlur: function onBlur(val, context) {
          var _props$onBlur;

          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, value, _objectSpread$1S(_objectSpread$1S({}, context), {}, {
            inputValue: val
          }));
        },
        onFocus: function onFocus(val, context) {
          var _props$onFocus;

          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value, _objectSpread$1S(_objectSpread$1S({}, context), {}, {
            inputValue: val
          }));
          !popupVisible && setInputValue(getInputValue(value, keys), _objectSpread$1S(_objectSpread$1S({}, context), {}, {
            trigger: "input"
          }));
        },
        onEnter: function onEnter(val, context) {
          var _props$onEnter;

          (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, value, _objectSpread$1S(_objectSpread$1S({}, context), {}, {
            inputValue: val
          }));
        }
      }, props.inputProps), {}, {
        inputClass: classNames$1((_props$inputProps = props.inputProps) === null || _props$inputProps === void 0 ? void 0 : _props$inputProps.className, _defineProperty$3({}, "".concat(classPrefix, "-input--focused"), popupVisible))
      }));
    };

    return {
      inputRef: inputRef,
      commonInputProps: commonInputProps,
      onInnerClear: onInnerClear,
      renderSelectSingle: renderSelectSingle
    };
  }

  function useDragSorter(props) {
    var sortOnDraggable = props.sortOnDraggable,
        onDragSort = props.onDragSort,
        onDragOverCheck = props.onDragOverCheck;

    var _useState = React.useState(-1),
        _useState2 = _slicedToArray(_useState, 2),
        draggingIndex = _useState2[0],
        setDraggingIndex = _useState2[1];

    var _useState3 = React.useState(null),
        _useState4 = _slicedToArray(_useState3, 2),
        dragStartData = _useState4[0],
        setDragStartData = _useState4[1];

    var _useState5 = React.useState(null),
        _useState6 = _slicedToArray(_useState5, 2);
        _useState6[0];
        var setIsDropped = _useState6[1];

    var _useState7 = React.useState({
      nodeX: 0,
      nodeWidth: 0,
      mouseX: 0
    }),
        _useState8 = _slicedToArray(_useState7, 2),
        startInfo = _useState8[0],
        setStartInfo = _useState8[1];

    var onDragSortRef = React.useRef(onDragSort);

    var _onDragOver = React.useCallback(function (e, index, record) {
      var _e$target, _onDragSortRef$curren;

      e.preventDefault();
      if (draggingIndex === index || draggingIndex === -1) return;

      if (onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.targetClassNameRegExp && !(onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.targetClassNameRegExp.test((_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.className))) {
        return;
      }

      if (onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.x) {
        if (!startInfo.nodeWidth) return;

        var _e$target$getBounding = e.target.getBoundingClientRect(),
            x = _e$target$getBounding.x,
            width = _e$target$getBounding.width;

        var targetNodeMiddleX = x + width / 2;
        var draggingNodeLeft = e.clientX - (startInfo.mouseX - startInfo.nodeX);
        var draggingNodeRight = draggingNodeLeft + startInfo.nodeWidth;
        var overlap = false;

        if (draggingNodeLeft > x && draggingNodeLeft < x + width) {
          overlap = draggingNodeLeft < targetNodeMiddleX;
        } else {
          overlap = draggingNodeRight > targetNodeMiddleX;
        }

        if (!overlap) return;
      }

      (_onDragSortRef$curren = onDragSortRef.current) === null || _onDragSortRef$curren === void 0 ? void 0 : _onDragSortRef$curren.call(onDragSortRef, {
        currentIndex: draggingIndex,
        current: dragStartData,
        target: record,
        targetIndex: index
      });
      setDraggingIndex(index);
    }, [draggingIndex, onDragOverCheck === null || onDragOverCheck === void 0 ? void 0 : onDragOverCheck.targetClassNameRegExp, onDragOverCheck === null || onDragOverCheck === void 0 ? void 0 : onDragOverCheck.x, dragStartData, startInfo.nodeWidth, startInfo.mouseX, startInfo.nodeX]);

    if (!sortOnDraggable) {
      return {};
    }

    function _onDragStart(e, index, record) {
      setDraggingIndex(index);
      setDragStartData(record);

      if (onDragOverCheck) {
        var _e$target$getBounding2 = e.target.getBoundingClientRect(),
            x = _e$target$getBounding2.x,
            width = _e$target$getBounding2.width;

        setStartInfo({
          nodeX: x,
          nodeWidth: width,
          mouseX: e.clientX
        });
      }
    }

    function _onDrop() {
      setIsDropped(true);
    }

    function _onDragEnd() {

      setIsDropped(false);
      setDraggingIndex(-1);
      setDragStartData(null);
    }

    function getDragProps(index, record) {
      if (sortOnDraggable) {
        return {
          draggable: true,
          onDragStart: function onDragStart(e) {
            _onDragStart(e, index, record);
          },
          onDragOver: function onDragOver(e) {
            _onDragOver(e, index, record);
          },
          onDrop: function onDrop() {
            _onDrop();
          },
          onDragEnd: function onDragEnd() {
            _onDragEnd();
          }
        };
      }

      return {};
    }

    return {
      onDragStart: _onDragStart,
      onDragOver: _onDragOver,
      onDrop: _onDrop,
      onDragEnd: _onDragEnd,
      getDragProps: getDragProps,
      dragging: draggingIndex !== -1
    };
  }

  var mouseEnterTimer = null;
  function useTagScroll(props) {
    var tagInputRef = React.useRef();
    var _props$excessTagsDisp = props.excessTagsDisplayType,
        excessTagsDisplayType = _props$excessTagsDisp === void 0 ? "scroll" : _props$excessTagsDisp,
        readonly = props.readonly,
        disabled = props.disabled;

    var _useState = React.useState(0),
        _useState2 = _slicedToArray(_useState, 2),
        scrollDistance = _useState2[0],
        setScrollDistance = _useState2[1];

    var _useState3 = React.useState(),
        _useState4 = _slicedToArray(_useState3, 2),
        scrollElement = _useState4[0],
        setScrollElement = _useState4[1];

    var updateScrollElement = function updateScrollElement(element) {
      var scrollElement2 = element.children[0];
      setScrollElement(scrollElement2);
    };

    var updateScrollDistance = function updateScrollDistance() {
      setScrollDistance(scrollElement.scrollWidth - scrollElement.clientWidth);
    };

    var scrollTo = function scrollTo(distance) {
      scrollElement === null || scrollElement === void 0 ? void 0 : scrollElement.scroll({
        left: distance,
        behavior: "smooth"
      });
    };

    var scrollToRight = function scrollToRight() {
      updateScrollDistance();
      scrollTo(scrollDistance);
    };

    var scrollToLeft = function scrollToLeft() {
      scrollTo(0);
    };

    var onWheel = function onWheel(_ref) {
      var e = _ref.e;
      if (readonly || disabled) return;
      if (!scrollElement) return;

      if (e.deltaX > 0) {
        var distance = Math.min(scrollElement.scrollLeft + 120, scrollDistance);
        scrollTo(distance);
      } else {
        var _distance = Math.max(scrollElement.scrollLeft - 120, 0);

        scrollTo(_distance);
      }
    };

    var scrollToRightOnEnter = function scrollToRightOnEnter() {
      if (excessTagsDisplayType !== "scroll") return;
      mouseEnterTimer = setTimeout(function () {
        scrollToRight();
        clearTimeout(mouseEnterTimer);
      }, 100);
    };

    var scrollToLeftOnLeave = function scrollToLeftOnLeave() {
      if (excessTagsDisplayType !== "scroll") return;
      scrollTo(0);
      clearTimeout(mouseEnterTimer);
    };

    var clearScroll = function clearScroll() {
      clearTimeout(mouseEnterTimer);
    };

    var initScroll = function initScroll(element) {
      if (!element) return;
      updateScrollElement(element);
    };

    React.useEffect(function () {
      initScroll(tagInputRef === null || tagInputRef === void 0 ? void 0 : tagInputRef.current.currentElement);
      return clearScroll;
    }, []);
    return {
      initScroll: initScroll,
      clearScroll: clearScroll,
      tagInputRef: tagInputRef,
      scrollElement: scrollElement,
      scrollDistance: scrollDistance,
      scrollTo: scrollTo,
      scrollToRight: scrollToRight,
      scrollToLeft: scrollToLeft,
      updateScrollElement: updateScrollElement,
      updateScrollDistance: updateScrollDistance,
      onWheel: onWheel,
      scrollToRightOnEnter: scrollToRightOnEnter,
      scrollToLeftOnLeave: scrollToLeftOnLeave
    };
  }

  var checkTagDefaultProps = {
    defaultChecked: void 0,
    size: "medium"
  };
  var tagDefaultProps = {
    closable: false,
    icon: void 0,
    shape: "square",
    size: "medium",
    theme: "default",
    variant: "dark"
  };

  var _excluded$p = ["content", "onClick", "disabled", "children", "className", "size", "onChange"];

  function ownKeys$1S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1S(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var CheckTag = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var content = props.content,
        _props$onClick = props.onClick,
        _onClick = _props$onClick === void 0 ? noop$1 : _props$onClick,
        disabled = props.disabled,
        children = props.children,
        className = props.className,
        size = props.size,
        onChange = props.onChange,
        tagOtherProps = _objectWithoutProperties$2(props, _excluded$p);

    var _useControlled = useControlled(props, "checked", onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onValueChange = _useControlled2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var tagClassPrefix = "".concat(classPrefix, "-tag");
    var sizeMap = {
      large: "".concat(classPrefix, "-size-l"),
      small: "".concat(classPrefix, "-size-s")
    };
    var checkTagClassNames = classNames$1(tagClassPrefix, sizeMap[size], className, "".concat(tagClassPrefix, "--default"), "".concat(tagClassPrefix, "--check"), "".concat(tagClassPrefix, "--").concat(size), (_classNames = {}, _defineProperty$3(_classNames, "".concat(tagClassPrefix, "--disabled"), disabled), _defineProperty$3(_classNames, "".concat(tagClassPrefix, "--checked"), value), _classNames));
    return /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$1R(_objectSpread$1R({
      ref: ref,
      className: checkTagClassNames
    }, tagOtherProps), {}, {
      onClick: function onClick(e) {
        if (disabled) {
          return;
        }

        onValueChange(!value);

        _onClick({
          e: e
        });
      }
    }), children || content);
  });
  CheckTag.displayName = "CheckTag";
  CheckTag.defaultProps = checkTagDefaultProps;

  var _excluded$o = ["theme", "size", "shape", "variant", "closable", "maxWidth", "icon", "content", "onClick", "onClose", "className", "style", "disabled", "children"];

  function ownKeys$1R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1R(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Tag$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var theme = props.theme,
        size = props.size,
        shape = props.shape,
        variant = props.variant,
        closable = props.closable,
        maxWidth = props.maxWidth,
        icon = props.icon,
        content = props.content,
        _props$onClick = props.onClick,
        _onClick = _props$onClick === void 0 ? noop$1 : _props$onClick,
        _props$onClose = props.onClose,
        onClose = _props$onClose === void 0 ? noop$1 : _props$onClose,
        className = props.className,
        style = props.style,
        disabled = props.disabled,
        children = props.children,
        otherTagProps = _objectWithoutProperties$2(props, _excluded$o);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon;

    var tagClassPrefix = "".concat(classPrefix, "-tag");
    var sizeMap = {
      large: "".concat(classPrefix, "-size-l"),
      small: "".concat(classPrefix, "-size-s")
    };
    var tagClassNames = classNames$1(tagClassPrefix, "".concat(tagClassPrefix, "--").concat(theme), "".concat(tagClassPrefix, "--").concat(variant), "".concat(tagClassPrefix, "--").concat(size), "".concat(tagClassPrefix, "--").concat(shape), (_classNames = {}, _defineProperty$3(_classNames, "".concat(tagClassPrefix, "--ellipsis"), !!maxWidth), _defineProperty$3(_classNames, "".concat(tagClassPrefix, "--disabled"), disabled), _classNames), sizeMap[size], className);
    var deleteIcon = /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, {
      onClick: function onClick(e) {
        if (disabled) return;
        onClose({
          e: e
        });
      },
      className: "".concat(tagClassPrefix, "__icon-close")
    });
    var tag = /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$1Q({
      ref: ref,
      className: tagClassNames,
      onClick: function onClick(e) {
        if (disabled) return;

        _onClick({
          e: e
        });
      },
      style: maxWidth ? _objectSpread$1Q({
        maxWidth: typeof maxWidth === "number" ? "".concat(maxWidth, "px") : maxWidth
      }, style) : style
    }, otherTagProps), icon, maxWidth ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(tagClassPrefix, "--text")
    }, children || content) : children || content, closable && deleteIcon);
    return tag;
  }, {
    CheckTag: CheckTag
  });
  Tag$1.displayName = "Tag";
  Tag$1.defaultProps = tagDefaultProps;

  var Tag = Tag$1;

  function ownKeys$1Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTagList(props) {
    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var onRemove = props.onRemove,
        max = props.max,
        minCollapsedNum = props.minCollapsedNum,
        size = props.size,
        disabled = props.disabled,
        readonly = props.readonly,
        tagProps = props.tagProps,
        tag = props.tag,
        collapsedItems = props.collapsedItems,
        getDragProps = props.getDragProps;

    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        tagValue = _useControlled2[0],
        setTagValue = _useControlled2[1];

    var _useState = React.useState(),
        _useState2 = _slicedToArray(_useState, 2),
        oldInputValue = _useState2[0],
        setOldInputValue = _useState2[1];

    var _onClose = function onClose(p) {
      var arr = _toConsumableArray(tagValue);

      arr.splice(p.index, 1);
      setTagValue(arr, _objectSpread$1P({
        trigger: "tag-remove"
      }, p));
      onRemove === null || onRemove === void 0 ? void 0 : onRemove(_objectSpread$1P(_objectSpread$1P({}, p), {}, {
        trigger: "tag-remove",
        value: arr
      }));
    };

    var clearAll = function clearAll(context) {
      setTagValue([], {
        trigger: "clear",
        e: context.e
      });
    };

    var onInnerEnter = function onInnerEnter(value, context) {
      var _props$onEnter;

      var valueStr = value ? String(value).trim() : "";
      if (!valueStr) return;
      var isLimitExceeded = max && (tagValue === null || tagValue === void 0 ? void 0 : tagValue.length) >= max;
      var newValue = tagValue;

      if (!isLimitExceeded) {
        newValue = tagValue instanceof Array ? tagValue.concat(String(valueStr)) : [valueStr];
        setTagValue(newValue, {
          trigger: "enter",
          index: newValue.length - 1,
          item: valueStr,
          e: context.e
        });
      }

      props === null || props === void 0 ? void 0 : (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, _objectSpread$1P(_objectSpread$1P({}, context), {}, {
        inputValue: value
      }));
    };

    var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value, context) {
      var e = context.e;
      if (!tagValue || !tagValue.length) return;

      if (!oldInputValue && ["Backspace", "NumpadDelete"].includes(e.code)) {
        var index = tagValue.length - 1;
        var item = tagValue[index];
        var trigger = "backspace";
        setTagValue(tagValue.slice(0, -1), {
          e: e,
          index: index,
          item: item,
          trigger: trigger
        });
        onRemove === null || onRemove === void 0 ? void 0 : onRemove({
          e: e,
          index: index,
          item: item,
          trigger: trigger,
          value: tagValue
        });
      }

      setOldInputValue(value);
    };

    var renderLabel = function renderLabel(_ref) {
      var displayNode = _ref.displayNode,
          label = _ref.label;
      var newList = minCollapsedNum ? tagValue.slice(0, minCollapsedNum) : tagValue;
      var list = displayNode ? [displayNode] : newList === null || newList === void 0 ? void 0 : newList.map(function (item, index) {
        var tagContent = lodash.exports.isFunction(tag) ? tag({
          value: item
        }) : tag;
        return /* @__PURE__ */React__default["default"].createElement(Tag, _objectSpread$1P(_objectSpread$1P({
          key: index,
          size: size,
          disabled: disabled,
          onClose: function onClose(context) {
            return _onClose({
              e: context.e,
              item: item,
              index: index
            });
          },
          closable: !readonly && !disabled
        }, getDragProps === null || getDragProps === void 0 ? void 0 : getDragProps(index, item)), tagProps), tagContent !== null && tagContent !== void 0 ? tagContent : item);
      });

      if (label) {
        list === null || list === void 0 ? void 0 : list.unshift( /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(prefix, "-tag-input__prefix"),
          key: "label"
        }, label));
      }

      if (newList.length !== tagValue.length) {
        var len = tagValue.length - newList.length;
        var params = {
          value: tagValue,
          count: tagValue.length,
          collapsedTags: tagValue.slice(minCollapsedNum, tagValue.length)
        };
        var more = lodash.exports.isFunction(collapsedItems) ? collapsedItems(params) : collapsedItems;
        list.push( /* @__PURE__ */React__default["default"].createElement(React.Fragment, {
          key: "more"
        }, more !== null && more !== void 0 ? more : /* @__PURE__ */React__default["default"].createElement(Tag, null, "+", len)));
      }

      return list;
    };

    return {
      tagValue: tagValue,
      clearAll: clearAll,
      onClose: _onClose,
      onInnerEnter: onInnerEnter,
      onInputBackspaceKeyUp: onInputBackspaceKeyUp,
      renderLabel: renderLabel
    };
  }

  function useHover(props) {
    var readonly = props.readonly,
        disabled = props.disabled,
        onMouseenter = props.onMouseenter,
        onMouseleave = props.onMouseleave;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isHover = _useState2[0],
        setIsHover = _useState2[1];

    var addHover = function addHover(context) {
      if (readonly || disabled) return;
      setIsHover(true);
      onMouseenter === null || onMouseenter === void 0 ? void 0 : onMouseenter(context);
    };

    var cancelHover = function cancelHover(context) {
      if (readonly || disabled) return;
      setIsHover(false);
      onMouseleave === null || onMouseleave === void 0 ? void 0 : onMouseleave(context);
    };

    return {
      isHover: isHover,
      addHover: addHover,
      cancelHover: cancelHover
    };
  }

  var tagInputDefaultProps = {
    autoWidth: false,
    clearable: false,
    dragSort: false,
    excessTagsDisplayType: "break-line",
    defaultInputValue: "",
    minCollapsedNum: 0,
    placeholder: void 0,
    readonly: false,
    size: "medium",
    defaultValue: []
  };

  function ownKeys$1P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1P(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TagInput$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _ref;

    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      CloseCircleFilledIcon: CloseCircleFilledIcon
    }),
        CloseCircleFilledIcon$1 = _useGlobalIcon.CloseCircleFilledIcon;

    var excessTagsDisplayType = props.excessTagsDisplayType,
        autoWidth = props.autoWidth,
        readonly = props.readonly,
        disabled = props.disabled,
        clearable = props.clearable,
        placeholder = props.placeholder,
        valueDisplay = props.valueDisplay,
        _label = props.label,
        inputProps = props.inputProps,
        size = props.size,
        tips = props.tips,
        status = props.status,
        suffixIcon = props.suffixIcon,
        suffix = props.suffix,
        onClick = props.onClick,
        onPaste = props.onPaste,
        _onFocus = props.onFocus,
        _onBlur = props.onBlur;

    var _useControlled = useControlled(props, "inputValue", props.onInputChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        tInputValue = _useControlled2[0],
        setTInputValue = _useControlled2[1];

    var _useHover = useHover(props),
        isHover = _useHover.isHover,
        addHover = _useHover.addHover,
        cancelHover = _useHover.cancelHover;

    var _useDragSorter = useDragSorter(_objectSpread$1O(_objectSpread$1O({}, props), {}, {
      sortOnDraggable: props.dragSort,
      onDragOverCheck: {
        x: true,
        targetClassNameRegExp: new RegExp("^".concat(prefix, "-tag"))
      }
    })),
        getDragProps = _useDragSorter.getDragProps;

    var isCompositionRef = React.useRef(false);

    var _useTagScroll = useTagScroll(props),
        scrollToRight = _useTagScroll.scrollToRight,
        onWheel = _useTagScroll.onWheel,
        scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter,
        scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave,
        tagInputRef = _useTagScroll.tagInputRef;

    var _useTagList = useTagList(_objectSpread$1O(_objectSpread$1O({}, props), {}, {
      getDragProps: getDragProps
    })),
        tagValue = _useTagList.tagValue,
        _onClose = _useTagList.onClose,
        onInnerEnter = _useTagList.onInnerEnter,
        onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
        clearAll = _useTagList.clearAll,
        renderLabel = _useTagList.renderLabel;

    var NAME_CLASS = "".concat(prefix, "-tag-input");
    var WITH_SUFFIX_ICON_CLASS = "".concat(prefix, "-tag-input__with-suffix-icon");
    var CLEAR_CLASS = "".concat(prefix, "-tag-input__suffix-clear");
    var BREAK_LINE_CLASS = "".concat(prefix, "-tag-input--break-line");
    var tagInputPlaceholder = !(tagValue !== null && tagValue !== void 0 && tagValue.length) ? placeholder : "";
    var showClearIcon = Boolean(!readonly && !disabled && clearable && isHover && (tagValue === null || tagValue === void 0 ? void 0 : tagValue.length));
    React.useImperativeHandle(ref, function () {
      return _objectSpread$1O({}, tagInputRef.current || {});
    });

    var onInputCompositionstart = function onInputCompositionstart(value, context) {
      var _inputProps$onComposi;

      isCompositionRef.current = true;
      inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$onComposi = inputProps.onCompositionstart) === null || _inputProps$onComposi === void 0 ? void 0 : _inputProps$onComposi.call(inputProps, value, context);
    };

    var onInputCompositionend = function onInputCompositionend(value, context) {
      var _inputProps$onComposi2;

      isCompositionRef.current = false;
      inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$onComposi2 = inputProps.onCompositionend) === null || _inputProps$onComposi2 === void 0 ? void 0 : _inputProps$onComposi2.call(inputProps, value, context);
    };

    var onInputEnter = function onInputEnter(value, context) {
      setTInputValue("", {
        e: context.e,
        trigger: "enter"
      });
      !isCompositionRef.current && onInnerEnter(value, context);
      scrollToRight();
    };

    var onInnerClick = function onInnerClick(context) {
      var _tagInputRef$current$, _tagInputRef$current$2;

      (_tagInputRef$current$ = tagInputRef.current.inputElement) === null || _tagInputRef$current$ === void 0 ? void 0 : (_tagInputRef$current$2 = _tagInputRef$current$.focus) === null || _tagInputRef$current$2 === void 0 ? void 0 : _tagInputRef$current$2.call(_tagInputRef$current$);
      onClick === null || onClick === void 0 ? void 0 : onClick(context);
    };

    var onClearClick = function onClearClick(e) {
      clearAll({
        e: e
      });
      setTInputValue("", {
        e: e,
        trigger: "clear"
      });
    };

    var suffixIconNode = showClearIcon ? /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon$1, {
      className: CLEAR_CLASS,
      onClick: onClearClick
    }) : suffixIcon;
    var displayNode = isFunction_1(valueDisplay) ? valueDisplay({
      value: tagValue,
      onClose: function onClose(index, item) {
        return _onClose({
          index: index,
          item: item
        });
      }
    }) : valueDisplay;
    var classes = [NAME_CLASS, (_ref = {}, _defineProperty$3(_ref, BREAK_LINE_CLASS, excessTagsDisplayType === "break-line"), _defineProperty$3(_ref, WITH_SUFFIX_ICON_CLASS, !!suffixIconNode), _ref), props.className];
    return /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$1O({
      ref: tagInputRef,
      value: tInputValue,
      onChange: function onChange(val, context) {
        setTInputValue(val, _objectSpread$1O(_objectSpread$1O({}, context), {}, {
          trigger: "input"
        }));
      },
      autoWidth: true,
      onWheel: onWheel,
      size: size,
      readonly: readonly,
      disabled: disabled,
      label: function label() {
        return renderLabel({
          displayNode: displayNode,
          label: _label
        });
      },
      className: classNames$1(classes),
      style: props.style,
      tips: tips,
      status: status,
      placeholder: tagInputPlaceholder,
      suffix: suffix,
      suffixIcon: suffixIconNode,
      showInput: !(inputProps !== null && inputProps !== void 0 && inputProps.readonly) || !tagValue || !(tagValue !== null && tagValue !== void 0 && tagValue.length),
      keepWrapperWidth: !autoWidth,
      onPaste: onPaste,
      onClick: onInnerClick,
      onEnter: onInputEnter,
      onKeyup: onInputBackspaceKeyUp,
      onMouseenter: function onMouseenter(context) {
        addHover(context);
        scrollToRightOnEnter();
      },
      onMouseleave: function onMouseleave(context) {
        cancelHover(context);
        scrollToLeftOnLeave();
      },
      onFocus: function onFocus(inputValue, context) {
        _onFocus === null || _onFocus === void 0 ? void 0 : _onFocus(tagValue, {
          e: context.e,
          inputValue: inputValue
        });
      },
      onBlur: function onBlur(inputValue, context) {
        _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur(tagValue, {
          e: context.e,
          inputValue: inputValue
        });
      },
      onCompositionstart: onInputCompositionstart,
      onCompositionend: onInputCompositionend
    }, inputProps));
  });
  TagInput$1.displayName = "TagInput";
  TagInput$1.defaultProps = tagInputDefaultProps;

  var TagInput = TagInput$1;

  function ownKeys$1O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1O(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DEFAULT_KEYS = {
    label: "label",
    key: "key",
    children: "children"
  };
  function useMultiple(props) {
    var value = props.value;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var tagInputRef = React.useRef();

    var _useControlled = useControlled(props, "inputValue", props.onInputChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        tInputValue = _useControlled2[0],
        setTInputValue = _useControlled2[1];

    var iKeys = _objectSpread$1N(_objectSpread$1N({}, DEFAULT_KEYS), props.keys);

    var getTags = function getTags() {
      if (!(value instanceof Array)) {
        return isObject_1(value) ? [value[iKeys.label]] : [value];
      }

      return value.map(function (item) {
        return isObject_1(item) ? item[iKeys.label] : item;
      });
    };

    var tags = getTags();
    var tPlaceholder = !tags || !tags.length ? props.placeholder : "";

    var onTagInputChange = function onTagInputChange(val, context) {
      var _props$onTagChange;

      if (context.trigger === "tag-remove") {
        var _context$e;

        (_context$e = context.e) === null || _context$e === void 0 ? void 0 : _context$e.stopPropagation();
      }

      (_props$onTagChange = props.onTagChange) === null || _props$onTagChange === void 0 ? void 0 : _props$onTagChange.call(props, val, context);
    };

    var renderSelectMultiple = function renderSelectMultiple(p) {
      var _props$tagInputProps;

      return /* @__PURE__ */React__default["default"].createElement(TagInput, _objectSpread$1N(_objectSpread$1N(_objectSpread$1N({
        ref: tagInputRef
      }, p.commonInputProps), {}, {
        autoWidth: props.autoWidth,
        readonly: props.readonly,
        minCollapsedNum: props.minCollapsedNum,
        collapsedItems: props.collapsedItems,
        tag: props.tag,
        valueDisplay: props.valueDisplay,
        placeholder: tPlaceholder,
        value: tags,
        inputValue: tInputValue || "",
        onChange: onTagInputChange,
        onInputChange: function onInputChange(val, context) {
          if ((context === null || context === void 0 ? void 0 : context.trigger) === "enter") return;
          setTInputValue(val, {
            trigger: context.trigger,
            e: context.e
          });
        },
        tagProps: props.tagProps,
        onClear: p.onInnerClear,
        onBlur: function onBlur(val, context) {
          var _props$onBlur;

          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, props.value, _objectSpread$1N(_objectSpread$1N({}, context), {}, {
            tagInputValue: val
          }));
        },
        onFocus: function onFocus(val, context) {
          var _props$onFocus;

          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, props.value, _objectSpread$1N(_objectSpread$1N({}, context), {}, {
            tagInputValue: val
          }));
        }
      }, props.tagInputProps), {}, {
        inputProps: {
          readonly: !props.allowInput || props.readonly,
          inputClass: classNames$1((_props$tagInputProps = props.tagInputProps) === null || _props$tagInputProps === void 0 ? void 0 : _props$tagInputProps.className, _defineProperty$3({}, "".concat(classPrefix, "-input--focused"), p.popupVisible))
        }
      }));
    };

    return {
      tags: tags,
      tPlaceholder: tPlaceholder,
      tagInputRef: tagInputRef,
      renderSelectMultiple: renderSelectMultiple
    };
  }

  function ownKeys$1N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1N(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var MAX_POPUP_WIDTH = 1e3;
  function useOverlayInnerStyle(props) {
    var popupProps = props.popupProps,
        autoWidth = props.autoWidth,
        readonly = props.readonly,
        onPopupVisibleChange = props.onPopupVisibleChange;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        innerPopupVisible = _useState2[0],
        setInnerPopupVisible = _useState2[1];

    var matchWidthFunc = function matchWidthFunc(triggerElement, popupElement) {
      if (!triggerElement || !popupElement) return;
      var SCROLLBAR_WIDTH = popupElement.scrollHeight > popupElement.offsetHeight ? 8 : 0;
      var width = popupElement.offsetWidth + SCROLLBAR_WIDTH >= triggerElement.offsetWidth ? popupElement.offsetWidth : triggerElement.offsetWidth;
      var otherOverlayInnerStyle = {};

      if (popupProps && _typeof$1(popupProps.overlayInnerStyle) === "object" && !popupProps.overlayInnerStyle.width) {
        otherOverlayInnerStyle = popupProps.overlayInnerStyle;
      }

      return _objectSpread$1M({
        width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
      }, otherOverlayInnerStyle);
    };

    var onInnerPopupVisibleChange = function onInnerPopupVisibleChange(visible, context) {
      if (readonly) return;
      setInnerPopupVisible(visible);
      onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(visible, context);
    };

    var tOverlayInnerStyle = React.useMemo(function () {
      var result = {};
      var overlayInnerStyle = (popupProps === null || popupProps === void 0 ? void 0 : popupProps.overlayInnerStyle) || {};

      if (isFunction_1(overlayInnerStyle) || isObject_1(overlayInnerStyle) && overlayInnerStyle.width) {
        result = overlayInnerStyle;
      } else if (!autoWidth) {
        result = matchWidthFunc;
      }

      return result;
    }, [autoWidth, popupProps === null || popupProps === void 0 ? void 0 : popupProps.overlayInnerStyle]);
    return {
      tOverlayInnerStyle: tOverlayInnerStyle,
      innerPopupVisible: innerPopupVisible,
      onInnerPopupVisibleChange: onInnerPopupVisibleChange
    };
  }

  var selectInputDefaultProps = {
    allowInput: false,
    autoWidth: false,
    borderless: false,
    clearable: false,
    loading: false,
    minCollapsedNum: 0,
    multiple: false,
    readonly: false,
    status: "default"
  };

  function ownKeys$1M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1M(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var SelectInput$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _ref;

    var selectInputRef = React.useRef();
    var selectInputWrapRef = React.useRef();

    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var multiple = props.multiple,
        value = props.value,
        popupVisible = props.popupVisible,
        popupProps = props.popupProps,
        borderless = props.borderless,
        disabled = props.disabled;

    var _useOverlayInnerStyle = useOverlayInnerStyle(props),
        tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
        innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
        onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;

    var _useSingle = useSingle(props),
        commonInputProps = _useSingle.commonInputProps,
        inputRef = _useSingle.inputRef,
        onInnerClear = _useSingle.onInnerClear,
        renderSelectSingle = _useSingle.renderSelectSingle;

    var _useMultiple = useMultiple(props),
        tagInputRef = _useMultiple.tagInputRef,
        renderSelectMultiple = _useMultiple.renderSelectMultiple;

    var popupClasses = classNames$1([props.className, "".concat(prefix, "-select-input"), (_ref = {}, _defineProperty$3(_ref, "".concat(prefix, "-select-input--borderless"), borderless), _defineProperty$3(_ref, "".concat(prefix, "-select-input--multiple"), multiple), _defineProperty$3(_ref, "".concat(prefix, "-select-input--popup-visible"), popupVisible !== null && popupVisible !== void 0 ? popupVisible : innerPopupVisible), _defineProperty$3(_ref, "".concat(prefix, "-select-input--empty"), value instanceof Array ? !value.length : !value), _ref)]);
    React.useImperativeHandle(ref, function () {
      return _objectSpread$1L(_objectSpread$1L(_objectSpread$1L({}, selectInputRef.current || {}), inputRef.current || {}), tagInputRef.current || {});
    });
    var visibleProps = {
      visible: popupVisible !== null && popupVisible !== void 0 ? popupVisible : innerPopupVisible
    };
    var mainContent = /* @__PURE__ */React__default["default"].createElement("div", {
      className: popupClasses,
      style: props.style
    }, /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$1L(_objectSpread$1L(_objectSpread$1L({
      ref: selectInputRef,
      trigger: (popupProps === null || popupProps === void 0 ? void 0 : popupProps.trigger) || "click",
      placement: "bottom-left",
      content: props.panel,
      hideEmptyPopup: true,
      onVisibleChange: onInnerPopupVisibleChange
    }, visibleProps), popupProps), {}, {
      disabled: disabled,
      overlayInnerStyle: tOverlayInnerStyle,
      updateScrollTop: props.updateScrollTop
    }), multiple ? renderSelectMultiple({
      commonInputProps: commonInputProps,
      onInnerClear: onInnerClear,
      popupVisible: visibleProps.visible
    }) : renderSelectSingle(visibleProps.visible)));
    if (!props.tips) return mainContent;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: selectInputWrapRef,
      className: "".concat(prefix, "-select-input__wrap")
    }, mainContent, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefix, "-input__tips ").concat(prefix, "-input__tips--").concat(props.status || "normal")
    }, props.tips));
  });
  SelectInput$1.displayName = "SelectInput";
  SelectInput$1.defaultProps = selectInputDefaultProps;

  var SelectInput = SelectInput$1;

  var _excluded$n = ["value", "label", "disabled", "content"];

  function ownKeys$1L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1L(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var PopupContent = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var onChange = props.onChange,
        value = props.value,
        size = props.size,
        max = props.max,
        multiple = props.multiple,
        showPopup = props.showPopup,
        setShowPopup = props.setShowPopup,
        options = props.options,
        empty = props.empty,
        loadingText = props.loadingText,
        loading = props.loading,
        valueType = props.valueType,
        children = props.children,
        keys = props.keys,
        panelTopContent = props.panelTopContent,
        panelBottomContent = props.panelBottomContent;

    var _useLocaleReceiver = useLocaleReceiver("select"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var emptyText = t(local.empty);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    if (!children && !props.options) return null;

    var onSelect = function onSelect(selectedValue, _ref) {
      var label = _ref.label,
          selected = _ref.selected,
          event = _ref.event,
          restData = _ref.restData;
      var isValObj = valueType === "object";
      var objVal = {};

      if (isValObj) {
        objVal = _objectSpread$1K({}, restData);

        if (!(keys !== null && keys !== void 0 && keys.label)) {
          Object.assign(objVal, {
            label: label
          });
        }

        if (!(keys !== null && keys !== void 0 && keys.value)) {
          Object.assign(objVal, {
            value: selectedValue
          });
        }
      }

      if (!Object.keys(objVal).length) {
        var _Object$assign;

        Object.assign(objVal, (_Object$assign = {}, _defineProperty$3(_Object$assign, (keys === null || keys === void 0 ? void 0 : keys.label) || "label", label), _defineProperty$3(_Object$assign, (keys === null || keys === void 0 ? void 0 : keys.value) || "value", selectedValue), _Object$assign));
      }

      if (multiple) {
        var values = getSelectValueArr(value, selectedValue, selected, valueType, keys, objVal);
        onChange(values, {
          label: label,
          e: event,
          trigger: "check"
        });
      } else {
        var selectVal = valueType === "object" ? objVal : selectedValue;
        onChange(selectVal, {
          label: label,
          e: event,
          trigger: "check"
        });
        setShowPopup(!showPopup);
      }
    };

    var childrenWithProps = React.Children.map(children, function (child) {
      if ( /*#__PURE__*/React.isValidElement(child)) {
        var addedProps = {
          size: size,
          max: max,
          multiple: multiple,
          selectedValue: value,
          onSelect: onSelect
        };
        return /*#__PURE__*/React.cloneElement(child, _objectSpread$1K({}, addedProps));
      }

      return child;
    });

    var renderOptions = function renderOptions() {
      if (options) {
        return /* @__PURE__ */React__default["default"].createElement("ul", {
          className: "".concat(classPrefix, "-select__list")
        }, options.map(function (_ref2, index) {
          var optionValue = _ref2.value,
              label = _ref2.label,
              disabled = _ref2.disabled,
              content = _ref2.content,
              restData = _objectWithoutProperties$2(_ref2, _excluded$n);

          return /* @__PURE__ */React__default["default"].createElement(Option$1, {
            key: index,
            max: max,
            label: label,
            value: optionValue,
            onSelect: onSelect,
            selectedValue: value,
            multiple: multiple,
            size: size,
            disabled: disabled,
            restData: restData,
            keys: keys,
            content: content
          });
        }));
      }

      return /* @__PURE__ */React__default["default"].createElement("ul", {
        className: "".concat(classPrefix, "-select__list")
      }, childrenWithProps);
    };

    var isEmpty = Array.isArray(childrenWithProps) && !childrenWithProps.length || options && options.length === 0;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-select__dropdown-inner"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-select__dropdown-inner--size-s"), size === "small"), _defineProperty$3(_classNames, "".concat(classPrefix, "-select__dropdown-inner--size-l"), size === "large"), _defineProperty$3(_classNames, "".concat(classPrefix, "-select__dropdown-inner--size-m"), size === "medium"), _classNames))
    }, panelTopContent, loading && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-select__loading-tips")
    }, loadingText), !loading && isEmpty && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-select__empty")
    }, empty ? empty : /* @__PURE__ */React__default["default"].createElement("p", null, emptyText)), !loading && !isEmpty && renderOptions(), panelBottomContent);
  });

  var _excluded$m = ["overlayClassName"];

  function ownKeys$1K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1K(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Select$1 = forwardRefWithStatics(function (props, ref) {
    var _useLocaleReceiver = useLocaleReceiver("select"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var emptyText = t(local.loadingText);
    var readonly = props.readonly,
        bordered = props.bordered,
        borderless = props.borderless,
        autoWidth = props.autoWidth,
        creatable = props.creatable,
        filter = props.filter,
        _props$loadingText = props.loadingText,
        loadingText = _props$loadingText === void 0 ? emptyText : _props$loadingText,
        max = props.max,
        popupProps = props.popupProps,
        reserveKeyword = props.reserveKeyword,
        className = props.className,
        style = props.style,
        disabled = props.disabled,
        size = props.size,
        multiple = props.multiple,
        placeholder = props.placeholder,
        clearable = props.clearable,
        prefixIcon = props.prefixIcon,
        options = props.options,
        filterable = props.filterable,
        loading = props.loading,
        onFocus = props.onFocus,
        onBlur = props.onBlur,
        _props$onClear = props.onClear,
        onClear = _props$onClear === void 0 ? noop$1 : _props$onClear,
        onCreate = props.onCreate,
        onRemove = props.onRemove,
        onSearch = props.onSearch,
        empty = props.empty,
        valueType = props.valueType,
        keys = props.keys,
        children = props.children,
        collapsedItems = props.collapsedItems,
        minCollapsedNum = props.minCollapsedNum,
        valueDisplay = props.valueDisplay,
        onEnter = props.onEnter,
        onVisibleChange = props.onVisibleChange,
        showArrow = props.showArrow,
        inputProps = props.inputProps,
        panelBottomContent = props.panelBottomContent,
        panelTopContent = props.panelTopContent,
        selectInputProps = props.selectInputProps,
        tagInputProps = props.tagInputProps,
        tagProps = props.tagProps;
    var selectPopupRef = React.useRef();

    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onChange = _useControlled2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _ref = popupProps || {},
        overlayClassName = _ref.overlayClassName,
        restPopupProps = _objectWithoutProperties$2(_ref, _excluded$m);

    var name = "".concat(classPrefix, "-select");

    var _useControlled3 = useControlled(props, "popupVisible", props.onPopupVisibleChange),
        _useControlled4 = _slicedToArray(_useControlled3, 2),
        showPopup = _useControlled4[0],
        setShowPopup = _useControlled4[1];

    var _useControlled5 = useControlled(props, "inputValue", props.onInputChange),
        _useControlled6 = _slicedToArray(_useControlled5, 2),
        inputValue = _useControlled6[0],
        onInputChange = _useControlled6[1];

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        currentOptions = _useState2[0],
        setCurrentOptions = _useState2[1];

    var _useState3 = React.useState([]),
        _useState4 = _slicedToArray(_useState3, 2),
        tmpPropOptions = _useState4[0],
        setTmpPropOptions = _useState4[1];

    var _useState5 = React.useState({}),
        _useState6 = _slicedToArray(_useState5, 2),
        valueToOption = _useState6[0],
        setValueToOption = _useState6[1];

    var _useState7 = React.useState([]),
        _useState8 = _slicedToArray(_useState7, 2),
        selectedOptions = _useState8[0],
        setSelectedOptions = _useState8[1];

    React.useEffect(function () {
      if (keys) {
        var transformedOptions = options === null || options === void 0 ? void 0 : options.map(function (option) {
          return _objectSpread$1J(_objectSpread$1J({}, option), {}, {
            value: get_1(option, (keys === null || keys === void 0 ? void 0 : keys.value) || "value"),
            label: get_1(option, (keys === null || keys === void 0 ? void 0 : keys.label) || "label")
          });
        });
        setCurrentOptions(transformedOptions);
        setTmpPropOptions(transformedOptions);
      } else {
        setCurrentOptions(options);
        setTmpPropOptions(options);
      }

      setValueToOption(getValueToOption(children, options, keys) || {});
    }, [options, keys, children]);
    React.useEffect(function () {
      setSelectedOptions(function (oldSelectedOptions) {
        var valueKey = (keys === null || keys === void 0 ? void 0 : keys.value) || "value";
        var labelKey = (keys === null || keys === void 0 ? void 0 : keys.label) || "label";

        if (Array.isArray(value)) {
          return value.map(function (item) {
            if (valueType === "value") {
              var _ref2;

              return valueToOption[item] || oldSelectedOptions.find(function (option) {
                return get_1(option, valueKey) === item;
              }) || (_ref2 = {}, _defineProperty$3(_ref2, valueKey, item), _defineProperty$3(_ref2, labelKey, item), _ref2);
            }

            return item;
          }).filter(Boolean);
        }

        if (value !== void 0 && value !== null) {
          if (valueType === "value") {
            var _ref3;

            return [valueToOption[value] || oldSelectedOptions.find(function (option) {
              return get_1(option, valueKey) === value;
            }) || (_ref3 = {}, _defineProperty$3(_ref3, valueKey, value), _defineProperty$3(_ref3, labelKey, value), _ref3)].filter(Boolean);
          }

          return [value];
        }

        return [];
      });
    }, [value, keys, valueType, valueToOption]);
    var selectedLabel = React.useMemo(function () {
      if (multiple) {
        return selectedOptions.map(function (selectedOption) {
          return get_1(selectedOption || {}, (keys === null || keys === void 0 ? void 0 : keys.label) || "label") || "";
        });
      }

      return get_1(selectedOptions[0] || {}, (keys === null || keys === void 0 ? void 0 : keys.label) || "label") || void 0;
    }, [selectedOptions, keys, multiple]);

    var handleShowPopup = function handleShowPopup(visible, ctx) {
      if (disabled) return;
      setShowPopup(visible, ctx);
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(visible);
      visible && onInputChange("");
    };

    var onTagChange = function onTagChange(_currentTags, context) {
      var trigger = context.trigger,
          index = context.index,
          item = context.item,
          e = context.e;

      if (trigger === "backspace") {
        e.stopPropagation();
        var closest = -1;
        var len = index;

        while (len >= 0) {
          var _selectedOptions$len;

          if (!((_selectedOptions$len = selectedOptions[len]) !== null && _selectedOptions$len !== void 0 && _selectedOptions$len.disabled)) {
            closest = len;
            break;
          }

          len -= 1;
        }

        if (closest < 0) {
          return;
        }

        var values = getSelectValueArr(value, value[closest], true, valueType, keys);
        onChange(values, {
          e: e,
          trigger: trigger,
          selectedOptions: []
        });
        return;
      }

      if (trigger === "clear") {
        e.stopPropagation();
        onChange([], {
          e: e,
          trigger: trigger,
          selectedOptions: []
        });
        return;
      }

      if (trigger === "tag-remove") {
        e.stopPropagation();

        var _values = getSelectValueArr(value, value[index], true, valueType, keys);

        onChange(_values, {
          e: e,
          trigger: trigger,
          selectedOptions: []
        });

        if (isFunction_1(onRemove)) {
          onRemove({
            value: value[index],
            data: {
              label: item,
              value: value[index]
            },
            e: e
          });
        }
      }
    };

    var handleChange = function handleChange(value2, context) {
      if (multiple) {
        !reserveKeyword && onInputChange("", {
          trigger: "clear"
        });
      }

      if (creatable && isFunction_1(onCreate)) {
        if (options.filter(function (option) {
          return option.value === value2;
        }).length === 0) {
          onCreate(value2);
        }
      }

      onChange === null || onChange === void 0 ? void 0 : onChange(value2, _objectSpread$1J(_objectSpread$1J({}, context), {}, {
        selectedOptions: []
      }));
    };

    var handleFilter = function handleFilter(value2) {
      var filteredOptions = [];

      if (!value2) {
        setCurrentOptions(tmpPropOptions);
        return;
      }

      if (filter && isFunction_1(filter)) {
        if (Array.isArray(tmpPropOptions)) {
          filteredOptions = tmpPropOptions.filter(function (option) {
            return filter(value2, option);
          });
        }
      } else if (Array.isArray(tmpPropOptions)) {
        var upperValue = value2.toUpperCase();
        filteredOptions = tmpPropOptions.filter(function (option) {
          return ((option === null || option === void 0 ? void 0 : option.label) || "").toUpperCase().includes(upperValue);
        });
      }

      if (creatable) {
        filteredOptions = filteredOptions.concat([{
          label: value2,
          value: value2
        }]);
      }

      setCurrentOptions(filteredOptions);
    };

    var handleInputChange = function handleInputChange(value2) {
      onInputChange(value2);
      if (value2 === void 0) return;

      if (isFunction_1(onSearch)) {
        onSearch(value2);
        return;
      }
    };

    var onClearValue = function onClearValue(context) {
      context.e.stopPropagation();

      if (Array.isArray(value)) {
        onChange([], context);
      } else {
        onChange(null, context);
      }

      onInputChange(void 0);
      onClear(context);
    };

    React.useEffect(function () {
      if (typeof inputValue !== "undefined") {
        handleFilter(String(inputValue));
      }
    }, [inputValue]);

    var renderSuffixIcon = function renderSuffixIcon() {
      if (loading) {
        return /* @__PURE__ */React__default["default"].createElement(Loading, {
          className: classNames$1("".concat(name, "__right-icon"), "".concat(name, "__active-icon")),
          loading: true,
          size: "small"
        });
      }

      return showArrow && /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
        overlayClassName: "".concat(name, "__right-icon"),
        isActive: showPopup,
        disabled: disabled
      });
    };

    var renderContent = function renderContent() {
      var popupContentProps = {
        onChange: handleChange,
        value: value,
        className: className,
        size: size,
        multiple: multiple,
        showPopup: showPopup,
        setShowPopup: function setShowPopup(show) {
          return handleShowPopup(show, {});
        },
        options: currentOptions,
        empty: empty,
        max: max,
        loadingText: loadingText,
        loading: loading,
        valueType: valueType,
        keys: keys,
        panelBottomContent: panelBottomContent,
        panelTopContent: panelTopContent
      };
      return /* @__PURE__ */React__default["default"].createElement(PopupContent, _objectSpread$1J(_objectSpread$1J({}, popupContentProps), {}, {
        ref: selectPopupRef
      }), children);
    };

    var renderValueDisplay = function renderValueDisplay() {
      if (!valueDisplay) {
        if (!multiple) {
          if (typeof selectedLabel !== "string") {
            return selectedLabel;
          }

          return "";
        }

        return function (_ref4) {
          var val = _ref4.value;
          return val.slice(0, minCollapsedNum ? minCollapsedNum : val.length).map(function (v, key) {
            var filterOption = options === null || options === void 0 ? void 0 : options.find(function (option) {
              return option.label === v;
            });
            return /* @__PURE__ */React__default["default"].createElement(Tag, {
              key: key,
              onClose: function onClose(_ref5) {
                var e = _ref5.e;
                e.stopPropagation();
                var values = getSelectValueArr(value, value[key], true, valueType, keys);
                onChange(values, null);
                return;
              },
              closable: !(filterOption !== null && filterOption !== void 0 && filterOption.disabled)
            }, v);
          });
        };
      }

      if (typeof valueDisplay === "string") {
        return valueDisplay;
      }

      if (multiple) {
        return function (_ref6) {
          var onClose = _ref6.onClose;
          return valueDisplay({
            value: selectedLabel,
            onClose: onClose
          });
        };
      }

      return selectedLabel.length ? valueDisplay({
        value: selectedLabel[0],
        onClose: noop$1
      }) : "";
    };

    var renderCollapsedItems = React.useMemo(function () {
      return collapsedItems ? function () {
        return collapsedItems({
          value: selectedLabel,
          collapsedSelectedItems: selectedLabel.slice(minCollapsedNum, selectedLabel.length),
          count: selectedLabel.length - minCollapsedNum
        });
      } : null;
    }, [selectedLabel, collapsedItems, minCollapsedNum]);
    var updateScrollTop = React.useCallback(function (content) {
      if (!(selectPopupRef !== null && selectPopupRef !== void 0 && selectPopupRef.current)) {
        return;
      }

      var firstSelectedNode = (selectPopupRef === null || selectPopupRef === void 0 ? void 0 : selectPopupRef.current).querySelector(".".concat(classPrefix, "-is-selected"));

      if (firstSelectedNode && content) {
        var _getComputedStyle = getComputedStyle(firstSelectedNode),
            paddingBottom = _getComputedStyle.paddingBottom;

        var _getComputedStyle2 = getComputedStyle(content),
            marginBottom = _getComputedStyle2.marginBottom;

        var elementBottomHeight = parseInt(paddingBottom, 10) + parseInt(marginBottom, 10);
        var updateValue = firstSelectedNode.offsetTop - content.offsetTop - (content.clientHeight - firstSelectedNode.clientHeight) + elementBottomHeight;
        content.scrollTop = updateValue;
      }
    }, [classPrefix]);
    var onMouseEnter = props.onMouseEnter,
        onMouseLeave = props.onMouseLeave;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__wrap"), className),
      style: style,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, /* @__PURE__ */React__default["default"].createElement(SelectInput, _objectSpread$1J({
      autoWidth: !(style !== null && style !== void 0 && style.width) && autoWidth,
      ref: ref,
      className: name,
      readonly: readonly,
      allowInput: (filterable !== null && filterable !== void 0 ? filterable : local.filterable) || isFunction_1(filter),
      multiple: multiple,
      value: selectedLabel,
      valueDisplay: renderValueDisplay(),
      clearable: clearable,
      disabled: disabled,
      status: props.status,
      tips: props.tips,
      borderless: borderless || !bordered,
      label: prefixIcon,
      suffixIcon: renderSuffixIcon(),
      panel: renderContent(),
      placeholder: !multiple && showPopup && selectedLabel ? selectedLabel : placeholder || t(local.placeholder),
      inputValue: inputValue,
      tagInputProps: _objectSpread$1J({}, tagInputProps),
      tagProps: tagProps,
      inputProps: _objectSpread$1J({
        size: size
      }, inputProps),
      minCollapsedNum: minCollapsedNum,
      collapsedItems: renderCollapsedItems,
      popupProps: _objectSpread$1J({
        overlayClassName: ["".concat(name, "__dropdown"), overlayClassName]
      }, restPopupProps),
      popupVisible: showPopup,
      onPopupVisibleChange: handleShowPopup,
      onTagChange: onTagChange,
      onInputChange: handleInputChange,
      onFocus: onFocus,
      onEnter: onEnter,
      onBlur: onBlur,
      onClear: function onClear(context) {
        onClearValue(context);
      },
      updateScrollTop: updateScrollTop
    }, selectInputProps)));
  }, {
    Option: Option$1,
    OptionGroup: OptionGroup
  });
  Select$1.displayName = "Select";
  Select$1.defaultProps = selectDefaultProps;

  var Select = Select$1;

  function useBoundaryJumper(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      PageLastIcon: PageLastIcon,
      PageFirstIcon: PageFirstIcon
    }),
        PageFirstIcon$1 = _useGlobalIcon.PageFirstIcon,
        PageLastIcon$1 = _useGlobalIcon.PageLastIcon;

    var name = "".concat(classPrefix, "-pagination");
    var showFirstAndLastPageBtn = props.showFirstAndLastPageBtn,
        disabled = props.disabled,
        current = props.current,
        pageCount = props.pageCount,
        changeCurrent = props.changeCurrent;
    var firstPageJumper = showFirstAndLastPageBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__btn"), "".concat(name, "__btn-first-page"), _defineProperty$3({}, "".concat(classPrefix, "-is-disabled"), disabled || current === 1)),
      onClick: function onClick() {
        return changeCurrent(1);
      }
    }, /* @__PURE__ */React__default["default"].createElement(PageFirstIcon$1, null));
    var lastPageJumper = showFirstAndLastPageBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__btn"), "".concat(name, "__btn-first-page"), _defineProperty$3({}, "".concat(classPrefix, "-is-disabled"), disabled || current === pageCount)),
      onClick: function onClick() {
        return changeCurrent(pageCount);
      }
    }, /* @__PURE__ */React__default["default"].createElement(PageLastIcon$1, null));
    return {
      firstPageJumper: firstPageJumper,
      lastPageJumper: lastPageJumper
    };
  }

  function usePrevNextJumper(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      ChevronLeftIcon: ChevronLeftIcon,
      ChevronRightIcon: ChevronRightIcon
    }),
        ChevronLeftIcon$1 = _useGlobalIcon.ChevronLeftIcon,
        ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;

    var name = "".concat(classPrefix, "-pagination");
    var showPreviousAndNextBtn = props.showPreviousAndNextBtn,
        disabled = props.disabled,
        current = props.current,
        pageCount = props.pageCount,
        changeCurrent = props.changeCurrent;
    var prevJumper = showPreviousAndNextBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__btn"), "".concat(name, "__btn-prev"), _defineProperty$3({}, "".concat(classPrefix, "-is-disabled"), disabled || current === 1)),
      onClick: function onClick() {
        if (disabled || current === 1) return;
        changeCurrent(current - 1);
      }
    }, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon$1, null));
    var nextJumper = showPreviousAndNextBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__btn"), "".concat(name, "__btn-next"), _defineProperty$3({}, "".concat(classPrefix, "-is-disabled"), disabled || current === pageCount)),
      onClick: function onClick() {
        if (disabled || current === pageCount) return;
        changeCurrent(current + 1);
      }
    }, /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon$1, null));
    return {
      prevJumper: prevJumper,
      nextJumper: nextJumper
    };
  }

  function usePageNumber(props) {
    var _classNames, _classNames5;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      EllipsisIcon: EllipsisIcon,
      ChevronLeftDoubleIcon: ChevronLeftDoubleIcon,
      ChevronRightDoubleIcon: ChevronRightDoubleIcon
    }),
        EllipsisIcon$1 = _useGlobalIcon.EllipsisIcon,
        ChevronLeftDoubleIcon$1 = _useGlobalIcon.ChevronLeftDoubleIcon,
        ChevronRightDoubleIcon$1 = _useGlobalIcon.ChevronRightDoubleIcon;

    var name = "".concat(classPrefix, "-pagination");

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        hoverPreMore = _useState2[0],
        toggleHoverPreMore = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        hoverNextMore = _useState4[0],
        toggleHoverNextMore = _useState4[1];

    var showPageNumber = props.showPageNumber,
        maxPageBtn = props.maxPageBtn,
        disabled = props.disabled,
        current = props.current,
        pageCount = props.pageCount,
        foldedMaxPageBtn = props.foldedMaxPageBtn,
        changeCurrent = props.changeCurrent,
        pageEllipsisMode = props.pageEllipsisMode;
    var isMidEllipsis = pageEllipsisMode === "mid";
    var pivot = Math.ceil((foldedMaxPageBtn - 1) / 2);
    var pageList = React.useMemo(function () {
      var isPrevMoreShow = 2 + pivot < current;
      var isNextMoreShow = pageCount - 1 - pivot > current;
      var array = [];
      var start;
      var end;

      if (pageCount > maxPageBtn) {
        if (isPrevMoreShow && isNextMoreShow) {
          start = current - pivot;
          end = current + pivot;
        } else {
          var foldedStart = isMidEllipsis ? 2 : 1;
          var foldedEnd = isMidEllipsis ? pageCount - 1 : pageCount;
          start = isPrevMoreShow ? pageCount - foldedMaxPageBtn + 1 : foldedStart;
          end = isPrevMoreShow ? foldedEnd : foldedMaxPageBtn;
        }
      } else {
        start = 1;
        end = pageCount;
      }

      for (var i = start; i <= end; i++) {
        array.push(i);
      }

      return array;
    }, [current, pageCount, foldedMaxPageBtn, isMidEllipsis, maxPageBtn, pivot]);
    var isFolded = pageCount > maxPageBtn;
    var pageNumberContrl = showPageNumber && /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(name, "__pager")
    }, isFolded && isMidEllipsis && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("li", {
      key: 1,
      className: classNames$1("".concat(name, "__number"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-current"), current === 1), _classNames)),
      onClick: function onClick() {
        return changeCurrent(1);
      }
    }, "1"), 2 + pivot < current && /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty$3({}, "".concat(classPrefix, "-is-disabled"), disabled)),
      onMouseEnter: function onMouseEnter() {
        return toggleHoverPreMore(true);
      },
      onMouseLeave: function onMouseLeave() {
        return toggleHoverPreMore(false);
      },
      onClick: function onClick() {
        return changeCurrent(current - foldedMaxPageBtn);
      }
    }, !hoverPreMore ? /* @__PURE__ */React__default["default"].createElement(EllipsisIcon$1, null) : /* @__PURE__ */React__default["default"].createElement(ChevronLeftDoubleIcon$1, null))), pageList.map(function (item) {
      var _classNames3;

      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: item,
        className: classNames$1("".concat(name, "__number"), (_classNames3 = {}, _defineProperty$3(_classNames3, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames3, "".concat(classPrefix, "-is-current"), current === item), _classNames3)),
        onClick: function onClick() {
          return changeCurrent(item);
        }
      }, item);
    }), isFolded && isMidEllipsis && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, pageCount - 1 - pivot > current && /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty$3({}, "".concat(classPrefix, "-is-disabled"), disabled)),
      onMouseEnter: function onMouseEnter() {
        return toggleHoverNextMore(true);
      },
      onMouseLeave: function onMouseLeave() {
        return toggleHoverNextMore(false);
      },
      onClick: function onClick() {
        return changeCurrent(current + foldedMaxPageBtn);
      }
    }, !hoverNextMore ? /* @__PURE__ */React__default["default"].createElement(EllipsisIcon$1, null) : /* @__PURE__ */React__default["default"].createElement(ChevronRightDoubleIcon$1, null)), /* @__PURE__ */React__default["default"].createElement("li", {
      key: pageCount,
      className: classNames$1("".concat(name, "__number"), (_classNames5 = {}, _defineProperty$3(_classNames5, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames5, "".concat(classPrefix, "-is-current"), current === pageCount), _classNames5)),
      onClick: function onClick() {
        return changeCurrent(pageCount);
      }
    }, pageCount)));
    return {
      pageNumberContrl: pageNumberContrl
    };
  }

  function useTotal(props) {
    var _useLocaleReceiver = useLocaleReceiver("pagination"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        locale = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-pagination");
    var totalContent = props.totalContent,
        pageSize = props.pageSize,
        current = props.current,
        total = props.total;
    var totalContrl = null;
    if (totalContent === false) return {
      totalContrl: totalContrl
    };

    var renderTotalContent = function renderTotalContent() {
      if (typeof totalContent === "boolean") {
        return totalContent ? t(locale.total, {
          total: total
        }) : null;
      }

      if (typeof totalContent === "function") {
        var start = (current - 1) * pageSize;
        var end = Math.min(total, start + pageSize);
        return totalContent(total, [start + 1, end]);
      }

      return totalContent;
    };

    totalContrl = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__total")
    }, renderTotalContent());
    return {
      totalContrl: totalContrl
    };
  }

  var pageSizeValidator = function pageSizeValidator(pageSize) {
    var pageSizeNumber;

    if (typeof pageSize !== "number") {
      pageSizeNumber = pageSize - 0;
    } else {
      pageSizeNumber = pageSize;
    }

    return !Number.isFinite(pageSizeNumber) && pageSizeNumber > 0;
  };

  var paginationDefaultProps = {
    defaultCurrent: 1,
    foldedMaxPageBtn: 5,
    maxPageBtn: 10,
    pageEllipsisMode: "mid",
    defaultPageSize: 10,
    pageSizeOptions: [5, 10, 20, 50],
    showFirstAndLastPageBtn: false,
    showJumper: false,
    showPageNumber: true,
    showPageSize: true,
    showPreviousAndNextBtn: true,
    size: "medium",
    theme: "default",
    total: 0,
    totalContent: true
  };

  var _excluded$l = ["theme", "size", "total", "showPageSize", "showPageNumber", "showPreviousAndNextBtn", "showFirstAndLastPageBtn", "showJumper", "pageEllipsisMode", "disabled", "foldedMaxPageBtn", "maxPageBtn", "totalContent", "pageSizeOptions", "onChange", "onCurrentChange", "onPageSizeChange", "style", "className"];

  function ownKeys$1J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1J(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Option = Select.Option;
  var Pagination$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var theme = props.theme,
        size = props.size,
        total = props.total,
        showPageSize = props.showPageSize,
        showPageNumber = props.showPageNumber,
        showPreviousAndNextBtn = props.showPreviousAndNextBtn,
        showFirstAndLastPageBtn = props.showFirstAndLastPageBtn,
        showJumper = props.showJumper,
        pageEllipsisMode = props.pageEllipsisMode,
        disabled = props.disabled,
        foldedMaxPageBtn = props.foldedMaxPageBtn,
        maxPageBtn = props.maxPageBtn,
        totalContent = props.totalContent,
        pageSizeOptions = props.pageSizeOptions,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop$1 : _props$onChange,
        onCurrentChange = props.onCurrentChange,
        onPageSizeChange = props.onPageSizeChange,
        style = props.style,
        className = props.className,
        otherProps = _objectWithoutProperties$2(props, _excluded$l);

    var restProps = omit_1(otherProps, ["current", "pageSize", "defaultPageSize", "defaultCurrent"]);

    var _useLocaleReceiver = useLocaleReceiver("pagination"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        locale = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useControlled = useControlled(props, "pageSize", onPageSizeChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        pageSize = _useControlled2[0],
        setPageSize = _useControlled2[1];

    var _useControlled3 = useControlled(props, "current", onCurrentChange),
        _useControlled4 = _slicedToArray(_useControlled3, 2),
        current = _useControlled4[0],
        setCurrent = _useControlled4[1];

    var _useState = React.useState(current),
        _useState2 = _slicedToArray(_useState, 2),
        jumpValue = _useState2[0],
        setJumpValue = _useState2[1];

    var min = 1;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-pagination");
    var pageCount = React.useMemo(function () {
      var calCount = Math.ceil(total / pageSize);
      return calCount > 0 ? calCount : 1;
    }, [pageSize, total]);

    var changeCurrent = function changeCurrent(_nextCurrent, _nextPageSize) {
      if (disabled) return;
      var nextCurrent = _nextCurrent;
      var nextPageSize = _nextPageSize;

      if (!nextPageSize && !pageSizeValidator(nextPageSize)) {
        var _pageSizeOptions$;

        nextPageSize = pageSize !== null && pageSize !== void 0 ? pageSize : typeof pageSizeOptions[0] === "number" ? pageSizeOptions[0] : (_pageSizeOptions$ = pageSizeOptions[0]) === null || _pageSizeOptions$ === void 0 ? void 0 : _pageSizeOptions$.value;
      }

      if (nextCurrent < min) nextCurrent = min;
      if (nextCurrent > pageCount) nextCurrent = pageCount;
      setCurrent(nextCurrent, {
        current: nextCurrent,
        previous: current,
        pageSize: nextPageSize
      });
      setJumpValue(nextCurrent);
      onChange({
        current: nextCurrent,
        previous: current,
        pageSize: nextPageSize
      });
    };

    var changePageSize = function changePageSize(nextPageSize) {
      var nextCurrent = Math.min(current, Math.ceil(total / nextPageSize));
      var pageInfo = {
        current: nextCurrent,
        previous: current,
        pageSize: nextPageSize
      };
      setPageSize(nextPageSize, pageInfo);

      if (current !== nextCurrent) {
        changeCurrent(nextCurrent, nextPageSize);
      } else {
        onChange(pageInfo);
      }
    };

    var _useTotal = useTotal({
      totalContent: totalContent,
      pageSize: pageSize,
      current: current,
      total: total
    }),
        totalContrl = _useTotal.totalContrl;

    var _useBoundaryJumper = useBoundaryJumper({
      disabled: disabled,
      current: current,
      pageCount: pageCount,
      showFirstAndLastPageBtn: showFirstAndLastPageBtn,
      changeCurrent: changeCurrent
    }),
        firstPageJumper = _useBoundaryJumper.firstPageJumper,
        lastPageJumper = _useBoundaryJumper.lastPageJumper;

    var _usePrevNextJumper = usePrevNextJumper({
      disabled: disabled,
      current: current,
      pageCount: pageCount,
      showPreviousAndNextBtn: showPreviousAndNextBtn,
      changeCurrent: changeCurrent
    }),
        prevJumper = _usePrevNextJumper.prevJumper,
        nextJumper = _usePrevNextJumper.nextJumper;

    var _usePageNumber = usePageNumber({
      showPageNumber: showPageNumber,
      maxPageBtn: maxPageBtn,
      disabled: disabled,
      current: current,
      pageCount: pageCount,
      foldedMaxPageBtn: foldedMaxPageBtn,
      changeCurrent: changeCurrent,
      pageEllipsisMode: pageEllipsisMode
    }),
        pageNumberContrl = _usePageNumber.pageNumberContrl;

    var pageSizeContrl = showPageSize && pageSizeOptions.length ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__select")
    }, /* @__PURE__ */React__default["default"].createElement(Select, {
      autoWidth: true,
      size: size,
      value: pageSize,
      disabled: disabled,
      onChange: changePageSize
    }, pageSizeOptions.map(function (item) {
      return typeof item === "number" ? /* @__PURE__ */React__default["default"].createElement(Option, {
        key: item,
        label: t(locale.itemsPerPage, {
          size: item
        }),
        value: item
      }) : /* @__PURE__ */React__default["default"].createElement(Option, {
        key: item.value,
        label: item.label,
        value: item.value
      });
    }))) : null;
    var Jumper = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__jump")
    }, t(locale.jumpTo), /* @__PURE__ */React__default["default"].createElement(InputAdornment$1, {
      append: "/ ".concat(pageCount, " ").concat(t(locale.page))
    }, /* @__PURE__ */React__default["default"].createElement(InputNumber, {
      className: "".concat(classPrefix, "-pagination__input"),
      min: min,
      size: size,
      theme: "normal",
      max: pageCount,
      disabled: disabled,
      value: jumpValue,
      onChange: function onChange(val) {
        return setJumpValue(val);
      },
      onBlur: function onBlur(val) {
        return changeCurrent(val);
      },
      onEnter: function onEnter(val) {
        return changeCurrent(val);
      },
      placeholder: ""
    })));
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1I({
      className: classNames$1(name, className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _classNames)),
      style: style,
      ref: ref
    }, restProps), totalContrl, pageSizeContrl, firstPageJumper, prevJumper, theme === "default" && pageNumberContrl, theme === "simple" && Jumper, nextJumper, lastPageJumper, theme === "default" && showJumper && Jumper);
  });
  Pagination$1.displayName = "Pagination";
  Pagination$1.defaultProps = paginationDefaultProps;

  var Pagination = Pagination$1;

  function ownKeys$1I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1I(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function usePagination(props) {
    var pagination = props.pagination,
        data = props.data,
        disableDataPage = props.disableDataPage;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        dataSource = _useState2[0],
        setDataSource = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isPaginateData = _useState4[0],
        setIsPaginateData = _useState4[1];

    var updateDataSourceAndPaginate = React.useCallback(function () {
      var current = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      var isPaginateData2 = Boolean(!disableDataPage && data.length > pageSize);
      setIsPaginateData(isPaginateData2);

      if (isPaginateData2) {
        var start = (current - 1) * pageSize;
        var end = current * pageSize;
        setDataSource(_toConsumableArray(data.slice(start, end)));
      } else {
        setDataSource(data);
      }
    }, [data, disableDataPage]);
    React.useEffect(function () {
      if (!pagination || !pagination.current) return;
      updateDataSourceAndPaginate(pagination.current, pagination.pageSize);
    }, [pagination, updateDataSourceAndPaginate]);
    React.useEffect(function () {
      if (!pagination || !pagination.defaultCurrent) return;
      updateDataSourceAndPaginate(pagination.defaultCurrent, pagination.defaultPageSize);
    }, [updateDataSourceAndPaginate]);

    var renderPagination = function renderPagination() {
      if (!pagination) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__pagination")
      }, /* @__PURE__ */React__default["default"].createElement(Pagination, _objectSpread$1H(_objectSpread$1H({}, pagination), {}, {
        onChange: function onChange(pageInfo) {
          var _props$pagination, _props$pagination$onC, _props$onPageChange;

          (_props$pagination = props.pagination) === null || _props$pagination === void 0 ? void 0 : (_props$pagination$onC = _props$pagination.onChange) === null || _props$pagination$onC === void 0 ? void 0 : _props$pagination$onC.call(_props$pagination, pageInfo);
          (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, pageInfo, dataSource);

          if (pagination && !pagination.current && pagination.defaultCurrent) {
            updateDataSourceAndPaginate(pageInfo.current, pageInfo.pageSize);
          }
        }
      })));
    };

    return {
      isPaginateData: isPaginateData,
      dataSource: dataSource,
      renderPagination: renderPagination
    };
  }

  function useCommonClassName() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return React.useMemo(function () {
      var names = {
        SIZE: {
          "default": "",
          xs: "".concat(classPrefix, "-size-xs"),
          small: "".concat(classPrefix, "-size-s"),
          medium: "".concat(classPrefix, "-size-m"),
          large: "".concat(classPrefix, "-size-l"),
          xl: "".concat(classPrefix, "-size-xl"),
          block: "".concat(classPrefix, "-size-full-width")
        },
        STATUS: {
          loading: "".concat(classPrefix, "-is-loading"),
          disabled: "".concat(classPrefix, "-is-disabled"),
          focused: "".concat(classPrefix, "-is-focused"),
          success: "".concat(classPrefix, "-is-success"),
          error: "".concat(classPrefix, "-is-error"),
          warning: "".concat(classPrefix, "-is-warning"),
          selected: "".concat(classPrefix, "-is-selected"),
          active: "".concat(classPrefix, "-is-active"),
          checked: "".concat(classPrefix, "-is-checked"),
          current: "".concat(classPrefix, "-is-current"),
          hidden: "".concat(classPrefix, "-is-hidden"),
          visible: "".concat(classPrefix, "-is-visible"),
          expanded: "".concat(classPrefix, "-is-expanded"),
          indeterminate: "".concat(classPrefix, "-is-indeterminate")
        }
      };
      return {
        SIZE: names.SIZE,
        STATUS: names.STATUS,
        sizeClassNames: names.SIZE,
        statusClassNames: names.STATUS
      };
    }, [classPrefix]);
  }

  function formatCSSUnit(unit) {
    if (!unit) return unit;
    return isNaN(Number(unit)) ? unit : "".concat(unit, "px");
  }
  function useStyle(props) {
    var className = props.className,
        size = props.size,
        bordered = props.bordered,
        stripe = props.stripe,
        hover = props.hover,
        verticalAlign = props.verticalAlign,
        height = props.height,
        maxHeight = props.maxHeight,
        tableContentWidth = props.tableContentWidth;

    var _useClassName = useClassName(),
        tableBaseClass = _useClassName.tableBaseClass,
        tableAlignClasses = _useClassName.tableAlignClasses;

    var _useCommonClassName = useCommonClassName(),
        sizeClassNames = _useCommonClassName.sizeClassNames;

    var tableClasses = React.useMemo(function () {
      var _ref;

      return [tableBaseClass.table, size !== "medium" && sizeClassNames[size], verticalAlign !== "middle" && tableAlignClasses[verticalAlign], (_ref = {}, _defineProperty$3(_ref, tableBaseClass.bordered, bordered), _defineProperty$3(_ref, tableBaseClass.striped, stripe), _defineProperty$3(_ref, tableBaseClass.hover, hover), _defineProperty$3(_ref, tableBaseClass.loading, props.loading), _defineProperty$3(_ref, tableBaseClass.affixedHeader, props.headerAffixedTop), _defineProperty$3(_ref, tableBaseClass.rowspanAndColspan, props.rowspanAndColspan), _ref), className];
    }, [className, bordered, hover, props.loading, props.headerAffixedTop, props.rowspanAndColspan, size, sizeClassNames, stripe, tableAlignClasses, tableBaseClass, verticalAlign]);
    var tableContentStyles = React.useMemo(function () {
      return {
        height: formatCSSUnit(height),
        maxHeight: formatCSSUnit(maxHeight)
      };
    }, [height, maxHeight]);
    var tableElementStyles = React.useMemo(function () {
      return {
        width: formatCSSUnit(tableContentWidth)
      };
    }, [tableContentWidth]);
    return {
      tableClasses: tableClasses,
      tableElementStyles: tableElementStyles,
      tableContentStyles: tableContentStyles
    };
  }

  function ownKeys$1H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1H(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var BaseTable$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _tableClasses$concat, _props$data2, _props$scroll3, _props$scroll4, _navigator, _affixHeaderRef$curre, _props$footData, _tableContentRef$curr;

    var tableLayout = props.tableLayout,
        height = props.height,
        data = props.data,
        columns = props.columns,
        style = props.style,
        headerAffixedTop = props.headerAffixedTop,
        bordered = props.bordered,
        resizable = props.resizable;
    var tableRef = React.useRef();
    var tableElmRef = React.useRef();

    var _useState = React.useState(0),
        _useState2 = _slicedToArray(_useState, 2),
        tableFootHeight = _useState2[0],
        setTableFootHeight = _useState2[1];

    var _useClassName = useClassName(),
        virtualScrollClasses = _useClassName.virtualScrollClasses,
        tableLayoutClasses = _useClassName.tableLayoutClasses,
        tableBaseClass = _useClassName.tableBaseClass,
        tableColFixedClasses = _useClassName.tableColFixedClasses;

    var _useStyle = useStyle(props),
        tableClasses = _useStyle.tableClasses,
        tableContentStyles = _useStyle.tableContentStyles,
        tableElementStyles = _useStyle.tableElementStyles;

    var _useTableHeader = useTableHeader({
      columns: props.columns
    }),
        isMultipleHeader = _useTableHeader.isMultipleHeader,
        spansAndLeafNodes = _useTableHeader.spansAndLeafNodes,
        thList = _useTableHeader.thList;

    var finalColumns = React.useMemo(function () {
      return (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns;
    }, [spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns, columns]);

    var _useFixed = useFixed(props, finalColumns),
        scrollbarWidth = _useFixed.scrollbarWidth,
        tableWidth = _useFixed.tableWidth,
        tableElmWidth = _useFixed.tableElmWidth,
        tableContentRef = _useFixed.tableContentRef,
        isFixedHeader = _useFixed.isFixedHeader,
        isWidthOverflow = _useFixed.isWidthOverflow,
        isFixedColumn = _useFixed.isFixedColumn,
        thWidthList = _useFixed.thWidthList,
        showColumnShadow = _useFixed.showColumnShadow,
        rowAndColFixedPosition = _useFixed.rowAndColFixedPosition,
        setData = _useFixed.setData,
        refreshTable = _useFixed.refreshTable,
        emitScrollEvent = _useFixed.emitScrollEvent,
        setUseFixedTableElmRef = _useFixed.setUseFixedTableElmRef,
        updateColumnFixedShadow = _useFixed.updateColumnFixedShadow,
        getThWidthList = _useFixed.getThWidthList,
        updateThWidthList = _useFixed.updateThWidthList,
        setRecalculateColWidthFuncRef = _useFixed.setRecalculateColWidthFuncRef,
        addTableResizeObserver = _useFixed.addTableResizeObserver;

    var _useAffix = useAffix(props),
        affixHeaderRef = _useAffix.affixHeaderRef,
        affixFooterRef = _useAffix.affixFooterRef,
        horizontalScrollbarRef = _useAffix.horizontalScrollbarRef,
        paginationRef = _useAffix.paginationRef,
        showAffixHeader = _useAffix.showAffixHeader,
        showAffixFooter = _useAffix.showAffixFooter,
        showAffixPagination = _useAffix.showAffixPagination,
        onHorizontalScroll = _useAffix.onHorizontalScroll,
        setTableContentRef = _useAffix.setTableContentRef,
        updateAffixHeaderOrFooter = _useAffix.updateAffixHeaderOrFooter;

    var _usePagination = usePagination(props),
        dataSource = _usePagination.dataSource,
        isPaginateData = _usePagination.isPaginateData,
        renderPagination = _usePagination.renderPagination;

    var columnResizeParams = useColumnResize(tableContentRef, refreshTable, getThWidthList, updateThWidthList);
    var resizeLineRef = columnResizeParams.resizeLineRef,
        resizeLineStyle = columnResizeParams.resizeLineStyle,
        recalculateColWidth = columnResizeParams.recalculateColWidth,
        setEffectColMap = columnResizeParams.setEffectColMap;
    setRecalculateColWidthFuncRef(recalculateColWidth);
    var dynamicBaseTableClasses = classNames$1(tableClasses.concat((_tableClasses$concat = {}, _defineProperty$3(_tableClasses$concat, tableBaseClass.headerFixed, isFixedHeader), _defineProperty$3(_tableClasses$concat, tableBaseClass.columnFixed, isFixedColumn), _defineProperty$3(_tableClasses$concat, tableBaseClass.widthOverflow, isWidthOverflow), _defineProperty$3(_tableClasses$concat, tableBaseClass.multipleHeader, isMultipleHeader), _defineProperty$3(_tableClasses$concat, tableColFixedClasses.leftShadow, showColumnShadow.left), _defineProperty$3(_tableClasses$concat, tableColFixedClasses.rightShadow, showColumnShadow.right), _defineProperty$3(_tableClasses$concat, tableBaseClass.columnResizableTable, props.resizable), _tableClasses$concat)));
    var tableElmClasses = classNames$1([[tableLayoutClasses[tableLayout || "fixed"]], _defineProperty$3({}, tableBaseClass.fullHeight, height)]);
    var isVirtual = React.useMemo(function () {
      var _props$scroll, _props$data, _props$scroll2;

      return ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual" && ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length) > (((_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.threshold) || 100);
    }, [(_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.length, (_props$scroll3 = props.scroll) === null || _props$scroll3 === void 0 ? void 0 : _props$scroll3.threshold, (_props$scroll4 = props.scroll) === null || _props$scroll4 === void 0 ? void 0 : _props$scroll4.type]);
    var showRightDivider = React.useMemo(function () {
      return props.bordered && isFixedHeader && (isMultipleHeader && isWidthOverflow || !isMultipleHeader);
    }, [isFixedHeader, isMultipleHeader, isWidthOverflow, props.bordered]);
    React.useEffect(function () {
      setUseFixedTableElmRef(tableElmRef.current);
    }, [tableElmRef]);
    React.useEffect(function () {
      setData(isPaginateData ? dataSource : props.data);
    }, [props.data, dataSource, isPaginateData]);

    var _useState3 = React.useState(props.columns || []),
        _useState4 = _slicedToArray(_useState3, 2),
        lastLeafColumns = _useState4[0],
        setLastLeafColumns = _useState4[1];

    React.useEffect(function () {
      if (lastLeafColumns.map(function (t) {
        return t.colKey;
      }).join() !== spansAndLeafNodes.leafColumns.map(function (t) {
        return t.colKey;
      }).join()) {
        var _props$onLeafColumnsC;

        (_props$onLeafColumnsC = props.onLeafColumnsChange) === null || _props$onLeafColumnsC === void 0 ? void 0 : _props$onLeafColumnsC.call(props, spansAndLeafNodes.leafColumns);
        setLastLeafColumns(spansAndLeafNodes.leafColumns);
      }
    }, [spansAndLeafNodes.leafColumns]);
    React.useEffect(function () {
      setEffectColMap(thList[0], null);
    }, [thList]);
    React.useImperativeHandle(ref, function () {
      return {
        tableElement: tableRef.current,
        tableHtmlElement: tableElmRef.current,
        tableContentElement: tableContentRef.current,
        affixHeaderElement: affixHeaderRef.current,
        refreshTable: refreshTable
      };
    });

    var onFixedChange = function onFixedChange() {
      var timer = setTimeout(function () {
        onHorizontalScroll();
        updateAffixHeaderOrFooter();
        clearTimeout(timer);
      }, 0);
    };

    var lastScrollY = 0;

    var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
      var target = e.target;
      var top = target.scrollTop;

      if (lastScrollY !== top) ; else {
        lastScrollY = 0;
        updateColumnFixedShadow(target);
      }

      lastScrollY = top;
      emitScrollEvent(e);
    };

    var getTFootHeight = function getTFootHeight() {
      if (!tableElmRef.current) return;
      var timer = setTimeout(function () {
        var _tableElmRef$current, _tableElmRef$current$;

        var height2 = (_tableElmRef$current = tableElmRef.current) === null || _tableElmRef$current === void 0 ? void 0 : (_tableElmRef$current$ = _tableElmRef$current.querySelector("tfoot")) === null || _tableElmRef$current$ === void 0 ? void 0 : _tableElmRef$current$.getBoundingClientRect().height;
        setTableFootHeight(height2);
        clearTimeout(timer);
      });
    };

    React.useEffect(function () {
      setTableContentRef(tableContentRef.current);
    }, [tableContentRef]);
    React.useEffect(function () {
      return addTableResizeObserver(tableRef.current);
    }, [tableRef]);
    React.useEffect(getTFootHeight, [tableElmRef]);
    var newData = isPaginateData ? dataSource : data;

    if (resizable && tableLayout === "auto") {
      log.warn("Table", "table-layout can not be `auto` for resizable column table, set `table-layout: fixed` please.");
    }

    var defaultColWidth = props.tableLayout === "fixed" && isWidthOverflow ? "100px" : void 0;
    var colgroup = /* @__PURE__ */React__default["default"].createElement("colgroup", null, finalColumns.map(function (col) {
      var style2 = {
        width: formatCSSUnit(thWidthList.current[col.colKey] || col.width) || defaultColWidth
      };

      if (col.minWidth) {
        style2.minWidth = formatCSSUnit(col.minWidth);
      }

      return /* @__PURE__ */React__default["default"].createElement("col", {
        key: col.colKey,
        style: style2
      });
    }));
    var onlyVirtualScrollBordered = !!(isVirtual && !headerAffixedTop && bordered) && /Chrome/.test((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.userAgent);
    var borderWidth = bordered && onlyVirtualScrollBordered ? 1 : 0;
    var affixHeaderWrapHeight = (((_affixHeaderRef$curre = affixHeaderRef.current) === null || _affixHeaderRef$curre === void 0 ? void 0 : _affixHeaderRef$curre.getBoundingClientRect().height) || 0) - scrollbarWidth - borderWidth;
    var headerOpacity = headerAffixedTop ? Number(showAffixHeader) : 1;
    var affixHeaderWrapHeightStyle = {
      width: "".concat(tableWidth.current, "px"),
      height: "".concat(affixHeaderWrapHeight, "px"),
      opacity: headerOpacity,
      marginTop: onlyVirtualScrollBordered ? "".concat(borderWidth, "px") : 0
    };
    var affixedLeftBorder = props.bordered ? 1 : 0;
    var affixedHeader = Boolean(props.headerAffixedTop && tableWidth.current) && /* @__PURE__ */React__default["default"].createElement("div", {
      ref: affixHeaderRef,
      style: {
        width: "".concat(tableWidth.current - affixedLeftBorder, "px"),
        opacity: headerOpacity
      },
      className: classNames$1(["scrollbar", _defineProperty$3({}, tableBaseClass.affixedHeaderElm, props.headerAffixedTop || isVirtual)])
    }, /* @__PURE__ */React__default["default"].createElement("table", {
      className: classNames$1(tableElmClasses),
      style: _objectSpread$1G(_objectSpread$1G({}, tableElementStyles), {}, {
        width: "".concat(tableElmWidth.current, "px")
      })
    }, colgroup, /* @__PURE__ */React__default["default"].createElement(THead, {
      isFixedHeader: isFixedHeader,
      rowAndColFixedPosition: rowAndColFixedPosition,
      isMultipleHeader: isMultipleHeader,
      bordered: props.bordered,
      spansAndLeafNodes: spansAndLeafNodes,
      thList: thList,
      thWidthList: thWidthList.current,
      resizable: props.resizable,
      columnResizeParams: columnResizeParams
    })));
    var affixHeaderWithWrap = /* @__PURE__ */React__default["default"].createElement("div", {
      className: tableBaseClass.affixedHeaderWrap,
      style: affixHeaderWrapHeightStyle
    }, affixedHeader);
    var marginScrollbarWidth = isWidthOverflow ? scrollbarWidth : 0;

    if (bordered) {
      marginScrollbarWidth += 1;
    }

    var affixedFooter = Boolean(props.footerAffixedBottom && ((_props$footData = props.footData) === null || _props$footData === void 0 ? void 0 : _props$footData.length) && tableWidth.current) && /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$1G(_objectSpread$1G({
      className: tableBaseClass.affixedFooterWrap,
      onFixedChange: onFixedChange,
      offsetBottom: marginScrollbarWidth || 0
    }, getAffixProps(props.footerAffixedBottom)), {}, {
      style: {
        marginTop: "".concat(-1 * (tableFootHeight + marginScrollbarWidth), "px")
      }
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      ref: affixFooterRef,
      style: {
        width: "".concat(tableWidth.current - affixedLeftBorder, "px"),
        opacity: Number(showAffixFooter)
      },
      className: classNames$1(["scrollbar", _defineProperty$3({}, tableBaseClass.affixedFooterElm, props.footerAffixedBottom || isVirtual)])
    }, /* @__PURE__ */React__default["default"].createElement("table", {
      className: tableElmClasses,
      style: _objectSpread$1G(_objectSpread$1G({}, tableElementStyles), {}, {
        width: "".concat(tableElmWidth.current, "px")
      })
    }, colgroup, /* @__PURE__ */React__default["default"].createElement(TFoot, {
      rowKey: props.rowKey,
      isFixedHeader: isFixedHeader,
      rowAndColFixedPosition: rowAndColFixedPosition,
      footData: props.footData,
      columns: (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns,
      rowAttributes: props.rowAttributes,
      rowClassName: props.rowClassName,
      thWidthList: thWidthList.current,
      footerSummary: props.footerSummary,
      rowspanAndColspanInFooter: props.rowspanAndColspanInFooter
    }))));
    var translate = "translate(0, ".concat(0, "px)");
    var virtualStyle = {
      transform: translate,
      "-ms-transform": translate,
      "-moz-transform": translate,
      "-webkit-transform": translate
    };

    var tableBodyProps = _objectSpread$1G({
      rowAndColFixedPosition: rowAndColFixedPosition,
      showColumnShadow: showColumnShadow,
      data: newData,
      columns: (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns,
      tableElm: tableRef.current,
      tableContentElm: tableContentRef.current,
      tableWidth: tableWidth.current,
      isWidthOverflow: isWidthOverflow,
      rowKey: props.rowKey || "id",
      scroll: props.scroll,
      cellEmptyContent: props.cellEmptyContent,
      renderExpandedRow: props.renderExpandedRow
    }, pick_1(props, extendTableProps));

    var tableContent = /* @__PURE__ */React__default["default"].createElement("div", {
      ref: tableContentRef,
      className: tableBaseClass.content,
      style: tableContentStyles,
      onScroll: onInnerVirtualScroll
    }, isVirtual && /* @__PURE__ */React__default["default"].createElement("div", {
      className: virtualScrollClasses.cursor,
      style: virtualStyle
    }), /* @__PURE__ */React__default["default"].createElement("table", {
      ref: tableElmRef,
      className: classNames$1(tableElmClasses),
      style: tableElementStyles
    }, colgroup, /* @__PURE__ */React__default["default"].createElement(THead, {
      isFixedHeader: isFixedHeader,
      rowAndColFixedPosition: rowAndColFixedPosition,
      isMultipleHeader: isMultipleHeader,
      bordered: props.bordered,
      spansAndLeafNodes: spansAndLeafNodes,
      thList: thList,
      thWidthList: thWidthList.current,
      resizable: props.resizable,
      columnResizeParams: columnResizeParams
    }), /* @__PURE__ */React__default["default"].createElement(TBody, _objectSpread$1G({}, tableBodyProps)), /* @__PURE__ */React__default["default"].createElement(TFoot, {
      rowKey: props.rowKey,
      isFixedHeader: isFixedHeader,
      rowAndColFixedPosition: rowAndColFixedPosition,
      footData: props.footData,
      columns: (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns,
      rowAttributes: props.rowAttributes,
      rowClassName: props.rowClassName,
      thWidthList: thWidthList.current,
      footerSummary: props.footerSummary,
      rowspanAndColspanInFooter: props.rowspanAndColspanInFooter
    })));
    var loading = props.loading,
        loadingProps = props.loadingProps;
    var customLoadingText = loading;
    var loadingContent = loading !== void 0 && /* @__PURE__ */React__default["default"].createElement(Loading, _objectSpread$1G({
      loading: !!loading,
      text: customLoadingText,
      attach: function attach() {
        return tableRef.current;
      },
      showOverlay: true,
      size: "small"
    }, loadingProps));
    var topContent = props.topContent,
        bottomContent = props.bottomContent;
    var pagination = /* @__PURE__ */React__default["default"].createElement("div", {
      ref: paginationRef,
      className: tableBaseClass.paginationWrap,
      style: {
        opacity: Number(showAffixPagination)
      }
    }, renderPagination());
    var bottom = !!bottomContent && /* @__PURE__ */React__default["default"].createElement("div", {
      className: tableBaseClass.bottomContent
    }, bottomContent);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: tableRef,
      className: classNames$1(dynamicBaseTableClasses),
      style: _objectSpread$1G({
        position: "relative"
      }, style)
    }, !!topContent && /* @__PURE__ */React__default["default"].createElement("div", {
      className: tableBaseClass.topContent
    }, topContent), !!(isVirtual || props.headerAffixedTop) && (props.headerAffixedTop ? /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$1G(_objectSpread$1G({
      offsetTop: 0
    }, getAffixProps(props.headerAffixedTop, props.headerAffixProps)), {}, {
      onFixedChange: onFixedChange
    }), affixHeaderWithWrap) : isFixedHeader && affixHeaderWithWrap), tableContent, affixedFooter, loadingContent, showRightDivider && /* @__PURE__ */React__default["default"].createElement("div", {
      className: tableBaseClass.scrollbarDivider,
      style: {
        right: "".concat(scrollbarWidth, "px"),
        height: "".concat((_tableContentRef$curr = tableContentRef.current) === null || _tableContentRef$curr === void 0 ? void 0 : _tableContentRef$curr.getBoundingClientRect().height, "px")
      }
    }), bottom, props.horizontalScrollAffixedBottom && /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$1G(_objectSpread$1G({
      offsetBottom: 0
    }, getAffixProps(props.horizontalScrollAffixedBottom)), {}, {
      style: {
        marginTop: "-".concat(scrollbarWidth * 2, "px")
      }
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      ref: horizontalScrollbarRef,
      className: classNames$1(["scrollbar", tableBaseClass.obviousScrollbar]),
      style: {
        width: "".concat(tableWidth.current, "px"),
        overflow: "auto",
        opacity: Number(showAffixFooter)
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      style: {
        width: "".concat(tableElmWidth.current, "px"),
        height: "5px"
      }
    }))), props.paginationAffixedBottom ? /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$1G({
      offsetBottom: 0
    }, getAffixProps(props.paginationAffixedBottom)), pagination) : pagination, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: resizeLineRef,
      className: tableBaseClass.resizeLine,
      style: resizeLineStyle
    }));
  });
  BaseTable$1.displayName = "BaseTable";

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */

  function setCacheAdd$1(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  var _setCacheAdd = setCacheAdd$1;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */

  function setCacheHas$1(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas$1;

  var MapCache = _MapCache,
      setCacheAdd = _setCacheAdd,
      setCacheHas = _setCacheHas;
  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */

  function SetCache$3(values) {
    var index = -1,
        length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  } // Add methods to `SetCache`.


  SetCache$3.prototype.add = SetCache$3.prototype.push = setCacheAdd;
  SetCache$3.prototype.has = setCacheHas;
  var _SetCache = SetCache$3;

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function baseFindIndex$1(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  var _baseFindIndex = baseFindIndex$1;

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */

  function baseIsNaN$1(value) {
    return value !== value;
  }

  var _baseIsNaN = baseIsNaN$1;

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function strictIndexOf$1(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  var _strictIndexOf = strictIndexOf$1;

  var baseFindIndex = _baseFindIndex,
      baseIsNaN = _baseIsNaN,
      strictIndexOf = _strictIndexOf;
  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function baseIndexOf$1(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  var _baseIndexOf = baseIndexOf$1;

  var baseIndexOf = _baseIndexOf;
  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

  function arrayIncludes$2(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  var _arrayIncludes = arrayIncludes$2;

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

  function arrayIncludesWith$2(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  var _arrayIncludesWith = arrayIncludesWith$2;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function cacheHas$3(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas$3;

  var SetCache$2 = _SetCache,
      arrayIncludes$1 = _arrayIncludes,
      arrayIncludesWith$1 = _arrayIncludesWith,
      arrayMap$3 = _arrayMap,
      baseUnary$1 = _baseUnary,
      cacheHas$2 = _cacheHas;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMin = Math.min;
  /**
   * The base implementation of methods like `_.intersection`, without support
   * for iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of shared values.
   */

  function baseIntersection$1(arrays, iteratee, comparator) {
    var includes = comparator ? arrayIncludesWith$1 : arrayIncludes$1,
        length = arrays[0].length,
        othLength = arrays.length,
        othIndex = othLength,
        caches = Array(othLength),
        maxLength = Infinity,
        result = [];

    while (othIndex--) {
      var array = arrays[othIndex];

      if (othIndex && iteratee) {
        array = arrayMap$3(array, baseUnary$1(iteratee));
      }

      maxLength = nativeMin(array.length, maxLength);
      caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache$2(othIndex && array) : undefined;
    }

    array = arrays[0];
    var index = -1,
        seen = caches[0];

    outer: while (++index < length && result.length < maxLength) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (!(seen ? cacheHas$2(seen, computed) : includes(result, computed, comparator))) {
        othIndex = othLength;

        while (--othIndex) {
          var cache = caches[othIndex];

          if (!(cache ? cacheHas$2(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
            continue outer;
          }
        }

        if (seen) {
          seen.push(computed);
        }

        result.push(value);
      }
    }

    return result;
  }

  var _baseIntersection = baseIntersection$1;

  var isArrayLikeObject$1 = isArrayLikeObject_1;
  /**
   * Casts `value` to an empty array if it's not an array like object.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array|Object} Returns the cast array-like object.
   */

  function castArrayLikeObject$1(value) {
    return isArrayLikeObject$1(value) ? value : [];
  }

  var _castArrayLikeObject = castArrayLikeObject$1;

  var arrayMap$2 = _arrayMap,
      baseIntersection = _baseIntersection,
      baseRest$2 = _baseRest,
      castArrayLikeObject = _castArrayLikeObject;
  /**
   * Creates an array of unique values that are included in all given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * _.intersection([2, 1], [2, 3]);
   * // => [2]
   */

  var intersection = baseRest$2(function (arrays) {
    var mapped = arrayMap$2(arrays, castArrayLikeObject);
    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
  });
  var intersection_1 = intersection;

  var useIsomorphicLayoutEffect = canUseDocument ? React.useLayoutEffect : React.useEffect;

  var dialogSet = /* @__PURE__ */new Set();

  var useDialogEsc = function useDialogEsc(visible, dialog) {
    React.useEffect(function () {
      if (visible) {
        if (dialog !== null && dialog !== void 0 && dialog.current) {
          var _dialog$current;

          dialogSet.add(dialog);
          dialog === null || dialog === void 0 ? void 0 : (_dialog$current = dialog.current) === null || _dialog$current === void 0 ? void 0 : _dialog$current.focus();
        }
      } else if (dialogSet.has(dialog)) {
        var _dialogList, _dialogList$current;

        dialogSet["delete"](dialog);

        var dialogList = _toConsumableArray(dialogSet);

        (_dialogList = dialogList[dialogList.length - 1]) === null || _dialogList === void 0 ? void 0 : (_dialogList$current = _dialogList.current) === null || _dialogList$current === void 0 ? void 0 : _dialogList$current.focus();
      }

      return function () {
        dialogSet.forEach(function (item) {
          if (item.current === null) {
            dialogSet["delete"](item);
          }
        });
      };
    }, [visible, dialog]);
  };

  var dialogDefaultProps = {
    closeBtn: true,
    destroyOnClose: false,
    draggable: false,
    mode: "modal",
    placement: "top",
    preventScrollThrough: true,
    showInAttachedElement: false,
    showOverlay: true,
    theme: "default"
  };

  function ownKeys$1G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1G(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function GetCSSValue(v) {
    return Number.isNaN(Number(v)) ? v : "".concat(Number(v), "px");
  }

  var transitionTime = 300;
  var mousePosition;

  var getClickPosition = function getClickPosition(e) {
    mousePosition = {
      x: e.clientX,
      y: e.clientY
    };
    setTimeout(function () {
      mousePosition = null;
    }, 100);
  };

  if (typeof window !== "undefined" && window.document && window.document.documentElement) {
    document.documentElement.addEventListener("click", getClickPosition, true);
  }

  var RenderDialog = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useLocaleReceiver = useLocaleReceiver("dialog"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
        local = _useLocaleReceiver2[0];

    var prefixCls = props.prefixCls,
        attach = props.attach,
        visible = props.visible,
        mode = props.mode,
        zIndex = props.zIndex,
        showOverlay = props.showOverlay,
        _props$onEscKeydown = props.onEscKeydown,
        onEscKeydown = _props$onEscKeydown === void 0 ? noop$1 : _props$onEscKeydown,
        _props$onClosed = props.onClosed,
        onClosed = _props$onClosed === void 0 ? noop$1 : _props$onClosed,
        _props$onClose = props.onClose,
        onClose = _props$onClose === void 0 ? noop$1 : _props$onClose,
        _props$onCloseBtnClic = props.onCloseBtnClick,
        onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop$1 : _props$onCloseBtnClic,
        _props$onOverlayClick = props.onOverlayClick,
        onOverlayClick = _props$onOverlayClick === void 0 ? noop$1 : _props$onOverlayClick,
        _props$onConfirm = props.onConfirm,
        onConfirm = _props$onConfirm === void 0 ? noop$1 : _props$onConfirm,
        preventScrollThrough = props.preventScrollThrough,
        closeBtn = props.closeBtn,
        closeOnEscKeydown = props.closeOnEscKeydown,
        confirmOnEnter = props.confirmOnEnter,
        closeOnOverlayClick = props.closeOnOverlayClick,
        destroyOnClose = props.destroyOnClose,
        showInAttachedElement = props.showInAttachedElement;
    var wrap = React.useRef();
    var dialog = React.useRef();
    var dialogPosition = React.useRef();
    var maskRef = React.useRef();
    var portalRef = React.useRef();
    var bodyOverflow = React.useRef();
    var bodyCssTextRef = React.useRef();
    var isModal = mode === "modal";
    var isNormal = mode === "normal";
    var canDraggable = props.draggable && mode === "modeless";
    var dialogOpenClass = "".concat(prefixCls, "__").concat(mode);
    useDialogEsc(visible, wrap);
    React.useImperativeHandle(ref, function () {
      return wrap.current;
    });
    useIsomorphicLayoutEffect(function () {
      bodyOverflow.current = document.body.style.overflow;
      bodyCssTextRef.current = document.body.style.cssText;
    }, []);
    useIsomorphicLayoutEffect(function () {
      if (visible) {
        if (isModal && bodyOverflow.current !== "hidden" && preventScrollThrough && !showInAttachedElement) {
          var scrollWidth = window.innerWidth - document.body.offsetWidth;

          if (bodyCssTextRef.current === "") {
            var bodyCssText = "overflow: hidden;";

            if (scrollWidth > 0) {
              bodyCssText += "position: relative;width: calc(100% - ".concat(scrollWidth, "px);");
            }

            document.body.style.cssText = bodyCssText;
          } else {
            if (scrollWidth > 0) {
              document.body.style.width = "calc(100% - ".concat(scrollWidth, "px)");
              document.body.style.position = "relative";
            }

            document.body.style.overflow = "hidden";
          }
        }

        if (wrap.current) {
          wrap.current.focus();
        }
      } else if (isModal) {
        var openDialogDom = document.querySelectorAll("".concat(prefixCls, "__mode"));

        if (openDialogDom.length < 1) {
          document.body.style.cssText = bodyCssTextRef.current;
        }
      }

      return function () {
        if (isModal) {
          var _openDialogDom = document.querySelectorAll("".concat(prefixCls, "__mode"));

          if (_openDialogDom.length < 1) {
            document.body.style.cssText = bodyCssTextRef.current;
            document.body.style.overflow = bodyOverflow.current;
          }
        } else {
          document.body.style.cssText = bodyCssTextRef.current;
          document.body.style.overflow = bodyOverflow.current;
        }
      };
    }, [preventScrollThrough, attach, visible, mode, isModal, showInAttachedElement, prefixCls]);
    React.useEffect(function () {
      if (visible) {
        if (mousePosition && dialog.current) {
          dialog.current.style.transformOrigin = "".concat(mousePosition.x - dialog.current.offsetLeft, "px ").concat(mousePosition.y - dialog.current.offsetTop, "px");
        }
      }
    }, [visible]);

    var onAnimateLeave = function onAnimateLeave() {
      if (wrap.current) {
        wrap.current.style.display = "none";
      }

      if (isModal && preventScrollThrough) {
        var openDialogDom = document.querySelectorAll("".concat(prefixCls, "__mode"));

        if (isModal && openDialogDom.length < 1) {
          document.body.style.overflow = bodyOverflow.current;
        }
      }

      if (!isModal) {
        var style = dialog.current.style;
        style.position = "relative";
        style.left = "unset";
        style.top = "unset";
      }

      onClosed && onClosed();
    };

    var onMaskClick = function onMaskClick(e) {
      if (showOverlay && (closeOnOverlayClick !== null && closeOnOverlayClick !== void 0 ? closeOnOverlayClick : local.closeOnOverlayClick)) {
        if (e.target === dialogPosition.current) {
          onOverlayClick({
            e: e
          });
          onClose({
            e: e,
            trigger: "overlay"
          });
        }
      }
    };

    var handleCloseBtnClick = function handleCloseBtnClick(e) {
      onCloseBtnClick({
        e: e
      });
      onClose({
        e: e,
        trigger: "close-btn"
      });
    };

    var handleKeyDown = function handleKeyDown(e) {
      if (e.code === "Escape") {
        e.stopPropagation();
        onEscKeydown({
          e: e
        });

        if (closeOnEscKeydown !== null && closeOnEscKeydown !== void 0 ? closeOnEscKeydown : local.closeOnEscKeydown) {
          onClose({
            e: e,
            trigger: "esc"
          });
        }
      } else if (e.code === "Enter" || e.code === "NumpadEnter") {
        e.stopPropagation();

        if (confirmOnEnter) {
          onConfirm({
            e: e
          });
        }
      }
    };

    var renderDialog = function renderDialog() {
      var dest = {};

      if (props.width !== void 0) {
        dest.width = GetCSSValue(props.width);
      }

      if (props.mode === "normal") {
        dest.zIndex = "auto";
      }

      var footer = props.footer ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__footer")
      }, props.footer) : null;
      var header = props.header;
      var body = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__body")
      }, props.body || props.children);
      var closer = closeBtn && /* @__PURE__ */React__default["default"].createElement("span", {
        onClick: handleCloseBtnClick,
        className: "".concat(prefixCls, "__close")
      }, closeBtn);
      var validWindow = (typeof window === "undefined" ? "undefined" : _typeof$1(window)) === "object";
      var screenHeight = validWindow ? window.innerHeight || document.documentElement.clientHeight : void 0;
      var screenWidth = validWindow ? window.innerWidth || document.documentElement.clientWidth : void 0;

      var style = _objectSpread$1F(_objectSpread$1F({}, dest), props.style);

      var dialogOffset = {
        x: 0,
        y: 0
      };

      var onDialogMove = function onDialogMove(e) {
        var _dialog$current = dialog.current,
            style2 = _dialog$current.style,
            offsetWidth = _dialog$current.offsetWidth,
            offsetHeight = _dialog$current.offsetHeight;
        var diffX = e.clientX - dialogOffset.x;
        var diffY = e.clientY - dialogOffset.y;
        if (diffX < 0) diffX = 0;
        if (diffY < 0) diffY = 0;
        if (screenWidth - offsetWidth - diffX < 0) diffX = screenWidth - offsetWidth;
        if (screenHeight - offsetHeight - diffY < 0) diffY = screenHeight - offsetHeight;
        style2.position = "absolute";
        style2.left = "".concat(diffX, "px");
        style2.top = "".concat(diffY, "px");
      };

      var onDialogMoveEnd = function onDialogMoveEnd() {
        dialog.current.style.cursor = "default";
        document.removeEventListener("mousemove", onDialogMove);
        document.removeEventListener("mouseup", onDialogMoveEnd);
      };

      var onDialogMoveStart = function onDialogMoveStart(e) {
        if (canDraggable && e.currentTarget === e.target) {
          var _dialog$current2 = dialog.current,
              offsetLeft = _dialog$current2.offsetLeft,
              offsetTop = _dialog$current2.offsetTop,
              offsetHeight = _dialog$current2.offsetHeight,
              offsetWidth = _dialog$current2.offsetWidth;
          if (offsetWidth > screenWidth || offsetHeight > screenHeight) return;
          dialog.current.style.cursor = "move";
          var diffX = e.clientX - offsetLeft;
          var diffY = e.clientY - offsetTop;
          dialogOffset = {
            x: diffX,
            y: diffY
          };
          document.addEventListener("mousemove", onDialogMove);
          document.addEventListener("mouseup", onDialogMoveEnd);
        }
      };

      var positionStyle = {};

      if (props.top) {
        var topValue = GetCSSValue(props.top);
        positionStyle.paddingTop = topValue;
      }

      var positionClass = classNames$1("".concat(prefixCls, "__position"), _defineProperty$3({}, "".concat(prefixCls, "--top"), !!props.top), "".concat(props.placement && !props.top ? "".concat(prefixCls, "--").concat(props.placement) : ""));
      var dialogElement = /* @__PURE__ */React__default["default"].createElement("div", {
        className: isNormal ? "" : "".concat(prefixCls, "__wrap")
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: isNormal ? "" : positionClass,
        style: positionStyle,
        onClick: onMaskClick,
        ref: dialogPosition
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        ref: dialog,
        style: style,
        className: classNames$1("".concat(prefixCls), "".concat(prefixCls, "--default")),
        onMouseDown: onDialogMoveStart
      }, closer, header, body, footer)));
      return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
        "in": props.visible,
        appear: true,
        mountOnEnter: true,
        unmountOnExit: destroyOnClose,
        timeout: transitionTime,
        classNames: "".concat(prefixCls, "-zoom"),
        onEntered: props.onOpened,
        onExited: onAnimateLeave,
        nodeRef: dialog
      }, dialogElement);
    };

    var renderMask = function renderMask() {
      var maskElement;

      if (showOverlay) {
        maskElement = /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
          "in": visible,
          appear: true,
          timeout: transitionTime,
          classNames: "".concat(prefixCls, "-fade"),
          mountOnEnter: true,
          unmountOnExit: true,
          nodeRef: maskRef
        }, /* @__PURE__ */React__default["default"].createElement("div", {
          ref: maskRef,
          className: "".concat(prefixCls, "__mask")
        }));
      }

      return maskElement;
    };

    var render = function render() {
      var style = {};

      if (visible) {
        style.display = "block";
      }

      var wrapStyle = _objectSpread$1F(_objectSpread$1F({}, style), {}, {
        zIndex: zIndex
      });

      var dialogBody = renderDialog();
      var wrapClass = classNames$1(props.className, "".concat(prefixCls, "__ctx"), !isNormal ? "".concat(prefixCls, "__ctx--fixed") : "", visible ? dialogOpenClass : "", isModal && showInAttachedElement ? "".concat(prefixCls, "__ctx--absolute") : "", props.mode === "modeless" ? "".concat(prefixCls, "__ctx--modeless") : "");
      var dialog2 = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: wrap,
        className: wrapClass,
        style: wrapStyle,
        onKeyDown: handleKeyDown,
        tabIndex: 0
      }, mode === "modal" && renderMask(), dialogBody);
      var dom = null;

      if (visible || wrap.current) {
        if (attach === "" || isNormal) {
          dom = dialog2;
        } else {
          dom = /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
            "in": visible,
            appear: true,
            timeout: transitionTime,
            mountOnEnter: true,
            unmountOnExit: destroyOnClose,
            nodeRef: portalRef
          }, /* @__PURE__ */React__default["default"].createElement(Portal, {
            attach: attach,
            ref: portalRef
          }, dialog2));
        }
      }

      return dom;
    };

    return render();
  });
  RenderDialog.defaultProps = dialogDefaultProps;

  function ownKeys$1F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1F(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var isFunction = function isFunction(arg) {
    return typeof arg === "function";
  };

  var useSetState = function useSetState() {
    var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _useState = React.useState(initialState),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

    var setMergeState = React.useCallback(function (patch) {
      setState(function (prevState) {
        return _objectSpread$1E(_objectSpread$1E({}, prevState), isFunction(patch) ? patch(prevState) : patch);
      });
    }, []);
    return [state, setMergeState];
  };

  var _excluded$k = ["visible", "attach", "closeBtn", "footer", "onCancel", "onConfirm", "cancelBtn", "confirmBtn", "onClose", "isPlugin"];

  function ownKeys$1E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1E(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var renderDialogButton = function renderDialogButton(btn, defaultProps) {
    var result = null;

    if (isString_1(btn)) {
      result = /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$1D({}, defaultProps), btn);
    } else if ( /*#__PURE__*/React.isValidElement(btn)) {
      result = btn;
    } else if (isObject_1(btn)) {
      result = /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$1D(_objectSpread$1D({}, defaultProps), btn));
    } else if (isFunction_1(btn)) {
      result = btn();
    }

    return result;
  };

  var Dialog$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon,
      InfoCircleFilledIcon: InfoCircleFilledIcon,
      CheckCircleFilledIcon: CheckCircleFilledIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon,
        InfoCircleFilledIcon$1 = _useGlobalIcon.InfoCircleFilledIcon,
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon;

    var dialogDom = React.useRef();

    var _useSetState = useSetState(_objectSpread$1D({
      width: 520,
      visible: false,
      zIndex: 2500,
      placement: "center",
      mode: "modal",
      showOverlay: true,
      destroyOnClose: false,
      draggable: false,
      preventScrollThrough: true,
      isPlugin: false
    }, props)),
        _useSetState2 = _slicedToArray(_useSetState, 2),
        state = _useSetState2[0],
        setState = _useSetState2[1];

    var _useLocaleReceiver = useLocaleReceiver("dialog"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var confirmText = t(local.confirm);
    var cancelText = t(local.cancel);

    var visible = state.visible,
        attach = state.attach,
        closeBtn = state.closeBtn,
        _state$footer = state.footer,
        footer = _state$footer === void 0 ? true : _state$footer,
        _state$onCancel = state.onCancel,
        onCancel = _state$onCancel === void 0 ? noop$1 : _state$onCancel,
        _state$onConfirm = state.onConfirm,
        onConfirm = _state$onConfirm === void 0 ? noop$1 : _state$onConfirm,
        _state$cancelBtn = state.cancelBtn,
        cancelBtn = _state$cancelBtn === void 0 ? cancelText : _state$cancelBtn,
        _state$confirmBtn = state.confirmBtn,
        confirmBtn = _state$confirmBtn === void 0 ? confirmText : _state$confirmBtn,
        _state$onClose = state.onClose,
        onClose = _state$onClose === void 0 ? noop$1 : _state$onClose,
        _state$isPlugin = state.isPlugin,
        isPlugin = _state$isPlugin === void 0 ? false : _state$isPlugin,
        restState = _objectWithoutProperties$2(state, _excluded$k);

    React.useEffect(function () {
      if (!isPlugin) {
        setState(function (prevState) {
          return _objectSpread$1D(_objectSpread$1D({}, prevState), props);
        });
      }
    }, [props, setState, isPlugin]);
    var prefixCls = "".concat(classPrefix, "-dialog");

    var renderCloseIcon = function renderCloseIcon() {
      if (closeBtn === false) return null;
      if (closeBtn === true) return /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, {
        style: {
          verticalAlign: "unset"
        }
      });
      return closeBtn || /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, {
        style: {
          verticalAlign: "unset"
        }
      });
    };

    React__default["default"].useImperativeHandle(ref, function () {
      return {
        show: function show() {
          setState({
            visible: true
          });
        },
        hide: function hide() {
          setState({
            visible: false
          });
        },
        destroy: function destroy() {
          setState({
            visible: false,
            destroyOnClose: true
          });
        },
        update: function update(newOptions) {
          setState(function (prevState) {
            return _objectSpread$1D(_objectSpread$1D({}, prevState), newOptions);
          });
        }
      };
    });
    var renderHeader = React.useMemo(function () {
      if (!state.header) return null;
      var iconMap = {
        info: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon$1, {
          className: "".concat(classPrefix, "-is-info")
        }),
        warning: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon$1, {
          className: "".concat(classPrefix, "-is-warning")
        }),
        error: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon$1, {
          className: "".concat(classPrefix, "-is-error")
        }),
        success: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon$1, {
          className: "".concat(classPrefix, "-is-success")
        })
      };
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, iconMap[state.theme], state.header);
    }, [state.header, state.theme, prefixCls, classPrefix]);

    var handleCancel = function handleCancel(e) {
      onCancel({
        e: e
      });
      onClose({
        e: e,
        trigger: "cancel"
      });
    };

    var handleConfirm = function handleConfirm(e) {
      onConfirm({
        e: e
      });
    };

    var defaultFooter = function defaultFooter() {
      var renderCancelBtn = renderDialogButton(cancelBtn, {
        variant: "outline"
      });
      var renderConfirmBtn = renderDialogButton(confirmBtn, {
        theme: "primary"
      });
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, renderCancelBtn && /*#__PURE__*/React__default["default"].cloneElement(renderCancelBtn, _objectSpread$1D({
        onClick: handleCancel
      }, renderCancelBtn.props)), renderConfirmBtn && /*#__PURE__*/React__default["default"].cloneElement(renderConfirmBtn, _objectSpread$1D({
        onClick: handleConfirm
      }, renderConfirmBtn.props)));
    };

    return /* @__PURE__ */React__default["default"].createElement(RenderDialog, _objectSpread$1D(_objectSpread$1D({}, restState), {}, {
      visible: visible,
      prefixCls: prefixCls,
      header: renderHeader,
      attach: attach,
      closeBtn: renderCloseIcon(),
      classPrefix: classPrefix,
      onClose: onClose,
      onConfirm: onConfirm,
      footer: footer === true ? defaultFooter() : footer,
      ref: dialogDom
    }));
  });
  Dialog$1.displayName = "Dialog";
  Dialog$1.defaultProps = dialogDefaultProps;

  function ownKeys$1D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1D(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var createDialog = function createDialog(props) {
    var dialogRef = /*#__PURE__*/React__default["default"].createRef();

    var options = _objectSpread$1C({}, props);

    var fragment = document.createDocumentFragment();
    ReactDOM__default["default"].render( /* @__PURE__ */React__default["default"].createElement(Dialog$1, _objectSpread$1C(_objectSpread$1C({}, options), {}, {
      visible: true,
      ref: dialogRef,
      isPlugin: true
    })), fragment, function () {
      document.activeElement.blur();
    });
    var container = getAttach$1(options.attach);

    if (container) {
      container.appendChild(fragment);
    } else {
      log.error("Dialog", "attach is not exist");
    }

    var dialogNode = {
      show: function show() {
        var _dialogRef$current;

        container.appendChild(fragment);
        (_dialogRef$current = dialogRef.current) === null || _dialogRef$current === void 0 ? void 0 : _dialogRef$current.show();
      },
      hide: function hide() {
        var _dialogRef$current2;

        (_dialogRef$current2 = dialogRef.current) === null || _dialogRef$current2 === void 0 ? void 0 : _dialogRef$current2.destroy();
      },
      update: function update(updateOptions) {
        var _dialogRef$current3;

        (_dialogRef$current3 = dialogRef.current) === null || _dialogRef$current3 === void 0 ? void 0 : _dialogRef$current3.update(updateOptions);
      },
      destroy: function destroy() {
        var _dialogRef$current4;

        (_dialogRef$current4 = dialogRef.current) === null || _dialogRef$current4 === void 0 ? void 0 : _dialogRef$current4.destroy();
      }
    };
    return dialogNode;
  };

  var confirm = function confirm(props) {
    return createDialog(props);
  };

  var alert = function alert(props) {
    var options = _objectSpread$1C({}, props);

    options.cancelBtn = null;
    return createDialog(options);
  };

  createDialog.alert = alert;
  createDialog.confirm = confirm;
  var DialogPlugin$1 = createDialog;

  function ownKeys$1C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1C(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var CheckboxGroup$1 = Checkbox.Group;
  function getColumnKeys(columns) {
    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();

    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;

      var col = columns[i];
      col.colKey && keys.add(col.colKey);

      if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        getColumnKeys(col.children, keys);
      }
    }

    return keys;
  }
  function useColumnController(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix,
        table = _useConfig.table;

    var _useGlobalIcon = useGlobalIcon({
      SettingIcon: SettingIcon
    }),
        SettingIcon$1 = _useGlobalIcon.SettingIcon;

    var columns = props.columns,
        columnController = props.columnController,
        displayColumns = props.displayColumns,
        columnControllerVisible = props.columnControllerVisible;
    var dialogInstance = React.useRef();

    var enabledColKeys = function () {
      var arr = ((columnController === null || columnController === void 0 ? void 0 : columnController.fields) || _toConsumableArray(getColumnKeys(columns))).filter(function (v) {
        return v;
      });

      return new Set(arr);
    }();

    var keys = _toConsumableArray(getColumnKeys(columns));

    var _useControlled = useControlled(props, "displayColumns", props.onDisplayColumnsChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        tDisplayColumns = _useControlled2[0],
        setTDisplayColumns = _useControlled2[1];

    var defaultColumnCheckboxKeys = displayColumns || props.defaultDisplayColumns || keys;
    var columnCheckboxKeys = React.useRef(defaultColumnCheckboxKeys);
    React.useEffect(function () {
      var _dialogInstance$curre;

      columnCheckboxKeys.current = _toConsumableArray(displayColumns || props.defaultDisplayColumns || keys);
      (_dialogInstance$curre = dialogInstance.current) === null || _dialogInstance$curre === void 0 ? void 0 : _dialogInstance$curre.update({
        body: getDialogContent()
      });
    }, [displayColumns]);

    function getCheckboxOptions(columns2) {
      var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      for (var i = 0, len = columns2.length; i < len; i++) {
        var _item$children;

        var item = columns2[i];

        if (item.colKey) {
          arr.push({
            label: renderTitle(item, i),
            value: item.colKey,
            disabled: !enabledColKeys.has(item.colKey)
          });
        }

        if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
          getCheckboxOptions(item.children, arr);
        }
      }

      return arr;
    }

    var handleCheckChange = function handleCheckChange(val, ctx) {
      var _props$onColumnChange;

      columnCheckboxKeys.current = val;
      var params = {
        columns: val,
        type: ctx.type,
        currentColumn: getCurrentRowByKey(columns, String(ctx.current)),
        e: ctx.e
      };
      (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 ? void 0 : _props$onColumnChange.call(props, params);
      dialogInstance.current.update({
        body: getDialogContent()
      });
    };

    var handleClickAllShowColumns = function handleClickAllShowColumns(checked, ctx) {
      if (checked) {
        var _props$onColumnChange2;

        var checkboxOptions = getCheckboxOptions(columns);
        var newData = (checkboxOptions === null || checkboxOptions === void 0 ? void 0 : checkboxOptions.map(function (t) {
          return t.value;
        })) || [];
        columnCheckboxKeys.current = newData;
        (_props$onColumnChange2 = props.onColumnChange) === null || _props$onColumnChange2 === void 0 ? void 0 : _props$onColumnChange2.call(props, {
          type: "check",
          columns: newData,
          e: ctx.e
        });
      } else {
        var _props$onColumnChange3;

        var disabledColKeys = getCheckboxOptions(columns).filter(function (t) {
          return t.disabled;
        }).map(function (t) {
          return t.value;
        });
        columnCheckboxKeys.current = disabledColKeys;
        (_props$onColumnChange3 = props.onColumnChange) === null || _props$onColumnChange3 === void 0 ? void 0 : _props$onColumnChange3.call(props, {
          type: "uncheck",
          columns: disabledColKeys,
          e: ctx.e
        });
      }

      dialogInstance.current.update({
        body: getDialogContent()
      });
    };

    function getDialogContent() {
      var checkboxOptions = getCheckboxOptions(columns);
      var intersectionChecked = intersection_1(columnCheckboxKeys.current, _toConsumableArray(enabledColKeys));
      var widthMode = (columnController === null || columnController === void 0 ? void 0 : columnController.displayType) === "fixed-width" ? "fixed" : "auto";
      var checkedLength = intersectionChecked.length;
      var isCheckedAll = checkedLength === enabledColKeys.size;
      var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.size;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(["".concat(classPrefix, "-table__column-controller"), "".concat(classPrefix, "-table__column-controller--").concat(widthMode)])
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__column-controller-body")
      }, /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(classPrefix, "-table__column-controller-desc")
      }, table.columnConfigDescriptionText), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__column-controller-block")
      }, /* @__PURE__ */React__default["default"].createElement(Checkbox, {
        indeterminate: isIndeterminate,
        checked: isCheckedAll,
        onChange: handleClickAllShowColumns
      }, table.selectAllText)), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__column-controller-block")
      }, /* @__PURE__ */React__default["default"].createElement(CheckboxGroup$1, _objectSpread$1B(_objectSpread$1B({
        options: checkboxOptions
      }, (columnController === null || columnController === void 0 ? void 0 : columnController.checkboxProps) || {}), {}, {
        value: columnCheckboxKeys.current,
        onChange: handleCheckChange
      })))));
    }

    var handleToggleColumnController = function handleToggleColumnController() {
      dialogInstance.current = DialogPlugin$1.confirm(_objectSpread$1B({
        header: table.columnConfigTitleText,
        body: getDialogContent(),
        confirmBtn: table.confirmText,
        cancelBtn: table.cancelText,
        width: 612,
        onConfirm: function onConfirm() {
          setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.current));

          if (columnControllerVisible === void 0) {
            dialogInstance.current.hide();
          } else {
            var _props$onColumnContro;

            (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 ? void 0 : _props$onColumnContro.call(props, false, {
              trigger: "cancel"
            });
          }
        },
        onClose: function onClose() {
          if (columnControllerVisible === void 0) {
            dialogInstance.current.hide();
          } else {
            var _props$onColumnContro2;

            (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 ? void 0 : _props$onColumnContro2.call(props, false, {
              trigger: "confirm"
            });
          }
        }
      }, (columnController === null || columnController === void 0 ? void 0 : columnController.dialogProps) || {}));
    };

    React.useEffect(function () {
      if (columnControllerVisible === void 0) return;

      if (dialogInstance.current) {
        columnControllerVisible ? dialogInstance.current.show() : dialogInstance.current.hide();
      } else {
        columnControllerVisible && handleToggleColumnController();
      }
    }, [columnControllerVisible, dialogInstance]);

    var renderColumnController = function renderColumnController() {
      var _props$columnControll;

      var isColumnController = !!(columnController && Object.keys(columnController).length);
      var placement = isColumnController ? columnController.placement || "top-right" : "";
      if (isColumnController && columnController.hideTriggerButton) return null;
      var classes = ["".concat(classPrefix, "-table__column-controller-trigger"), _defineProperty$3({}, "".concat(classPrefix, "-align-").concat(placement), !!placement)];
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(classes)
      }, /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$1B({
        theme: "default",
        variant: "outline",
        onClick: handleToggleColumnController,
        content: table.columnConfigButtonText,
        icon: /* @__PURE__ */React__default["default"].createElement(SettingIcon$1, null)
      }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps)));
    };

    return {
      tDisplayColumns: tDisplayColumns,
      renderColumnController: renderColumnController
    };
  }

  function useRowExpand(props) {
    var _props$columns, _props$columns$;

    var expandIcon = props.expandIcon;

    var _useGlobalIcon = useGlobalIcon({
      ChevronRightCircleIcon: ChevronRightCircleIcon
    }),
        ChevronRightCircleIcon$1 = _useGlobalIcon.ChevronRightCircleIcon;

    var _useLocaleReceiver = useLocaleReceiver("table"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
        locale = _useLocaleReceiver2[0];

    var _useClassName = useClassName(),
        tableExpandClasses = _useClassName.tableExpandClasses,
        positiveRotate90 = _useClassName.positiveRotate90,
        tableFullRowClasses = _useClassName.tableFullRowClasses;

    var _useControlled = useControlled(props, "expandedRowKeys", props.onExpandChange, {
      defaultExpandedRowKeys: props.defaultExpandedRowKeys || []
    }),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        tExpandedRowKeys = _useControlled2[0],
        setTExpandedRowKeys = _useControlled2[1];

    var showExpandedRow = Boolean(props.expandedRow);
    var showExpandIconColumn = props.expandIcon !== false && showExpandedRow;
    var isFirstColumnFixed = ((_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : (_props$columns$ = _props$columns[0]) === null || _props$columns$ === void 0 ? void 0 : _props$columns$.fixed) === "left";

    var onToggleExpand = function onToggleExpand(e, row) {
      props.expandOnRowClick && e.stopPropagation();
      var currentId = get_1(row, props.rowKey || "id");
      var index = tExpandedRowKeys.indexOf(currentId);

      var newKeys = _toConsumableArray(tExpandedRowKeys);

      index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);
      setTExpandedRowKeys(newKeys, {
        expandedRowData: props.data.filter(function (t) {
          return newKeys.includes(get_1(t, props.rowKey || "id"));
        }),
        currentRowData: row
      });
    };

    var renderExpandIcon = function renderExpandIcon(p, expandIcon2) {
      var row = p.row,
          rowIndex = p.rowIndex;
      var currentId = get_1(row, props.rowKey || "id");
      var expanded = tExpandedRowKeys.includes(currentId);
      var defaultIcon = locale.expandIcon || /* @__PURE__ */React__default["default"].createElement(ChevronRightCircleIcon$1, null);
      var icon = defaultIcon;

      if (expandIcon2 === false || expandIcon2 === null) {
        icon = null;
      } else if (isFunction_1(expandIcon2)) {
        icon = expandIcon2({
          row: row,
          index: rowIndex
        });
      }

      var classes = [tableExpandClasses.iconBox, tableExpandClasses[expanded ? "expanded" : "collapsed"], _defineProperty$3({}, positiveRotate90, expanded)];
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: classNames$1(classes),
        onClick: function onClick(e) {
          return onToggleExpand(e, row);
        }
      }, icon);
    };

    var getExpandColumn = function getExpandColumn() {
      var expandCol = {
        colKey: "__EXPAND_ROW_ICON_COLUMN__",
        width: 64,
        className: tableExpandClasses.iconCell,
        fixed: isFirstColumnFixed ? "left" : void 0,
        cell: function cell(p) {
          return renderExpandIcon(p, expandIcon);
        }
      };
      return expandCol;
    };

    var renderExpandedRow = function renderExpandedRow(p) {
      var rowId = get_1(p.row, props.rowKey || "id");
      if (!tExpandedRowKeys.includes(rowId)) return null;
      var isFixedLeft = p.isWidthOverflow && props.columns.find(function (item) {
        return item.fixed === "left";
      });
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: "expand_".concat(rowId),
        className: classNames$1([tableExpandClasses.row, _defineProperty$3({}, tableFullRowClasses.base, isFixedLeft)])
      }, /* @__PURE__ */React__default["default"].createElement("td", {
        colSpan: p.columns.length
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1([tableExpandClasses.rowInner, _defineProperty$3({}, tableFullRowClasses.innerFullRow, isFixedLeft)]),
        style: isFixedLeft ? {
          width: "".concat(p.tableWidth, "px")
        } : {}
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFullRowClasses.innerFullElement
      }, props.expandedRow(p)))));
    };

    var onInnerExpandRowClick = function onInnerExpandRowClick(p) {
      onToggleExpand(p.e, p.row);
    };

    return {
      showExpandedRow: showExpandedRow,
      showExpandIconColumn: showExpandIconColumn,
      getExpandColumn: getExpandColumn,
      renderExpandedRow: renderExpandedRow,
      onInnerExpandRowClick: onInnerExpandRowClick
    };
  }

  function ownKeys$1B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1B(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var selectedRowDataMap = /* @__PURE__ */new Map();
  function useRowSelect(props, tableSelectedClasses) {
    var selectedRowKeys = props.selectedRowKeys,
        columns = props.columns,
        data = props.data,
        rowKey = props.rowKey,
        indeterminateSelectedRowKeys = props.indeterminateSelectedRowKeys;

    var _useState = React.useState(),
        _useState2 = _slicedToArray(_useState, 2),
        selectedRowClassNames = _useState2[0],
        setSelectedRowClassNames = _useState2[1];

    var _useControlled = useControlled(props, "selectedRowKeys", props.onSelectChange, {
      defaultSelectedRowKeys: props.defaultSelectedRowKeys || []
    }),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        tSelectedRowKeys = _useControlled2[0],
        setTSelectedRowKeys = _useControlled2[1];

    var selectColumn = columns.find(function (_ref) {
      var type = _ref.type;
      return ["multiple", "single"].includes(type);
    });
    var canSelectedRows = data.filter(function (row, rowIndex) {
      return !isDisabled(row, rowIndex);
    });
    var intersectionKeys = intersection_1(tSelectedRowKeys, canSelectedRows.map(function (t) {
      return get_1(t, rowKey || "id");
    }));
    React.useEffect(function () {
      if (!selectColumn && (!tSelectedRowKeys || !tSelectedRowKeys.length)) return;

      var disabledRowFunc = function disabledRowFunc(p) {
        return selectColumn.disabled(p) ? tableSelectedClasses.disabled : "";
      };

      var disabledRowClass = selectColumn !== null && selectColumn !== void 0 && selectColumn.disabled ? disabledRowFunc : void 0;
      var selected = new Set(tSelectedRowKeys);

      var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
        var row = _ref2.row;
        var rowId = get_1(row, rowKey || "id");
        return selected.has(rowId) ? tableSelectedClasses.selected : "";
      };

      var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
      setSelectedRowClassNames([disabledRowClass, selectedRowClass]);
    }, [data, columns, tSelectedRowKeys, selectColumn, rowKey]);

    function isDisabled(row, rowIndex) {
      return isRowSelectedDisabled$1(selectColumn, row, rowIndex);
    }

    function getSelectedHeader() {
      return function () {
        var isIndeterminate = intersectionKeys.length > 0 && intersectionKeys.length < canSelectedRows.length;
        var isChecked = intersectionKeys.length !== 0 && canSelectedRows.length !== 0 && intersectionKeys.length === canSelectedRows.length;
        return /* @__PURE__ */React__default["default"].createElement(Checkbox, {
          checked: isChecked,
          indeterminate: isIndeterminate,
          disabled: !canSelectedRows.length,
          onChange: handleSelectAll
        });
      };
    }

    function renderSelectCell(p) {
      var column = p.col,
          _p$row = p.row,
          row = _p$row === void 0 ? {} : _p$row,
          rowIndex = p.rowIndex;
      var checked = tSelectedRowKeys.includes(get_1(row, rowKey || "id"));
      var disabled = typeof column.disabled === "function" ? column.disabled({
        row: row,
        rowIndex: rowIndex
      }) : column.disabled;
      var checkProps = isFunction_1(column.checkProps) ? column.checkProps({
        row: row,
        rowIndex: rowIndex
      }) : column.checkProps;

      var selectBoxProps = _objectSpread$1A(_objectSpread$1A({
        checked: checked,
        disabled: disabled
      }, checkProps), {}, {
        onChange: function onChange() {
          handleSelectChange(row);
        }
      });

      var onCheckClick = function onCheckClick(e) {
        e === null || e === void 0 ? void 0 : e.stopPropagation();
      };

      if (column.type === "single") return /* @__PURE__ */React__default["default"].createElement(Radio, _objectSpread$1A(_objectSpread$1A({}, selectBoxProps), {}, {
        onClick: onCheckClick
      }));

      if (column.type === "multiple") {
        var isIndeterminate = indeterminateSelectedRowKeys !== null && indeterminateSelectedRowKeys !== void 0 && indeterminateSelectedRowKeys.length ? indeterminateSelectedRowKeys.includes(get_1(row, rowKey)) : false;
        return /* @__PURE__ */React__default["default"].createElement(Checkbox, _objectSpread$1A(_objectSpread$1A({
          indeterminate: isIndeterminate
        }, selectBoxProps), {}, {
          onClick: onCheckClick
        }));
      }

      return null;
    }

    function handleSelectChange() {
      var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys);

      var reRowKey = rowKey || "id";
      var id = get_1(row, reRowKey);
      selectedRowDataMap.set(id, row);
      var selectedRowIndex = selectedRowKeys2.indexOf(id);
      var isExisted = selectedRowIndex !== -1;

      if (selectColumn.type === "multiple") {
        isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
      } else if (selectColumn.type === "single") {
        selectedRowKeys2 = !isExisted ? [id] : [];
      } else {
        log.warn("Table", "`column.type` must be one of `multiple` and `single`");
        return;
      }

      setTSelectedRowKeys(selectedRowKeys2, {
        selectedRowData: selectedRowKeys2.map(function (t) {
          return selectedRowDataMap.get(t);
        }),
        currentRowKey: id,
        currentRowData: row,
        type: isExisted ? "uncheck" : "check"
      });
    }

    function handleSelectAll(checked) {
      var reRowKey = rowKey || "id";
      var canSelectedRowKeys = canSelectedRows.map(function (record) {
        return get_1(record, reRowKey);
      });
      var disabledSelectedRowKeys = (selectedRowKeys === null || selectedRowKeys === void 0 ? void 0 : selectedRowKeys.filter(function (id) {
        return !canSelectedRowKeys.includes(id);
      })) || [];
      var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
      setTSelectedRowKeys(allIds, {
        selectedRowData: checked ? allIds.map(function (t) {
          return selectedRowDataMap.get(t);
        }) : [],
        type: checked ? "check" : "uncheck",
        currentRowKey: "CHECK_ALL_BOX"
      });
    }

    function formatToRowSelectColumn(col) {
      var isSelection = ["multiple", "single"].includes(col.type);
      if (!isSelection) return col;
      return _objectSpread$1A(_objectSpread$1A({}, col), {}, {
        width: col.width || 64,
        className: tableSelectedClasses.checkCell,
        cell: function cell(p) {
          return renderSelectCell(p);
        },
        title: col.type === "multiple" ? getSelectedHeader() : ""
      });
    }

    React.useEffect(function () {
      for (var i = 0, len = data.length; i < len; i++) {
        selectedRowDataMap.set(get_1(data[i], rowKey || "id"), data[i]);
      }
    }, [data, rowKey]);
    return {
      selectedRowClassNames: selectedRowClassNames,
      formatToRowSelectColumn: formatToRowSelectColumn
    };
  }

  function ownKeys$1A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1A(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function SorterButton(props) {
    var _props$sortType = props.sortType,
        sortType = _props$sortType === void 0 ? "all" : _props$sortType;

    var _useGlobalIcon = useGlobalIcon({
      ChevronDownIcon: ChevronDownIcon
    }),
        ChevronDownIcon$1 = _useGlobalIcon.ChevronDownIcon;

    var _useClassName = useClassName(),
        tableSortClasses = _useClassName.tableSortClasses,
        negativeRotate180 = _useClassName.negativeRotate180;

    var _useLocaleReceiver = useLocaleReceiver("table"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        locale = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var allowSortTypes = sortType === "all" ? ["asc", "desc"] : [sortType];

    var onSortIconClick = function onSortIconClick(e, direction) {
      props === null || props === void 0 ? void 0 : props.onSortIconClick(e, {
        descending: direction === "desc"
      });
    };

    function getSortIcon(direction, activeClass) {
      var defaultIcon = t(locale.sortIcon) || /* @__PURE__ */React__default["default"].createElement(ChevronDownIcon$1, null);
      var icon = props.sortIcon || defaultIcon;
      var sortClassName = [activeClass, tableSortClasses.sortIcon, tableSortClasses.iconDirection[direction], _defineProperty$3({}, negativeRotate180, direction === "asc")];
      return /* @__PURE__ */React__default["default"].createElement("span", {
        key: direction,
        className: classNames$1(sortClassName),
        onClick: function onClick(e) {
          return onSortIconClick(e, direction);
        }
      }, icon);
    }

    var classes = [tableSortClasses.trigger, _defineProperty$3({}, tableSortClasses.doubleIcon, allowSortTypes.length > 1)];
    var tooltips = {
      asc: locale.sortAscendingOperationText,
      desc: locale.sortDescendingOperationText
    };
    var sortButton = allowSortTypes.map(function (direction) {
      var _props$hideSortTips;

      var activeClass = direction === props.sortOrder ? tableSortClasses.iconActive : tableSortClasses.iconDefault;
      var cancelTips = locale.sortCancelOperationText;
      var tips = direction === props.sortOrder ? cancelTips : tooltips[direction];
      if ((_props$hideSortTips = props.hideSortTips) !== null && _props$hideSortTips !== void 0 ? _props$hideSortTips : locale.hideSortTips) return getSortIcon(direction, activeClass);
      return /* @__PURE__ */React__default["default"].createElement(Tooltip, _objectSpread$1z(_objectSpread$1z({
        content: tips,
        key: direction,
        placement: "right"
      }, props.tooltipProps), {}, {
        showArrow: false
      }), getSortIcon(direction, activeClass));
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(classes)
    }, sortButton);
  }
  SorterButton.displayName = "SorterButton";

  function ownKeys$1z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useSorter(props) {
    var _useState = React.useState(),
        _useState2 = _slicedToArray(_useState, 2),
        originalData = _useState2[0],
        setOriginalData = _useState2[1];

    var _useControlled = useControlled(props, "sort", props.onSortChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        tSortInfo = _useControlled2[0],
        setTSortInfo = _useControlled2[1];

    var _useControlled3 = useControlled(props, "data", props.onDataChange),
        _useControlled4 = _slicedToArray(_useControlled3, 2),
        tData = _useControlled4[0],
        setTData = _useControlled4[1];

    var sorterFuncMap = getSorterFuncMap(props.columns);

    var sortArray = function () {
      var sort = tSortInfo;
      if (!sort) return [];
      return Array.isArray(sort) ? sort : [sort];
    }();

    var sortMap = function () {
      var sortMap2 = {};
      sortArray.forEach(function (info, index) {
        var sortBy = info.sortBy;
        sortMap2[sortBy] = _objectSpread$1y({
          index: index
        }, info);
      });
      return sortMap2;
    }();

    function getSorterFuncMap(columns) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      for (var i = 0, len = columns.length; i < len; i++) {
        var _col$children;

        var col = columns[i];

        if (isFunction_1(col.sorter)) {
          map[col.colKey] = col.sorter;
        }

        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getSorterFuncMap(col.children, map);
        }
      }

      return map;
    }

    function handleDataSort(sortInfo) {
      var sort = sortInfo;
      if (!sorterFuncMap || !Object.keys(sorterFuncMap).length) return;

      if (!originalData) {
        setOriginalData(tData);
      }

      var isEmptyArraySort = !sort || sort instanceof Array && !sort.length;
      var isEmptyObjectSort = !(sort instanceof Array) && !(sort !== null && sort !== void 0 && sort.sortBy);

      if (isEmptyArraySort || isEmptyObjectSort) {
        setTData(originalData, {
          trigger: "sort"
        });
        return originalData;
      }

      var formattedSort = sort instanceof Array ? sort : [sort];
      var newData = tData.slice().sort(function (a, b) {
        var sortResult = 0;

        for (var i = 0, len = formattedSort.length; i < len; i++) {
          var item = formattedSort[i];
          var sortFunc = sorterFuncMap[item.sortBy];

          if (sortResult === 0 && sortFunc) {
            sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);
          } else {
            break;
          }
        }

        return sortResult;
      });
      if (JSON.stringify(newData) === JSON.stringify(tData)) return;
      setTData(newData, {
        trigger: "sort"
      });
      return newData;
    }

    function handleSortHeaderClick(col, p) {
      var _props$onChange;

      var sortInfo;

      if (props.multipleSort) {
        sortInfo = getMultipleNextSort(col, p);
      } else {
        var sort = tSortInfo instanceof Array ? tSortInfo[0] : tSortInfo;
        sortInfo = getSingleNextSort(col, sort, p);
      }

      var newData = handleDataSort(sortInfo);
      var currentData = newData || tData;
      var currentDataSource = currentData;
      setTSortInfo(sortInfo, {
        currentDataSource: currentDataSource,
        col: col
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
        sorter: sortInfo
      }, {
        currentData: currentData,
        trigger: "sorter"
      });
    }

    function getSortOrder(descending) {
      if (descending === void 0) return;
      return descending ? "desc" : "asc";
    }

    function getSingleNextSort(col, sortInfo, p) {
      if (sortInfo && sortInfo.sortBy === col.colKey && sortInfo.descending === p.descending) {
        return void 0;
      }

      return {
        sortBy: col.colKey,
        descending: p.descending
      };
    }

    function getMultipleNextSort(col, p) {
      var sort = tSortInfo;
      if (!(sort instanceof Array)) return;
      var colKey = col.colKey;

      var result = _toConsumableArray(sort);

      for (var i = 0, len = sort.length; i < len; i++) {
        if (sort[i].sortBy === colKey) {
          var next = getSingleNextSort(col, sort[i], p);
          next ? result[i] = next : result.splice(i, 1);
          return result;
        }
      }

      result.push({
        sortBy: colKey,
        descending: p.descending
      });
      return result;
    }

    function renderSortIcon(_ref) {
      var _sortMap$col$colKey;

      var col = _ref.col;
      if (!col.sorter) return null;
      var sorterButtonsProps = {
        sortType: col.sortType,
        sortOrder: getSortOrder((_sortMap$col$colKey = sortMap[col.colKey]) === null || _sortMap$col$colKey === void 0 ? void 0 : _sortMap$col$colKey.descending),
        sortIcon: props.sortIcon,
        hideSortTips: props.hideSortTips
      };
      return /* @__PURE__ */React__default["default"].createElement(SorterButton, _objectSpread$1y(_objectSpread$1y({
        key: "sorter-button-".concat(col.colKey)
      }, sorterButtonsProps), {}, {
        onSortIconClick: function onSortIconClick(_, p) {
          return handleSortHeaderClick(col, p);
        }
      }));
    }

    return {
      renderSortIcon: renderSortIcon
    };
  }

  var baseKeys = _baseKeys,
      getTag$1 = _getTag,
      isArguments = isArguments_1,
      isArray$1 = isArray_1,
      isArrayLike = isArrayLike_1,
      isBuffer$1 = isBuffer$5.exports,
      isPrototype = _isPrototype,
      isTypedArray$1 = isTypedArray_1;
  /** `Object#toString` result references. */

  var mapTag$1 = '[object Map]',
      setTag$1 = '[object Set]';
  /** Used for built-in method references. */

  var objectProto$4 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$5 = objectProto$4.hasOwnProperty;
  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */

  function isEmpty(value) {
    if (value == null) {
      return true;
    }

    if (isArrayLike(value) && (isArray$1(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer$1(value) || isTypedArray$1(value) || isArguments(value))) {
      return !value.length;
    }

    var tag = getTag$1(value);

    if (tag == mapTag$1 || tag == setTag$1) {
      return !value.size;
    }

    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }

    for (var key in value) {
      if (hasOwnProperty$5.call(value, key)) {
        return false;
      }
    }

    return true;
  }

  var isEmpty_1 = isEmpty;

  function ownKeys$1y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var CheckboxGroup = Checkbox.Group;
  var RadioGroup = Radio.Group;
  function TableFilterController(props) {
    var tFilterValue = props.tFilterValue,
        innerFilterValue = props.innerFilterValue,
        tableFilterClasses = props.tableFilterClasses,
        isFocusClass = props.isFocusClass,
        column = props.column;

    var _useGlobalIcon = useGlobalIcon({
      FilterIcon: FilterIcon
    }),
        FilterIcon$1 = _useGlobalIcon.FilterIcon;

    var triggerElementRef = React.useRef(null);

    var _useLocaleReceiver = useLocaleReceiver("table"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        locale = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        filterPopupVisible = _useState2[0],
        setFilterPopupVisible = _useState2[1];

    var onFilterPopupVisibleChange = function onFilterPopupVisibleChange(visible) {
      var _props$onVisibleChang;

      setFilterPopupVisible(visible);
      (_props$onVisibleChang = props.onVisibleChange) === null || _props$onVisibleChang === void 0 ? void 0 : _props$onVisibleChang.call(props, visible);
    };

    var getFilterContent = function getFilterContent(column2) {
      var _column2$filter, _column2$filter2, _column2$filter3, _column2$filter4, _column2$filter5;

      var types = ["single", "multiple", "input"];

      if (column2.type && !types.includes(column2.filter.type)) {
        log.error("Table", "TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
        return;
      }

      var Component = {
        single: RadioGroup,
        multiple: CheckboxGroup,
        input: Input
      }[column2.filter.type];
      if (!Component && !(column2 !== null && column2 !== void 0 && (_column2$filter = column2.filter) !== null && _column2$filter !== void 0 && _column2$filter.component)) return;

      var filterComponentProps = _objectSpread$1x(_objectSpread$1x({
        options: ["single", "multiple"].includes(column2.filter.type) ? (_column2$filter2 = column2.filter) === null || _column2$filter2 === void 0 ? void 0 : _column2$filter2.list : void 0
      }, ((_column2$filter3 = column2.filter) === null || _column2$filter3 === void 0 ? void 0 : _column2$filter3.props) || {}), {}, {
        value: innerFilterValue === null || innerFilterValue === void 0 ? void 0 : innerFilterValue[column2.colKey],
        onChange: function onChange(val) {
          var _props$onInnerFilterC;

          (_props$onInnerFilterC = props.onInnerFilterChange) === null || _props$onInnerFilterC === void 0 ? void 0 : _props$onInnerFilterC.call(props, val, column2);
        }
      });

      if ((_column2$filter4 = column2.filter) !== null && _column2$filter4 !== void 0 && _column2$filter4.confirmEvents) {
        column2.filter.confirmEvents.forEach(function (event) {
          filterComponentProps[event] = function () {
            var _props$onConfirm;

            setFilterPopupVisible(false);
            (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, column2);
          };
        });
      }

      var FilterComponent = (column2 === null || column2 === void 0 ? void 0 : (_column2$filter5 = column2.filter) === null || _column2$filter5 === void 0 ? void 0 : _column2$filter5.component) || Component;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.contentInner
      }, /* @__PURE__ */React__default["default"].createElement(FilterComponent, _objectSpread$1x({
        value: innerFilterValue === null || innerFilterValue === void 0 ? void 0 : innerFilterValue[column2.colKey]
      }, filterComponentProps)));
    };

    var getBottomButtons = function getBottomButtons(column2) {
      if (!column2.filter.showConfirmAndReset) return;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.bottomButtons
      }, /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "default",
        size: "small",
        onClick: function onClick() {
          var _props$onReset;

          setFilterPopupVisible(false);
          (_props$onReset = props.onReset) === null || _props$onReset === void 0 ? void 0 : _props$onReset.call(props, column2);
        }
      }, locale.resetText), /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        size: "small",
        onClick: function onClick() {
          var _props$onConfirm2;

          setFilterPopupVisible(false);
          (_props$onConfirm2 = props.onConfirm) === null || _props$onConfirm2 === void 0 ? void 0 : _props$onConfirm2.call(props, column2);
        }
      }, locale.confirmText));
    };

    if (!column.filter || column.filter && !Object.keys(column.filter).length) return null;
    var defaultFilterIcon = t(locale.filterIcon) || /* @__PURE__ */React__default["default"].createElement(FilterIcon$1, null);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1([tableFilterClasses.icon, _defineProperty$3({}, isFocusClass, !isEmpty_1(tFilterValue === null || tFilterValue === void 0 ? void 0 : tFilterValue[column.colKey]))])
    }, /* @__PURE__ */React__default["default"].createElement(Popup, {
      visible: filterPopupVisible,
      destroyOnClose: true,
      trigger: "click",
      placement: "bottom-right",
      showArrow: true,
      overlayClassName: tableFilterClasses.popup,
      onVisibleChange: function onVisibleChange(val) {
        return onFilterPopupVisibleChange(val);
      },
      content: /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.popupContent
      }, getFilterContent(column), getBottomButtons(column))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: triggerElementRef
    }, props.filterIcon || defaultFilterIcon)));
  }

  function ownKeys$1x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1x(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function filterEmptyData(data) {
    var newFilterValue = {};
    Object.keys(data).forEach(function (key) {
      var item = data[key];
      var isArrayTrue = item instanceof Array && item.length;
      var isObject = _typeof$1(item) === "object" && !(item instanceof Array);
      var isObjectTrue = isObject && Object.keys(item).length;

      if (isArrayTrue || isObjectTrue || !["null", "", "undefined"].includes(String(item))) {
        newFilterValue[key] = item;
      }
    });
    return newFilterValue;
  }

  function useFilter(props, primaryTableRef) {
    var _useLocaleReceiver = useLocaleReceiver("table"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        locale = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useClassName = useClassName(),
        tableFilterClasses = _useClassName.tableFilterClasses,
        isFocusClass = _useClassName.isFocusClass;

    var _useState = React.useState(),
        _useState2 = _slicedToArray(_useState, 2),
        isTableOverflowHidden = _useState2[0],
        setIsTableOverflowHidden = _useState2[1];

    var _useControlled = useControlled(props, "filterValue", props.onFilterChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        tFilterValue = _useControlled2[0],
        setTFilterValue = _useControlled2[1];

    var _useState3 = React.useState(tFilterValue),
        _useState4 = _slicedToArray(_useState3, 2),
        innerFilterValue = _useState4[0],
        setInnerFilterValue = _useState4[1];

    var hasEmptyCondition = function () {
      var filterEmpty = filterEmptyData(tFilterValue || {});
      return !tFilterValue || !Object.keys(filterEmpty).length;
    }();

    React.useEffect(function () {
      setInnerFilterValue(tFilterValue);
    }, [tFilterValue]);

    function renderFirstFilterRow() {
      var _props$pagination, _props$data;

      if (hasEmptyCondition) return null;
      var defaultNode = /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.result
      }, /* @__PURE__ */React__default["default"].createElement("span", null, t(locale.searchResultText, {
        result: getFilterResultContent(),
        count: ((_props$pagination = props.pagination) === null || _props$pagination === void 0 ? void 0 : _props$pagination.total) || ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length)
      })), /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        variant: "text",
        onClick: onResetAll
      }, locale.clearFilterResultButtonText));
      var filterContent = props.filterRow;
      if (props.filterRow && !filterContent) return null;
      var r = filterContent || defaultNode;
      if (!r) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.inner
      }, r);
    }

    function getFilterResultContent() {
      var arr = [];
      props.columns.filter(function (col) {
        return col.filter;
      }).forEach(function (col) {
        var value = tFilterValue[col.colKey];

        if (col.filter.list && !["null", "", "undefined"].includes(String(value))) {
          var formattedValue = value instanceof Array ? value : [value];
          var label = [];
          col.filter.list.forEach(function (option) {
            if (formattedValue.includes(option.value)) {
              label.push(option.label);
            }
          });
          value = label.join();
        }

        if (value) {
          arr.push("".concat(col.title, "\uFF1A").concat(value));
        }
      });
      return arr.join("\uFF1B");
    }

    function onInnerFilterChange(val, column) {
      var filterValue = _objectSpread$1w(_objectSpread$1w({}, innerFilterValue), {}, _defineProperty$3({}, column.colKey, val));

      setInnerFilterValue(filterValue);

      if (!column.filter.showConfirmAndReset) {
        emitFilterChange(filterValue, column);
      }
    }

    function emitFilterChange(filterValue, column) {
      var _props$onChange;

      setTFilterValue(filterValue, {
        col: column
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
        filter: filterValue
      }, {
        trigger: "filter"
      });
    }

    function onReset(column) {
      var filterValue = _objectSpread$1w(_objectSpread$1w({}, tFilterValue), {}, _defineProperty$3({}, column.colKey, {
        single: "",
        multiple: [],
        input: ""
      }[column.filter.type] || column.filter.resetValue || ""));

      emitFilterChange(filterValue, column);
    }

    function onResetAll() {
      emitFilterChange({}, void 0);
    }

    function onConfirm(column) {
      emitFilterChange(innerFilterValue, column);
    }

    function renderFilterIcon(_ref) {
      var _primaryTableRef$curr;

      var col = _ref.col;
      return /* @__PURE__ */React__default["default"].createElement(TableFilterController, {
        column: col,
        filterIcon: props.filterIcon,
        tFilterValue: tFilterValue,
        innerFilterValue: innerFilterValue,
        tableFilterClasses: tableFilterClasses,
        isFocusClass: isFocusClass,
        onReset: onReset,
        onConfirm: onConfirm,
        onInnerFilterChange: onInnerFilterChange,
        primaryTableElement: primaryTableRef === null || primaryTableRef === void 0 ? void 0 : (_primaryTableRef$curr = primaryTableRef.current) === null || _primaryTableRef$curr === void 0 ? void 0 : _primaryTableRef$curr.tableElement,
        onVisibleChange: onPopupVisibleChange
      });
    }

    function onPopupVisibleChange(visible) {
      if (visible && !isTableOverflowHidden) {
        setIsTableOverflowHidden(!visible);
      }
    }

    return {
      hasEmptyCondition: hasEmptyCondition,
      isTableOverflowHidden: isTableOverflowHidden,
      renderFilterIcon: renderFilterIcon,
      renderFirstFilterRow: renderFirstFilterRow
    };
  }

  /**!
   * Sortable 1.15.0
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   */
  function ownKeys$1w(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$1w(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1w(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  var version = "1.15.0";

  function userAgent(pattern) {
    if (typeof window !== 'undefined' && window.navigator) {
      return !! /*@__PURE__*/navigator.userAgent.match(pattern);
    }
  }

  var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
  var Edge = userAgent(/Edge/i);
  var FireFox = userAgent(/firefox/i);
  var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
  var IOS = userAgent(/iP(ad|od|hone)/i);
  var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
  var captureMode = {
    capture: false,
    passive: false
  };

  function on(el, event, fn) {
    el.addEventListener(event, fn, !IE11OrLess && captureMode);
  }

  function off(el, event, fn) {
    el.removeEventListener(event, fn, !IE11OrLess && captureMode);
  }

  function matches(
  /**HTMLElement*/
  el,
  /**String*/
  selector) {
    if (!selector) return;
    selector[0] === '>' && (selector = selector.substring(1));

    if (el) {
      try {
        if (el.matches) {
          return el.matches(selector);
        } else if (el.msMatchesSelector) {
          return el.msMatchesSelector(selector);
        } else if (el.webkitMatchesSelector) {
          return el.webkitMatchesSelector(selector);
        }
      } catch (_) {
        return false;
      }
    }

    return false;
  }

  function getParentOrHost(el) {
    return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
  }

  function closest(
  /**HTMLElement*/
  el,
  /**String*/
  selector,
  /**HTMLElement*/
  ctx, includeCTX) {
    if (el) {
      ctx = ctx || document;

      do {
        if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
          return el;
        }

        if (el === ctx) break;
        /* jshint boss:true */
      } while (el = getParentOrHost(el));
    }

    return null;
  }

  var R_SPACE = /\s+/g;

  function toggleClass(el, name, state) {
    if (el && name) {
      if (el.classList) {
        el.classList[state ? 'add' : 'remove'](name);
      } else {
        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
      }
    }
  }

  function css(el, prop, val) {
    var style = el && el.style;

    if (style) {
      if (val === void 0) {
        if (document.defaultView && document.defaultView.getComputedStyle) {
          val = document.defaultView.getComputedStyle(el, '');
        } else if (el.currentStyle) {
          val = el.currentStyle;
        }

        return prop === void 0 ? val : val[prop];
      } else {
        if (!(prop in style) && prop.indexOf('webkit') === -1) {
          prop = '-webkit-' + prop;
        }

        style[prop] = val + (typeof val === 'string' ? '' : 'px');
      }
    }
  }

  function matrix(el, selfOnly) {
    var appliedTransforms = '';

    if (typeof el === 'string') {
      appliedTransforms = el;
    } else {
      do {
        var transform = css(el, 'transform');

        if (transform && transform !== 'none') {
          appliedTransforms = transform + ' ' + appliedTransforms;
        }
        /* jshint boss:true */

      } while (!selfOnly && (el = el.parentNode));
    }

    var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
    /*jshint -W056 */

    return matrixFn && new matrixFn(appliedTransforms);
  }

  function find(ctx, tagName, iterator) {
    if (ctx) {
      var list = ctx.getElementsByTagName(tagName),
          i = 0,
          n = list.length;

      if (iterator) {
        for (; i < n; i++) {
          iterator(list[i], i);
        }
      }

      return list;
    }

    return [];
  }

  function getWindowScrollingElement() {
    var scrollingElement = document.scrollingElement;

    if (scrollingElement) {
      return scrollingElement;
    } else {
      return document.documentElement;
    }
  }
  /**
   * Returns the "bounding client rect" of given element
   * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
   * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
   * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
   * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
   * @param  {[HTMLElement]} container              The parent the element will be placed in
   * @return {Object}                               The boundingClientRect of el, with specified adjustments
   */


  function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
    if (!el.getBoundingClientRect && el !== window) return;
    var elRect, top, left, bottom, right, height, width;

    if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
      elRect = el.getBoundingClientRect();
      top = elRect.top;
      left = elRect.left;
      bottom = elRect.bottom;
      right = elRect.right;
      height = elRect.height;
      width = elRect.width;
    } else {
      top = 0;
      left = 0;
      bottom = window.innerHeight;
      right = window.innerWidth;
      height = window.innerHeight;
      width = window.innerWidth;
    }

    if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
      // Adjust for translate()
      container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
      // Not needed on <= IE11

      if (!IE11OrLess) {
        do {
          if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
            var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

            top -= containerRect.top + parseInt(css(container, 'border-top-width'));
            left -= containerRect.left + parseInt(css(container, 'border-left-width'));
            bottom = top + elRect.height;
            right = left + elRect.width;
            break;
          }
          /* jshint boss:true */

        } while (container = container.parentNode);
      }
    }

    if (undoScale && el !== window) {
      // Adjust for scale()
      var elMatrix = matrix(container || el),
          scaleX = elMatrix && elMatrix.a,
          scaleY = elMatrix && elMatrix.d;

      if (elMatrix) {
        top /= scaleY;
        left /= scaleX;
        width /= scaleX;
        height /= scaleY;
        bottom = top + height;
        right = left + width;
      }
    }

    return {
      top: top,
      left: left,
      bottom: bottom,
      right: right,
      width: width,
      height: height
    };
  }
  /**
   * Checks if a side of an element is scrolled past a side of its parents
   * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
   * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
   * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
   * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
   */


  function isScrolledPast(el, elSide, parentSide) {
    var parent = getParentAutoScrollElement(el, true),
        elSideVal = getRect(el)[elSide];
    /* jshint boss:true */

    while (parent) {
      var parentSideVal = getRect(parent)[parentSide],
          visible = void 0;

      if (parentSide === 'top' || parentSide === 'left') {
        visible = elSideVal >= parentSideVal;
      } else {
        visible = elSideVal <= parentSideVal;
      }

      if (!visible) return parent;
      if (parent === getWindowScrollingElement()) break;
      parent = getParentAutoScrollElement(parent, false);
    }

    return false;
  }
  /**
   * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
   * and non-draggable elements
   * @param  {HTMLElement} el       The parent element
   * @param  {Number} childNum      The index of the child
   * @param  {Object} options       Parent Sortable's options
   * @return {HTMLElement}          The child at index childNum, or null if not found
   */


  function getChild(el, childNum, options, includeDragEl) {
    var currentChild = 0,
        i = 0,
        children = el.children;

    while (i < children.length) {
      if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
        if (currentChild === childNum) {
          return children[i];
        }

        currentChild++;
      }

      i++;
    }

    return null;
  }
  /**
   * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
   * @param  {HTMLElement} el       Parent element
   * @param  {selector} selector    Any other elements that should be ignored
   * @return {HTMLElement}          The last child, ignoring ghostEl
   */


  function lastChild(el, selector) {
    var last = el.lastElementChild;

    while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
      last = last.previousElementSibling;
    }

    return last || null;
  }
  /**
   * Returns the index of an element within its parent for a selected set of
   * elements
   * @param  {HTMLElement} el
   * @param  {selector} selector
   * @return {number}
   */


  function index(el, selector) {
    var index = 0;

    if (!el || !el.parentNode) {
      return -1;
    }
    /* jshint boss:true */


    while (el = el.previousElementSibling) {
      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
        index++;
      }
    }

    return index;
  }
  /**
   * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
   * The value is returned in real pixels.
   * @param  {HTMLElement} el
   * @return {Array}             Offsets in the format of [left, top]
   */


  function getRelativeScrollOffset(el) {
    var offsetLeft = 0,
        offsetTop = 0,
        winScroller = getWindowScrollingElement();

    if (el) {
      do {
        var elMatrix = matrix(el),
            scaleX = elMatrix.a,
            scaleY = elMatrix.d;
        offsetLeft += el.scrollLeft * scaleX;
        offsetTop += el.scrollTop * scaleY;
      } while (el !== winScroller && (el = el.parentNode));
    }

    return [offsetLeft, offsetTop];
  }
  /**
   * Returns the index of the object within the given array
   * @param  {Array} arr   Array that may or may not hold the object
   * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
   * @return {Number}      The index of the object in the array, or -1
   */


  function indexOfObject(arr, obj) {
    for (var i in arr) {
      if (!arr.hasOwnProperty(i)) continue;

      for (var key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
      }
    }

    return -1;
  }

  function getParentAutoScrollElement(el, includeSelf) {
    // skip to window
    if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
    var elem = el;
    var gotSelf = false;

    do {
      // we don't need to get elem css if it isn't even overflowing in the first place (performance)
      if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
        var elemCSS = css(elem);

        if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
          if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
          if (gotSelf || includeSelf) return elem;
          gotSelf = true;
        }
      }
      /* jshint boss:true */

    } while (elem = elem.parentNode);

    return getWindowScrollingElement();
  }

  function extend(dst, src) {
    if (dst && src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dst[key] = src[key];
        }
      }
    }

    return dst;
  }

  function isRectEqual(rect1, rect2) {
    return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
  }

  var _throttleTimeout;

  function throttle(callback, ms) {
    return function () {
      if (!_throttleTimeout) {
        var args = arguments,
            _this = this;

        if (args.length === 1) {
          callback.call(_this, args[0]);
        } else {
          callback.apply(_this, args);
        }

        _throttleTimeout = setTimeout(function () {
          _throttleTimeout = void 0;
        }, ms);
      }
    };
  }

  function cancelThrottle() {
    clearTimeout(_throttleTimeout);
    _throttleTimeout = void 0;
  }

  function scrollBy(el, x, y) {
    el.scrollLeft += x;
    el.scrollTop += y;
  }

  function clone(el) {
    var Polymer = window.Polymer;
    var $ = window.jQuery || window.Zepto;

    if (Polymer && Polymer.dom) {
      return Polymer.dom(el).cloneNode(true);
    } else if ($) {
      return $(el).clone(true)[0];
    } else {
      return el.cloneNode(true);
    }
  }

  var expando = 'Sortable' + new Date().getTime();

  function AnimationStateManager() {
    var animationStates = [],
        animationCallbackId;
    return {
      captureAnimationState: function captureAnimationState() {
        animationStates = [];
        if (!this.options.animation) return;
        var children = [].slice.call(this.el.children);
        children.forEach(function (child) {
          if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
          animationStates.push({
            target: child,
            rect: getRect(child)
          });

          var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation


          if (child.thisAnimationDuration) {
            var childMatrix = matrix(child, true);

            if (childMatrix) {
              fromRect.top -= childMatrix.f;
              fromRect.left -= childMatrix.e;
            }
          }

          child.fromRect = fromRect;
        });
      },
      addAnimationState: function addAnimationState(state) {
        animationStates.push(state);
      },
      removeAnimationState: function removeAnimationState(target) {
        animationStates.splice(indexOfObject(animationStates, {
          target: target
        }), 1);
      },
      animateAll: function animateAll(callback) {
        var _this = this;

        if (!this.options.animation) {
          clearTimeout(animationCallbackId);
          if (typeof callback === 'function') callback();
          return;
        }

        var animating = false,
            animationTime = 0;
        animationStates.forEach(function (state) {
          var time = 0,
              target = state.target,
              fromRect = target.fromRect,
              toRect = getRect(target),
              prevFromRect = target.prevFromRect,
              prevToRect = target.prevToRect,
              animatingRect = state.rect,
              targetMatrix = matrix(target, true);

          if (targetMatrix) {
            // Compensate for current animation
            toRect.top -= targetMatrix.f;
            toRect.left -= targetMatrix.e;
          }

          target.toRect = toRect;

          if (target.thisAnimationDuration) {
            // Could also check if animatingRect is between fromRect and toRect
            if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
              // If returning to same place as started from animation and on same axis
              time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
            }
          } // if fromRect != toRect: animate


          if (!isRectEqual(toRect, fromRect)) {
            target.prevFromRect = fromRect;
            target.prevToRect = toRect;

            if (!time) {
              time = _this.options.animation;
            }

            _this.animate(target, animatingRect, toRect, time);
          }

          if (time) {
            animating = true;
            animationTime = Math.max(animationTime, time);
            clearTimeout(target.animationResetTimer);
            target.animationResetTimer = setTimeout(function () {
              target.animationTime = 0;
              target.prevFromRect = null;
              target.fromRect = null;
              target.prevToRect = null;
              target.thisAnimationDuration = null;
            }, time);
            target.thisAnimationDuration = time;
          }
        });
        clearTimeout(animationCallbackId);

        if (!animating) {
          if (typeof callback === 'function') callback();
        } else {
          animationCallbackId = setTimeout(function () {
            if (typeof callback === 'function') callback();
          }, animationTime);
        }

        animationStates = [];
      },
      animate: function animate(target, currentRect, toRect, duration) {
        if (duration) {
          css(target, 'transition', '');
          css(target, 'transform', '');
          var elMatrix = matrix(this.el),
              scaleX = elMatrix && elMatrix.a,
              scaleY = elMatrix && elMatrix.d,
              translateX = (currentRect.left - toRect.left) / (scaleX || 1),
              translateY = (currentRect.top - toRect.top) / (scaleY || 1);
          target.animatingX = !!translateX;
          target.animatingY = !!translateY;
          css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
          this.forRepaintDummy = repaint(target); // repaint

          css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
          css(target, 'transform', 'translate3d(0,0,0)');
          typeof target.animated === 'number' && clearTimeout(target.animated);
          target.animated = setTimeout(function () {
            css(target, 'transition', '');
            css(target, 'transform', '');
            target.animated = false;
            target.animatingX = false;
            target.animatingY = false;
          }, duration);
        }
      }
    };
  }

  function repaint(target) {
    return target.offsetWidth;
  }

  function calculateRealTime(animatingRect, fromRect, toRect, options) {
    return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
  }

  var plugins = [];
  var defaults = {
    initializeByDefault: true
  };
  var PluginManager = {
    mount: function mount(plugin) {
      // Set default static properties
      for (var option in defaults) {
        if (defaults.hasOwnProperty(option) && !(option in plugin)) {
          plugin[option] = defaults[option];
        }
      }

      plugins.forEach(function (p) {
        if (p.pluginName === plugin.pluginName) {
          throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
        }
      });
      plugins.push(plugin);
    },
    pluginEvent: function pluginEvent(eventName, sortable, evt) {
      var _this = this;

      this.eventCanceled = false;

      evt.cancel = function () {
        _this.eventCanceled = true;
      };

      var eventNameGlobal = eventName + 'Global';
      plugins.forEach(function (plugin) {
        if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

        if (sortable[plugin.pluginName][eventNameGlobal]) {
          sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
            sortable: sortable
          }, evt));
        } // Only fire plugin event if plugin is enabled in this sortable,
        // and plugin has event defined


        if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
          sortable[plugin.pluginName][eventName](_objectSpread2({
            sortable: sortable
          }, evt));
        }
      });
    },
    initializePlugins: function initializePlugins(sortable, el, defaults, options) {
      plugins.forEach(function (plugin) {
        var pluginName = plugin.pluginName;
        if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
        var initialized = new plugin(sortable, el, sortable.options);
        initialized.sortable = sortable;
        initialized.options = sortable.options;
        sortable[pluginName] = initialized; // Add default options from plugin

        _extends(defaults, initialized.defaults);
      });

      for (var option in sortable.options) {
        if (!sortable.options.hasOwnProperty(option)) continue;
        var modified = this.modifyOption(sortable, option, sortable.options[option]);

        if (typeof modified !== 'undefined') {
          sortable.options[option] = modified;
        }
      }
    },
    getEventProperties: function getEventProperties(name, sortable) {
      var eventProperties = {};
      plugins.forEach(function (plugin) {
        if (typeof plugin.eventProperties !== 'function') return;

        _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
      });
      return eventProperties;
    },
    modifyOption: function modifyOption(sortable, name, value) {
      var modifiedValue;
      plugins.forEach(function (plugin) {
        // Plugin must exist on the Sortable
        if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

        if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
          modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
        }
      });
      return modifiedValue;
    }
  };

  function dispatchEvent(_ref) {
    var sortable = _ref.sortable,
        rootEl = _ref.rootEl,
        name = _ref.name,
        targetEl = _ref.targetEl,
        cloneEl = _ref.cloneEl,
        toEl = _ref.toEl,
        fromEl = _ref.fromEl,
        oldIndex = _ref.oldIndex,
        newIndex = _ref.newIndex,
        oldDraggableIndex = _ref.oldDraggableIndex,
        newDraggableIndex = _ref.newDraggableIndex,
        originalEvent = _ref.originalEvent,
        putSortable = _ref.putSortable,
        extraEventProperties = _ref.extraEventProperties;
    sortable = sortable || rootEl && rootEl[expando];
    if (!sortable) return;
    var evt,
        options = sortable.options,
        onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent(name, {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent(name, true, true);
    }

    evt.to = toEl || rootEl;
    evt.from = fromEl || rootEl;
    evt.item = targetEl || rootEl;
    evt.clone = cloneEl;
    evt.oldIndex = oldIndex;
    evt.newIndex = newIndex;
    evt.oldDraggableIndex = oldDraggableIndex;
    evt.newDraggableIndex = newDraggableIndex;
    evt.originalEvent = originalEvent;
    evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

    var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));

    for (var option in allEventProperties) {
      evt[option] = allEventProperties[option];
    }

    if (rootEl) {
      rootEl.dispatchEvent(evt);
    }

    if (options[onName]) {
      options[onName].call(sortable, evt);
    }
  }

  var _excluded$j = ["evt"];

  var pluginEvent = function pluginEvent(eventName, sortable) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        originalEvent = _ref.evt,
        data = _objectWithoutProperties(_ref, _excluded$j);

    PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
      dragEl: dragEl,
      parentEl: parentEl,
      ghostEl: ghostEl,
      rootEl: rootEl,
      nextEl: nextEl,
      lastDownEl: lastDownEl,
      cloneEl: cloneEl,
      cloneHidden: cloneHidden,
      dragStarted: moved,
      putSortable: putSortable,
      activeSortable: Sortable.active,
      originalEvent: originalEvent,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex,
      hideGhostForTarget: _hideGhostForTarget,
      unhideGhostForTarget: _unhideGhostForTarget,
      cloneNowHidden: function cloneNowHidden() {
        cloneHidden = true;
      },
      cloneNowShown: function cloneNowShown() {
        cloneHidden = false;
      },
      dispatchSortableEvent: function dispatchSortableEvent(name) {
        _dispatchEvent({
          sortable: sortable,
          name: name,
          originalEvent: originalEvent
        });
      }
    }, data));
  };

  function _dispatchEvent(info) {
    dispatchEvent(_objectSpread2({
      putSortable: putSortable,
      cloneEl: cloneEl,
      targetEl: dragEl,
      rootEl: rootEl,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex
    }, info));
  }

  var dragEl,
      parentEl,
      ghostEl,
      rootEl,
      nextEl,
      lastDownEl,
      cloneEl,
      cloneHidden,
      oldIndex,
      newIndex,
      oldDraggableIndex,
      newDraggableIndex,
      activeGroup,
      putSortable,
      awaitingDragStarted = false,
      ignoreNextClick = false,
      sortables = [],
      tapEvt,
      touchEvt,
      lastDx,
      lastDy,
      tapDistanceLeft,
      tapDistanceTop,
      moved,
      lastTarget,
      lastDirection,
      pastFirstInvertThresh = false,
      isCircumstantialInvert = false,
      targetMoveDistance,
      // For positioning ghost absolutely
  ghostRelativeParent,
      ghostRelativeParentInitialScroll = [],
      // (left, top)
  _silent = false,
      savedInputChecked = [];
  /** @const */

  var documentExists = typeof document !== 'undefined',
      PositionGhostAbsolutely = IOS,
      CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
      // This will not pass for IE9, because IE9 DnD only works on anchors
  supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
      supportCssPointerEvents = function () {
    if (!documentExists) return; // false when <= IE11

    if (IE11OrLess) {
      return false;
    }

    var el = document.createElement('x');
    el.style.cssText = 'pointer-events:auto';
    return el.style.pointerEvents === 'auto';
  }(),
      _detectDirection = function _detectDirection(el, options) {
    var elCSS = css(el),
        elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
        child1 = getChild(el, 0, options),
        child2 = getChild(el, 1, options),
        firstChildCSS = child1 && css(child1),
        secondChildCSS = child2 && css(child2),
        firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
        secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

    if (elCSS.display === 'flex') {
      return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
    }

    if (elCSS.display === 'grid') {
      return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
    }

    if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
      var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
      return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
    }

    return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
  },
      _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
        dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
        dragElOppLength = vertical ? dragRect.width : dragRect.height,
        targetS1Opp = vertical ? targetRect.left : targetRect.top,
        targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
        targetOppLength = vertical ? targetRect.width : targetRect.height;
    return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
  },

  /**
   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
   * @param  {Number} x      X position
   * @param  {Number} y      Y position
   * @return {HTMLElement}   Element of the first found nearest Sortable
   */
  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
    var ret;
    sortables.some(function (sortable) {
      var threshold = sortable[expando].options.emptyInsertThreshold;
      if (!threshold || lastChild(sortable)) return;
      var rect = getRect(sortable),
          insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
          insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

      if (insideHorizontally && insideVertically) {
        return ret = sortable;
      }
    });
    return ret;
  },
      _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      return function (to, from, dragEl, evt) {
        var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

        if (value == null && (pull || sameGroup)) {
          // Default pull value
          // Default pull and put value if same group
          return true;
        } else if (value == null || value === false) {
          return false;
        } else if (pull && value === 'clone') {
          return value;
        } else if (typeof value === 'function') {
          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
        } else {
          var otherGroup = (pull ? to : from).options.group.name;
          return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
        }
      };
    }

    var group = {};
    var originalGroup = options.group;

    if (!originalGroup || _typeof(originalGroup) != 'object') {
      originalGroup = {
        name: originalGroup
      };
    }

    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  },
      _hideGhostForTarget = function _hideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', 'none');
    }
  },
      _unhideGhostForTarget = function _unhideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', '');
    }
  }; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


  if (documentExists && !ChromeForAndroid) {
    document.addEventListener('click', function (evt) {
      if (ignoreNextClick) {
        evt.preventDefault();
        evt.stopPropagation && evt.stopPropagation();
        evt.stopImmediatePropagation && evt.stopImmediatePropagation();
        ignoreNextClick = false;
        return false;
      }
    }, true);
  }

  var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
    if (dragEl) {
      evt = evt.touches ? evt.touches[0] : evt;

      var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

      if (nearest) {
        // Create imitation event
        var event = {};

        for (var i in evt) {
          if (evt.hasOwnProperty(i)) {
            event[i] = evt[i];
          }
        }

        event.target = event.rootEl = nearest;
        event.preventDefault = void 0;
        event.stopPropagation = void 0;

        nearest[expando]._onDragOver(event);
      }
    }
  };

  var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
    if (dragEl) {
      dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
    }
  };
  /**
   * @class  Sortable
   * @param  {HTMLElement}  el
   * @param  {Object}       [options]
   */


  function Sortable(el, options) {
    if (!(el && el.nodeType && el.nodeType === 1)) {
      throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
    }

    this.el = el; // root element

    this.options = options = _extends({}, options); // Export instance

    el[expando] = this;
    var defaults = {
      group: null,
      sort: true,
      disabled: false,
      store: null,
      handle: null,
      draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
      swapThreshold: 1,
      // percentage; 0 <= x <= 1
      invertSwap: false,
      // invert always
      invertedSwapThreshold: null,
      // will be set to same as swapThreshold if default
      removeCloneOnHide: true,
      direction: function direction() {
        return _detectDirection(el, this.options);
      },
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'sortable-drag',
      ignore: 'a, img',
      filter: null,
      preventOnFilter: true,
      animation: 0,
      easing: null,
      setData: function setData(dataTransfer, dragEl) {
        dataTransfer.setData('Text', dragEl.textContent);
      },
      dropBubble: false,
      dragoverBubble: false,
      dataIdAttr: 'data-id',
      delay: 0,
      delayOnTouchOnly: false,
      touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
      forceFallback: false,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: false,
      fallbackTolerance: 0,
      fallbackOffset: {
        x: 0,
        y: 0
      },
      supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
      emptyInsertThreshold: 5
    };
    PluginManager.initializePlugins(this, el, defaults); // Set default options

    for (var name in defaults) {
      !(name in options) && (options[name] = defaults[name]);
    }

    _prepareGroup(options); // Bind all private methods


    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    } // Setup drag mode


    this.nativeDraggable = options.forceFallback ? false : supportDraggable;

    if (this.nativeDraggable) {
      // Touch start threshold cannot be greater than the native dragstart threshold
      this.options.touchStartThreshold = 1;
    } // Bind events


    if (options.supportPointer) {
      on(el, 'pointerdown', this._onTapStart);
    } else {
      on(el, 'mousedown', this._onTapStart);
      on(el, 'touchstart', this._onTapStart);
    }

    if (this.nativeDraggable) {
      on(el, 'dragover', this);
      on(el, 'dragenter', this);
    }

    sortables.push(this.el); // Restore sorting

    options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

    _extends(this, AnimationStateManager());
  }

  Sortable.prototype =
  /** @lends Sortable.prototype */
  {
    constructor: Sortable,
    _isOutsideThisEl: function _isOutsideThisEl(target) {
      if (!this.el.contains(target) && target !== this.el) {
        lastTarget = null;
      }
    },
    _getDirection: function _getDirection(evt, target) {
      return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
    },
    _onTapStart: function _onTapStart(
    /** Event|TouchEvent */
    evt) {
      if (!evt.cancelable) return;

      var _this = this,
          el = this.el,
          options = this.options,
          preventOnFilter = options.preventOnFilter,
          type = evt.type,
          touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
          target = (touch || evt).target,
          originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
          filter = options.filter;

      _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


      if (dragEl) {
        return;
      }

      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
        return; // only left button and enabled
      } // cancel dnd if original target is content editable


      if (originalTarget.isContentEditable) {
        return;
      } // Safari ignores further event handling after mousedown


      if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
        return;
      }

      target = closest(target, options.draggable, el, false);

      if (target && target.animated) {
        return;
      }

      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      } // Get the index of the dragged element within its parent


      oldIndex = index(target);
      oldDraggableIndex = index(target, options.draggable); // Check filter

      if (typeof filter === 'function') {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent({
            sortable: _this,
            rootEl: originalTarget,
            name: 'filter',
            targetEl: target,
            toEl: el,
            fromEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(',').some(function (criteria) {
          criteria = closest(originalTarget, criteria.trim(), el, false);

          if (criteria) {
            _dispatchEvent({
              sortable: _this,
              rootEl: criteria,
              name: 'filter',
              targetEl: target,
              fromEl: el,
              toEl: el
            });

            pluginEvent('filter', _this, {
              evt: evt
            });
            return true;
          }
        });

        if (filter) {
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      }

      if (options.handle && !closest(originalTarget, options.handle, el, false)) {
        return;
      } // Prepare `dragstart`


      this._prepareDragStart(evt, touch, target);
    },
    _prepareDragStart: function _prepareDragStart(
    /** Event */
    evt,
    /** Touch */
    touch,
    /** HTMLElement */
    target) {
      var _this = this,
          el = _this.el,
          options = _this.options,
          ownerDocument = el.ownerDocument,
          dragStartFn;

      if (target && !dragEl && target.parentNode === el) {
        var dragRect = getRect(target);
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        Sortable.dragged = dragEl;
        tapEvt = {
          target: dragEl,
          clientX: (touch || evt).clientX,
          clientY: (touch || evt).clientY
        };
        tapDistanceLeft = tapEvt.clientX - dragRect.left;
        tapDistanceTop = tapEvt.clientY - dragRect.top;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style['will-change'] = 'all';

        dragStartFn = function dragStartFn() {
          pluginEvent('delayEnded', _this, {
            evt: evt
          });

          if (Sortable.eventCanceled) {
            _this._onDrop();

            return;
          } // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove


          _this._disableDelayedDragEvents();

          if (!FireFox && _this.nativeDraggable) {
            dragEl.draggable = true;
          } // Bind the events: dragstart/dragend


          _this._triggerDragStart(evt, touch); // Drag start event


          _dispatchEvent({
            sortable: _this,
            name: 'choose',
            originalEvent: evt
          }); // Chosen item


          toggleClass(dragEl, options.chosenClass, true);
        }; // Disable "draggable"


        options.ignore.split(',').forEach(function (criteria) {
          find(dragEl, criteria.trim(), _disableDraggable);
        });
        on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mouseup', _this._onDrop);
        on(ownerDocument, 'touchend', _this._onDrop);
        on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

        if (FireFox && this.nativeDraggable) {
          this.options.touchStartThreshold = 4;
          dragEl.draggable = true;
        }

        pluginEvent('delayStart', this, {
          evt: evt
        }); // Delay is impossible for native DnD in Edge or IE

        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
          if (Sortable.eventCanceled) {
            this._onDrop();

            return;
          } // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag


          on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
          on(ownerDocument, 'touchend', _this._disableDelayedDrag);
          on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
          on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
          on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
          options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
    /** TouchEvent|PointerEvent **/
    e) {
      var touch = e.touches ? e.touches[0] : e;

      if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
        this._disableDelayedDrag();
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      dragEl && _disableDraggable(dragEl);
      clearTimeout(this._dragStartTimer);

      this._disableDelayedDragEvents();
    },
    _disableDelayedDragEvents: function _disableDelayedDragEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._disableDelayedDrag);
      off(ownerDocument, 'touchend', this._disableDelayedDrag);
      off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
      off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
    },
    _triggerDragStart: function _triggerDragStart(
    /** Event */
    evt,
    /** Touch */
    touch) {
      touch = touch || evt.pointerType == 'touch' && evt;

      if (!this.nativeDraggable || touch) {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._onTouchMove);
        } else if (touch) {
          on(document, 'touchmove', this._onTouchMove);
        } else {
          on(document, 'mousemove', this._onTouchMove);
        }
      } else {
        on(dragEl, 'dragend', this);
        on(rootEl, 'dragstart', this._onDragStart);
      }

      try {
        if (document.selection) {
          // Timeout neccessary for IE9
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted(fallback, evt) {
      awaitingDragStarted = false;

      if (rootEl && dragEl) {
        pluginEvent('dragStarted', this, {
          evt: evt
        });

        if (this.nativeDraggable) {
          on(document, 'dragover', _checkOutsideTargetEl);
        }

        var options = this.options; // Apply effect

        !fallback && toggleClass(dragEl, options.dragClass, false);
        toggleClass(dragEl, options.ghostClass, true);
        Sortable.active = this;
        fallback && this._appendGhost(); // Drag start event

        _dispatchEvent({
          sortable: this,
          name: 'start',
          originalEvent: evt
        });
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;

        _hideGhostForTarget();

        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;

        while (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          if (target === parent) break;
          parent = target;
        }

        dragEl.parentNode[expando]._isOutsideThisEl(target);

        if (parent) {
          do {
            if (parent[expando]) {
              var inserted = void 0;
              inserted = parent[expando]._onDragOver({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent
              });

              if (inserted && !this.options.dragoverBubble) {
                break;
              }
            }

            target = parent; // store last element
          }
          /* jshint boss:true */
          while (parent = parent.parentNode);
        }

        _unhideGhostForTarget();
      }
    },
    _onTouchMove: function _onTouchMove(
    /**TouchEvent*/
    evt) {
      if (tapEvt) {
        var options = this.options,
            fallbackTolerance = options.fallbackTolerance,
            fallbackOffset = options.fallbackOffset,
            touch = evt.touches ? evt.touches[0] : evt,
            ghostMatrix = ghostEl && matrix(ghostEl, true),
            scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
            scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
            relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
            dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
            dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

        if (!Sortable.active && !awaitingDragStarted) {
          if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
            return;
          }

          this._onDragStart(evt, true);
        }

        if (ghostEl) {
          if (ghostMatrix) {
            ghostMatrix.e += dx - (lastDx || 0);
            ghostMatrix.f += dy - (lastDy || 0);
          } else {
            ghostMatrix = {
              a: 1,
              b: 0,
              c: 0,
              d: 1,
              e: dx,
              f: dy
            };
          }

          var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
          css(ghostEl, 'webkitTransform', cssMatrix);
          css(ghostEl, 'mozTransform', cssMatrix);
          css(ghostEl, 'msTransform', cssMatrix);
          css(ghostEl, 'transform', cssMatrix);
          lastDx = dx;
          lastDy = dy;
          touchEvt = touch;
        }

        evt.cancelable && evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      // Bug if using scale(): https://stackoverflow.com/questions/2637058
      // Not being adjusted for
      if (!ghostEl) {
        var container = this.options.fallbackOnBody ? document.body : rootEl,
            rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
            options = this.options; // Position absolutely

        if (PositionGhostAbsolutely) {
          // Get relatively positioned parent
          ghostRelativeParent = container;

          while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
            ghostRelativeParent = ghostRelativeParent.parentNode;
          }

          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
            rect.top += ghostRelativeParent.scrollTop;
            rect.left += ghostRelativeParent.scrollLeft;
          } else {
            ghostRelativeParent = getWindowScrollingElement();
          }

          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
        }

        ghostEl = dragEl.cloneNode(true);
        toggleClass(ghostEl, options.ghostClass, false);
        toggleClass(ghostEl, options.fallbackClass, true);
        toggleClass(ghostEl, options.dragClass, true);
        css(ghostEl, 'transition', '');
        css(ghostEl, 'transform', '');
        css(ghostEl, 'box-sizing', 'border-box');
        css(ghostEl, 'margin', 0);
        css(ghostEl, 'top', rect.top);
        css(ghostEl, 'left', rect.left);
        css(ghostEl, 'width', rect.width);
        css(ghostEl, 'height', rect.height);
        css(ghostEl, 'opacity', '0.8');
        css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
        css(ghostEl, 'zIndex', '100000');
        css(ghostEl, 'pointerEvents', 'none');
        Sortable.ghost = ghostEl;
        container.appendChild(ghostEl); // Set transform-origin

        css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
      }
    },
    _onDragStart: function _onDragStart(
    /**Event*/
    evt,
    /**boolean*/
    fallback) {
      var _this = this;

      var dataTransfer = evt.dataTransfer;
      var options = _this.options;
      pluginEvent('dragStart', this, {
        evt: evt
      });

      if (Sortable.eventCanceled) {
        this._onDrop();

        return;
      }

      pluginEvent('setupClone', this);

      if (!Sortable.eventCanceled) {
        cloneEl = clone(dragEl);
        cloneEl.removeAttribute("id");
        cloneEl.draggable = false;
        cloneEl.style['will-change'] = '';

        this._hideClone();

        toggleClass(cloneEl, this.options.chosenClass, false);
        Sortable.clone = cloneEl;
      } // #1143: IFrame support workaround


      _this.cloneId = _nextTick(function () {
        pluginEvent('clone', _this);
        if (Sortable.eventCanceled) return;

        if (!_this.options.removeCloneOnHide) {
          rootEl.insertBefore(cloneEl, dragEl);
        }

        _this._hideClone();

        _dispatchEvent({
          sortable: _this,
          name: 'clone'
        });
      });
      !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

      if (fallback) {
        ignoreNextClick = true;
        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        // Undo what was set in _prepareDragStart before drag started
        off(document, 'mouseup', _this._onDrop);
        off(document, 'touchend', _this._onDrop);
        off(document, 'touchcancel', _this._onDrop);

        if (dataTransfer) {
          dataTransfer.effectAllowed = 'move';
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }

        on(document, 'drop', _this); // #1276 fix:

        css(dragEl, 'transform', 'translateZ(0)');
      }

      awaitingDragStarted = true;
      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
      on(document, 'selectstart', _this);
      moved = true;

      if (Safari) {
        css(document.body, 'user-select', 'none');
      }
    },
    // Returns true - if no further action is needed (either inserted or another condition)
    _onDragOver: function _onDragOver(
    /**Event*/
    evt) {
      var el = this.el,
          target = evt.target,
          dragRect,
          targetRect,
          revert,
          options = this.options,
          group = options.group,
          activeSortable = Sortable.active,
          isOwner = activeGroup === group,
          canSort = options.sort,
          fromSortable = putSortable || activeSortable,
          vertical,
          _this = this,
          completedFired = false;

      if (_silent) return;

      function dragOverEvent(name, extra) {
        pluginEvent(name, _this, _objectSpread2({
          evt: evt,
          isOwner: isOwner,
          axis: vertical ? 'vertical' : 'horizontal',
          revert: revert,
          dragRect: dragRect,
          targetRect: targetRect,
          canSort: canSort,
          fromSortable: fromSortable,
          target: target,
          completed: completed,
          onMove: function onMove(target, after) {
            return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
          },
          changed: changed
        }, extra));
      } // Capture animation state


      function capture() {
        dragOverEvent('dragOverAnimationCapture');

        _this.captureAnimationState();

        if (_this !== fromSortable) {
          fromSortable.captureAnimationState();
        }
      } // Return invocation when dragEl is inserted (or completed)


      function completed(insertion) {
        dragOverEvent('dragOverCompleted', {
          insertion: insertion
        });

        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          } else {
            activeSortable._showClone(_this);
          }

          if (_this !== fromSortable) {
            // Set ghost class to new sortable's ghost class
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
            toggleClass(dragEl, options.ghostClass, true);
          }

          if (putSortable !== _this && _this !== Sortable.active) {
            putSortable = _this;
          } else if (_this === Sortable.active && putSortable) {
            putSortable = null;
          } // Animation


          if (fromSortable === _this) {
            _this._ignoreWhileAnimating = target;
          }

          _this.animateAll(function () {
            dragOverEvent('dragOverAnimationComplete');
            _this._ignoreWhileAnimating = null;
          });

          if (_this !== fromSortable) {
            fromSortable.animateAll();
            fromSortable._ignoreWhileAnimating = null;
          }
        } // Null lastTarget if it is not inside a previously swapped element


        if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
          lastTarget = null;
        } // no bubbling and not fallback


        if (!options.dragoverBubble && !evt.rootEl && target !== document) {
          dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


          !insertion && nearestEmptyInsertDetectEvent(evt);
        }

        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
        return completedFired = true;
      } // Call when dragEl has been inserted


      function changed() {
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);

        _dispatchEvent({
          sortable: _this,
          name: 'change',
          toEl: el,
          newIndex: newIndex,
          newDraggableIndex: newDraggableIndex,
          originalEvent: evt
        });
      }

      if (evt.preventDefault !== void 0) {
        evt.cancelable && evt.preventDefault();
      }

      target = closest(target, options.draggable, el, true);
      dragOverEvent('dragOver');
      if (Sortable.eventCanceled) return completedFired;

      if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
        return completed(false);
      }

      ignoreNextClick = false;

      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
      : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
        vertical = this._getDirection(evt, target) === 'vertical';
        dragRect = getRect(dragEl);
        dragOverEvent('dragOverValid');
        if (Sortable.eventCanceled) return completedFired;

        if (revert) {
          parentEl = rootEl; // actualization

          capture();

          this._hideClone();

          dragOverEvent('revert');

          if (!Sortable.eventCanceled) {
            if (nextEl) {
              rootEl.insertBefore(dragEl, nextEl);
            } else {
              rootEl.appendChild(dragEl);
            }
          }

          return completed(true);
        }

        var elLastChild = lastChild(el, options.draggable);

        if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
          // Insert to end of list
          // If already at end of list: Do not insert
          if (elLastChild === dragEl) {
            return completed(false);
          } // if there is a last element, it is the target


          if (elLastChild && el === evt.target) {
            target = elLastChild;
          }

          if (target) {
            targetRect = getRect(target);
          }

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
            capture();

            if (elLastChild && elLastChild.nextSibling) {
              // the last draggable element is not the last node
              el.insertBefore(dragEl, elLastChild.nextSibling);
            } else {
              el.appendChild(dragEl);
            }

            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
          // Insert to start of list
          var firstChild = getChild(el, 0, options, true);

          if (firstChild === dragEl) {
            return completed(false);
          }

          target = firstChild;
          targetRect = getRect(target);

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
            capture();
            el.insertBefore(dragEl, firstChild);
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (target.parentNode === el) {
          targetRect = getRect(target);
          var direction = 0,
              targetBeforeFirstSwap,
              differentLevel = dragEl.parentNode !== el,
              differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
              side1 = vertical ? 'top' : 'left',
              scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
              scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

          if (lastTarget !== target) {
            targetBeforeFirstSwap = targetRect[side1];
            pastFirstInvertThresh = false;
            isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
          }

          direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
          var sibling;

          if (direction !== 0) {
            // Check if target is beside dragEl in respective direction (ignoring hidden elements)
            var dragIndex = index(dragEl);

            do {
              dragIndex -= direction;
              sibling = parentEl.children[dragIndex];
            } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
          } // If dragEl is already beside target: Do not insert


          if (direction === 0 || sibling === target) {
            return completed(false);
          }

          lastTarget = target;
          lastDirection = direction;
          var nextSibling = target.nextElementSibling,
              after = false;
          after = direction === 1;

          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }

            _silent = true;
            setTimeout(_unsilent, 30);
            capture();

            if (after && !nextSibling) {
              el.appendChild(dragEl);
            } else {
              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
            } // Undo chrome's scroll adjustment (has no effect on other browsers)


            if (scrolledPastTop) {
              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
            }

            parentEl = dragEl.parentNode; // actualization
            // must be done before animation

            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
            }

            changed();
            return completed(true);
          }
        }

        if (el.contains(dragEl)) {
          return completed(false);
        }
      }

      return false;
    },
    _ignoreWhileAnimating: null,
    _offMoveEvents: function _offMoveEvents() {
      off(document, 'mousemove', this._onTouchMove);
      off(document, 'touchmove', this._onTouchMove);
      off(document, 'pointermove', this._onTouchMove);
      off(document, 'dragover', nearestEmptyInsertDetectEvent);
      off(document, 'mousemove', nearestEmptyInsertDetectEvent);
      off(document, 'touchmove', nearestEmptyInsertDetectEvent);
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._onDrop);
      off(ownerDocument, 'touchend', this._onDrop);
      off(ownerDocument, 'pointerup', this._onDrop);
      off(ownerDocument, 'touchcancel', this._onDrop);
      off(document, 'selectstart', this);
    },
    _onDrop: function _onDrop(
    /**Event*/
    evt) {
      var el = this.el,
          options = this.options; // Get the index of the dragged element within its parent

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      pluginEvent('drop', this, {
        evt: evt
      });
      parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      if (Sortable.eventCanceled) {
        this._nulling();

        return;
      }

      awaitingDragStarted = false;
      isCircumstantialInvert = false;
      pastFirstInvertThresh = false;
      clearInterval(this._loopId);
      clearTimeout(this._dragStartTimer);

      _cancelNextTick(this.cloneId);

      _cancelNextTick(this._dragStartId); // Unbind events


      if (this.nativeDraggable) {
        off(document, 'drop', this);
        off(el, 'dragstart', this._onDragStart);
      }

      this._offMoveEvents();

      this._offUpEvents();

      if (Safari) {
        css(document.body, 'user-select', '');
      }

      css(dragEl, 'transform', '');

      if (evt) {
        if (moved) {
          evt.cancelable && evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }

        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
          // Remove clone(s)
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }

        if (dragEl) {
          if (this.nativeDraggable) {
            off(dragEl, 'dragend', this);
          }

          _disableDraggable(dragEl);

          dragEl.style['will-change'] = ''; // Remove classes
          // ghostClass is added in dragStarted

          if (moved && !awaitingDragStarted) {
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
          }

          toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

          _dispatchEvent({
            sortable: this,
            name: 'unchoose',
            toEl: parentEl,
            newIndex: null,
            newDraggableIndex: null,
            originalEvent: evt
          });

          if (rootEl !== parentEl) {
            if (newIndex >= 0) {
              // Add event
              _dispatchEvent({
                rootEl: parentEl,
                name: 'add',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              }); // Remove event


              _dispatchEvent({
                sortable: this,
                name: 'remove',
                toEl: parentEl,
                originalEvent: evt
              }); // drag from one list and drop into another


              _dispatchEvent({
                rootEl: parentEl,
                name: 'sort',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }

            putSortable && putSortable.save();
          } else {
            if (newIndex !== oldIndex) {
              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent({
                  sortable: this,
                  name: 'update',
                  toEl: parentEl,
                  originalEvent: evt
                });

                _dispatchEvent({
                  sortable: this,
                  name: 'sort',
                  toEl: parentEl,
                  originalEvent: evt
                });
              }
            }
          }

          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
              newDraggableIndex = oldDraggableIndex;
            }

            _dispatchEvent({
              sortable: this,
              name: 'end',
              toEl: parentEl,
              originalEvent: evt
            }); // Save sorting


            this.save();
          }
        }
      }

      this._nulling();
    },
    _nulling: function _nulling() {
      pluginEvent('nulling', this);
      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = lastDx = lastDy = 0;
    },
    handleEvent: function handleEvent(
    /**Event*/
    evt) {
      switch (evt.type) {
        case 'drop':
        case 'dragend':
          this._onDrop(evt);

          break;

        case 'dragenter':
        case 'dragover':
          if (dragEl) {
            this._onDragOver(evt);

            _globalDragOver(evt);
          }

          break;

        case 'selectstart':
          evt.preventDefault();
          break;
      }
    },

    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
          el,
          children = this.el.children,
          i = 0,
          n = children.length,
          options = this.options;

      for (; i < n; i++) {
        el = children[i];

        if (closest(el, options.draggable, this.el, false)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }

      return order;
    },

    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order, useAnimation) {
      var items = {},
          rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];

        if (closest(el, this.options.draggable, rootEl, false)) {
          items[id] = el;
        }
      }, this);
      useAnimation && this.captureAnimationState();
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
      useAnimation && this.animateAll();
    },

    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set && store.set(this);
    },

    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest$1(el, selector) {
      return closest(el, selector || this.options.draggable, this.el, false);
    },

    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;

      if (value === void 0) {
        return options[name];
      } else {
        var modifiedValue = PluginManager.modifyOption(this, name, value);

        if (typeof modifiedValue !== 'undefined') {
          options[name] = modifiedValue;
        } else {
          options[name] = value;
        }

        if (name === 'group') {
          _prepareGroup(options);
        }
      }
    },

    /**
     * Destroy
     */
    destroy: function destroy() {
      pluginEvent('destroy', this);
      var el = this.el;
      el[expando] = null;
      off(el, 'mousedown', this._onTapStart);
      off(el, 'touchstart', this._onTapStart);
      off(el, 'pointerdown', this._onTapStart);

      if (this.nativeDraggable) {
        off(el, 'dragover', this);
        off(el, 'dragenter', this);
      } // Remove draggable attributes


      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
        el.removeAttribute('draggable');
      });

      this._onDrop();

      this._disableDelayedDragEvents();

      sortables.splice(sortables.indexOf(this.el), 1);
      this.el = el = null;
    },
    _hideClone: function _hideClone() {
      if (!cloneHidden) {
        pluginEvent('hideClone', this);
        if (Sortable.eventCanceled) return;
        css(cloneEl, 'display', 'none');

        if (this.options.removeCloneOnHide && cloneEl.parentNode) {
          cloneEl.parentNode.removeChild(cloneEl);
        }

        cloneHidden = true;
      }
    },
    _showClone: function _showClone(putSortable) {
      if (putSortable.lastPutMode !== 'clone') {
        this._hideClone();

        return;
      }

      if (cloneHidden) {
        pluginEvent('showClone', this);
        if (Sortable.eventCanceled) return; // show clone at dragEl or original position

        if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, dragEl);
        } else if (nextEl) {
          rootEl.insertBefore(cloneEl, nextEl);
        } else {
          rootEl.appendChild(cloneEl);
        }

        if (this.options.group.revertClone) {
          this.animate(dragEl, cloneEl);
        }

        css(cloneEl, 'display', '');
        cloneHidden = false;
      }
    }
  };

  function _globalDragOver(
  /**Event*/
  evt) {
    if (evt.dataTransfer) {
      evt.dataTransfer.dropEffect = 'move';
    }

    evt.cancelable && evt.preventDefault();
  }

  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
    var evt,
        sortable = fromEl[expando],
        onMoveFn = sortable.options.onMove,
        retVal; // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent('move', {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent('move', true, true);
    }

    evt.to = toEl;
    evt.from = fromEl;
    evt.dragged = dragEl;
    evt.draggedRect = dragRect;
    evt.related = targetEl || toEl;
    evt.relatedRect = targetRect || getRect(toEl);
    evt.willInsertAfter = willInsertAfter;
    evt.originalEvent = originalEvent;
    fromEl.dispatchEvent(evt);

    if (onMoveFn) {
      retVal = onMoveFn.call(sortable, evt, originalEvent);
    }

    return retVal;
  }

  function _disableDraggable(el) {
    el.draggable = false;
  }

  function _unsilent() {
    _silent = false;
  }

  function _ghostIsFirst(evt, vertical, sortable) {
    var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
    var spacer = 10;
    return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
  }

  function _ghostIsLast(evt, vertical, sortable) {
    var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
    var spacer = 10;
    return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
  }

  function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
    var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
        targetLength = vertical ? targetRect.height : targetRect.width,
        targetS1 = vertical ? targetRect.top : targetRect.left,
        targetS2 = vertical ? targetRect.bottom : targetRect.right,
        invert = false;

    if (!invertSwap) {
      // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
      if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
        // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
        // check if past first invert threshold on side opposite of lastDirection
        if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
          // past first invert threshold, do not restrict inverted threshold to dragEl shadow
          pastFirstInvertThresh = true;
        }

        if (!pastFirstInvertThresh) {
          // dragEl shadow (target move distance shadow)
          if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
          : mouseOnAxis > targetS2 - targetMoveDistance) {
            return -lastDirection;
          }
        } else {
          invert = true;
        }
      } else {
        // Regular
        if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
          return _getInsertDirection(target);
        }
      }
    }

    invert = invert || invertSwap;

    if (invert) {
      // Invert of regular
      if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
        return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
      }
    }

    return 0;
  }
  /**
   * Gets the direction dragEl must be swapped relative to target in order to make it
   * seem that dragEl has been "inserted" into that element's position
   * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
   * @return {Number}                   Direction dragEl must be swapped
   */


  function _getInsertDirection(target) {
    if (index(dragEl) < index(target)) {
      return 1;
    } else {
      return -1;
    }
  }
  /**
   * Generate id
   * @param   {HTMLElement} el
   * @returns {String}
   * @private
   */


  function _generateId(el) {
    var str = el.tagName + el.className + el.src + el.href + el.textContent,
        i = str.length,
        sum = 0;

    while (i--) {
      sum += str.charCodeAt(i);
    }

    return sum.toString(36);
  }

  function _saveInputCheckedState(root) {
    savedInputChecked.length = 0;
    var inputs = root.getElementsByTagName('input');
    var idx = inputs.length;

    while (idx--) {
      var el = inputs[idx];
      el.checked && savedInputChecked.push(el);
    }
  }

  function _nextTick(fn) {
    return setTimeout(fn, 0);
  }

  function _cancelNextTick(id) {
    return clearTimeout(id);
  } // Fixed #973:


  if (documentExists) {
    on(document, 'touchmove', function (evt) {
      if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
        evt.preventDefault();
      }
    });
  } // Export utils


  Sortable.utils = {
    on: on,
    off: off,
    css: css,
    find: find,
    is: function is(el, selector) {
      return !!closest(el, selector, el, false);
    },
    extend: extend,
    throttle: throttle,
    closest: closest,
    toggleClass: toggleClass,
    clone: clone,
    index: index,
    nextTick: _nextTick,
    cancelNextTick: _cancelNextTick,
    detectDirection: _detectDirection,
    getChild: getChild
  };
  /**
   * Get the Sortable instance of an element
   * @param  {HTMLElement} element The element
   * @return {Sortable|undefined}         The instance of Sortable
   */

  Sortable.get = function (element) {
    return element[expando];
  };
  /**
   * Mount a plugin to Sortable
   * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
   */


  Sortable.mount = function () {
    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }

    if (plugins[0].constructor === Array) plugins = plugins[0];
    plugins.forEach(function (plugin) {
      if (!plugin.prototype || !plugin.prototype.constructor) {
        throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
      }

      if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
      PluginManager.mount(plugin);
    });
  };
  /**
   * Create sortable instance
   * @param {HTMLElement}  el
   * @param {Object}      [options]
   */


  Sortable.create = function (el, options) {
    return new Sortable(el, options);
  }; // Export


  Sortable.version = version;
  var autoScrolls = [],
      scrollEl,
      scrollRootEl,
      scrolling = false,
      lastAutoScrollX,
      lastAutoScrollY,
      touchEvt$1,
      pointerElemChangedInterval;

  function AutoScrollPlugin() {
    function AutoScroll() {
      this.defaults = {
        scroll: true,
        forceAutoScrollFallback: false,
        scrollSensitivity: 30,
        scrollSpeed: 10,
        bubbleScroll: true
      }; // Bind all private methods

      for (var fn in this) {
        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
          this[fn] = this[fn].bind(this);
        }
      }
    }

    AutoScroll.prototype = {
      dragStarted: function dragStarted(_ref) {
        var originalEvent = _ref.originalEvent;

        if (this.sortable.nativeDraggable) {
          on(document, 'dragover', this._handleAutoScroll);
        } else {
          if (this.options.supportPointer) {
            on(document, 'pointermove', this._handleFallbackAutoScroll);
          } else if (originalEvent.touches) {
            on(document, 'touchmove', this._handleFallbackAutoScroll);
          } else {
            on(document, 'mousemove', this._handleFallbackAutoScroll);
          }
        }
      },
      dragOverCompleted: function dragOverCompleted(_ref2) {
        var originalEvent = _ref2.originalEvent; // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)

        if (!this.options.dragOverBubble && !originalEvent.rootEl) {
          this._handleAutoScroll(originalEvent);
        }
      },
      drop: function drop() {
        if (this.sortable.nativeDraggable) {
          off(document, 'dragover', this._handleAutoScroll);
        } else {
          off(document, 'pointermove', this._handleFallbackAutoScroll);
          off(document, 'touchmove', this._handleFallbackAutoScroll);
          off(document, 'mousemove', this._handleFallbackAutoScroll);
        }

        clearPointerElemChangedInterval();
        clearAutoScrolls();
        cancelThrottle();
      },
      nulling: function nulling() {
        touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
        autoScrolls.length = 0;
      },
      _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
        this._handleAutoScroll(evt, true);
      },
      _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
        var _this = this;

        var x = (evt.touches ? evt.touches[0] : evt).clientX,
            y = (evt.touches ? evt.touches[0] : evt).clientY,
            elem = document.elementFromPoint(x, y);
        touchEvt$1 = evt; // IE does not seem to have native autoscroll,
        // Edge's autoscroll seems too conditional,
        // MACOS Safari does not have autoscroll,
        // Firefox and Chrome are good

        if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
          autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

          var ogElemScroller = getParentAutoScrollElement(elem, true);

          if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
            pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

            pointerElemChangedInterval = setInterval(function () {
              var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

              if (newElem !== ogElemScroller) {
                ogElemScroller = newElem;
                clearAutoScrolls();
              }

              autoScroll(evt, _this.options, newElem, fallback);
            }, 10);
            lastAutoScrollX = x;
            lastAutoScrollY = y;
          }
        } else {
          // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
          if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
            clearAutoScrolls();
            return;
          }

          autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
        }
      }
    };
    return _extends(AutoScroll, {
      pluginName: 'scroll',
      initializeByDefault: true
    });
  }

  function clearAutoScrolls() {
    autoScrolls.forEach(function (autoScroll) {
      clearInterval(autoScroll.pid);
    });
    autoScrolls = [];
  }

  function clearPointerElemChangedInterval() {
    clearInterval(pointerElemChangedInterval);
  }

  var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    if (!options.scroll) return;
    var x = (evt.touches ? evt.touches[0] : evt).clientX,
        y = (evt.touches ? evt.touches[0] : evt).clientY,
        sens = options.scrollSensitivity,
        speed = options.scrollSpeed,
        winScroller = getWindowScrollingElement();
    var scrollThisInstance = false,
        scrollCustomFn; // New scroll root, set scrollEl

    if (scrollRootEl !== rootEl) {
      scrollRootEl = rootEl;
      clearAutoScrolls();
      scrollEl = options.scroll;
      scrollCustomFn = options.scrollFn;

      if (scrollEl === true) {
        scrollEl = getParentAutoScrollElement(rootEl, true);
      }
    }

    var layersOut = 0;
    var currentParent = scrollEl;

    do {
      var el = currentParent,
          rect = getRect(el),
          top = rect.top,
          bottom = rect.bottom,
          left = rect.left,
          right = rect.right,
          width = rect.width,
          height = rect.height,
          canScrollX = void 0,
          canScrollY = void 0,
          scrollWidth = el.scrollWidth,
          scrollHeight = el.scrollHeight,
          elCSS = css(el),
          scrollPosX = el.scrollLeft,
          scrollPosY = el.scrollTop;

      if (el === winScroller) {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
      } else {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
      }

      var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
      var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);

      if (!autoScrolls[layersOut]) {
        for (var i = 0; i <= layersOut; i++) {
          if (!autoScrolls[i]) {
            autoScrolls[i] = {};
          }
        }
      }

      if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
        autoScrolls[layersOut].el = el;
        autoScrolls[layersOut].vx = vx;
        autoScrolls[layersOut].vy = vy;
        clearInterval(autoScrolls[layersOut].pid);

        if (vx != 0 || vy != 0) {
          scrollThisInstance = true;
          /* jshint loopfunc:true */

          autoScrolls[layersOut].pid = setInterval(function () {
            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
            if (isFallback && this.layer === 0) {
              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

            }

            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

            if (typeof scrollCustomFn === 'function') {
              if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
                return;
              }
            }

            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
          }.bind({
            layer: layersOut
          }), 24);
        }
      }

      layersOut++;
    } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

    scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
  }, 30);

  var drop = function drop(_ref) {
    var originalEvent = _ref.originalEvent,
        putSortable = _ref.putSortable,
        dragEl = _ref.dragEl,
        activeSortable = _ref.activeSortable,
        dispatchSortableEvent = _ref.dispatchSortableEvent,
        hideGhostForTarget = _ref.hideGhostForTarget,
        unhideGhostForTarget = _ref.unhideGhostForTarget;
    if (!originalEvent) return;
    var toSortable = putSortable || activeSortable;
    hideGhostForTarget();
    var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
    var target = document.elementFromPoint(touch.clientX, touch.clientY);
    unhideGhostForTarget();

    if (toSortable && !toSortable.el.contains(target)) {
      dispatchSortableEvent('spill');
      this.onSpill({
        dragEl: dragEl,
        putSortable: putSortable
      });
    }
  };

  function Revert() {}

  Revert.prototype = {
    startIndex: null,
    dragStart: function dragStart(_ref2) {
      var oldDraggableIndex = _ref2.oldDraggableIndex;
      this.startIndex = oldDraggableIndex;
    },
    onSpill: function onSpill(_ref3) {
      var dragEl = _ref3.dragEl,
          putSortable = _ref3.putSortable;
      this.sortable.captureAnimationState();

      if (putSortable) {
        putSortable.captureAnimationState();
      }

      var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);

      if (nextSibling) {
        this.sortable.el.insertBefore(dragEl, nextSibling);
      } else {
        this.sortable.el.appendChild(dragEl);
      }

      this.sortable.animateAll();

      if (putSortable) {
        putSortable.animateAll();
      }
    },
    drop: drop
  };

  _extends(Revert, {
    pluginName: 'revertOnSpill'
  });

  function Remove() {}

  Remove.prototype = {
    onSpill: function onSpill(_ref4) {
      var dragEl = _ref4.dragEl,
          putSortable = _ref4.putSortable;
      var parentSortable = putSortable || this.sortable;
      parentSortable.captureAnimationState();
      dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
      parentSortable.animateAll();
    },
    drop: drop
  };

  _extends(Remove, {
    pluginName: 'removeOnSpill'
  });

  Sortable.mount(new AutoScrollPlugin());
  Sortable.mount(Remove, Revert);

  function swapDragArrayElement(data, currentIndex, targetIndex) {
    var newData = _toConsumableArray(data);

    if (targetIndex - currentIndex > 0) {
      newData.splice(targetIndex + 1, 0, newData[currentIndex]);
      newData.splice(currentIndex, 1);
    } else {
      newData.splice(targetIndex, 0, newData[currentIndex]);
      newData.splice(currentIndex + 1, 1);
    }

    return newData;
  }

  function ownKeys$1v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1v(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useDragSort(props, primaryTableRef) {
    var sortOnRowDraggable = props.sortOnRowDraggable,
        dragSort = props.dragSort,
        data = props.data,
        onDragSort = props.onDragSort;

    var _useClassName = useClassName(),
        tableDraggableClasses = _useClassName.tableDraggableClasses,
        tableBaseClass = _useClassName.tableBaseClass,
        tableFullRowClasses = _useClassName.tableFullRowClasses;

    var _useState = React.useState(props.columns || []),
        _useState2 = _slicedToArray(_useState, 2),
        columns = _useState2[0],
        setDragSortColumns = _useState2[1];

    var dragCol = React.useMemo(function () {
      return columns.find(function (item) {
        return item.colKey === "drag";
      });
    }, [columns]);
    var isRowDraggable = React.useMemo(function () {
      return sortOnRowDraggable || dragSort === "row";
    }, [dragSort, sortOnRowDraggable]);
    var isRowHandlerDraggable = React.useMemo(function () {
      return ["row-handler", "row-handler-col"].includes(dragSort) && !!dragCol;
    }, [dragSort, dragCol]);
    var isColDraggable = React.useMemo(function () {
      return ["col", "row-handler-col"].includes(dragSort);
    }, [dragSort]);
    var lastRowList = React.useRef([]);
    var tData = React.useRef();
    var lastColList = React.useRef([]);
    var dragColumns = React.useRef([]);
    var originalColumns = React.useRef([]);

    if (props.sortOnRowDraggable) {
      log.warn("Table", "`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.");
    }

    React.useEffect(function () {
      lastRowList.current = data.map(function (item) {
        return String(get_1(item, props.rowKey));
      });
      tData.current = data;
    }, [data, props.rowKey]);
    React.useEffect(function () {
      lastColList.current = props.columns.map(function (t) {
        return t.colKey;
      });
      dragColumns.current = props.columns;
      originalColumns.current = props.columns;
    }, [props.columns]);

    var registerRowDragEvent = function registerRowDragEvent(element) {
      var _dragInstanceTmp2;

      if (!isRowHandlerDraggable && !isRowDraggable) return;
      var dragInstanceTmp = null;
      var dragContainer = element === null || element === void 0 ? void 0 : element.querySelector("tbody");

      if (!dragContainer) {
        log.error("Table", "tbody does not exist.");
        return null;
      }

      var baseOptions = _objectSpread$1v(_objectSpread$1v({
        animation: 150
      }, props.dragSortOptions), {}, {
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        filter: ".".concat(tableFullRowClasses.base),
        onMove: function onMove(evt) {
          return !hasClass$1(evt.related, tableFullRowClasses.base);
        },
        onEnd: function onEnd(evt) {
          var _dragInstanceTmp;

          var currentIndex = evt.oldIndex,
              targetIndex = evt.newIndex;
          (_dragInstanceTmp = dragInstanceTmp) === null || _dragInstanceTmp === void 0 ? void 0 : _dragInstanceTmp.sort(_toConsumableArray(lastRowList.current));

          if (props.firstFullRow) {
            currentIndex -= 1;
            targetIndex -= 1;
          }

          var params = {
            currentIndex: currentIndex,
            current: tData.current[currentIndex],
            targetIndex: targetIndex,
            target: tData.current[targetIndex],
            data: tData.current,
            newData: swapDragArrayElement(_toConsumableArray(tData.current), currentIndex, targetIndex),
            e: evt,
            sort: "row"
          };
          params.currentData = params.newData;
          onDragSort === null || onDragSort === void 0 ? void 0 : onDragSort(params);
        }
      });

      if (isRowDraggable) {
        dragInstanceTmp = new Sortable(dragContainer, _objectSpread$1v({}, baseOptions));
      } else if (isRowHandlerDraggable) {
        dragInstanceTmp = new Sortable(dragContainer, _objectSpread$1v(_objectSpread$1v({}, baseOptions), {}, {
          handle: ".".concat(tableDraggableClasses.handle)
        }));
      }

      lastRowList.current = (_dragInstanceTmp2 = dragInstanceTmp) === null || _dragInstanceTmp2 === void 0 ? void 0 : _dragInstanceTmp2.toArray();
    };

    var registerColDragEvent = function registerColDragEvent(tableElement) {
      var _dragInstanceTmp4;

      if (!isColDraggable || !tableElement) return;
      var dragInstanceTmp = null;

      var options = _objectSpread$1v(_objectSpread$1v({
        animation: 150
      }, props.dragSortOptions), {}, {
        dataIdAttr: "data-colkey",
        direction: "vertical",
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        handle: ".".concat(tableBaseClass.thCellInner),
        onEnd: function onEnd(evt) {
          var _dragInstanceTmp3;

          (_dragInstanceTmp3 = dragInstanceTmp) === null || _dragInstanceTmp3 === void 0 ? void 0 : _dragInstanceTmp3.sort(_toConsumableArray(lastColList.current));
          var currentIndex = evt.oldIndex,
              targetIndex = evt.newIndex;
          var current = dragColumns.current[currentIndex];
          var target = dragColumns.current[targetIndex];

          if (!current || !current.colKey) {
            log.error("Table", "colKey is missing in ".concat(JSON.stringify(current)));
          }

          if (!target || !target.colKey) {
            log.error("Table", "colKey is missing in ".concat(JSON.stringify(target)));
          }

          currentIndex = originalColumns.current.findIndex(function (t) {
            return t.colKey === current.colKey;
          });
          targetIndex = originalColumns.current.findIndex(function (t) {
            return t.colKey === target.colKey;
          });
          var params = {
            data: dragColumns.current,
            currentIndex: currentIndex,
            current: current,
            targetIndex: targetIndex,
            target: target,
            newData: swapDragArrayElement(_toConsumableArray(originalColumns.current), currentIndex, targetIndex),
            e: evt,
            sort: "col"
          };
          params.currentData = params.newData;
          onDragSort === null || onDragSort === void 0 ? void 0 : onDragSort(params);
        }
      });

      var container = tableElement.querySelector("thead > tr");
      dragInstanceTmp = new Sortable(container, options);
      lastColList.current = (_dragInstanceTmp4 = dragInstanceTmp) === null || _dragInstanceTmp4 === void 0 ? void 0 : _dragInstanceTmp4.toArray();
    };

    React.useEffect(function () {
      var _primaryTableRef$curr, _primaryTableRef$curr2;

      if (!primaryTableRef || !primaryTableRef.current) return;
      registerRowDragEvent((_primaryTableRef$curr = primaryTableRef.current) === null || _primaryTableRef$curr === void 0 ? void 0 : _primaryTableRef$curr.tableElement);
      registerColDragEvent((_primaryTableRef$curr2 = primaryTableRef.current) === null || _primaryTableRef$curr2 === void 0 ? void 0 : _primaryTableRef$curr2.tableHtmlElement);
      var timer = setTimeout(function () {
        var _primaryTableRef$curr3;

        if ((_primaryTableRef$curr3 = primaryTableRef.current) !== null && _primaryTableRef$curr3 !== void 0 && _primaryTableRef$curr3.affixHeaderElement) {
          registerColDragEvent(primaryTableRef.current.affixHeaderElement);
        }

        clearTimeout(timer);
      });
    }, [primaryTableRef, columns, dragSort]);
    return {
      isRowDraggable: isRowDraggable,
      isRowHandlerDraggable: isRowHandlerDraggable,
      isColDraggable: isColDraggable,
      setDragSortColumns: setDragSortColumns
    };
  }

  function useAsyncLoading(props) {
    var _ref;

    var _useLocaleReceiver = useLocaleReceiver("table"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
        local = _useLocaleReceiver2[0];

    var _useClassName = useClassName(),
        isLoadingClass = _useClassName.isLoadingClass,
        isLoadMoreClass = _useClassName.isLoadMoreClass,
        asyncLoadingClass = _useClassName.asyncLoadingClass;

    var classes = [asyncLoadingClass, (_ref = {}, _defineProperty$3(_ref, isLoadingClass, props.asyncLoading === "loading"), _defineProperty$3(_ref, isLoadMoreClass, props.asyncLoading === "load-more"), _ref)];

    function onLoadClick() {
      var _props$onAsyncLoading;

      if (typeof props.asyncLoading !== "string") return;
      var status = props.asyncLoading === "loading" ? "loading" : "load-more";
      (_props$onAsyncLoading = props.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 ? void 0 : _props$onAsyncLoading.call(props, {
        status: status
      });
    }

    function renderAsyncLoading() {
      var asyncLoadingNode = props.asyncLoading;

      if (isString_1(asyncLoadingNode)) {
        var asyncLoading = props.asyncLoading;
        var loadingText = {
          "load-more": local.loadingMoreText,
          loading: local.loadingText
        }[String(asyncLoading)];
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: classNames$1(classes),
          onClick: onLoadClick
        }, /* @__PURE__ */React__default["default"].createElement(Loading, {
          loading: true,
          size: "small",
          text: loadingText,
          indicator: asyncLoading === "loading"
        }));
      }

      if (asyncLoadingNode) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: classNames$1(classes),
          onClick: onLoadClick
        }, asyncLoadingNode);
      }

      return null;
    }

    return {
      renderAsyncLoading: renderAsyncLoading
    };
  }

  var baseSet = _baseSet;
  /**
   * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
   * it's created. Arrays are created for missing index properties while objects
   * are created for all other missing properties. Use `_.setWith` to customize
   * `path` creation.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.set(object, 'a[0].b.c', 4);
   * console.log(object.a[0].b.c);
   * // => 4
   *
   * _.set(object, ['x', '0', 'y', 'z'], 5);
   * console.log(object.x[0].y.z);
   * // => 5
   */

  function set(object, path, value) {
    return object == null ? object : baseSet(object, path, value);
  }

  var set_1 = set;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var runtime = {exports: {}};

  (function (module) {
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && _typeof$1(value) === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      define(Gp, iteratorSymbol, function () {
        return this;
      });
      define(Gp, "toString", function () {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if ((typeof globalThis === "undefined" ? "undefined" : _typeof$1(globalThis)) === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  })(runtime);

  var regenerator = runtime.exports;

  var isDate$1 = {exports: {}};

  var merge = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = merge;

    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : undefined;

      for (var key in defaults) {
        if (typeof obj[key] === 'undefined') {
          obj[key] = defaults[key];
        }
      }

      return obj;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(merge, merge.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isDate;

    var _merge = _interopRequireDefault(merge.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it;

      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e2) {
              throw _e2;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = o[Symbol.iterator]();
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e3) {
          didErr = true;
          err = _e3;
        },
        f: function f() {
          try {
            if (!normalCompletion && it["return"] != null) it["return"]();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    var default_date_options = {
      format: 'YYYY/MM/DD',
      delimiters: ['/', '-'],
      strictMode: false
    };

    function isValidFormat(format) {
      return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
    }

    function zip(date, format) {
      var zippedArr = [],
          len = Math.min(date.length, format.length);

      for (var i = 0; i < len; i++) {
        zippedArr.push([date[i], format[i]]);
      }

      return zippedArr;
    }

    function isDate(input, options) {
      if (typeof options === 'string') {
        // Allow backward compatbility for old format isDate(input [, format])
        options = (0, _merge["default"])({
          format: options
        }, default_date_options);
      } else {
        options = (0, _merge["default"])(options, default_date_options);
      }

      if (typeof input === 'string' && isValidFormat(options.format)) {
        var formatDelimiter = options.delimiters.find(function (delimiter) {
          return options.format.indexOf(delimiter) !== -1;
        });
        var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {
          return input.indexOf(delimiter) !== -1;
        });
        var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
        var dateObj = {};

        var _iterator = _createForOfIteratorHelper(dateAndFormat),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
                dateWord = _step$value[0],
                formatWord = _step$value[1];

            if (dateWord.length !== formatWord.length) {
              return false;
            }

            dateObj[formatWord.charAt(0)] = dateWord;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
      }

      if (!options.strictMode) {
        return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);
      }

      return false;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isDate$1, isDate$1.exports);

  var isDate = /*@__PURE__*/getDefaultExportFromCjs(isDate$1.exports);

  var isEmail$1 = {exports: {}};

  var assertString = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = assertString;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function assertString(input) {
      var isString = typeof input === 'string' || input instanceof String;

      if (!isString) {
        var invalidType = _typeof(input);

        if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;
        throw new TypeError("Expected a string but received a ".concat(invalidType));
      }
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(assertString, assertString.exports);

  var isByteLength = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isByteLength;

    var _assertString = _interopRequireDefault(assertString.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }
    /* eslint-disable prefer-rest-params */


    function isByteLength(str, options) {
      (0, _assertString["default"])(str);
      var min;
      var max;

      if (_typeof(options) === 'object') {
        min = options.min || 0;
        max = options.max;
      } else {
        // backwards compatibility: isByteLength(str, min [, max])
        min = arguments[1];
        max = arguments[2];
      }

      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === 'undefined' || len <= max);
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isByteLength, isByteLength.exports);

  var isFQDN = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isFQDN;

    var _assertString = _interopRequireDefault(assertString.exports);

    var _merge = _interopRequireDefault(merge.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false
    };

    function isFQDN(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_fqdn_options);
      /* Remove the optional trailing dot before checking validity */

      if (options.allow_trailing_dot && str[str.length - 1] === '.') {
        str = str.substring(0, str.length - 1);
      }
      /* Remove the optional wildcard before checking validity */


      if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
        str = str.substring(2);
      }

      var parts = str.split('.');
      var tld = parts[parts.length - 1];

      if (options.require_tld) {
        // disallow fqdns without tld
        if (parts.length < 2) {
          return false;
        }

        if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        } // disallow spaces


        if (/\s/.test(tld)) {
          return false;
        }
      } // reject numeric TLDs


      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }

      return parts.every(function (part) {
        if (part.length > 63) {
          return false;
        }

        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        } // disallow full-width chars


        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        } // disallow parts starting or ending with hyphen


        if (/^-|-$/.test(part)) {
          return false;
        }

        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }

        return true;
      });
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isFQDN, isFQDN.exports);

  var isIP = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isIP;

    var _assertString = _interopRequireDefault(assertString.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    /**
    11.3.  Examples
    
       The following addresses
    
                 fe80::1234 (on the 1st link of the node)
                 ff02::5678 (on the 5th link of the node)
                 ff08::9abc (on the 10th organization of the node)
    
       would be represented as follows:
    
                 fe80::1234%1
                 ff02::5678%5
                 ff08::9abc%10
    
       (Here we assume a natural translation from a zone index to the
       <zone_id> part, where the Nth zone of any scope is translated into
       "N".)
    
       If we use interface names as <zone_id>, those addresses could also be
       represented as follows:
    
                fe80::1234%ne0
                ff02::5678%pvc1.3
                ff08::9abc%interface10
    
       where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
       to the 5th link, and "interface10" belongs to the 10th organization.
     * * */


    var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
    var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z-.:]{1,})?$');

    function isIP(str) {
      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      (0, _assertString["default"])(str);
      version = String(version);

      if (!version) {
        return isIP(str, 4) || isIP(str, 6);
      }

      if (version === '4') {
        if (!IPv4AddressRegExp.test(str)) {
          return false;
        }

        var parts = str.split('.').sort(function (a, b) {
          return a - b;
        });
        return parts[3] <= 255;
      }

      if (version === '6') {
        return !!IPv6AddressRegExp.test(str);
      }

      return false;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isIP, isIP.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isEmail;

    var _assertString = _interopRequireDefault(assertString.exports);

    var _merge = _interopRequireDefault(merge.exports);

    var _isByteLength = _interopRequireDefault(isByteLength.exports);

    var _isFQDN = _interopRequireDefault(isFQDN.exports);

    var _isIP = _interopRequireDefault(isIP.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var default_email_options = {
      allow_display_name: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: '',
      ignore_max_length: false,
      host_blacklist: []
    };
    /* eslint-disable max-len */

    /* eslint-disable no-control-regex */

    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    /* eslint-enable max-len */

    /* eslint-enable no-control-regex */

    /**
     * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2
     * @param {String} display_name
     */

    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, '$1'); // display name with only spaces is not valid

      if (!display_name_without_quotes.trim()) {
        return false;
      } // check whether display name contains illegal character


      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);

      if (contains_illegal) {
        // if contains illegal characters,
        // must to be enclosed in double-quotes, otherwise it's not a valid display name
        if (display_name_without_quotes === display_name) {
          return false;
        } // the quotes in display name must start with character symbol \


        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;

        if (!all_start_with_back_slash) {
          return false;
        }
      }

      return true;
    }

    function isEmail(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_email_options);

      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);

        if (display_email) {
          var display_name = display_email[1]; // Remove display name and angle brackets to get email address
          // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)

          str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name
          // because there may be a space between display name and email address
          // eg. myname <address@gmail.com>
          // the display name is `myname` instead of `myname `, so need to trim the last space

          if (display_name.endsWith(' ')) {
            display_name = display_name.substr(0, display_name.length - 1);
          }

          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }

      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }

      var parts = str.split('@');
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();

      if (options.host_blacklist.includes(lower_domain)) {
        return false;
      }

      var user = parts.join('@');

      if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
        /*
          Previously we removed dots for gmail addresses before validating.
          This was removed because it allows `multiple..dots@gmail.com`
          to be reported as valid, but it is not.
          Gmail only normalizes single dots, removing them from here is pointless,
          should be done in normalizeEmail
        */
        user = user.toLowerCase(); // Removing sub-address from username before gmail validation

        var username = user.split('+')[0]; // Dots are not included in gmail length restriction

        if (!(0, _isByteLength["default"])(username.replace(/\./g, ''), {
          min: 6,
          max: 30
        })) {
          return false;
        }

        var _user_parts = username.split('.');

        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }

      if (options.ignore_max_length === false && (!(0, _isByteLength["default"])(user, {
        max: 64
      }) || !(0, _isByteLength["default"])(domain, {
        max: 254
      }))) {
        return false;
      }

      if (!(0, _isFQDN["default"])(domain, {
        require_tld: options.require_tld
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }

        if (!(0, _isIP["default"])(domain)) {
          if (!domain.startsWith('[') || !domain.endsWith(']')) {
            return false;
          }

          var noBracketdomain = domain.substr(1, domain.length - 2);

          if (noBracketdomain.length === 0 || !(0, _isIP["default"])(noBracketdomain)) {
            return false;
          }
        }
      }

      if (user[0] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }

      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split('.');

      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }

      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), 'g')) !== -1) return false;
      }

      return true;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isEmail$1, isEmail$1.exports);

  var isEmail = /*@__PURE__*/getDefaultExportFromCjs(isEmail$1.exports);

  var isURL$1 = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isURL;

    var _assertString = _interopRequireDefault(assertString.exports);

    var _isFQDN = _interopRequireDefault(isFQDN.exports);

    var _isIP = _interopRequireDefault(isIP.exports);

    var _merge = _interopRequireDefault(merge.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    /*
    options for isURL method
    
    require_protocol - if set as true isURL will return false if protocol is not present in the URL
    require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option
    protocols - valid protocols can be modified with this option
    require_host - if set as false isURL will not check if host is present in the URL
    require_port - if set as true isURL will check if port is present in the URL
    allow_protocol_relative_urls - if set as true protocol relative URLs will be allowed
    validate_length - if set as false isURL will skip string length validation (IE maximum is 2083)
    
    */


    var default_url_options = {
      protocols: ['http', 'https', 'ftp'],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
    }

    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];

        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }

      return false;
    }

    function isURL(url, options) {
      (0, _assertString["default"])(url);

      if (!url || /[\s<>]/.test(url)) {
        return false;
      }

      if (url.indexOf('mailto:') === 0) {
        return false;
      }

      options = (0, _merge["default"])(options, default_url_options);

      if (options.validate_length && url.length >= 2083) {
        return false;
      }

      if (!options.allow_fragments && url.includes('#')) {
        return false;
      }

      if (!options.allow_query_components && (url.includes('?') || url.includes('&'))) {
        return false;
      }

      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split('#');
      url = split.shift();
      split = url.split('?');
      url = split.shift();
      split = url.split('://');

      if (split.length > 1) {
        protocol = split.shift().toLowerCase();

        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.substr(0, 2) === '//') {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }

        split[0] = url.substr(2);
      }

      url = split.join('://');

      if (url === '') {
        return false;
      }

      split = url.split('/');
      url = split.shift();

      if (url === '' && !options.require_host) {
        return true;
      }

      split = url.split('@');

      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }

        if (split[0] === '') {
          return false;
        }

        auth = split.shift();

        if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
          return false;
        }

        var _auth$split = auth.split(':'),
            _auth$split2 = _slicedToArray(_auth$split, 2),
            user = _auth$split2[0],
            password = _auth$split2[1];

        if (user === '' && password === '') {
          return false;
        }
      }

      hostname = split.join('@');
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);

      if (ipv6_match) {
        host = '';
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(':');
        host = split.shift();

        if (split.length) {
          port_str = split.join(':');
        }
      }

      if (port_str !== null && port_str.length > 0) {
        port = parseInt(port_str, 10);

        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }

      if (options.host_whitelist) {
        return checkHost(host, options.host_whitelist);
      }

      if (!(0, _isIP["default"])(host) && !(0, _isFQDN["default"])(host, options) && (!ipv6 || !(0, _isIP["default"])(ipv6, 6))) {
        return false;
      }

      host = host || ipv6;

      if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
        return false;
      }

      return true;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isURL$1, isURL$1.exports);

  var isURL = /*@__PURE__*/getDefaultExportFromCjs(isURL$1.exports);

  function ownKeys$1u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1u(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function isValueEmpty(val) {
    var type = Object.prototype.toString.call(val);
    var typeMap = {
      Date: "[object Date]"
    };

    if (type === typeMap.Date) {
      return false;
    }

    return _typeof$1(val) === "object" ? isEmpty_1(val) : ["", void 0, null].includes(val);
  }

  var compareValue = function compareValue(val, num, isMax) {
    var compare = function compare(a, b) {
      return isMax ? a <= b : a >= b;
    };

    if (isNumber_1(val)) return compare(val, num);
    if (Array.isArray(val)) return compare(val.length, num);
    return compare(getCharacterLength(val), num);
  };

  var VALIDATE_MAP = {
    date: isDate,
    url: isURL,
    email: isEmail,
    required: function required(val) {
      return !isValueEmpty(val);
    },
    whitespace: function whitespace(val) {
      return !(/^\s+$/.test(val) || val === "");
    },
    "boolean": function boolean(val) {
      return typeof val === "boolean";
    },
    max: function max(val, num) {
      return compareValue(val, num, true);
    },
    min: function min(val, num) {
      return compareValue(val, num, false);
    },
    len: function len(val, num) {
      return getCharacterLength(val) === num;
    },
    number: function number(val) {
      return isNumber_1(val);
    },
    "enum": function _enum(val, strs) {
      return strs.includes(val);
    },
    idcard: function idcard(val) {
      return /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/i.test(val);
    },
    telnumber: function telnumber(val) {
      return /^1[3-9]\d{9}$/.test(val);
    },
    pattern: function pattern(val, regexp) {
      return regexp.test(val);
    },
    validator: function validator(val, validate2) {
      return validate2(val);
    }
  };
  function validateOneRule(_x, _x2) {
    return _validateOneRule.apply(this, arguments);
  }

  function _validateOneRule() {
    _validateOneRule = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(value, rule) {
      var validateResult, keys, vOptions, vValidateFun, i, key, validateRule;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              validateResult = {
                result: true
              };
              keys = Object.keys(rule);
              i = 0;

            case 3:
              if (!(i < keys.length)) {
                _context.next = 15;
                break;
              }

              key = keys[i];

              if (!(!rule.required && isValueEmpty(value) && !rule.validator)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return", validateResult);

            case 7:
              validateRule = VALIDATE_MAP[key];

              if (!(validateRule && rule[key])) {
                _context.next = 12;
                break;
              }

              vOptions = rule[key] === true ? void 0 : rule[key];
              vValidateFun = validateRule;
              return _context.abrupt("break", 15);

            case 12:
              i++;
              _context.next = 3;
              break;

            case 15:
              if (!vValidateFun) {
                _context.next = 23;
                break;
              }

              _context.next = 18;
              return vValidateFun(value, vOptions);

            case 18:
              validateResult = _context.sent;

              if (!(typeof validateResult === "boolean")) {
                _context.next = 21;
                break;
              }

              return _context.abrupt("return", _objectSpread$1u(_objectSpread$1u({}, rule), {}, {
                result: validateResult
              }));

            case 21:
              if (!(_typeof$1(validateResult) === "object")) {
                _context.next = 23;
                break;
              }

              return _context.abrupt("return", validateResult);

            case 23:
              return _context.abrupt("return", validateResult);

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _validateOneRule.apply(this, arguments);
  }

  function validate(_x3, _x4) {
    return _validate.apply(this, arguments);
  }

  function _validate() {
    _validate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(value, rules) {
      var all, r;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              all = rules.map(function (rule) {
                return validateOneRule(value, rule);
              });
              _context2.next = 3;
              return Promise.all(all);

            case 3:
              r = _context2.sent;
              return _context2.abrupt("return", r);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _validate.apply(this, arguments);
  }

  function ownKeys$1t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1t(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var EditableCell = function EditableCell(props) {
    var _props$col$edit, _col$edit3, _errorList$, _errorList$2;

    var row = props.row,
        col = props.col,
        rowIndex = props.rowIndex,
        colIndex = props.colIndex,
        errors = props.errors,
        editable = props.editable,
        tableBaseClass = props.tableBaseClass;

    var _useGlobalIcon = useGlobalIcon({
      Edit1Icon: Edit1Icon
    }),
        Edit1Icon$1 = _useGlobalIcon.Edit1Icon;

    var tableEditableCellRef = React.useRef(null);

    var _useState = React.useState(((_props$col$edit = props.col.edit) === null || _props$col$edit === void 0 ? void 0 : _props$col$edit.defaultEditable) || false),
        _useState2 = _slicedToArray(_useState, 2),
        isEdit = _useState2[0],
        setIsEdit = _useState2[1];

    var _useState3 = React.useState(),
        _useState4 = _slicedToArray(_useState3, 2),
        editValue = _useState4[0],
        setEditValue = _useState4[1];

    var _useState5 = React.useState([]),
        _useState6 = _slicedToArray(_useState5, 2),
        errorList = _useState6[0],
        setErrorList = _useState6[1];

    var getCurrentRow = function getCurrentRow(row2, colKey, value) {
      var newRow = _objectSpread$1t({}, row2);

      set_1(newRow, colKey, value);
      return newRow;
    };

    var currentRow = React.useMemo(function () {
      return getCurrentRow(row, col.colKey, editValue);
    }, [col.colKey, editValue, row]);
    var cellNode = React.useMemo(function () {
      var node = renderCell({
        row: currentRow,
        col: _objectSpread$1t(_objectSpread$1t({}, col), {}, {
          cell: props.oldCell
        }),
        rowIndex: props.rowIndex,
        colIndex: props.colIndex
      }, {
        cellEmptyContent: props.cellEmptyContent
      });
      return node;
    }, [col, currentRow, props.cellEmptyContent, props.colIndex, props.oldCell, props.rowIndex]);
    var componentProps = React.useMemo(function () {
      var _edit$abortEditOnEven;

      var edit = col.edit;
      if (!edit) return {};
      var editProps = isFunction_1(edit.props) ? edit.props({
        col: col,
        row: row,
        rowIndex: rowIndex,
        colIndex: colIndex,
        editedRow: currentRow
      }) : _objectSpread$1t({}, edit.props);
      delete editProps.onChange;
      delete editProps.value;
      (_edit$abortEditOnEven = edit.abortEditOnEvent) === null || _edit$abortEditOnEven === void 0 ? void 0 : _edit$abortEditOnEven.forEach(function (item) {
        delete editProps[item];
      });
      return editProps;
    }, [col, colIndex, currentRow, row, rowIndex]);
    var isAbortEditOnChange = React.useMemo(function () {
      var _edit$abortEditOnEven2;

      var edit = col.edit;
      if (!edit) return false;
      return Boolean((_edit$abortEditOnEven2 = edit.abortEditOnEvent) === null || _edit$abortEditOnEven2 === void 0 ? void 0 : _edit$abortEditOnEven2.includes("onChange"));
    }, [col]);

    var validateEdit = function validateEdit(trigger) {
      return new Promise(function (resolve) {
        var cellParams = {
          col: props.col,
          row: props.row,
          colIndex: props.colIndex,
          rowIndex: props.rowIndex
        };
        var params = {
          result: [_objectSpread$1t(_objectSpread$1t({}, cellParams), {}, {
            errorList: [],
            value: editValue
          })],
          trigger: trigger
        };
        var rules = isFunction_1(col.edit.rules) ? col.edit.rules(cellParams) : col.edit.rules;

        if (!col.edit || !rules || !rules.length) {
          var _props$onValidate;

          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, params);
          resolve(true);
          return;
        }

        validate(editValue, rules).then(function (result) {
          var _props$onValidate2;

          var list = result === null || result === void 0 ? void 0 : result.filter(function (t) {
            return !t.result;
          });
          params.result[0].errorList = list;
          (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 ? void 0 : _props$onValidate2.call(props, params);

          if (!list || !list.length) {
            resolve(true);
          } else {
            setErrorList(list);
            resolve(list);
          }
        });
      });
    };

    var isSame = function isSame(a, b) {
      if (_typeof$1(a) === "object" && _typeof$1(b) === "object") {
        return JSON.stringify(a) === JSON.stringify(b);
      }

      return a === b;
    };

    var updateAndSaveAbort = function updateAndSaveAbort(outsideAbortEvent) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      validateEdit("self").then(function (result) {
        if (result !== true) return;
        var oldValue = get_1(row, col.colKey);

        if (!isSame(args[0].value, oldValue)) {
          setEditValue(oldValue);
          outsideAbortEvent === null || outsideAbortEvent === void 0 ? void 0 : outsideAbortEvent.apply(void 0, args);
        }

        var timer = setTimeout(function () {
          setIsEdit(false);
          setErrorList([]);
          clearTimeout(timer);
        }, 0);
      });
    };

    var listeners = React.useMemo(function () {
      var _edit$abortEditOnEven3;

      var edit = col.edit;
      var isCellEditable = props.editable === void 0;
      if (!isEdit || !isCellEditable) return;
      if (!(edit !== null && edit !== void 0 && (_edit$abortEditOnEven3 = edit.abortEditOnEvent) !== null && _edit$abortEditOnEven3 !== void 0 && _edit$abortEditOnEven3.length)) return {};
      var tListeners = {};
      var outsideAbortEvent = edit === null || edit === void 0 ? void 0 : edit.onEdited;
      edit.abortEditOnEvent.forEach(function (itemEvent) {
        if (itemEvent === "onChange") return;

        tListeners[itemEvent] = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          updateAndSaveAbort.apply(void 0, [outsideAbortEvent, {
            value: editValue,
            trigger: itemEvent,
            newRowData: currentRow,
            rowIndex: props.rowIndex
          }].concat(args));
        };
      });
      return tListeners;
    }, [col, currentRow, isEdit, props.rowIndex]);

    var onEditChange = function onEditChange(val) {
      var _props$onChange, _props$onRuleChange;

      setEditValue(val);
      var params = {
        row: props.row,
        rowIndex: props.rowIndex,
        value: val,
        col: props.col,
        colIndex: props.colIndex,
        editedRow: _objectSpread$1t(_objectSpread$1t({}, props.row), {}, _defineProperty$3({}, props.col.colKey, val))
      };
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, params);
      (_props$onRuleChange = props.onRuleChange) === null || _props$onRuleChange === void 0 ? void 0 : _props$onRuleChange.call(props, params);
      var isCellEditable = props.editable === void 0;

      if (isCellEditable && isAbortEditOnChange) {
        var _col$edit;

        var outsideAbortEvent = (_col$edit = col.edit) === null || _col$edit === void 0 ? void 0 : _col$edit.onEdited;

        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }

        updateAndSaveAbort.apply(void 0, [outsideAbortEvent, {
          value: val,
          trigger: "onChange",
          newRowData: getCurrentRow(currentRow, col.colKey, val),
          rowIndex: props.rowIndex
        }].concat(args));
      }
    };

    var documentClickHandler = function documentClickHandler(e) {
      var _e$path, _tableEditableCellRef;

      if (!col.edit || !col.edit.component) return;
      if (!isEdit) return;
      if ((_e$path = e.path) !== null && _e$path !== void 0 && _e$path.includes(tableEditableCellRef === null || tableEditableCellRef === void 0 ? void 0 : (_tableEditableCellRef = tableEditableCellRef.current) === null || _tableEditableCellRef === void 0 ? void 0 : _tableEditableCellRef.currentElement)) return;
      var outsideAbortEvent = col.edit.onEdited;
      updateAndSaveAbort(outsideAbortEvent, {
        value: editValue,
        trigger: "document",
        newRowData: currentRow,
        rowIndex: props.rowIndex
      });
    };

    var cellValue = React.useMemo(function () {
      return get_1(row, col.colKey);
    }, [row, col.colKey]);
    React.useEffect(function () {
      var val = cellValue;

      if (_typeof$1(val) === "object" && val !== null) {
        val = val instanceof Array ? _toConsumableArray(val) : _objectSpread$1t({}, val);
      }

      setEditValue(val);
    }, [cellValue]);
    React.useEffect(function () {
      var isCellEditable = props.editable === void 0;
      if (!col.edit || !col.edit.component || !isCellEditable) return;

      if (isEdit) {
        document.addEventListener("click", documentClickHandler);
      } else {
        document.removeEventListener("click", documentClickHandler);
      }

      return function () {
        document.removeEventListener("click", documentClickHandler);
      };
    }, [col.edit, isEdit, editValue]);
    React.useEffect(function () {
      if (props.editable === false) {
        setEditValue(cellValue);
      }
    }, [cellValue, editable]);
    React.useEffect(function () {
      if (props.editable === true) {
        var _props$onRuleChange2;

        (_props$onRuleChange2 = props.onRuleChange) === null || _props$onRuleChange2 === void 0 ? void 0 : _props$onRuleChange2.call(props, {
          col: col,
          row: row,
          rowIndex: rowIndex,
          colIndex: colIndex,
          value: cellValue,
          editedRow: row
        });
      }
    }, [cellValue, col, colIndex, row, rowIndex]);
    React.useEffect(function () {
      setErrorList(errors);
    }, [errors]);

    if (props.readonly) {
      return cellNode || null;
    }

    if (props.editable === void 0 && !isEdit || editable === false) {
      var _col$edit2;

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(tableBaseClass.cellEditable),
        onClick: function onClick(e) {
          setIsEdit(true);
          e.stopPropagation();
        }
      }, cellNode, ((_col$edit2 = col.edit) === null || _col$edit2 === void 0 ? void 0 : _col$edit2.showEditIcon) !== false && /* @__PURE__ */React__default["default"].createElement(Edit1Icon$1, {
        size: "12px"
      }));
    }

    var Component = (_col$edit3 = col.edit) === null || _col$edit3 === void 0 ? void 0 : _col$edit3.component;

    if (!Component) {
      log.error("Table", "edit.component is required.");
      return null;
    }

    var errorMessage = errorList === null || errorList === void 0 ? void 0 : (_errorList$ = errorList[0]) === null || _errorList$ === void 0 ? void 0 : _errorList$.message;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: tableBaseClass.cellEditWrap,
      onClick: function onClick(e) {
        e.stopPropagation();
      }
    }, /* @__PURE__ */React__default["default"].createElement(Component, _objectSpread$1t(_objectSpread$1t(_objectSpread$1t({
      ref: tableEditableCellRef,
      status: errorMessage ? (errorList === null || errorList === void 0 ? void 0 : (_errorList$2 = errorList[0]) === null || _errorList$2 === void 0 ? void 0 : _errorList$2.type) || "error" : void 0,
      tips: errorMessage
    }, componentProps), listeners), {}, {
      value: editValue,
      onChange: onEditChange
    })));
  };

  EditableCell.displayName = "EditableCell";

  function ownKeys$1s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1s(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var cellRuleMap = /* @__PURE__ */new Map();
  function useEditableRow(props) {
    var editableRowKeys = props.editableRowKeys;

    var _useState = React.useState({}),
        _useState2 = _slicedToArray(_useState, 2),
        errorListMap = _useState2[0],
        setErrorListMap = _useState2[1];

    var editableKeysMap = React.useMemo(function () {
      return editableRowKeys && getEditableKeysMap(editableRowKeys, props.data, props.rowKey || "id");
    }, [editableRowKeys, props.data, props.rowKey]);

    var getErrorListMapByErrors = function getErrorListMapByErrors(errors) {
      var errorMap = {};
      errors.forEach(function (_ref) {
        var row = _ref.row,
            col = _ref.col,
            errorList = _ref.errorList;
        var rowValue = get_1(row, props.rowKey || "id");
        var key = [rowValue, col.colKey].join("__");

        if (errorList !== null && errorList !== void 0 && errorList.length) {
          errorMap[key] = errorList;
        } else {
          delete errorMap[key];
        }
      });
      return errorMap;
    };

    var validateOneRowData = function validateOneRowData(rowValue) {
      var rowRules = cellRuleMap.get(rowValue);
      if (!rowRules) return;
      var list = rowRules.map(function (item) {
        return new Promise(function (resolve) {
          var editedRow = item.editedRow,
              col = item.col;
          var rules = isFunction_1(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;

          if (!col.edit || !rules || !rules) {
            resolve(_objectSpread$1s(_objectSpread$1s({}, item), {}, {
              errorList: []
            }));
            return;
          }

          validate(editedRow[col.colKey], rules).then(function (r) {
            resolve(_objectSpread$1s(_objectSpread$1s({}, item), {}, {
              errorList: r.filter(function (t) {
                return !t.result;
              })
            }));
          });
        });
      });
      return new Promise(function (resolve, reject) {
        Promise.all(list).then(function (errors) {
          resolve({
            errors: errors.filter(function (t) {
              var _t$errorList;

              return (_t$errorList = t.errorList) === null || _t$errorList === void 0 ? void 0 : _t$errorList.length;
            }),
            errorMap: getErrorListMapByErrors(errors)
          });
        }, reject);
      });
    };

    var validateRowData = function validateRowData(rowValue) {
      return new Promise(function (resolve, reject) {
        validateOneRowData(rowValue).then(function (_ref2) {
          var _props$onRowValidate;

          var errors = _ref2.errors,
              errorMap = _ref2.errorMap;
          setErrorListMap(errorMap);
          var tTrigger = "parent";
          (_props$onRowValidate = props.onRowValidate) === null || _props$onRowValidate === void 0 ? void 0 : _props$onRowValidate.call(props, {
            trigger: tTrigger,
            result: errors
          });
          resolve({
            trigger: tTrigger,
            result: errors
          });
        }, reject);
      });
    };

    var validateTableData = function validateTableData() {
      var promiseList = [];
      var data = props.data || [];

      for (var i = 0, len = data.length; i < len; i++) {
        var rowValue = get_1(data[i], props.rowKey || "id");
        promiseList.push(validateOneRowData(rowValue));
      }

      return new Promise(function (resolve, reject) {
        Promise.all(promiseList).then(function (rList) {
          var _props$onValidate;

          var allErrorListMap = {};
          rList.forEach(function () {
            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
              errors: [],
              errorMap: {}
            },
                errorMap = _ref3.errorMap;

            errorMap && Object.assign(allErrorListMap, errorMap);
          });
          setErrorListMap(allErrorListMap);
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, {
            result: allErrorListMap
          });
          resolve({
            result: allErrorListMap
          });
        }, reject);
      });
    };

    var onRuleChange = function onRuleChange(context) {
      if (props.editableRowKeys) {
        var rowValue = get_1(context.row, props.rowKey || "id");
        var rules = cellRuleMap.get(rowValue);

        if (rules) {
          var index = rules.findIndex(function (t) {
            return t.col.colKey === context.col.colKey;
          });

          if (index === -1) {
            rules.push(context);
          } else {
            rules[index] = context;
          }

          cellRuleMap.set(rowValue, rules);
        } else {
          cellRuleMap.set(rowValue, [context]);
        }
      }
    };

    var clearValidateData = function clearValidateData() {
      setErrorListMap({});
    };

    return {
      errorListMap: errorListMap,
      editableKeysMap: editableKeysMap,
      validateRowData: validateRowData,
      validateTableData: validateTableData,
      clearValidateData: clearValidateData,
      onRuleChange: onRuleChange
    };
  }

  function ownKeys$1r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1r(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var PrimaryTable$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _primaryTableClasses;

    var columns = props.columns,
        columnController = props.columnController,
        editableRowKeys = props.editableRowKeys,
        style = props.style,
        className = props.className;
    var primaryTableRef = React.useRef(null);

    var _useClassName = useClassName(),
        tableDraggableClasses = _useClassName.tableDraggableClasses,
        tableBaseClass = _useClassName.tableBaseClass,
        tableSelectedClasses = _useClassName.tableSelectedClasses;

    var _useColumnController = useColumnController(props),
        tDisplayColumns = _useColumnController.tDisplayColumns,
        renderColumnController = _useColumnController.renderColumnController;

    var _useRowExpand = useRowExpand(props),
        showExpandedRow = _useRowExpand.showExpandedRow,
        showExpandIconColumn = _useRowExpand.showExpandIconColumn,
        getExpandColumn = _useRowExpand.getExpandColumn,
        renderExpandedRow = _useRowExpand.renderExpandedRow,
        onInnerExpandRowClick = _useRowExpand.onInnerExpandRowClick;

    var _useSorter = useSorter(props),
        renderSortIcon = _useSorter.renderSortIcon;

    var _useRowSelect = useRowSelect(props, tableSelectedClasses),
        formatToRowSelectColumn = _useRowSelect.formatToRowSelectColumn,
        selectedRowClassNames = _useRowSelect.selectedRowClassNames;

    var _useFilter = useFilter(props, primaryTableRef),
        hasEmptyCondition = _useFilter.hasEmptyCondition,
        isTableOverflowHidden = _useFilter.isTableOverflowHidden,
        renderFilterIcon = _useFilter.renderFilterIcon,
        renderFirstFilterRow = _useFilter.renderFirstFilterRow;

    var _useDragSort = useDragSort(props, primaryTableRef),
        isRowHandlerDraggable = _useDragSort.isRowHandlerDraggable,
        isRowDraggable = _useDragSort.isRowDraggable,
        isColDraggable = _useDragSort.isColDraggable,
        setDragSortColumns = _useDragSort.setDragSortColumns;

    var _useTableHeader = useTableHeader({
      columns: props.columns
    }),
        renderTitleWidthIcon = _useTableHeader.renderTitleWidthIcon;

    var _useAsyncLoading = useAsyncLoading(props),
        renderAsyncLoading = _useAsyncLoading.renderAsyncLoading;

    var primaryTableClasses = (_primaryTableClasses = {}, _defineProperty$3(_primaryTableClasses, tableDraggableClasses.colDraggable, isColDraggable), _defineProperty$3(_primaryTableClasses, tableDraggableClasses.rowHandlerDraggable, isRowHandlerDraggable), _defineProperty$3(_primaryTableClasses, tableDraggableClasses.rowDraggable, isRowDraggable), _defineProperty$3(_primaryTableClasses, tableBaseClass.overflowVisible, isTableOverflowHidden === false), _defineProperty$3(_primaryTableClasses, tableBaseClass.tableRowEdit, editableRowKeys), _primaryTableClasses);

    var _useEditableRow = useEditableRow(props),
        errorListMap = _useEditableRow.errorListMap,
        editableKeysMap = _useEditableRow.editableKeysMap,
        validateRowData = _useEditableRow.validateRowData,
        validateTableData = _useEditableRow.validateTableData,
        onRuleChange = _useEditableRow.onRuleChange,
        clearValidateData = _useEditableRow.clearValidateData;

    var tRowClassNames = function () {
      var tClassNames = [props.rowClassName, selectedRowClassNames];
      return tClassNames.filter(function (v) {
        return v;
      });
    }();

    var tRowAttributes = function () {
      var tAttributes = [props.rowAttributes];

      if (isRowHandlerDraggable || isRowDraggable) {
        tAttributes.push(function (_ref) {
          var row = _ref.row;
          return {
            "data-id": get_1(row, props.rowKey || "id")
          };
        });
      }

      return tAttributes.filter(function (v) {
        return v;
      });
    }();

    React.useImperativeHandle(ref, function () {
      return _objectSpread$1r({
        validateRowData: validateRowData,
        validateTableData: validateTableData,
        clearValidateData: clearValidateData
      }, primaryTableRef.current);
    });

    var getColumns = function getColumns(columns2) {
      var arr = [];

      var _loop = function _loop(i, len) {
        var _item$children, _item$edit, _item$children2, _item$children3;

        var item = _objectSpread$1r({}, columns2[i]);

        var isDisplayColumn = ((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length) || (tDisplayColumns === null || tDisplayColumns === void 0 ? void 0 : tDisplayColumns.includes(item.colKey));
        if (!isDisplayColumn && props.columnController && tDisplayColumns) return "continue";
        item = formatToRowSelectColumn(item);

        if (item.sorter || item.filter) {
          var titleContent = renderTitle(item, i);
          var _item = item,
              ellipsisTitle = _item.ellipsisTitle;

          item.title = function (p) {
            var _primaryTableRef$curr;

            var sortIcon = item.sorter ? renderSortIcon(p) : null;
            var filterIcon = item.filter ? renderFilterIcon(p) : null;
            var attach = (_primaryTableRef$curr = primaryTableRef.current) === null || _primaryTableRef$curr === void 0 ? void 0 : _primaryTableRef$curr.tableContentRef;
            return renderTitleWidthIcon([titleContent, sortIcon, filterIcon], p.col, p.colIndex, ellipsisTitle, attach);
          };

          item.ellipsisTitle = false;
        }

        if ((_item$edit = item.edit) !== null && _item$edit !== void 0 && _item$edit.component) {
          var oldCell = item.cell;

          item.cell = function (p) {
            var cellProps = _objectSpread$1r(_objectSpread$1r({}, p), {}, {
              oldCell: oldCell,
              tableBaseClass: tableBaseClass,
              cellEmptyContent: props.cellEmptyContent,
              onChange: props.onRowEdit,
              onValidate: props.onRowValidate,
              onRuleChange: onRuleChange
            });

            if (props.editableRowKeys) {
              var rowValue = get_1(p.row, props.rowKey || "id");
              cellProps.editable = editableKeysMap[rowValue] || false;
              var key = [rowValue, p.col.colKey].join("__");
              var errorList = errorListMap[key];
              errorList && (cellProps.errors = errorList);
            }

            if (props.editableCellState) {
              cellProps.readonly = !props.editableCellState(p);
            }

            return /* @__PURE__ */React__default["default"].createElement(EditableCell, _objectSpread$1r({}, cellProps));
          };
        }

        if ((_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
          item.children = getColumns(item.children);
        }

        if (!item.children || (_item$children3 = item.children) !== null && _item$children3 !== void 0 && _item$children3.length) {
          arr.push(item);
        }
      };

      for (var i = 0, len = columns2.length; i < len; i++) {
        var _ret = _loop(i);

        if (_ret === "continue") continue;
      }

      return arr;
    };

    var tColumns = function () {
      var cols = getColumns(columns);

      if (showExpandIconColumn) {
        cols.unshift(getExpandColumn());
      }

      return cols;
    }();

    var onInnerPageChange = function onInnerPageChange(pageInfo, newData) {
      var _props$onPageChange, _props$onChange;

      (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, pageInfo, newData);
      var changeParams = [{
        pagination: pageInfo
      }, {
        trigger: "pagination",
        currentData: newData
      }];
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call.apply(_props$onChange, [props].concat(changeParams));
    };

    function formatNode(api, renderInnerNode, condition, extra) {
      if (!condition) return props[api];
      var innerNode = renderInnerNode();
      var propsNode = props[api];
      if (innerNode && !propsNode) return innerNode;
      if (propsNode && !innerNode) return propsNode;

      if (innerNode && propsNode) {
        return extra !== null && extra !== void 0 && extra.reverse ? /* @__PURE__ */React__default["default"].createElement("div", null, innerNode, propsNode) : /* @__PURE__ */React__default["default"].createElement("div", null, propsNode, innerNode);
      }

      return null;
    }

    var isColumnController = !!(columnController && Object.keys(columnController).length);
    var placement = isColumnController ? columnController.placement || "top-right" : "";
    var isBottomController = isColumnController && (placement === null || placement === void 0 ? void 0 : placement.indexOf("bottom")) !== -1;
    var topContent = formatNode("topContent", renderColumnController, isColumnController && !isBottomController);
    var bottomContent = formatNode("bottomContent", renderColumnController, isBottomController, {
      reverse: true
    });
    var firstFullRow = formatNode("firstFullRow", renderFirstFilterRow, !hasEmptyCondition);
    var lastFullRow = formatNode("lastFullRow", renderAsyncLoading, !!props.asyncLoading);

    var baseTableProps = _objectSpread$1r(_objectSpread$1r({}, props), {}, {
      rowClassName: tRowClassNames,
      rowAttributes: tRowAttributes,
      columns: tColumns,
      topContent: topContent,
      bottomContent: bottomContent,
      firstFullRow: firstFullRow,
      lastFullRow: lastFullRow,
      onPageChange: onInnerPageChange,
      renderExpandedRow: showExpandedRow ? renderExpandedRow : void 0
    });

    if (props.expandOnRowClick) {
      baseTableProps.onRowClick = onInnerExpandRowClick;
    }

    return /* @__PURE__ */React__default["default"].createElement(BaseTable$1, _objectSpread$1r(_objectSpread$1r({
      ref: primaryTableRef
    }, baseTableProps), {}, {
      className: classNames$1(primaryTableClasses, className),
      style: style,
      onLeafColumnsChange: setDragSortColumns
    }));
  });
  PrimaryTable$1.displayName = "PrimaryTable";

  var baseClone = _baseClone;
  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG = 1,
      CLONE_SYMBOLS_FLAG = 4;
  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */

  function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
  }

  var cloneDeep_1 = cloneDeep;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function ownKeys$1q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {
    code: 1001,
    reason: "The same level of rows can not be swapped."
  };

  var TableTreeStore = /*#__PURE__*/function () {
    function TableTreeStore() {
      _classCallCheck(this, TableTreeStore);

      _defineProperty$3(this, "treeDataMap", /* @__PURE__ */new Map());

      this.treeDataMap = /* @__PURE__ */new Map();
    }

    _createClass(TableTreeStore, [{
      key: "initialTreeStore",
      value: function initialTreeStore(dataSource, columns, keys) {
        var _this$treeDataMap;

        (_this$treeDataMap = this.treeDataMap) === null || _this$treeDataMap === void 0 ? void 0 : _this$treeDataMap.clear();
        this.initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys);
      }
    }, {
      key: "getAllUniqueKeys",
      value: function getAllUniqueKeys(data, keys) {
        var arr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

        for (var i = 0, len = data.length; i < len; i++) {
          var item = data[i];
          arr.push(get_1(item, keys.rowKey));
          var children = get_1(item, keys.childrenKey);

          if (children !== null && children !== void 0 && children.length) {
            this.getAllUniqueKeys(children, keys, arr);
          }
        }

        return arr;
      }
    }, {
      key: "toggleExpandData",
      value: function toggleExpandData(p, dataSource, keys) {
        if (!p) {
          log.error("EnhancedTable", "the node you want to toggleExpand doest not exist in `data`");
          return dataSource;
        }

        var rowValue = get_1(p.row, keys.rowKey);

        if (rowValue === void 0) {
          log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
          return [];
        }

        var childrenNodes = get_1(p.row, keys.childrenKey);
        if (childrenNodes === true) return dataSource;
        var r = this.treeDataMap.get(rowValue);
        r.rowIndex = p.rowIndex;
        r.expanded = !r.expanded;
        this.treeDataMap.set(rowValue, r);
        return this.updateExpandRow(r, dataSource, keys);
      }
    }, {
      key: "updateExpandRow",
      value: function updateExpandRow(changeRow, dataSource, keys) {
        var row = changeRow.row,
            rowIndex = changeRow.rowIndex,
            expanded = changeRow.expanded;
        var treeDataMap = this.treeDataMap;
        var childrenNodes = get_1(row, keys.childrenKey);
        if (!row || !childrenNodes) return dataSource;

        if (expanded) {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          updateRowExpandLength(treeDataMap, row, childrenNodes.length, "expand", keys);
          dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));
        } else {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          var len = changeRow.expandChildrenLength || childrenNodes.length;
          updateRowExpandLength(treeDataMap, row, -1 * len, "fold", keys);
          dataSource.splice(rowIndex + 1, len);
        }

        updateRowIndex(treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: rowIndex + 1
        });
        return dataSource;
      }
    }, {
      key: "getData",
      value: function getData(key) {
        return this.treeDataMap.get(key);
      }
    }, {
      key: "updateData",
      value: function updateData(rowValue, newRowData, dataSource, keys) {
        var newRowValue = get_1(newRowData, keys.rowKey);
        var rowState = this.treeDataMap.get(rowValue);

        if (!rowState || rowState.rowIndex === -1) {
          updateRowData(dataSource, rowValue, newRowData, {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          return -1;
        }

        if (get_1(newRowData, keys.childrenKey) === true) {
          var oldChildren = get_1(rowState.row, keys.childrenKey);

          if (oldChildren !== null && oldChildren !== void 0 && oldChildren.length) {
            for (var i = 0, len = oldChildren.length; i < len; i++) {
              var rowValue2 = get_1(oldChildren[i], keys.rowKey);
              var state = this.treeDataMap.get(rowValue2);

              if (state) {
                this.treeDataMap["delete"](rowValue2);
              }
            }
          }
        }

        var currentRowIndex = rowState.rowIndex;
        rowState.row = newRowData;
        rowState.id = newRowValue;

        if (rowState.parent) {
          var siblings = get_1(rowState.parent.row, keys.childrenKey);
          var index = siblings.findIndex(function (item) {
            return get_1(item, keys.rowKey) === rowValue;
          });
          siblings[index] = newRowData;
        }

        this.treeDataMap.set(newRowValue, rowState);

        if (rowValue !== newRowValue) {
          this.treeDataMap["delete"](rowValue);
        }

        return currentRowIndex;
      }
    }, {
      key: "remove",
      value: function remove(key, dataSource, keys) {
        var r = this.treeDataMap.get(key);

        if (r && r.rowIndex >= 0) {
          var removeNumber = (r.expandChildrenLength || 0) + 1;
          dataSource.splice(r.rowIndex, removeNumber);

          if (r.parent) {
            var siblings = get_1(r.parent.row, keys.childrenKey);
            var index = siblings.findIndex(function (item) {
              return get_1(item, keys.rowKey) === key;
            });
            siblings.splice(index, 1);
            updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", keys);
          }

          this.treeDataMap["delete"](key);
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: r.rowIndex,
            rowKey: keys.rowKey,
            type: "remove"
          });
        } else {
          log.warn("EnhancedTable", "Do not remove this node, which is not appeared.");
        }

        return dataSource;
      }
    }, {
      key: "appendTo",
      value: function appendTo(rowValue, newData, dataSource, keys) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var children = get_1(state.row, keys.childrenKey);
        var isShowNewNode = state.expanded || !(children !== null && children !== void 0 && children.length);
        var tmpData = newData instanceof Array ? newData : [newData];
        var newChildrenData = [];
        var firstNewChildrenIndex = -1;

        for (var i = 0, len = tmpData.length; i < len; i++) {
          var oneData = tmpData[i];
          var newRowValue = get_1(oneData, keys.rowKey);
          var mapState = this.treeDataMap.get(newRowValue);

          if (!this.validateDataDoubleExist(mapState, newRowValue)) {
            log.warn("Table", "Duplicated Data `".concat(newRowValue, "` has been removed."));
          } else {
            var rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + (i + 1) : -1;

            if (i === 0) {
              firstNewChildrenIndex = rowIndex;
            }

            var newState = {
              id: newRowValue,
              row: oneData,
              rowIndex: rowIndex,
              level: state.level + 1,
              expanded: false,
              expandChildrenLength: 0,
              disabled: false,
              path: _toConsumableArray(state.path),
              parent: state
            };
            newState.path = newState.path.concat(newState);
            newChildrenData.push(oneData);
            this.treeDataMap.set(newRowValue, newState);
          }
        }

        if (!newChildrenData.length) return dataSource;

        if (children !== null && children !== void 0 && children.length) {
          state.row[keys.childrenKey] = state.row[keys.childrenKey].concat(newChildrenData);
        } else {
          state.row[keys.childrenKey] = newChildrenData;
          state.expanded = true;
        }

        if (isShowNewNode) {
          dataSource.splice.apply(dataSource, [firstNewChildrenIndex, 0].concat(newChildrenData));
          var newChildrenCount = newChildrenData.length || 1;
          updateRowExpandLength(this.treeDataMap, state.row, newChildrenCount, "insert", {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: firstNewChildrenIndex + newChildrenData.length - 1,
            rowKey: keys.rowKey,
            type: "add",
            count: 1
          });
        }

        return dataSource;
      }
    }, {
      key: "appendToRoot",
      value: function appendToRoot(newData, dataSource, keys) {
        var newDataSource = dataSource.concat(newData);
        var tmpNewData = newData instanceof Array ? newData : [newData];
        var dataSourceLen = dataSource.length;

        for (var i = 0, len = tmpNewData.length; i < len; i++) {
          var rowValue = get_1(tmpNewData[i], keys.rowKey);

          if (!rowValue) {
            log.error("Table", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            continue;
          }

          var state = {
            id: rowValue,
            row: tmpNewData[i],
            rowIndex: dataSourceLen + i,
            level: 0,
            expanded: false,
            expandChildrenLength: 0,
            disabled: false
          };
          state.path = [state];
          this.treeDataMap.set(rowValue, state);
        }

        return newDataSource;
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "after");
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "before");
      }
    }, {
      key: "insert",
      value: function insert(rowValue, newData, dataSource, keys, type) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var newRowValue = get_1(newData, keys.rowKey);
        var mapState = this.treeDataMap.get(newRowValue);
        if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;
        var rowIndex = type === "after" ? state.rowIndex + 1 : state.rowIndex;
        var newState = {
          id: newRowValue,
          row: newData,
          rowIndex: rowIndex,
          level: state.level,
          expanded: false,
          expandChildrenLength: 0,
          disabled: false,
          path: state.path.slice(0, -1),
          parent: state.parent
        };
        newState.path = newState.path.concat(newState);
        var dataIndex = type === "after" ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;
        dataSource.splice(dataIndex, 0, newData);
        var distance = type === "after" ? 1 : 0;

        if (state.parent) {
          var childrenIndex = state.parent.row[keys.childrenKey].findIndex(function (t) {
            return rowValue === get_1(t, keys.rowKey);
          });
          state.parent.row[keys.childrenKey].splice(childrenIndex + distance, 0, newData);
          updateRowExpandLength(this.treeDataMap, state.parent.row, 1, "insert", keys);
        }

        this.treeDataMap.set(newRowValue, newState);
        updateRowIndex(this.treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: state.rowIndex + 1,
          type: "add"
        });
        return dataSource;
      }
    }, {
      key: "swapData",
      value: function swapData(dataSource, params, keys) {
        var startIndex = params.currentIndex;
        var endIndex = params.targetIndex;
        if (startIndex === endIndex) return {
          dataSource: dataSource,
          result: true
        };
        var startRowValue = get_1(params.current, keys.rowKey);
        var endRowValue = get_1(params.target, keys.rowKey);
        var startState = this.treeDataMap.get(startRowValue);
        var endState = this.treeDataMap.get(endRowValue);

        if (startState.level !== endState.level) {
          return {
            dataSource: dataSource,
            result: false,
            code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,
            reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason
          };
        }

        var startLastIndex = startIndex + startState.expandChildrenLength + 1;
        var endLastIndex = endIndex + endState.expandChildrenLength + 1;
        var startRowList = dataSource.slice(startIndex, startLastIndex);
        var endRowList = dataSource.slice(endIndex, endLastIndex);

        if (startIndex > endIndex) {
          var middleRowList = dataSource.slice(endLastIndex, startIndex);
          var allSwapList = startRowList.concat(endRowList, middleRowList);
          dataSource.splice(endIndex, allSwapList.length);
          dataSource.splice.apply(dataSource, [endIndex, 0].concat(_toConsumableArray(allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: endIndex,
            maxRowIndex: startLastIndex
          });
        } else {
          var _middleRowList = dataSource.slice(startLastIndex, endIndex);

          var _allSwapList = _middleRowList.concat(endRowList, startRowList);

          dataSource.splice(startIndex, _allSwapList.length);
          dataSource.splice.apply(dataSource, [startIndex, 0].concat(_toConsumableArray(_allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: startIndex,
            maxRowIndex: endLastIndex
          });
        }

        if (startState.parent) {
          var children = startState.parent.row[keys.childrenKey];
          var count = 0;
          var targetIndex = -1;
          var currentIndex = -1;

          for (var i = 0, len = children.length; i < len; i++) {
            if (get_1(children[i], keys.rowKey) === startRowValue) {
              targetIndex = i;
              count += 1;
            }

            if (get_1(children[i], keys.rowKey) === endRowValue) {
              currentIndex = i;
              count += 1;
            }

            if (count >= 2) break;
          }

          children[targetIndex] = params.target;
          children[currentIndex] = params.current;
        }

        return {
          dataSource: dataSource,
          result: true
        };
      }
    }, {
      key: "expandAll",
      value: function expandAll(dataSource, keys) {
        var _this = this;

        this.expandAllRowIndex = 0;

        var expandLoop = function expandLoop(dataSource2, keys2) {
          var newData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var parentExpanded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          var parent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

          for (var i = 0, len = dataSource2.length; i < len; i++) {
            var item = dataSource2[i];
            var rowValue = get_1(item, keys2.rowKey);

            var state = _this.treeDataMap.get(rowValue);

            var children = get_1(item, keys2.childrenKey);
            var originalExpanded = state.expanded;
            state.rowIndex = _this.expandAllRowIndex;

            if (children !== true && children !== null && children !== void 0 && children.length) {
              state.expanded = true;
            }

            state.expandChildrenLength = (children === null || children === void 0 ? void 0 : children.length) || 0;
            _this.expandAllRowIndex += 1;

            if (!parentExpanded) {
              newData.push(item);
            }

            _this.treeDataMap.set(rowValue, state);

            if (children !== null && children !== void 0 && children.length && !originalExpanded) {
              var tmpParent = parent;

              while ((_tmpParent = tmpParent) !== null && _tmpParent !== void 0 && _tmpParent.row) {
                var _tmpParent;

                tmpParent.expandChildrenLength += children.length;

                _this.treeDataMap.set(tmpParent.id, tmpParent);

                tmpParent = tmpParent.parent;
              }

              expandLoop(children, keys2, newData, originalExpanded, state);
            }
          }

          return newData;
        };

        return expandLoop(dataSource, keys);
      }
    }, {
      key: "foldAll",
      value: function foldAll(dataSource, keys) {
        var newData = [];

        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);
          state.rowIndex = state.level === 0 ? i : -1;
          state.expanded = false;
          state.expandChildrenLength = 0;

          if (state.level === 0) {
            newData.push(item);
          }

          var children = get_1(item, keys.childrenKey);

          if (children !== null && children !== void 0 && children.length) {
            this.foldAll(children, keys);
          }
        }

        return newData;
      }
    }, {
      key: "getTreeNode",
      value: function getTreeNode(dataSource, keys) {
        var treeData = [];

        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);

          if (state.level === 0) {
            treeData.push(item);
          }
        }

        return treeData;
      }
    }, {
      key: "getTreeExpandedRow",
      value: function getTreeExpandedRow(dataSource, keys) {
        var _this2 = this;

        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "data";
        var arr = [];
        dataSource.forEach(function (item) {
          var rowValue = get_1(item, keys.rowKey);

          var rowState = _this2.treeDataMap.get(rowValue);

          if (!rowState.expanded) return;

          if (type === "unique") {
            arr.push(rowValue);
          } else if (type === "data") {
            arr.push(item);
          } else {
            arr.push(rowState);
          }
        });
        return arr;
      }
    }, {
      key: "initialTreeDataMap",
      value: function initialTreeDataMap(treeDataMap, dataSource, column, keys) {
        var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var parent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);

          if (rowValue === void 0) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }

          var children = get_1(item, keys.childrenKey);
          var state = {
            id: rowValue,
            row: item,
            rowIndex: level === 0 ? i : -1,
            level: level,
            expanded: false,
            expandChildrenLength: 0,
            disabled: isRowSelectedDisabled(column, item, i),
            parent: parent
          };
          state.path = parent ? parent.path.concat(state) : [state];
          treeDataMap.set(rowValue, state);

          if (children !== null && children !== void 0 && children.length) {
            this.initialTreeDataMap(treeDataMap, children, column, keys, level + 1, state);
          }
        }
      }
    }, {
      key: "updateDisabledState",
      value: function updateDisabledState(dataSource, column, keys) {
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);

          if (rowValue === void 0) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }

          var state = this.treeDataMap.get(rowValue);
          state.disabled = isRowSelectedDisabled(column, item, i);
          this.treeDataMap.set(rowValue, state);
          var children = get_1(item, keys.childrenKey);

          if (children !== null && children !== void 0 && children.length) {
            this.updateDisabledState(children, column, keys);
          }
        }
      }
    }, {
      key: "validateDataExist",
      value: function validateDataExist(state, rowValue) {
        if (!state) {
          log.warn("EnhancedTable", "".concat(rowValue, " does not exist."));
          return false;
        }

        return true;
      }
    }, {
      key: "validateDataDoubleExist",
      value: function validateDataDoubleExist(state, rowValue) {
        if (state) {
          log.warn("EnhancedTable", "Duplicated Key. ".concat(rowValue, " already exists."));
          return false;
        }

        return true;
      }
    }]);

    return TableTreeStore;
  }();
  function updateRowExpandLength(treeDataMap, row, distance, type, keys) {
    var tmp = row;

    while (tmp) {
      var _state$parent;

      var state = treeDataMap.get(get_1(tmp, keys.rowKey));
      var expandLen = (state.expandChildrenLength || 0) + distance;
      state.expandChildrenLength = Math.max(0, expandLen);
      tmp = state === null || state === void 0 ? void 0 : (_state$parent = state.parent) === null || _state$parent === void 0 ? void 0 : _state$parent.row;
    }

    if (type === "fold") {
      clearRowExpandLength(treeDataMap, row, keys);
    }
  }
  function clearRowExpandLength(treeDataMap, row, keys) {
    var children = get_1(row, keys.childrenKey);

    if (children !== null && children !== void 0 && children.length) {
      children.forEach(function (item) {
        var state = treeDataMap.get(get_1(item, keys.rowKey));
        if (!state) return;
        state.expandChildrenLength = 0;
        clearRowExpandLength(treeDataMap, state.row, keys);
      });
    }
  }
  function updateChildrenRowState(treeDataMap, rowState, expanded, keys) {
    var row = rowState.row,
        rowIndex = rowState.rowIndex;
    var childrenNodes = get_1(row, keys.childrenKey);
    childrenNodes.forEach(function (item, kidRowIndex) {
      var rowValue = get_1(item, keys.rowKey);
      var index = expanded ? rowIndex + 1 + kidRowIndex : -1;
      var curState = treeDataMap.get(rowValue);

      var newState = _objectSpread$1q(_objectSpread$1q({}, curState), {}, {
        row: item,
        rowIndex: index,
        expanded: false,
        parent: rowState
      });

      treeDataMap.set(rowValue, newState);

      if (!expanded) {
        var children = get_1(item, keys.childrenKey);

        if (children !== null && children !== void 0 && children.length) {
          updateChildrenRowState(treeDataMap, _objectSpread$1q(_objectSpread$1q({}, newState), {}, {
            rowIndex: -1,
            expanded: false
          }), expanded, keys);
        }
      }
    });
  }
  function updateRowData(data, key, newData, keys) {
    for (var i = 0, len = data.length; i < len; i++) {
      var item = data[i];

      if (get_1(item, keys.rowKey) === key) {
        data[i] = newData;
        return;
      }

      var children = get_1(item, keys.childrenKey) || [];

      if (children !== null && children !== void 0 && children.length) {
        updateRowData(children, key, newData, keys);
      }
    }
  }
  function updateRowIndex(treeDataMap, dataSource, extra) {
    var start = extra.minRowIndex || 0;
    var end = extra.maxRowIndex || dataSource.length;

    for (var rowIndex = start; rowIndex < end; rowIndex++) {
      var item = dataSource[rowIndex];
      var state = treeDataMap.get(get_1(item, extra.rowKey));

      if (!state) {
        log.warn("Table", "tree map went wrong");
      }

      state.rowIndex = rowIndex + ((extra === null || extra === void 0 ? void 0 : extra.count) || 1) - 1;
    }
  }

  function ownKeys$1p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1p(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTreeData(props) {
    var data = props.data,
        columns = props.columns,
        tree = props.tree,
        rowKey = props.rowKey,
        treeExpandAndFoldIcon = props.treeExpandAndFoldIcon;

    var _useState = React.useState(new TableTreeStore()),
        _useState2 = _slicedToArray(_useState, 1),
        store = _useState2[0];

    var _useState3 = React.useState(function () {
      return getTreeNodeColumnCol();
    }),
        _useState4 = _slicedToArray(_useState3, 2),
        treeNodeCol = _useState4[0],
        setTreeNodeCol = _useState4[1];

    var _useState5 = React.useState(data || []),
        _useState6 = _slicedToArray(_useState5, 2),
        dataSource = _useState6[0],
        setDataSource = _useState6[1];

    var _useClassName = useClassName(),
        tableTreeClasses = _useClassName.tableTreeClasses;

    var _useLocaleReceiver = useLocaleReceiver("table"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        locale = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useGlobalIcon = useGlobalIcon({
      AddRectangleIcon: AddRectangleIcon,
      MinusRectangleIcon: MinusRectangleIcon
    }),
        AddRectangleIcon$1 = _useGlobalIcon.AddRectangleIcon,
        MinusRectangleIcon$1 = _useGlobalIcon.MinusRectangleIcon;

    var rowDataKeys = React.useMemo(function () {
      return {
        rowKey: rowKey || "id",
        childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
      };
    }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
    var checkedColumn = React.useMemo(function () {
      return columns.find(function (col) {
        return col.colKey === "row-select";
      });
    }, [columns]);
    var uniqueKeys = React.useMemo(function () {
      var _store$getAllUniqueKe;

      return (store === null || store === void 0 ? void 0 : (_store$getAllUniqueKe = store.getAllUniqueKeys(data, rowDataKeys)) === null || _store$getAllUniqueKe === void 0 ? void 0 : _store$getAllUniqueKe.join()) || "";
    }, [data, rowDataKeys, store]);
    React.useEffect(function () {
      if (!store || !checkedColumn) return;
      var rowValue = get_1(dataSource[0], rowDataKeys.rowKey);
      if (!store.treeDataMap.get(rowValue)) return;
      store.updateDisabledState(dataSource, checkedColumn, rowDataKeys);
    }, [checkedColumn]);
    React.useEffect(function () {
      if (!data || !store) return;

      if (!tree || !Object.keys(tree).length) {
        setDataSource(data);
        return;
      }

      resetData(data);
    }, [uniqueKeys]);
    React.useEffect(function () {
      var treeNodeColTmp = getTreeNodeColumnCol();
      setTreeNodeCol(treeNodeColTmp);
    }, [columns]);

    function resetData(data2) {
      var _props$tree;

      var newVal = cloneDeep_1(data2);
      store.initialTreeStore(newVal, props.columns, rowDataKeys);

      if ((_props$tree = props.tree) !== null && _props$tree !== void 0 && _props$tree.defaultExpandAll) {
        newVal = store.expandAll(newVal, rowDataKeys);
      }

      setDataSource(newVal);
    }

    function getTreeNodeStyle(level) {
      var _props$tree2, _props$tree3;

      if (level === void 0) return;
      var indent = ((_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.indent) === void 0 ? 24 : (_props$tree3 = props.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent;
      return indent ? {
        paddingLeft: "".concat(level * indent || 1, "px")
      } : {};
    }

    function toggleExpandData(p) {
      var newData = store.toggleExpandData(p, dataSource, rowDataKeys);
      setDataSource(_toConsumableArray(newData));

      if (p.trigger === "inner") {
        var _props$onTreeExpandCh, _store$treeDataMap;

        var rowValue = get_1(p.row, rowDataKeys.rowKey);
        (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props, {
          row: p.row,
          rowIndex: p.rowIndex,
          rowState: store === null || store === void 0 ? void 0 : (_store$treeDataMap = store.treeDataMap) === null || _store$treeDataMap === void 0 ? void 0 : _store$treeDataMap.get(rowValue)
        });
      }
    }

    function getTreeNodeColumnCol() {
      var _props$tree4;

      var columns2 = props.columns;
      var treeNodeColumnIndex = ((_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.treeNodeColumnIndex) || 0;

      while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
        var _columns2$treeNodeCol, _columns2$treeNodeCol2;

        treeNodeColumnIndex += 1;
      }

      return columns2[treeNodeColumnIndex];
    }

    function formatTreeColumn(col) {
      if (!col || !treeNodeCol || !store) return {};
      if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;

      var newCol = _objectSpread$1p({}, treeNodeCol);

      newCol.cell = function (p) {
        var cellInfo = renderCell(_objectSpread$1p(_objectSpread$1p({}, p), {}, {
          col: _objectSpread$1p({}, treeNodeCol)
        }), {
          cellEmptyContent: props.cellEmptyContent
        });
        var currentState = store.treeDataMap.get(get_1(p.row, rowDataKeys.rowKey));
        var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);

        var classes = _defineProperty$3({}, tableTreeClasses.inlineCol, !!col.ellipsis);

        var childrenNodes = get_1(p.row, rowDataKeys.childrenKey);

        if (childrenNodes && childrenNodes instanceof Array || childrenNodes === true) {
          var _store$treeDataMap$ge;

          var expanded = (_store$treeDataMap$ge = store.treeDataMap.get(get_1(p.row, rowDataKeys.rowKey))) === null || _store$treeDataMap$ge === void 0 ? void 0 : _store$treeDataMap$ge.expanded;
          var type = expanded ? "fold" : "expand";
          var defaultIconNode = t(locale.treeExpandAndFoldIcon, {
            type: type
          }) || (expanded ? /* @__PURE__ */React__default["default"].createElement(MinusRectangleIcon$1, null) : /* @__PURE__ */React__default["default"].createElement(AddRectangleIcon$1, null));
          var iconNode = treeExpandAndFoldIcon ? treeExpandAndFoldIcon(_objectSpread$1p({
            type: type
          }, p)) : defaultIconNode;
          return /* @__PURE__ */React__default["default"].createElement("div", {
            className: classNames$1([tableTreeClasses.col, classes]),
            style: colStyle
          }, !!(childrenNodes.length || childrenNodes === true) && /* @__PURE__ */React__default["default"].createElement("span", {
            className: tableTreeClasses.icon,
            onClick: function onClick() {
              return toggleExpandData(_objectSpread$1p(_objectSpread$1p({}, p), {}, {
                trigger: "inner"
              }));
            }
          }, iconNode), cellInfo);
        }

        return /* @__PURE__ */React__default["default"].createElement("div", {
          style: colStyle,
          className: classNames$1(classes)
        }, cellInfo);
      };

      if (newCol.ellipsis === true) {
        newCol.ellipsis = function (p) {
          return renderCell(_objectSpread$1p(_objectSpread$1p({}, p), {}, {
            col: _objectSpread$1p({}, treeNodeCol)
          }));
        };
      }

      return newCol;
    }

    function setData(key, newRowData) {
      var rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);

      var newData = _toConsumableArray(dataSource);

      newData[rowIndex] = newRowData;
      setDataSource(_toConsumableArray(newData));
    }

    function getData(key) {
      return store.getData(key);
    }

    function remove(key) {
      var newData = store.remove(key, dataSource, rowDataKeys);
      setDataSource(_toConsumableArray(newData));
    }

    function appendTo(key, newData) {
      if (!key) {
        setDataSource(_toConsumableArray(store.appendToRoot(newData, dataSource, rowDataKeys)));
        return;
      }

      setDataSource(_toConsumableArray(store.appendTo(key, newData, dataSource, rowDataKeys)));
    }

    function insertAfter(rowValue, newData) {
      setDataSource(_toConsumableArray(store.insertAfter(rowValue, newData, dataSource, rowDataKeys)));
    }

    function insertBefore(rowValue, newData) {
      setDataSource(_toConsumableArray(store.insertBefore(rowValue, newData, dataSource, rowDataKeys)));
    }

    function expandAll() {
      setDataSource(_toConsumableArray(store.expandAll(dataSource, rowDataKeys)));
    }

    function foldAll() {
      setDataSource(_toConsumableArray(store.foldAll(dataSource, rowDataKeys)));
    }

    function swapData(params) {
      var r = store.swapData(params.data, params, rowDataKeys);

      if (r.result) {
        setDataSource(_toConsumableArray(r.dataSource));
      } else {
        var _props$onAbnormalDrag;

        var params2 = {
          code: r.code,
          reason: r.reason
        };
        (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 ? void 0 : _props$onAbnormalDrag.call(props, params2);
      }
    }

    function getTreeNode() {
      return store.getTreeNode(dataSource, rowDataKeys);
    }

    function getTreeExpandedRow() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";
      return store.getTreeExpandedRow(dataSource, rowDataKeys, type);
    }

    return {
      store: store,
      rowDataKeys: rowDataKeys,
      dataSource: dataSource,
      swapData: swapData,
      setData: setData,
      getData: getData,
      remove: remove,
      appendTo: appendTo,
      insertAfter: insertAfter,
      insertBefore: insertBefore,
      formatTreeColumn: formatTreeColumn,
      toggleExpandData: toggleExpandData,
      expandAll: expandAll,
      foldAll: foldAll,
      getTreeNode: getTreeNode,
      resetData: resetData,
      getTreeExpandedRow: getTreeExpandedRow
    };
  }

  function ownKeys$1o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1o(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var childrenMap = /* @__PURE__ */new Map();
  function getChildrenData(treeDataMap, data, keys, r) {
    if (childrenMap.get(data)) return childrenMap.get(data);
    var result = r || {
      allChildren: [],
      allChildrenKeys: [],
      leafNodeKeys: []
    };
    var children = get_1(data, keys.childrenKey);
    if (!children || !children.length) return result;
    var selectableChildren = children.filter(function (item) {
      var _treeDataMap$get;

      return !((_treeDataMap$get = treeDataMap.get(get_1(item, keys.rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
    });
    result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(selectableChildren)));

    for (var i = 0, len = children.length; i < len; i++) {
      var tItem = children[i];
      var c = get_1(tItem, keys.childrenKey);

      if (c !== null && c !== void 0 && c.length) {
        var nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);
        result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(nextLevelData.allChildren)));
      }
    }

    for (var _i = 0, _len = result.allChildren.length; _i < _len; _i++) {
      var item = result.allChildren[_i];
      var children2 = get_1(item, keys.childrenKey);
      var rowValue = get_1(item, keys.rowKey);
      result.allChildrenKeys.push(rowValue);

      if (!children2 || !children2.length) {
        result.leafNodeKeys.push(rowValue);
      }
    }

    result.allChildrenKeys = _toConsumableArray(new Set(result.allChildrenKeys));
    result.leafNodeKeys = _toConsumableArray(new Set(result.leafNodeKeys));
    return result;
  }
  function removeChildrenKeys(p, r) {
    var selectedRowKeys = p.selectedRowKeys,
        removeKeys = p.removeKeys;
    var result = r || {
      data: [],
      keys: []
    };

    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];

      if (!removeKeys.includes(key)) {
        result.keys.push(key);
      }
    }

    return result;
  }
  function getRowDataByKeys(p) {
    var treeDataMap = p.treeDataMap,
        selectedRowKeys = p.selectedRowKeys;
    var result = [];

    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];
      result.push(treeDataMap.get(key));
    }

    return result;
  }
  function useTreeSelect(props, treeDataMap) {
    var tree = props.tree,
        rowKey = props.rowKey,
        data = props.data,
        indeterminateSelectedRowKeys = props.indeterminateSelectedRowKeys;

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        tIndeterminateSelectedRowKeys = _useState2[0],
        setTIndeterminateSelectedRowKeys = _useState2[1];

    var _useControlled = useControlled(props, "selectedRowKeys", props.onSelectChange, {
      defaultSelectedRowKeys: props.defaultSelectedRowKeys || []
    }),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        tSelectedRowKeys = _useControlled2[0],
        setTSelectedRowKeys = _useControlled2[1];

    var rowDataKeys = React.useMemo(function () {
      return {
        rowKey: rowKey || "id",
        childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
      };
    }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
    React.useEffect(function () {
      if (!tree || !treeDataMap.size || tree.checkStrictly) return;
      updateIndeterminateState();
    }, [tSelectedRowKeys, data, tree, treeDataMap]);

    function updateIndeterminateState() {
      if (!tree || tree.checkStrictly) return;

      if (!tSelectedRowKeys.length) {
        setTIndeterminateSelectedRowKeys([]);
        return;
      }

      var keys = [];
      var parentMap = {};

      for (var i = 0, len = tSelectedRowKeys.length; i < len; i++) {
        var rowValue = tSelectedRowKeys[i];
        var state = treeDataMap.get(rowValue);
        var children = get_1(state.row, rowDataKeys.childrenKey);

        if (!children || !children.length) {
          var parentTmp = state.parent;

          while (parentTmp) {
            if (!parentMap[parentTmp.id]) {
              parentMap[parentTmp.id] = [];
            }

            parentMap[parentTmp.id].push(state.row);
            var checkedLength = parentMap[parentTmp.id].length;

            var _getChildrenData = getChildrenData(treeDataMap, parentTmp.row, rowDataKeys),
                allChildrenKeys = _getChildrenData.allChildrenKeys;

            var parentTmpIndex = keys.indexOf(parentTmp.id);
            var selectedIndex = tSelectedRowKeys.indexOf(parentTmp.id);

            if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {
              parentTmpIndex === -1 && keys.push(parentTmp.id);
            } else {
              parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);
            }

            parentTmp = parentTmp.parent;
          }
        }
      }

      setTIndeterminateSelectedRowKeys(keys);
    }

    function updateParentCheckedState(selectedKeys, currentRowKey, type) {
      if (!tree || tree.checkStrictly) return;

      var keys = _toConsumableArray(selectedKeys);

      var state = treeDataMap.get(currentRowKey);
      var parentTmp = state.parent;

      while (parentTmp) {
        var _getChildrenData2 = getChildrenData(treeDataMap, parentTmp.row, rowDataKeys),
            leafNodeKeys = _getChildrenData2.leafNodeKeys;

        var checkedChildrenKeys = intersection_1(leafNodeKeys, selectedKeys);
        var selectedIndex = keys.indexOf(parentTmp.id);

        if (type === "uncheck") {
          selectedIndex !== -1 && keys.splice(selectedIndex, 1);
        } else if (checkedChildrenKeys.length === leafNodeKeys.length) {
          selectedIndex === -1 && keys.push(parentTmp.id);
        }

        parentTmp = parentTmp.parent;
      }

      return keys;
    }

    function onInnerSelectChange(rowKeys, extraData) {
      if (!tree || tree.checkStrictly) {
        setTSelectedRowKeys(rowKeys, extraData);
        return;
      }

      if (extraData.currentRowKey === "CHECK_ALL_BOX") {
        handleSelectAll(extraData);
      } else {
        handleSelect(rowKeys, extraData);
      }
    }

    function handleSelectAll(extraData) {
      var newRowKeys = [];
      var newRowData = [];

      if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
        var arr = _toConsumableArray(treeDataMap.values());

        for (var i = 0, len = arr.length; i < len; i++) {
          var item = arr[i];

          if (!(item !== null && item !== void 0 && item.disabled)) {
            newRowData.push(item.row);
            newRowKeys.push(get_1(item.row, rowDataKeys.rowKey));
          }
        }
      }

      var newExtraData = _objectSpread$1o(_objectSpread$1o({}, extraData), {}, {
        selectedRowData: newRowData || []
      });

      setTSelectedRowKeys(newRowKeys, newExtraData);
    }

    function handleSelect(rowKeys, extraData) {
      var newRowKeys = _toConsumableArray(rowKeys);

      if (tree.checkStrictly === false) {
        if (extraData.type === "check") {
          var result = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys);
          var allChildrenKeys = result.allChildrenKeys;
          childrenMap.set(extraData.currentRowData, result);
          newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
        } else if (extraData.type === "uncheck") {
          var children = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys);

          var _result = removeChildrenKeys({
            selectedRowKeys: rowKeys,
            removeKeys: children.allChildrenKeys
          });

          newRowKeys = _result.keys;
        }
      }

      newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);
      var newRowData = getRowDataByKeys({
        treeDataMap: treeDataMap,
        selectedRowKeys: newRowKeys
      });

      var newExtraData = _objectSpread$1o(_objectSpread$1o({}, extraData), {}, {
        selectedRowData: newRowData
      });

      setTSelectedRowKeys(newRowKeys, newExtraData);
    }

    return {
      tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys || tIndeterminateSelectedRowKeys,
      onInnerSelectChange: onInnerSelectChange
    };
  }

  var _excluded$i = ["store", "dataSource", "formatTreeColumn", "swapData"];

  function ownKeys$1n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1n(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var EnhancedTable$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var tree = props.tree,
        columns = props.columns,
        style = props.style,
        className = props.className;

    var _useTreeData = useTreeData(props),
        store = _useTreeData.store,
        dataSource = _useTreeData.dataSource,
        formatTreeColumn = _useTreeData.formatTreeColumn,
        swapData = _useTreeData.swapData,
        treeInstanceFunctions = _objectWithoutProperties$2(_useTreeData, _excluded$i);

    var treeDataMap = store === null || store === void 0 ? void 0 : store.treeDataMap;

    var _useTreeSelect = useTreeSelect(props, treeDataMap),
        tIndeterminateSelectedRowKeys = _useTreeSelect.tIndeterminateSelectedRowKeys,
        onInnerSelectChange = _useTreeSelect.onInnerSelectChange;

    var getColumns = function getColumns(columns2) {
      var arr = [];

      for (var i = 0, len = columns2.length; i < len; i++) {
        var _item$children, _item$children2;

        var item = _objectSpread$1n({}, columns2[i]);

        item = formatTreeColumn(item);

        if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
          item.children = getColumns(item.children);
        }

        if (!item.children || (_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
          arr.push(item);
        }
      }

      return arr;
    };

    var tColumns = function () {
      var isTreeData = !tree || !Object.keys(tree).length;
      return isTreeData ? columns : getColumns(columns);
    }();

    React.useImperativeHandle(ref, function () {
      return _objectSpread$1n({
        treeDataMap: treeDataMap
      }, treeInstanceFunctions);
    });

    var onDragSortChange = function onDragSortChange(params) {
      var _props$onDragSort;

      if (props.beforeDragSort && !props.beforeDragSort(params)) return;
      swapData({
        data: params.data,
        current: params.current,
        target: params.target,
        currentIndex: params.currentIndex,
        targetIndex: params.targetIndex
      });
      (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 ? void 0 : _props$onDragSort.call(props, params);
    };

    var primaryTableProps = _objectSpread$1n(_objectSpread$1n({}, props), {}, {
      data: dataSource,
      columns: tColumns,
      indeterminateSelectedRowKeys: tIndeterminateSelectedRowKeys,
      disableDataPage: Boolean(tree && Object.keys(tree).length),
      onSelectChange: onInnerSelectChange,
      onDragSort: onDragSortChange,
      style: style,
      className: className
    });

    return /* @__PURE__ */React__default["default"].createElement(PrimaryTable$1, _objectSpread$1n({}, primaryTableProps));
  });
  EnhancedTable$1.displayName = "EnhancedTable";

  var SimpleTable = BaseTable$1;
  var BaseTable = BaseTable$1;
  var PrimaryTable = PrimaryTable$1;
  var Table = PrimaryTable;
  var EnhancedTable = EnhancedTable$1;

  var ListItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
        className = props.className,
        style = props.style,
        action = props.action,
        content = props.content;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var actionElement = action && /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-list-item__action")
    }, action);
    return /* @__PURE__ */React__default["default"].createElement("li", {
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-list-item"), className),
      style: style
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list-item-main")
    }, children ? children : content, actionElement));
  });
  ListItem.displayName = "ListItem";

  var ListItemMeta = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var title = props.title,
        image = props.image,
        description = props.description;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var renderAvatar = function renderAvatar() {
      if (image && typeof image === "string") {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-list-item__meta-avatar")
        }, /* @__PURE__ */React__default["default"].createElement("img", {
          src: image,
          alt: ""
        }));
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-list-item__meta-avatar")
      }, image);
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: "".concat(classPrefix, "-list-item__meta")
    }, image && renderAvatar(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list-item__meta-content")
    }, /* @__PURE__ */React__default["default"].createElement("h3", {
      className: "".concat(classPrefix, "-list-item__meta-title")
    }, title), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list-item__meta-description")
    }, /* @__PURE__ */React__default["default"].createElement("p", null, description))));
  });
  ListItemMeta.displayName = "ListItemMeta";

  var listDefaultProps = {
    layout: "horizontal",
    size: "medium",
    split: false,
    stripe: false
  };

  var List$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames, _classNames2;

    var header = props.header,
        footer = props.footer,
        asyncLoading = props.asyncLoading,
        size = props.size,
        split = props.split,
        stripe = props.stripe,
        layout = props.layout,
        children = props.children,
        className = props.className,
        _props$onLoadMore = props.onLoadMore,
        onLoadMore = _props$onLoadMore === void 0 ? noop$1 : _props$onLoadMore,
        _props$onScroll = props.onScroll,
        onScroll = _props$onScroll === void 0 ? noop$1 : _props$onScroll,
        style = props.style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useLocaleReceiver = useLocaleReceiver("list"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var handleClickLoad = function handleClickLoad(e) {
      if (asyncLoading === "load-more") {
        onLoadMore({
          e: e
        });
      }
    };

    var handleScroll = function handleScroll(event) {
      var currentTarget = event.currentTarget;
      var scrollTop = currentTarget.scrollTop,
          offsetHeight = currentTarget.offsetHeight,
          scrollHeight = currentTarget.scrollHeight;
      var scrollBottom = scrollHeight - scrollTop - offsetHeight;
      onScroll({
        e: event,
        scrollTop: scrollTop,
        scrollBottom: scrollBottom
      });
    };

    var loadElement = isString_1(asyncLoading) ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-list__load"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-list__load--loading"), asyncLoading === "loading"), _defineProperty$3(_classNames, "".concat(classPrefix, "-list__load--load-more"), asyncLoading === "load-more"), _classNames)),
      onClick: handleClickLoad
    }, asyncLoading === "loading" && /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: true
    }), /* @__PURE__ */React__default["default"].createElement("span", null, t(local.loadingText))), asyncLoading === "load-more" && /* @__PURE__ */React__default["default"].createElement("span", null, t(local.loadingMoreText))) : asyncLoading;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      onScroll: handleScroll,
      className: classNames$1("".concat(classPrefix, "-list"), className, (_classNames2 = {}, _defineProperty$3(_classNames2, "".concat(classPrefix, "-list--split"), split), _defineProperty$3(_classNames2, "".concat(classPrefix, "-list--stripe"), stripe), _defineProperty$3(_classNames2, "".concat(classPrefix, "-list--vertical-action"), layout === "vertical"), _defineProperty$3(_classNames2, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$3(_classNames2, "".concat(classPrefix, "-size-l"), size === "large"), _classNames2))
    }, header && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list__header")
    }, header), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-list__inner")
    }, children), asyncLoading && loadElement, footer && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list__footer")
    }, footer));
  }, {
    ListItem: ListItem,
    ListItemMeta: ListItemMeta
  });
  List$1.displayName = "List";
  List$1.defaultProps = listDefaultProps;

  var List = List$1;

  var useTabClass = function useTabClass() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var tdTabsClassPrefix = "".concat(classPrefix, "-tabs");
    var tdTabPanelClassPrefix = "".concat(classPrefix, "-tab-panel");

    var tdClassGenerator = function tdClassGenerator(append) {
      return "".concat(classPrefix, "-").concat(append);
    };

    var tdTabsClassGenerator = function tdTabsClassGenerator(append) {
      return "".concat(tdTabsClassPrefix, "__").concat(append);
    };

    var tdTabPanelClassGenerator = function tdTabPanelClassGenerator(append) {
      return "".concat(tdTabPanelClassPrefix, "__").concat(append);
    };

    var tdSizeClassGenerator = function tdSizeClassGenerator(size) {
      return "".concat(classPrefix, "-size-").concat(size === "large" ? "l" : "m");
    };

    return {
      tdTabsClassPrefix: tdTabsClassPrefix,
      tdTabPanelClassPrefix: tdTabPanelClassPrefix,
      tdClassGenerator: tdClassGenerator,
      tdTabsClassGenerator: tdTabsClassGenerator,
      tdTabPanelClassGenerator: tdTabPanelClassGenerator,
      tdSizeClassGenerator: tdSizeClassGenerator
    };
  };

  var TabNavItem = function TabNavItem(props) {
    var label = props.label,
        removable = props.removable,
        isActive = props.isActive,
        _props$onClick = props.onClick,
        onClick = _props$onClick === void 0 ? noop$1 : _props$onClick,
        theme = props.theme,
        placement = props.placement,
        _props$onRemove = props.onRemove,
        onRemove = _props$onRemove === void 0 ? noop$1 : _props$onRemove,
        value = props.value,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        index = props.index,
        _props$onTabRemove = props.onTabRemove,
        onTabRemove = _props$onTabRemove === void 0 ? noop$1 : _props$onTabRemove,
        innerRef = props.innerRef;

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon;

    var isCard = theme === "card";

    var _useTabClass = useTabClass(),
        tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
        tdClassGenerator = _useTabClass.tdClassGenerator,
        tdSizeClassGenerator = _useTabClass.tdSizeClassGenerator;

    var rippleRef = React.useRef();
    useRipple(rippleRef);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: innerRef,
      onClick: disabled ? noop$1 : onClick,
      className: classNames$1(tdTabsClassGenerator("nav-item"), isCard ? tdTabsClassGenerator("nav--card") : "", tdSizeClassGenerator(size), isActive ? tdClassGenerator("is-active") : "", tdClassGenerator("is-".concat(placement)), disabled ? tdClassGenerator("is-disabled") : "")
    }, isCard ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(tdTabsClassGenerator("nav-item-text-wrapper"))
    }, label) : /* @__PURE__ */React__default["default"].createElement("div", {
      ref: rippleRef,
      className: classNames$1(tdTabsClassGenerator("nav-item-wrapper"))
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(tdTabsClassGenerator("nav-item-text-wrapper"))
    }, label)), removable ? /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, {
      className: classNames$1("remove-btn"),
      onClick: function onClick(e) {
        if (disabled) {
          return;
        }

        e.stopPropagation();
        onRemove({
          value: value,
          e: e
        });
        onTabRemove({
          value: value,
          e: e,
          index: index
        });
      }
    }) : null);
  };

  var TabBar = function TabBar(props) {
    var _classNames;

    var tabPosition = props.tabPosition,
        activeId = props.activeId,
        containerRef = props.containerRef;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState({}),
        _useState2 = _slicedToArray(_useState, 2),
        barStyle = _useState2[0],
        setBarStyle = _useState2[1];

    var tabsClassPrefix = "".concat(classPrefix, "-tabs");

    var computeStyle = function computeStyle() {
      var isHorizontal = ["bottom", "top"].includes(tabPosition);
      var transformPosition = isHorizontal ? "translateX" : "translateY";
      var itemProp = isHorizontal ? "width" : "height";
      var barBorderProp = isHorizontal ? "width" : "height";
      var offset = 0;

      if (containerRef.current) {
        var _containerRef$current, _containerRef$current2;

        var itemsRef = (_containerRef$current = (_containerRef$current2 = containerRef.current).querySelectorAll) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.call(_containerRef$current2, ".".concat(tabsClassPrefix, "__nav-item"));

        if (itemsRef.length - 1 >= activeId) {
          itemsRef.forEach(function (item, itemIndex) {
            if (itemIndex < activeId) {
              offset += Number(getComputedStyle(item)[itemProp].replace("px", ""));
            }
          });
          var computedItem = itemsRef[activeId];

          if (!computedItem) {
            setBarStyle(_defineProperty$3({
              transform: "".concat(transformPosition, "(", 0, "px)")
            }, barBorderProp, 0));
            return;
          }

          var itemPropValue = getComputedStyle(computedItem)[itemProp];
          setBarStyle(_defineProperty$3({
            transform: "".concat(transformPosition, "(").concat(offset, "px)")
          }, barBorderProp, itemPropValue || 0));
        }
      }
    };

    React.useEffect(function () {
      if (containerRef.current) {
        setTimeout(function () {
          return computeStyle();
        });
      }
    }, [tabPosition, activeId, containerRef.current]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1((_classNames = {}, _defineProperty$3(_classNames, "".concat(tabsClassPrefix, "__bar"), true), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-").concat(tabPosition), true), _classNames)),
      style: barStyle
    });
  };

  TabBar.displayName = "TabBar";

  var getDomWidth = function getDomWidth(dom) {
    return (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
  };

  var tabBase = {
    calcScrollLeft: function calcScrollLeft(elements, scrollLeft) {
      var container = elements.navsContainer;
      var wrap = elements.navsWrap;
      var rightOperations = elements.rightOperations;
      var rightOperationsZoneWidth = getDomWidth(rightOperations);
      if (!wrap || !container) return scrollLeft;
      var containerWidth = getDomWidth(container);
      var wrapWidth = getDomWidth(wrap);

      if (wrapWidth <= containerWidth) {
        return 0;
      }

      if (scrollLeft + containerWidth - rightOperationsZoneWidth > wrapWidth) {
        return wrapWidth + rightOperationsZoneWidth - containerWidth;
      }

      return scrollLeft;
    },
    calculateCanToLeft: function calculateCanToLeft(depElement, scrollLeft, placement) {
      if (["left", "right"].includes(placement.toLowerCase())) {
        return false;
      }

      var container = depElement.navsContainer,
          wrap = depElement.navsWrap,
          leftOperations = depElement.leftOperations,
          toLeftBtn = depElement.toLeftBtn;

      if (!wrap || !container) {
        return false;
      }

      var leftOperationsZoneWidth = getDomWidth(leftOperations);
      var leftIconWidth = getDomWidth(toLeftBtn);
      return scrollLeft + Math.round(leftOperationsZoneWidth - leftIconWidth) > 0;
    },
    calculateCanToRight: function calculateCanToRight(depElement, scrollLeft, placement) {
      if (["left", "right"].includes(placement.toLowerCase())) {
        return false;
      }

      var container = depElement.navsContainer,
          wrap = depElement.navsWrap,
          rightOperations = depElement.rightOperations,
          toRightBtn = depElement.toRightBtn;

      if (!wrap || !container) {
        return false;
      }

      var rightOperationsZoneWidth = getDomWidth(rightOperations);
      var rightIconWidth = getDomWidth(toRightBtn);
      return scrollLeft + getDomWidth(container) - (rightOperationsZoneWidth - rightIconWidth) - getDomWidth(wrap) < -1;
    },
    moveActiveTabIntoView: function moveActiveTabIntoView(depElement, scrollLeft) {
      var activeTab = depElement.activeTab,
          container = depElement.navsContainer,
          navsWrap = depElement.navsWrap,
          leftOperations = depElement.leftOperations,
          toLeftBtn = depElement.toLeftBtn,
          rightOperations = depElement.rightOperations,
          toRightBtn = depElement.toRightBtn;
      if (!activeTab) return scrollLeft;
      var totalWidthBeforeActiveTab = activeTab.offsetLeft;
      if (!container) return scrollLeft;

      var _getLeftCoverWidth = function _getLeftCoverWidth() {
        var leftOperationsZoneWidth = getDomWidth(leftOperations);
        var leftIconWidth = getDomWidth(toLeftBtn);

        if (totalWidthBeforeActiveTab === 0) {
          return leftOperationsZoneWidth - leftIconWidth;
        }

        return leftOperationsZoneWidth;
      };

      var leftCoverWidth = _getLeftCoverWidth();

      var isCurrentTabHiddenInLeftZone = scrollLeft + leftCoverWidth > totalWidthBeforeActiveTab;

      if (isCurrentTabHiddenInLeftZone) {
        return totalWidthBeforeActiveTab - leftCoverWidth;
      }

      var activeTabWidth = activeTab.offsetWidth;
      if (!container || !navsWrap) return scrollLeft;
      var containerWidth = getDomWidth(container);

      var _getRightCoverWidth = function _getRightCoverWidth() {
        var rightOperationsZoneWidth = getDomWidth(rightOperations);
        var rightIconWidth = getDomWidth(toRightBtn);
        var wrapWidth = getDomWidth(navsWrap);

        if (Math.abs(totalWidthBeforeActiveTab + activeTabWidth - wrapWidth) < 1) {
          return rightOperationsZoneWidth - rightIconWidth;
        }

        return rightOperationsZoneWidth;
      };

      var rightCoverWidth = _getRightCoverWidth();

      var isHiddenInRightZone = scrollLeft + containerWidth - rightCoverWidth < totalWidthBeforeActiveTab + activeTabWidth;

      if (isHiddenInRightZone) {
        return totalWidthBeforeActiveTab + activeTabWidth - containerWidth + rightCoverWidth;
      }

      return scrollLeft;
    },
    scrollToLeft: function scrollToLeft(depElement, scrollLeft) {
      var container = depElement.navsContainer,
          leftOperations = depElement.leftOperations,
          toLeftBtn = depElement.toLeftBtn;
      if (!container) return 0;
      var leftOperationsZoneWidth = getDomWidth(leftOperations);
      var leftIconWidth = getDomWidth(toLeftBtn);
      var containerWidth = getDomWidth(container);
      return Math.max(-(leftOperationsZoneWidth - leftIconWidth), scrollLeft - containerWidth);
    },
    scrollToRight: function scrollToRight(depElement, scrollLeft) {
      var container = depElement.navsContainer,
          wrap = depElement.navsWrap,
          rightOperations = depElement.rightOperations,
          toRightBtn = depElement.toRightBtn;
      var rightOperationsZoneWidth = getDomWidth(rightOperations);
      var rightIconWidth = getDomWidth(toRightBtn);
      var containerWidth = getDomWidth(container);
      var wrapWidth = getDomWidth(wrap);
      return Math.min(scrollLeft + containerWidth - rightOperationsZoneWidth - rightIconWidth, wrapWidth - containerWidth + rightOperationsZoneWidth - rightIconWidth);
    }
  };

  function ownKeys$1m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1m(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var moveActiveTabIntoView = tabBase.moveActiveTabIntoView,
      calcScrollLeft = tabBase.calcScrollLeft,
      scrollToLeft = tabBase.scrollToLeft,
      scrollToRight = tabBase.scrollToRight,
      calculateCanToLeft = tabBase.calculateCanToLeft,
      calculateCanToRight = tabBase.calculateCanToRight;

  var TabNav = function TabNav(props) {
    var _props$placement = props.placement,
        placement = _props$placement === void 0 ? "top" : _props$placement,
        itemList = props.itemList,
        _props$tabClick = props.tabClick,
        tabClick = _props$tabClick === void 0 ? noop$1 : _props$tabClick,
        theme = props.theme,
        addable = props.addable,
        onAdd = props.onAdd,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        _props$onRemove = props.onRemove,
        onRemove = _props$onRemove === void 0 ? noop$1 : _props$onRemove,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop$1 : _props$onChange,
        activeValue = props.activeValue,
        children = props.children;

    var _useGlobalIcon = useGlobalIcon({
      AddIcon: AddIcon,
      ChevronLeftIcon: ChevronLeftIcon,
      ChevronRightIcon: ChevronRightIcon
    }),
        AddIcon$1 = _useGlobalIcon.AddIcon,
        ChevronLeftIcon$1 = _useGlobalIcon.ChevronLeftIcon,
        ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;

    var isCard = theme === "card";

    var _useTabClass = useTabClass(),
        tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
        tdClassGenerator = _useTabClass.tdClassGenerator,
        tdSizeClassGenerator = _useTabClass.tdSizeClassGenerator;

    var navsContainerRef = React.useRef(null);
    var navsWrapRef = React.useRef(null);
    var getIndex = React.useCallback(function (value) {
      var index = itemList.findIndex(function (item) {
        return item.value === value;
      });
      return index > -1 ? index : -1;
    }, [itemList]);
    var activeIndex = getIndex(activeValue);

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        canToLeft = _useState2[0],
        setToLeftBtnVisible = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        canToRight = _useState4[0],
        setToRightBtnVisible = _useState4[1];

    var scrollBarRef = React.useRef(null);
    var leftOperationsRef = React.useRef(null);
    var rightOperationsRef = React.useRef(null);
    var toLeftBtnRef = React.useRef(null);
    var toRightBtnRef = React.useRef(null);

    var _useState5 = React.useState(0),
        _useState6 = _slicedToArray(_useState5, 2),
        scrollLeft = _useState6[0],
        setScrollLeft = _useState6[1];

    var _useState7 = React.useState(null),
        _useState8 = _slicedToArray(_useState7, 2),
        activeTab = _useState8[0],
        setActiveTab = _useState8[1];

    React.useEffect(function () {
      var left = moveActiveTabIntoView({
        activeTab: activeTab,
        navsContainer: navsContainerRef.current,
        navsWrap: navsWrapRef.current,
        toLeftBtn: toLeftBtnRef.current,
        toRightBtn: toRightBtnRef.current,
        leftOperations: leftOperationsRef.current,
        rightOperations: rightOperationsRef.current
      }, scrollLeft);
      setScrollLeft(left);
    }, [activeTab, scrollLeft]);
    var setScrollBtnVisibleHandler = React.useCallback(function () {
      var canToleft = calculateCanToLeft({
        navsContainer: navsContainerRef.current,
        navsWrap: navsWrapRef.current,
        leftOperations: leftOperationsRef.current,
        toLeftBtn: toLeftBtnRef.current
      }, scrollLeft, placement);
      var canToRight2 = calculateCanToRight({
        navsContainer: navsContainerRef.current,
        navsWrap: navsWrapRef.current,
        rightOperations: rightOperationsRef.current,
        toRightBtn: toRightBtnRef.current
      }, scrollLeft, placement);
      setToLeftBtnVisible(canToleft);
      setToRightBtnVisible(canToRight2);
    }, [scrollLeft, placement, children]);

    var handleScroll = function handleScroll(position) {
      var val = position === "left" ? scrollToLeft({
        navsContainer: navsContainerRef.current,
        leftOperations: leftOperationsRef.current,
        toLeftBtn: toLeftBtnRef.current
      }, scrollLeft) : scrollToRight({
        navsWrap: navsWrapRef.current,
        navsContainer: navsContainerRef.current,
        rightOperations: rightOperationsRef.current,
        toRightBtn: toRightBtnRef.current
      }, scrollLeft);
      setScrollLeft(val);
    };

    React.useEffect(function () {
      var onResize = debounce_1(function () {
        if (["top", "bottom"].includes(placement.toLowerCase())) {
          var left = calcScrollLeft({
            navsContainer: navsContainerRef.current,
            navsWrap: navsWrapRef.current,
            rightOperations: rightOperationsRef.current
          }, scrollLeft);
          setScrollLeft(left);
          setScrollBtnVisibleHandler();
        }
      }, 300);
      window.addEventListener("resize", onResize);
      return function () {
        window.removeEventListener("resize", onResize);
        onResize.cancel();
      };
    });
    React.useEffect(function () {
      if (["top", "bottom"].includes(placement.toLowerCase())) {
        var left = calcScrollLeft({
          navsContainer: navsContainerRef.current,
          navsWrap: navsWrapRef.current,
          rightOperations: rightOperationsRef.current
        }, scrollLeft);
        setScrollLeft(left);
      }
    }, [itemList.length, scrollLeft, placement]);
    var TabBarCom = isCard ? null : /* @__PURE__ */React__default["default"].createElement(TabBar, {
      tabPosition: placement,
      activeId: activeIndex,
      containerRef: navsWrapRef
    });
    React.useEffect(function () {
      setScrollBtnVisibleHandler();
    }, [setScrollBtnVisibleHandler]);

    var handleTabItemRemove = function handleTabItemRemove(removeItem) {
      var removeValue = removeItem.value,
          removeIndex = removeItem.index;

      if (removeValue === activeValue) {
        var _itemList;

        onChange(removeIndex === 0 ? (_itemList = itemList[removeIndex + 1]) === null || _itemList === void 0 ? void 0 : _itemList.value : itemList[removeIndex - 1].value);
      }

      onRemove(removeItem);
    };

    var handleTabItemClick = function handleTabItemClick(clickItem) {
      tabClick(clickItem.value);
      onChange(clickItem.value);
    };

    var handleTabAdd = function handleTabAdd(e) {
      onAdd({
        e: e
      });
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: navsContainerRef,
      className: classNames$1(tdTabsClassGenerator("nav")),
      style: {
        minHeight: 48
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: leftOperationsRef,
      className: classNames$1(tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--left"))
    }, canToLeft ? /* @__PURE__ */React__default["default"].createElement("div", {
      onClick: function onClick() {
        handleScroll("left");
      },
      className: classNames$1(tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--left"), tdSizeClassGenerator(size)),
      ref: toLeftBtnRef
    }, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon$1, null)) : null), /* @__PURE__ */React__default["default"].createElement("div", {
      ref: rightOperationsRef,
      className: classNames$1(tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--right"))
    }, canToRight ? /* @__PURE__ */React__default["default"].createElement("div", {
      onClick: function onClick() {
        handleScroll("right");
      },
      className: classNames$1(tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--right"), tdSizeClassGenerator(size)),
      ref: toRightBtnRef
    }, /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon$1, null)) : null, addable ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("add-btn"), tdTabsClassGenerator("btn"), tdSizeClassGenerator(size)),
      onClick: handleTabAdd
    }, /* @__PURE__ */React__default["default"].createElement(AddIcon$1, null)) : null), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("nav-container"), isCard ? tdTabsClassGenerator("nav--card") : "", tdClassGenerator("is-".concat(placement)), addable ? tdClassGenerator("is-addable") : "")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("nav-scroll"), canToLeft || canToRight ? tdClassGenerator("is-scrollable") : ""),
      ref: scrollBarRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("nav-wrap"), ["left", "right"].includes(placement) ? tdClassGenerator("is-vertical") : "", tdClassGenerator("is-smooth")),
      style: {
        transform: "translate(".concat(-scrollLeft, "px, 0)")
      },
      ref: navsWrapRef
    }, placement !== "bottom" ? TabBarCom : null, !isCard && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("bar"), tdClassGenerator("is-".concat(placement)))
    }), itemList.map(function (v, index) {
      return /* @__PURE__ */React__default["default"].createElement(TabNavItem, _objectSpread$1m(_objectSpread$1m(_objectSpread$1m({}, props), v), {}, {
        onRemove: v.onRemove,
        key: v.value,
        label: v.label,
        isActive: activeValue === v.value,
        theme: theme,
        placement: placement,
        index: index,
        disabled: disabled || v.disabled,
        onClick: function onClick() {
          return handleTabItemClick(v);
        },
        onTabRemove: handleTabItemRemove,
        innerRef: function innerRef(ref) {
          if (activeValue === v.value) {
            setActiveTab(ref);
          }
        }
      }));
    }), placement === "bottom" ? TabBarCom : null))));
  };

  TabNav.displayName = "TabNav";

  var tabPanelDefaultProps = {
    destroyOnHide: true,
    removable: false
  };
  var tabsDefaultProps = {
    addable: false,
    dragSort: false,
    placement: "top",
    size: "medium",
    theme: "normal"
  };

  var TabPanel$1 = function TabPanel(props) {
    var _useTabClass = useTabClass(),
        tdTabPanelClassPrefix = _useTabClass.tdTabPanelClassPrefix;

    var className = props.className,
        style = props.style;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabPanelClassPrefix, className),
      style: style
    }, props.children);
  };

  TabPanel$1.displayName = "TabPanel";
  TabPanel$1.defaultProps = tabPanelDefaultProps;

  function ownKeys$1l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1l(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Tabs$1 = forwardRefWithStatics(function (props, ref) {
    var children = props.children,
        placement = props.placement,
        onRemove = props.onRemove,
        tabValue = props.value,
        onChange = props.onChange,
        className = props.className,
        style = props.style;
    var defaultValue = props.defaultValue;

    var _useTabClass = useTabClass(),
        tdTabsClassPrefix = _useTabClass.tdTabsClassPrefix,
        tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
        tdClassGenerator = _useTabClass.tdClassGenerator;

    var itemList = React__default["default"].Children.map(children, function (child) {
      if (child && child.type === TabPanel$1) {
        return child.props;
      }

      return null;
    });

    if (defaultValue === void 0 && Array.isArray(itemList) && itemList.length !== 0) {
      defaultValue = itemList[0].value;
    }

    var _useState = React.useState(defaultValue),
        _useState2 = _slicedToArray(_useState, 2),
        value = _useState2[0],
        setValue = _useState2[1];

    React.useEffect(function () {
      tabValue !== void 0 && setValue(tabValue);
    }, [tabValue]);

    var handleChange = function handleChange(v) {
      if (tabValue === void 0) {
        setValue(v);
      }

      onChange === null || onChange === void 0 ? void 0 : onChange(v);
    };

    var handleClickTab = function handleClickTab(v) {
      if (tabValue === void 0) {
        setValue(v);
      }
    };

    var renderHeader = function renderHeader() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(tdTabsClassGenerator("header"), tdClassGenerator("is-".concat(placement)))
      }, /* @__PURE__ */React__default["default"].createElement(TabNav, _objectSpread$1l(_objectSpread$1l({}, props), {}, {
        activeValue: value,
        onRemove: onRemove,
        itemList: itemList,
        tabClick: handleClickTab,
        onChange: handleChange
      })));
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames$1(tdTabsClassPrefix, className),
      style: style
    }, placement !== "bottom" ? renderHeader() : null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("content"), tdClassGenerator("is-".concat(placement)))
    }, React__default["default"].Children.map(children, function (child) {
      if (child && child.type === TabPanel$1) {
        if (child.props.value === value) {
          return child;
        }

        if (child.props.destroyOnHide === false) {
          return /* @__PURE__ */React__default["default"].createElement(TabPanel$1, {
            style: {
              display: "none"
            }
          }, child.props.children);
        }
      }

      return null;
    })), placement === "bottom" ? renderHeader() : null);
  }, {
    TabPanel: TabPanel$1
  });
  Tabs$1.displayName = "Tabs";
  Tabs$1.defaultProps = tabsDefaultProps;

  var Tabs = Tabs$1;

  function ownKeys$1k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1k(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var seed = 0;
  var listMap = /* @__PURE__ */new Map();
  var NotificationRemoveContext = /*#__PURE__*/React__default["default"].createContext(noop$1);
  var NotificationList = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var placement = props.placement,
        zIndex = props.zIndex;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        list = _useState2[0],
        setList = _useState2[1];

    var remove = function remove(key) {
      setList(function (oldList) {
        var index = oldList.findIndex(function (item) {
          return item.key === key;
        });

        if (index !== -1) {
          var tempList = _toConsumableArray(oldList);

          tempList.splice(index, 1);
          return _toConsumableArray(tempList);
        }

        return oldList;
      });
    };

    var calOffset = function calOffset(offset) {
      return isNaN(Number(offset)) ? offset : "".concat(offset, "px");
    };

    var push = function push(theme, options) {
      var key = String(seed += 1);

      var _ref = _toConsumableArray(options.offset),
          horizontal = _ref[0],
          vertical = _ref[1];

      var horizontalOffset = calOffset(horizontal);
      var verticalOffset = calOffset(vertical);
      var style = {
        marginTop: verticalOffset,
        marginBottom: verticalOffset,
        marginLeft: horizontalOffset,
        marginRight: horizontalOffset
      };
      var ref2 = /*#__PURE__*/React__default["default"].createRef();
      setList(function (oldList) {
        return [].concat(_toConsumableArray(oldList), [_objectSpread$1k(_objectSpread$1k({}, options), {}, {
          key: key,
          theme: theme,
          style: style,
          ref: ref2,
          id: key
        })]);
      });
      return Promise.resolve(ref2.current);
    };

    var removeAll = function removeAll() {
      setList([]);
    };

    React.useImperativeHandle(ref, function () {
      return {
        push: push,
        remove: remove,
        removeAll: removeAll
      };
    });
    return /* @__PURE__ */React__default["default"].createElement(NotificationRemoveContext.Provider, {
      value: remove
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-notification__show--").concat(placement),
      style: {
        zIndex: zIndex
      }
    }, list.map(function (props2) {
      var _props2$onDurationEnd = props2.onDurationEnd,
          _onDurationEnd = _props2$onDurationEnd === void 0 ? noop$1 : _props2$onDurationEnd,
          _props2$onCloseBtnCli = props2.onCloseBtnClick,
          _onCloseBtnClick = _props2$onCloseBtnCli === void 0 ? noop$1 : _props2$onCloseBtnCli;

      return /* @__PURE__ */React__default["default"].createElement(Notification$1, _objectSpread$1k(_objectSpread$1k({
        ref: props2.ref,
        key: props2.key
      }, props2), {}, {
        onDurationEnd: function onDurationEnd() {
          remove(props2.key);

          _onDurationEnd();
        },
        onCloseBtnClick: function onCloseBtnClick(e) {
          remove(props2.key);

          _onCloseBtnClick(e);
        }
      }));
    })));
  });
  var fetchListInstance = function fetchListInstance(placement, attach, zIndex) {
    return new Promise(function (resolve) {
      if (listMap.has(placement)) {
        resolve(listMap.get(placement));
      } else {
        var hasExec = false;
        ReactDOM__default["default"].render( /* @__PURE__ */React__default["default"].createElement(NotificationList, {
          attach: attach,
          placement: placement,
          zIndex: Number(zIndex),
          ref: function ref(instance) {
            if (!hasExec) {
              hasExec = true;
              listMap.set(placement, instance);
              resolve(instance);
            }
          }
        }), attach);
      }
    });
  };

  var notificationDefaultProps = {
    duration: 3e3,
    theme: "info"
  };

  var Notification$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var title = props.title,
        content = props.content,
        theme = props.theme,
        icon = props.icon,
        closeBtn = props.closeBtn,
        footer = props.footer,
        duration = props.duration,
        _props$onCloseBtnClic = props.onCloseBtnClick,
        onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop$1 : _props$onCloseBtnClic,
        _props$onDurationEnd = props.onDurationEnd,
        onDurationEnd = _props$onDurationEnd === void 0 ? noop$1 : _props$onDurationEnd,
        style = props.style,
        className = props.className,
        id = props.id;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var baseClassPrefix = "".concat(classPrefix, "-notification");

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon,
      InfoCircleFilledIcon: InfoCircleFilledIcon,
      CheckCircleFilledIcon: CheckCircleFilledIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon,
        InfoCircleFilledIcon$1 = _useGlobalIcon.InfoCircleFilledIcon,
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon;

    var remove = React.useContext(NotificationRemoveContext);
    React__default["default"].useImperativeHandle(ref, function () {
      return {
        close: function close() {
          return remove(id);
        }
      };
    });
    React__default["default"].useEffect(function () {
      var timer;

      if (duration > 0) {
        timer = setTimeout(function () {
          clearTimeout(timer);
          onDurationEnd();
        }, duration);
      }

      return function () {
        if (timer) clearTimeout(timer);
      };
    }, []);

    var renderIcon = function renderIcon() {
      if (typeof icon === "boolean" && !icon) return null;

      var IconWrapper = function IconWrapper(_ref) {
        var children = _ref.children;
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(baseClassPrefix, "__icon")
        }, children);
      };

      if ( /*#__PURE__*/React__default["default"].isValidElement(icon)) {
        return /* @__PURE__ */React__default["default"].createElement(IconWrapper, null, icon);
      }

      if (theme && theme === "success") {
        return /* @__PURE__ */React__default["default"].createElement(IconWrapper, null, /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon$1, {
          className: "".concat(classPrefix, "-is-success")
        }));
      }

      if (theme && ["info", "warning", "error"].indexOf(theme) >= 0) {
        return /* @__PURE__ */React__default["default"].createElement(IconWrapper, null, /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon$1, {
          className: "".concat(classPrefix, "-is-").concat(theme)
        }));
      }

      return null;
    };

    var renderCloseBtn = function renderCloseBtn() {
      if (typeof closeBtn === "boolean") {
        return closeBtn && /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, {
          className: "".concat(baseClassPrefix, "-icon-close"),
          onClick: function onClick(e) {
            onCloseBtnClick({
              e: e
            });
          }
        });
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(baseClassPrefix, "-close"),
        onClick: function onClick(e) {
          onCloseBtnClick({
            e: e
          });
        }
      }, renderTNode(closeBtn));
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(className, baseClassPrefix, _defineProperty$3({}, "".concat(baseClassPrefix, "-is-").concat(theme), theme)),
      style: style
    }, renderIcon(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassPrefix, "__main")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassPrefix, "__title__wrap")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(baseClassPrefix, "__title")
    }, title), renderCloseBtn()), content && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassPrefix, "__content")
    }, renderTNode(content)), footer && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassPrefix, "__detail")
    }, renderTNode(footer))));
  });
  Notification$1.displayName = "Notification";
  Notification$1.defaultProps = notificationDefaultProps;

  function ownKeys$1j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1j(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var pluginDefaultConfig = _objectSpread$1j(_objectSpread$1j({}, notificationDefaultProps), {}, {
    zIndex: 6e3,
    placement: "top-right",
    offset: ["16px", "16px"]
  });

  var getConfig = function getConfig(options) {
    var currentOptions = _objectSpread$1j({}, options);

    for (var i in currentOptions) {
      if (typeof currentOptions[i] === "undefined") {
        delete currentOptions[i];
      }
    }

    if (typeof currentOptions.duration !== "number" || currentOptions.duration < 0) {
      delete currentOptions.duration;
    }

    if (["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(currentOptions.placement) < 0) {
      delete currentOptions.placement;
    }

    if (["info", "success", "warning", "error"].indexOf(currentOptions.theme) < 0) {
      delete currentOptions.theme;
    }

    if (!Array.isArray(currentOptions.offset)) {
      delete currentOptions.offset;
    }

    return _objectSpread$1j(_objectSpread$1j({}, pluginDefaultConfig), currentOptions);
  };
  var setGlobalConfig = function setGlobalConfig(options) {
    pluginDefaultConfig = _objectSpread$1j({}, getConfig(options));
  };

  var renderNotification = function renderNotification(theme, options) {
    if (_typeof$1(options) !== "object") return;
    var configs = getConfig(options);
    var placement = configs.placement;

    var attach = function () {
      if (options.attach && typeof options.attach === "string") {
        var element2 = document.querySelector(options.attach);
        if (element2 instanceof HTMLElement) return element2;
      }

      if (options.attach instanceof HTMLElement) return options.attach;
      var containerId = "tdesign-notification-".concat(placement);
      var container = document.querySelector("#".concat(containerId));

      if (container && container instanceof HTMLElement) {
        return container;
      }

      var element = document.createElement("div");
      element.setAttribute("id", containerId);
      document.body.appendChild(element);
      return element;
    }();

    return fetchListInstance(placement, attach, configs.zIndex).then(function (listInstance) {
      return listInstance.push(theme, configs);
    });
  };

  var NotificationPlugin$1 = function NotificationPlugin(theme, props) {
    return renderNotification(theme, props);
  };

  NotificationPlugin$1.info = function (options) {
    return renderNotification("info", options);
  };

  NotificationPlugin$1.success = function (options) {
    return renderNotification("success", options);
  };

  NotificationPlugin$1.warning = function (options) {
    return renderNotification("warning", options);
  };

  NotificationPlugin$1.error = function (options) {
    return renderNotification("error", options);
  };

  NotificationPlugin$1.close = function (promise) {
    return promise.then(function (instance) {
      return instance.close();
    });
  };

  NotificationPlugin$1.closeAll = function () {
    return listMap.forEach(function (list) {
      return list.removeAll();
    });
  };

  NotificationPlugin$1.config = function (options) {
    return setGlobalConfig(options);
  };

  var Notification = Notification$1;
  var notification = NotificationPlugin$1;
  var NotificationPlugin = NotificationPlugin$1;

  var MenuContext = /*#__PURE__*/React.createContext({
    setState: noop$1,
    onExpand: noop$1
  });

  var DEFAULT_MENU_WIDTH = [232, 64];

  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */

  function noop() {// No operation performed.
  }

  var noop_1 = noop;

  var MenuBlockType = /* @__PURE__ */function (MenuBlockType2) {
    MenuBlockType2["MenuItem"] = "MenuItem";
    MenuBlockType2["SubMenu"] = "SubMenu";
    MenuBlockType2["MenuItemGroup"] = "MenuItemGroup";
    MenuBlockType2["MenuGroup"] = "MenuGroup";
    return MenuBlockType2;
  }(MenuBlockType || {});

  function checkSubMenuChildExpanded(children, expanded, value) {
    var _child$type, _expandedChild$type;

    var resultExpanded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var childValues = React__default["default"].Children.map(children, function (child2) {
      return child2.props.value;
    });
    var index = childValues.indexOf(value);
    var child = children[index];

    if (index > -1 && (child === null || child === void 0 ? void 0 : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === MenuBlockType.SubMenu) {
      return [].concat(_toConsumableArray(resultExpanded), [value]);
    }

    var expandedIndex = childValues.indexOf(expanded[0]);
    var expandedChild = children[expandedIndex];

    if (expandedIndex > -1 && (expandedChild === null || expandedChild === void 0 ? void 0 : (_expandedChild$type = expandedChild.type) === null || _expandedChild$type === void 0 ? void 0 : _expandedChild$type.displayName) === MenuBlockType.SubMenu) {
      return checkSubMenuChildExpanded(expandedChild.props.children, expanded.slice(1), value, [].concat(_toConsumableArray(resultExpanded), [expanded[0]]));
    }

    return [value];
  }

  function ownKeys$1i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function useMenuContext(_ref) {
    var defaultValue = _ref.defaultValue,
        defaultExpanded = _ref.defaultExpanded,
        expandMutex = _ref.expandMutex,
        children = _ref.children,
        _ref$onExpand = _ref.onExpand,
        onExpand = _ref$onExpand === void 0 ? noop_1 : _ref$onExpand,
        _ref$onChange = _ref.onChange,
        onChange = _ref$onChange === void 0 ? noop_1 : _ref$onChange,
        value = _ref.value,
        expanded = _ref.expanded,
        collapsed = _ref.collapsed,
        expandType = _ref.expandType,
        theme = _ref.theme,
        mode = _ref.mode;

    var _useState = React.useState({
      active: defaultValue,
      expanded: defaultExpanded
    }),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

    var setStateValue = function setStateValue(menuState) {
      return setState(_objectSpread$1i(_objectSpread$1i({}, state), menuState));
    };

    var handleExpandChange = function handleExpandChange(value2, expanded2) {
      var nextExpand = [];
      var index = expanded2.indexOf(value2);

      if (index > -1) {
        if (expandMutex) {
          nextExpand = expanded2.slice(0, index);
        } else {
          nextExpand = expanded2.filter(function (item) {
            return item !== value2;
          });
        }
      } else if (expandMutex) {
        nextExpand = checkSubMenuChildExpanded(children, expanded2, value2);
      } else {
        nextExpand = [].concat(_toConsumableArray(expanded2), [value2]);
      }

      onExpand(nextExpand);
      setState({
        expanded: nextExpand
      });
    };

    return {
      value: {
        onExpand: handleExpandChange,
        onChange: onChange,
        active: value || state.active,
        expanded: expanded || state.expanded,
        collapsed: collapsed || state.collapsed,
        setState: setStateValue,
        expandMutex: expandMutex,
        expandType: collapsed ? "popup" : expandType,
        mode: mode,
        theme: theme
      }
    };
  }

  var menuDefaultProps = {
    collapsed: false,
    expandMutex: false,
    expandType: "normal",
    theme: "light",
    width: "232px"
  };

  var checkIsSubMenu = function checkIsSubMenu(child) {
    if (!child) return false;
    var displayName = child.type.displayName;
    return displayName === MenuBlockType.SubMenu;
  };
  var checkIsMenuItem = function checkIsMenuItem(child) {
    if (!child) return false;
    var displayName = child.type.displayName;
    return displayName === MenuBlockType.MenuItem;
  };
  var checkIsMenuGroup = function checkIsMenuGroup(child) {
    if (!child) return false;
    var displayName = child.type.displayName;
    return displayName === MenuBlockType.MenuGroup;
  };

  var checkSubMenuChildrenActive = function checkSubMenuChildrenActive(children, active) {
    var activeFlag = false;
    React__default["default"].Children.forEach(children, function (child) {
      if (activeFlag) return;

      if (checkIsSubMenu(child)) {
        activeFlag = checkSubMenuChildrenActive(child.props.children, active);
      } else if (checkIsMenuItem(child)) {
        activeFlag = active === child.props.value ? true : activeFlag;
      }
    });
    return activeFlag;
  };

  var checkSubMenuActive = function checkSubMenuActive(children, active) {
    return React__default["default"].Children.toArray(children).find(function (child) {
      return checkIsSubMenu(child) && (child.props.value === active || checkSubMenuChildrenActive(child.props.children, active));
    });
  };

  function ownKeys$1h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1h(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TabPanel = Tabs.TabPanel;

  var HeadMenu = function HeadMenu(props) {
    var children = props.children,
        className = props.className,
        _props$theme = props.theme,
        theme = _props$theme === void 0 ? "light" : _props$theme,
        style = props.style,
        logo = props.logo,
        operations = props.operations;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useMenuContext = useMenuContext(_objectSpread$1h(_objectSpread$1h({}, props), {}, {
      children: children,
      mode: "title"
    })),
        value = _useMenuContext.value;

    var childList = React.useMemo(function () {
      if (value.expandType === "popup") return null;
      var activeMenu = checkSubMenuActive(children, value.active);
      if (!activeMenu) return null;
      var child = activeMenu.props.children;
      if (Array.isArray(child)) return child;
      if (isObject_1(child)) return [child];
      return activeMenu.props.children;
    }, [children, value.expandType, value.active]);
    var currentChildListValues = (childList === null || childList === void 0 ? void 0 : childList.length) > 0 ? childList.map(function (item) {
      return item.props.value;
    }) : [];
    return /* @__PURE__ */React__default["default"].createElement(MenuContext.Provider, {
      value: value
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-head-menu"), "".concat(classPrefix, "-menu--").concat(theme), className),
      style: _objectSpread$1h({}, style)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-head-menu__inner")
    }, logo && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__logo")
    }, logo), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-menu")
    }, children), operations && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__operations")
    }, operations)), (childList === null || childList === void 0 ? void 0 : childList.length) > 0 && /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-head-menu__submenu ").concat(classPrefix, "-submenu")
    }, /* @__PURE__ */React__default["default"].createElement(Tabs, {
      value: currentChildListValues.includes(value.active) ? value.active : currentChildListValues[0],
      onChange: value.onChange
    }, childList.map(function (_ref) {
      var props2 = _ref.props;
      return /* @__PURE__ */React__default["default"].createElement(TabPanel, {
        value: props2.value,
        key: props2.value,
        label: props2.children
      });
    })))));
  };

  var getSubMenuChildCount = function getSubMenuChildCount(children) {
    var count = 0;
    React__default["default"].Children.forEach(children, function (child) {
      if (checkIsSubMenu(child) || checkIsMenuGroup(child)) {
        count += getSubMenuChildCount(child.props.children) + 1;
      } else {
        count += 1;
      }
    });
    return count;
  };
  var MENU_ITEM_HEIGHT = 50;
  var getSubMenuMaxHeight = function getSubMenuMaxHeight(children) {
    return getSubMenuChildCount(children) * MENU_ITEM_HEIGHT;
  };

  var DEFAULT_SUBMENU_PADDING_LEFT = 44;
  var INCREASE_SUBMENU_PADDING_LEFT = 16;
  var cacularPaddingLeft = function cacularPaddingLeft(level) {
    return DEFAULT_SUBMENU_PADDING_LEFT + level * INCREASE_SUBMENU_PADDING_LEFT;
  };

  function ownKeys$1g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var SubAccordion = function SubAccordion(props) {
    var _classNames, _classNames2;

    var content = props.content,
        _props$children = props.children,
        children = _props$children === void 0 ? content : _props$children,
        disabled = props.disabled,
        icon = props.icon,
        title = props.title,
        value = props.value,
        className = props.className,
        style = props.style,
        _props$level = props.level,
        level = _props$level === void 0 ? 1 : _props$level;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        open = _useState2[0],
        setOpen = _useState2[1];

    var _useContext = React.useContext(MenuContext),
        _useContext$expanded = _useContext.expanded,
        expanded = _useContext$expanded === void 0 ? [] : _useContext$expanded,
        onExpand = _useContext.onExpand,
        active = _useContext.active,
        expandType = _useContext.expandType;

    var isPopUp = expandType === "popup";
    var isExpand = expanded.includes(value) && !disabled && !isPopUp;

    var handleClick = function handleClick(e) {
      e.stopPropagation();
      onExpand(value, expanded);
    };

    var handleMouseEvent = function handleMouseEvent(type) {
      if (!isPopUp) return;
      if (type === "enter") setOpen(true);else if (type === "leave") setOpen(false);
    };

    var childrens = React__default["default"].Children.map(children, function (child) {
      return /*#__PURE__*/React__default["default"].cloneElement(child, {
        className: classNames$1("".concat(classPrefix, "-menu__item--plain"), "".concat(classPrefix, "-submenu__item"), "".concat(classPrefix, "-submenu__item--icon"))
      });
    });
    var childStyle = {
      maxHeight: isExpand || open && isPopUp ? getSubMenuMaxHeight(children) : 0
    };
    var isOpen = React.useMemo(function () {
      if (disabled) return false;
      if (isPopUp) return open;
      return isExpand;
    }, [disabled, isPopUp, open, isExpand]);
    var menuPaddingLeft = cacularPaddingLeft(level - 1);
    var fakeArrowStyle = isPopUp && level > 1 ? {
      transform: "rotate(-90deg)"
    } : {};
    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(classPrefix, "-submenu"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-opened"), isOpen), _classNames)),
      onClick: handleClick,
      style: style,
      onMouseEnter: function onMouseEnter() {
        return handleMouseEvent("enter");
      },
      onMouseLeave: function onMouseLeave() {
        return handleMouseEvent("leave");
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu__item"), (_classNames2 = {}, _defineProperty$3(_classNames2, "".concat(classPrefix, "-is-opened"), isOpen), _defineProperty$3(_classNames2, "".concat(classPrefix, "-is-active"), checkSubMenuChildrenActive(children, active)), _classNames2))
    }, icon, " ", /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-menu__content")
    }, title), /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
      style: fakeArrowStyle,
      isActive: isOpen,
      disabled: disabled
    })), isPopUp ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu__popup"), "".concat(classPrefix, "-is-vertical"), _defineProperty$3({}, "".concat(classPrefix, "-is-opened"), isOpen))
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(classPrefix, "-menu__popup-wrapper"), _defineProperty$3({}, "".concat(classPrefix, "-is-opened"), isOpen)),
      key: "popup",
      style: childStyle
    }, childrens)) : /* @__PURE__ */React__default["default"].createElement("ul", {
      key: "normal",
      style: _objectSpread$1g(_objectSpread$1g({}, childStyle), {}, {
        "--padding-left": "".concat(menuPaddingLeft, "px")
      }),
      className: "".concat(classPrefix, "-menu__sub")
    }, childrens));
  };

  var SubTitleMenu = function SubTitleMenu(props) {
    var _popRef$current, _classNames6;

    var className = props.className,
        style = props.style,
        children = props.children,
        title = props.title,
        value = props.value,
        level = props.level;

    var _useContext2 = React.useContext(MenuContext),
        active = _useContext2.active,
        onChange = _useContext2.onChange,
        expandType = _useContext2.expandType;

    var _useConfig2 = useConfig$1(),
        classPrefix = _useConfig2.classPrefix;

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        open = _useState4[0],
        setOpen = _useState4[1];

    var popRef = React.useRef();

    var handleClick = function handleClick() {
      return onChange(value);
    };

    var subMenuRef = React.useRef();
    useRipple(subMenuRef);
    var isPopUp = expandType === "popup";
    var isActive = checkSubMenuChildrenActive(children, active) || active === value;

    var handleMouseEvent = function handleMouseEvent(type) {
      if (!isPopUp) return;
      if (type === "enter") setOpen(true);else if (type === "leave") setOpen(false);
    };

    var fakeArrowStyle = level > 1 ? {
      transform: "rotate(-90deg)"
    } : {};
    var submenuMaxHeight = getSubMenuMaxHeight(children);
    var popupMaxHeight = ((_popRef$current = popRef.current) === null || _popRef$current === void 0 ? void 0 : _popRef$current.getBoundingClientRect().height) || submenuMaxHeight;
    var showPopup = isPopUp && submenuMaxHeight > 0;
    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(classPrefix, "-submenu"), className, _defineProperty$3({}, "".concat(classPrefix, "-is-opened"), open)),
      onMouseEnter: function onMouseEnter() {
        return handleMouseEvent("enter");
      },
      onMouseLeave: function onMouseLeave() {
        return handleMouseEvent("leave");
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: subMenuRef,
      className: classNames$1("".concat(classPrefix, "-menu__item"), (_classNames6 = {}, _defineProperty$3(_classNames6, "".concat(classPrefix, "-is-active"), isActive), _defineProperty$3(_classNames6, "".concat(classPrefix, "-is-opened"), open), _classNames6)),
      onClick: handleClick,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement("span", null, title), showPopup && /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
      style: fakeArrowStyle,
      isActive: open
    })), showPopup && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu__popup"), _defineProperty$3({}, "".concat(classPrefix, "-is-opened"), open)),
      style: {
        "--popup-max-height": "".concat(popupMaxHeight, "px")
      }
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      ref: popRef,
      className: classNames$1("".concat(classPrefix, "-menu__popup-wrapper"))
    }, children)));
  };

  var SubMenu = function SubMenu(props) {
    var _useContext3 = React.useContext(MenuContext),
        mode = _useContext3.mode;

    var children = props.children,
        _props$level2 = props.level,
        level = _props$level2 === void 0 ? 1 : _props$level2;

    var changeItemLevel = function changeItemLevel(item) {
      if (checkIsSubMenu(item)) {
        return /*#__PURE__*/React__default["default"].cloneElement(item, {
          level: level + 1
        });
      }

      if (checkIsMenuGroup(item)) {
        var groupChildren = React__default["default"].Children.map(item.props.children, function (item2) {
          return changeItemLevel(item2);
        });
        return /*#__PURE__*/React__default["default"].cloneElement(item, {
          level: level + 1
        }, groupChildren);
      }

      return item;
    };

    var childElement = React__default["default"].Children.map(children, function (item) {
      return changeItemLevel(item);
    });
    if (mode === "accordion") return /* @__PURE__ */React__default["default"].createElement(SubAccordion, _objectSpread$1g({}, props), childElement);
    if (mode === "title") return /* @__PURE__ */React__default["default"].createElement(SubTitleMenu, _objectSpread$1g({}, props), childElement);
    return null;
  };

  SubMenu.displayName = "SubMenu";

  function ownKeys$1f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1f(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var MenuItem = function MenuItem(props) {
    var _classNames;

    var content = props.content,
        _props$children = props.children,
        children = _props$children === void 0 ? content : _props$children,
        disabled = props.disabled,
        href = props.href,
        _props$target = props.target,
        target = _props$target === void 0 ? "_self" : _props$target,
        value = props.value,
        className = props.className,
        style = props.style,
        icon = props.icon,
        onClick = props.onClick;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var menuItemRef = React.useRef();
    useRipple(menuItemRef);

    var _useContext = React.useContext(MenuContext),
        onChange = _useContext.onChange,
        setState = _useContext.setState,
        active = _useContext.active;

    var handleClick = function handleClick(e) {
      e.stopPropagation();
      if (disabled) return;
      onClick && onClick({
        e: e
      });
      onChange(value);
      setState({
        active: value
      });
    };

    return /* @__PURE__ */React__default["default"].createElement("li", {
      ref: menuItemRef,
      className: classNames$1("".concat(classPrefix, "-menu__item"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-active"), value === active), _defineProperty$3(_classNames, "".concat(classPrefix, "-menu__item--plain"), !icon), _classNames)),
      style: _objectSpread$1f({}, style),
      onClick: handleClick
    }, icon, href ? /* @__PURE__ */React__default["default"].createElement("a", {
      href: href,
      target: target,
      className: classNames$1("".concat(classPrefix, "-menu__item-link"))
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-menu__content")
    }, children)) : /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-menu__content")
    }, children));
  };

  MenuItem.displayName = "MenuItem";

  var MenuGroup = function MenuGroup(_ref) {
    var title = _ref.title,
        children = _ref.children,
        _ref$level = _ref.level,
        level = _ref$level === void 0 ? 1 : _ref$level;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var itemAndGroupPaddingBias = 28;
    var menuPaddingLeft = cacularPaddingLeft(level - 1) - itemAndGroupPaddingBias;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu-group"))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu-group__title")),
      style: {
        paddingLeft: "".concat(menuPaddingLeft, "px")
      }
    }, title), children);
  };

  MenuGroup.displayName = "MenuGroup";

  function ownKeys$1e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Menu$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var className = props.className,
        _props$width = props.width,
        width = _props$width === void 0 ? DEFAULT_MENU_WIDTH : _props$width,
        children = props.children,
        theme = props.theme,
        logo = props.logo,
        operations = props.operations,
        style = props.style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useMenuContext = useMenuContext(_objectSpread$1e(_objectSpread$1e({}, props), {}, {
      children: children,
      mode: "accordion"
    })),
        value = _useMenuContext.value;

    var menuWidthArr = Array.isArray(width) ? width : [width, DEFAULT_MENU_WIDTH[1]];
    var collapsed = value.collapsed;
    return /* @__PURE__ */React__default["default"].createElement(MenuContext.Provider, {
      value: value
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-default-menu"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-collapsed"), collapsed), _defineProperty$3(_classNames, "".concat(classPrefix, "-menu--dark"), theme === "dark"), _classNames)),
      style: _objectSpread$1e({
        width: collapsed ? menuWidthArr[1] : menuWidthArr[0]
      }, style)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-default-menu__inner")
    }, logo && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__logo")
    }, logo), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(classPrefix, "-menu"), _defineProperty$3({}, "".concat(classPrefix, "-menu--scroll"), !collapsed))
    }, children), operations && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__operations")
    }, operations))));
  }, {
    HeadMenu: HeadMenu,
    SubMenu: SubMenu,
    MenuItem: MenuItem,
    MenuGroup: MenuGroup
  });
  Menu$1.displayName = "Menu";
  Menu$1.defaultProps = menuDefaultProps;

  var Menu = Menu$1;

  var Dialog = Dialog$1;
  var dialog = DialogPlugin$1;
  var DialogPlugin = DialogPlugin$1;

  function useTreeConfig() {
    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var _useLocaleReceiver = useLocaleReceiver("tree"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        _locale = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    return React.useMemo(function () {
      var tree = "".concat(prefix, "-tree");
      var treeClassNames = {
        icon: "".concat(prefix, "-icon"),
        folderIcon: "".concat(prefix, "-folder-icon"),
        actived: "".concat(prefix, "-is-active"),
        disabled: "".concat(prefix, "-is-disabled"),
        treeIconRight: "".concat(prefix, "-icon-arrow-right"),
        treeIconDown: "".concat(prefix, "-icon-arrow-down"),
        tree: tree,
        treeFx: "".concat(tree, "--transition"),
        treeBlockNode: "".concat(tree, "--block-node"),
        treeEmpty: "".concat(tree, "__empty"),
        treeList: "".concat(tree, "__list"),
        treeNode: "".concat(tree, "__item"),
        treeNodeOpen: "".concat(tree, "__item--open"),
        treeHoverable: "".concat(tree, "--hoverable"),
        treeCheckable: "".concat(tree, "--checkable"),
        treeLabel: "".concat(tree, "__label"),
        treeLabelStrictly: "".concat(tree, "__label--strictly"),
        treeIcon: "".concat(tree, "__icon"),
        treeIconDefault: "".concat(tree, "__icon--default"),
        treeSpace: "".concat(tree, "__space"),
        treeOperations: "".concat(tree, "__operations"),
        line: "".concat(tree, "__line"),
        lineIsLeaf: "".concat(tree, "__line--leaf"),
        lineIsFirst: "".concat(tree, "__line--first"),
        treeNodeShow: "".concat(tree, "__item--show"),
        treeClickable: "".concat(tree, "__item--clickable"),
        loading: "".concat(prefix, "-icon-loading ").concat(prefix, "-icon-loading-blue"),
        toggleEnter: "".concat(tree, "__item--enter-active"),
        toggleLeave: "".concat(tree, "__item--leave-active")
      };
      var transitionNames = {
        treeNode: "".concat(prefix, "-tree-toggle")
      };
      var transitionClassNames = {
        enter: treeClassNames.toggleEnter,
        exit: treeClassNames.toggleLeave
      };
      return {
        treeClassNames: treeClassNames,
        transitionNames: transitionNames,
        transitionClassNames: transitionClassNames,
        transitionDuration: 300,
        locale: function locale(key) {
          return t(_locale[key]);
        }
      };
    }, [_locale, prefix, t]);
  }

  function useControllable(props) {
    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onChange = _useControlled2[1];

    var _useControlled3 = useControlled(props, "expanded", props.onExpand),
        _useControlled4 = _slicedToArray(_useControlled3, 2),
        expanded = _useControlled4[0],
        onExpand = _useControlled4[1];

    var _useControlled5 = useControlled(props, "actived", props.onActive),
        _useControlled6 = _slicedToArray(_useControlled5, 2),
        actived = _useControlled6[0],
        onActive = _useControlled6[1];

    return {
      value: value,
      onChange: onChange,
      expanded: expanded,
      onExpand: onExpand,
      actived: actived,
      onActive: onActive
    };
  }

  function ownKeys$1d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TreeItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames4;

    var node = props.node,
        icon = props.icon,
        label = props.label,
        line = props.line,
        expandOnClickNode = props.expandOnClickNode,
        activable = props.activable,
        checkProps = props.checkProps,
        disableCheck = props.disableCheck,
        operations = props.operations,
        onClick = props.onClick,
        _onChange = props.onChange;

    var _useGlobalIcon = useGlobalIcon({
      CaretRightSmallIcon: CaretRightSmallIcon
    }),
        CaretRightSmallIcon$1 = _useGlobalIcon.CaretRightSmallIcon;

    var level = node.level;

    var _useTreeConfig = useTreeConfig(),
        treeClassNames = _useTreeConfig.treeClassNames,
        locale = _useTreeConfig.locale;

    var handleClick = function handleClick(evt) {
      onClick === null || onClick === void 0 ? void 0 : onClick(node, {
        event: evt,
        expand: expandOnClickNode,
        active: activable
      });
    };

    var handleItemClick = function handleItemClick(evt) {
      if (node.loading) {
        return;
      }

      onClick === null || onClick === void 0 ? void 0 : onClick(node, {
        event: evt,
        expand: true,
        active: false
      });
    };

    var handleIconClick = function handleIconClick(evt) {
      evt.stopPropagation();
      handleItemClick(evt);
    };

    var stopPropagation = function stopPropagation(e) {
      e.stopPropagation();
    };

    var renderIcon = function renderIcon() {
      var isDefaultIcon = false;

      var renderIconNode = function renderIconNode() {
        if (icon === false) {
          return null;
        }

        if (icon instanceof Function) {
          return icon(node.getModel());
        }

        if ( /*#__PURE__*/React__default["default"].isValidElement(icon)) {
          return icon;
        }

        if (icon && icon !== true) {
          throw new Error("invalid type of icon");
        }

        if (!node.isLeaf()) {
          isDefaultIcon = true;

          if (node.loading && node.expanded) {
            return /* @__PURE__ */React__default["default"].createElement(Loading, {
              loading: true
            });
          }

          return /* @__PURE__ */React__default["default"].createElement(CaretRightSmallIcon$1, {
            className: treeClassNames.treeIconRight
          });
        }

        return null;
      };

      var iconNode = renderIconNode();
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: classNames$1(treeClassNames.treeIcon, treeClassNames.folderIcon, _defineProperty$3({}, treeClassNames.treeIconDefault, isDefaultIcon)),
        onClick: handleIconClick
      }, iconNode);
    };

    var renderLine = function renderLine() {
      var iconVisible = icon !== false;

      if (line === false) {
        return null;
      }

      if (line instanceof Function) {
        return line(node.getModel());
      }

      if ( /*#__PURE__*/React__default["default"].isValidElement(line)) {
        return line;
      }

      if (node.parent && node.tree) {
        var _classNames2;

        var shadowStyles = [];
        var parents = node.getParents();
        parents.pop();
        parents.forEach(function (pnode, index) {
          if (!pnode.vmIsLast) {
            shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
          }
        });
        var styles2 = {
          "--level": level,
          boxShadow: shadowStyles.join(",")
        };
        return /* @__PURE__ */React__default["default"].createElement("span", {
          className: classNames$1(treeClassNames.line, (_classNames2 = {}, _defineProperty$3(_classNames2, treeClassNames.lineIsLeaf, node.vmIsLeaf || !iconVisible), _defineProperty$3(_classNames2, treeClassNames.lineIsFirst, node.vmIsFirst && iconVisible), _classNames2)),
          style: styles2,
          onClick: stopPropagation
        });
      }

      return null;
    };

    var labelRef = React.useRef();
    useRipple(labelRef);

    var renderLabel = function renderLabel() {
      var emptyView = locale("empty");
      var labelText = "";

      if (label instanceof Function) {
        labelText = label(node.getModel()) || emptyView;
      } else {
        labelText = node.label || emptyView;
      }

      var labelClasses = classNames$1(treeClassNames.treeLabel, treeClassNames.treeLabelStrictly, _defineProperty$3({}, treeClassNames.actived, node.isActivable() ? node.actived : false));

      if (node.isCheckable()) {
        var checkboxDisabled;

        if (typeof disableCheck === "function") {
          checkboxDisabled = disableCheck(node.getModel());
        } else {
          checkboxDisabled = !!disableCheck;
        }

        if (node.isDisabled()) {
          checkboxDisabled = true;
        }

        return /* @__PURE__ */React__default["default"].createElement(Checkbox, _objectSpread$1d({
          ref: labelRef,
          checked: node.checked,
          indeterminate: node.indeterminate,
          disabled: checkboxDisabled,
          name: String(node.value),
          onChange: function onChange() {
            return _onChange(node);
          },
          className: labelClasses
        }, checkProps), /* @__PURE__ */React__default["default"].createElement("span", {
          "date-target": "label"
        }, labelText));
      }

      return /* @__PURE__ */React__default["default"].createElement("span", {
        ref: labelRef,
        "date-target": "label",
        className: labelClasses
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        style: {
          position: "relative"
        }
      }, labelText));
    };

    var renderOperations = function renderOperations() {
      var operationsView = null;

      if (operations) {
        if ( /*#__PURE__*/React__default["default"].isValidElement(operations)) {
          operationsView = operations;
        } else if (operations instanceof Function) {
          var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
          operationsView = operations(treeNodeModel);
        } else {
          throw new Error("invalid type of operations");
        }
      }

      if (operationsView) {
        return /* @__PURE__ */React__default["default"].createElement("span", {
          className: treeClassNames.treeOperations,
          "date-target": "operations"
        }, operationsView);
      }

      return null;
    };

    var styles = {
      "--level": level,
      boxShadow: ""
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      "data-value": node.value,
      "data-level": level,
      className: classNames$1(treeClassNames.treeNode, (_classNames4 = {}, _defineProperty$3(_classNames4, treeClassNames.treeNodeOpen, node.expanded), _defineProperty$3(_classNames4, treeClassNames.actived, node.isActivable() ? node.actived : false), _defineProperty$3(_classNames4, treeClassNames.disabled, node.isDisabled()), _classNames4)),
      style: styles,
      onClick: handleClick
    }, renderLine(), renderIcon(), renderLabel(), renderOperations());
  });
  TreeItem.displayName = "TreeItem";

  var useUpdateEffect = function useUpdateEffect(callback, dependency) {
    var ref = React.useRef(false);
    useIsomorphicLayoutEffect(function () {
      if (!ref.current) {
        ref.current = true;
        return void 0;
      }

      return callback();
    }, dependency);
  };

  var SetCache$1 = _SetCache,
      arrayIncludes = _arrayIncludes,
      arrayIncludesWith = _arrayIncludesWith,
      arrayMap$1 = _arrayMap,
      baseUnary = _baseUnary,
      cacheHas$1 = _cacheHas;
  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE = 200;
  /**
   * The base implementation of methods like `_.difference` without support
   * for excluding multiple arrays or iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   */

  function baseDifference$1(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap$1(values, baseUnary(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas$1;
      isCommon = false;
      values = new SetCache$1(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  var _baseDifference = baseDifference$1;

  var baseDifference = _baseDifference,
      baseFlatten = _baseFlatten,
      baseRest$1 = _baseRest,
      isArrayLikeObject = isArrayLikeObject_1;
  /**
   * Creates an array of `array` values not included in the other given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * **Note:** Unlike `_.pullAll`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.without, _.xor
   * @example
   *
   * _.difference([2, 1], [2, 3]);
   * // => [1]
   */

  var difference = baseRest$1(function (array, values) {
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
  });
  var difference_1 = difference;

  var toString$3 = toString_1;
  /** Used to generate unique IDs. */

  var idCounter = 0;
  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */

  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString$3(prefix) + id;
  }

  var uniqueId_1 = uniqueId;

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */

  function isNil(value) {
    return value == null;
  }

  var isNil_1 = isNil;

  function ownKeys$1c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function getExposedProps(node) {
    var props = pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
    return props;
  }

  function createNodeModel(node) {
    var props = getExposedProps(node);

    var model = _objectSpread$1c(_objectSpread$1c({}, props), {}, {
      getLevel: function getLevel() {
        return node.getLevel();
      },
      getIndex: function getIndex() {
        return node.getIndex();
      },
      isFirst: function isFirst() {
        return node.isFirst();
      },
      isLast: function isLast() {
        return node.isLast();
      },
      isLeaf: function isLeaf() {
        return node.isLeaf();
      },
      insertBefore: function insertBefore(newData) {
        return node.insertBefore(newData);
      },
      insertAfter: function insertAfter(newData) {
        return node.insertAfter(newData);
      },
      appendData: function appendData(data) {
        return node.append(data);
      },
      getPath: function getPath() {
        var nodes = node.getPath();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getParent: function getParent() {
        var _node$parent;

        return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
      },
      getParents: function getParents() {
        var nodes = node.getParents();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getRoot: function getRoot() {
        var root = node.getRoot();
        return root === null || root === void 0 ? void 0 : root.getModel();
      },
      getSiblings: function getSiblings() {
        var nodes = node.getSiblings();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getChildren: function getChildren(deep) {
        var childrenModel = false;
        var children = node.children;

        if (Array.isArray(children)) {
          if (children.length > 0) {
            if (deep) {
              var nodes = node.walk();
              nodes.shift();
              childrenModel = nodes.map(function (item) {
                return item.getModel();
              });
            } else {
              childrenModel = children.map(function (item) {
                return item.getModel();
              });
            }
          } else {
            childrenModel = false;
          }
        } else if (typeof children === "boolean") {
          childrenModel = children;
        }

        return childrenModel;
      },
      remove: function remove(value) {
        if (!value) {
          node.remove();
          return;
        }

        var tree = node.tree;
        var targetNode = tree.getNode(value);

        if (!targetNode) {
          log.warnOnce("Tree", "`".concat(value, "` is not exist"));
          return;
        }

        var parents = targetNode.getParents();
        var parentValues = parents.map(function (pnode) {
          return pnode.value;
        });

        if (parentValues.indexOf(node.value) < 0) {
          log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
          return;
        }

        targetNode.remove();
      },
      setData: function setData(data) {
        var _data = omit_1(data, ["children", "value", "label"]);

        var keys = node.tree.config.keys;
        var dataValue = data[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"];
        var dataLabel = data[(keys === null || keys === void 0 ? void 0 : keys.label) || "label"];
        if (dataValue !== void 0) _data.value = dataValue;
        if (dataLabel !== void 0) _data.label = dataLabel;
        Object.assign(node.data, _data);
        Object.assign(node, _data);
      }
    });

    return model;
  }
  function updateNodeModel(model, node) {
    var props = getExposedProps(node);
    Object.assign(model, props);
  }

  function ownKeys$1b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var hasOwnProperty$4 = Object.prototype.hasOwnProperty;
  var defaultStatus = {
    expandMutex: false,
    activable: false,
    checkable: false,
    disabled: false,
    draggable: false,
    loading: false
  };
  var TreeNode = /*#__PURE__*/function () {
    function TreeNode(tree, data, parent) {
      _classCallCheck(this, TreeNode);

      this.data = data;
      this.tree = tree;
      var config = tree.config || {};
      var prefix = config.prefix || "t";
      var keys = get_1(tree, "config.keys") || {};
      var propChildren = keys.children || "children";
      var propLabel = keys.label || "label";
      var propValue = keys.value || "value";
      this.model = null;
      this.children = null;
      this.vmCheckable = false;
      this.vmIsLeaf = false;
      this.vmIsFirst = false;
      this.vmIsLast = false;
      this.vmIsRest = true;
      this.vmIsLocked = false;

      var spec = _objectSpread$1b(_objectSpread$1b({}, defaultStatus), {}, {
        actived: false,
        expanded: false,
        checked: false
      }, data);

      var children = spec[propChildren];
      this.set(spec);
      this.label = spec[propLabel] || "";
      this.value = isNil_1(spec[propValue]) ? uniqueId_1(prefix) : spec[propValue];
      this.tree.nodeMap.set(this.value, this);

      if (parent && parent instanceof TreeNode) {
        this.parent = parent;
      } else {
        this.parent = null;
      }

      if (children === true) {
        this.children = children;
      }

      this.level = 0;
      this.visible = true;
      this.actived = spec.actived;
      this.initActived();
      this.expanded = spec.expanded;
      this.initExpanded();
      this.checked = spec.checked;
      this.initChecked();
      this.update();
      tree.reflow(this);

      if (Array.isArray(children)) {
        this.append(children);
      } else if (children === true && !config.lazy) {
        this.loadChildren();
      }

      this.checked = false;
      this.indeterminate = false;
      this.updateChecked();
    }

    _createClass(TreeNode, [{
      key: "initChecked",
      value: function initChecked() {
        var tree = this.tree,
            value = this.value,
            parent = this.parent;
        var checkStrictly = tree.config.checkStrictly;
        var checked = this.checked;
        checked = parent === null || parent === void 0 ? void 0 : parent.isChecked();

        if (checked && !checkStrictly) {
          tree.checkedMap.set(value, true);
        }

        this.checked = checked;
      }
    }, {
      key: "initExpanded",
      value: function initExpanded() {
        var tree = this.tree;
        var expanded = this.expanded;
        var config = tree.config;

        if (typeof config.expandLevel === "number" && this.getLevel() < config.expandLevel) {
          tree.expandedMap.set(this.value, true);
          expanded = true;
        }

        if (config.expandAll) {
          expanded = true;
        }

        if (this.children === true && config.lazy) {
          expanded = false;
        }

        if (expanded) {
          tree.expandedMap.set(this.value, true);
        } else {
          tree.expandedMap["delete"](this.value);
        }

        this.expanded = expanded;
      }
    }, {
      key: "initActived",
      value: function initActived() {
        var tree = this.tree,
            actived = this.actived;

        if (actived) {
          tree.activedMap.set(this.value, true);
        }
      }
    }, {
      key: "append",
      value: function append(data) {
        var _this = this;

        var list = [];

        if (!Array.isArray(data)) {
          list.push(data);
        } else {
          list.push.apply(list, _toConsumableArray(data));
        }

        if (list.length <= 0) {
          return;
        }

        if (!Array.isArray(this.children)) {
          this.children = [];
        }

        var children = this.children,
            tree = this.tree;
        list.forEach(function (item) {
          var node = null;

          if (item instanceof TreeNode) {
            node = item;
            node.appendTo(_this.tree, _this);
          } else {
            node = new TreeNode(_this.tree, item, _this);
            children.push(node);
          }
        });
        tree.reflow(this);
        this.updateRelated();
      }
    }, {
      key: "appendTo",
      value: function appendTo(tree, parent, index) {
        var _this2 = this;

        var parentNode = parent;
        var targetIndex = -1;

        if (typeof index === "number") {
          targetIndex = index;
        }

        var targetParents = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.getParents()) || [];
        var includeCurrent = targetParents.some(function (pnode) {
          return pnode === _this2;
        });

        if (includeCurrent) {
          throw new Error("\u65E0\u6CD5\u5C06\u7236\u8282\u70B9\u63D2\u5165\u5230\u5B50\u8282\u70B9");
        }

        if (Array.isArray(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children)) {
          var targetPosNode = parentNode === null || parentNode === void 0 ? void 0 : parentNode.children[targetIndex];

          if (targetPosNode && targetPosNode === this) {
            return;
          }
        }

        var siblings = null;

        if (parentNode instanceof TreeNode) {
          if (!Array.isArray(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children)) {
            parentNode.children = [];
          }

          siblings = parent.children;
        } else {
          siblings = tree.children;
        }

        if (!Array.isArray(siblings)) {
          throw new Error("\u65E0\u6CD5\u63D2\u5165\u5230\u76EE\u6807\u4F4D\u7F6E\uFF0C\u53EF\u63D2\u5165\u7684\u8282\u70B9\u5217\u8868\u4E0D\u5B58\u5728");
        }

        var prevLength = siblings.length;
        var prevIndex = this.getIndex();
        this.remove();

        if (typeof index === "number") {
          var targetIndex2 = index;

          if (parentNode === this.parent) {
            var curLength = siblings.length;

            if (curLength < prevLength && prevIndex <= targetIndex2) {
              targetIndex2 -= 1;
            }
          }

          siblings.splice(targetIndex2, 0, this);
        } else {
          siblings.push(this);
        }

        this.parent = parentNode;
        var nodes = this.walk();
        nodes.forEach(function (item) {
          var node = item;
          node.tree = tree;
          tree.nodeMap.set(node.value, node);

          if (node.expanded) {
            tree.expandedMap.set(node.value, true);
          }
        });
        var updateNodes = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.walk()) || tree.children.map(function (item) {
          return item.walk();
        }).flat();
        updateNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "insert",
      value: function insert(item, index) {
        var tree = this.tree,
            parent = this.parent;
        var siblings = this.getSiblings();
        var node = null;

        if (item instanceof TreeNode) {
          node = item;
          node.appendTo(tree, parent, index);
        } else if (item) {
          node = new TreeNode(tree, item, parent);

          if (typeof index === "number") {
            siblings.splice(index, 0, node);
          }

          siblings.forEach(function (sibling) {
            sibling.update();
          });
        }

        tree.reflow();
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(newData) {
        var index = this.getIndex();
        this.insert(newData, index);
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(newData) {
        var index = this.getIndex();
        this.insert(newData, index + 1);
      }
    }, {
      key: "remove",
      value: function remove() {
        var tree = this.tree;
        var nodes = this.walk();
        var siblings = this.getSiblings();
        var index = this.getIndex();

        if (Array.isArray(siblings)) {
          siblings.splice(index, 1);
        }

        nodes.forEach(function (node) {
          node.clean();
        });
        siblings.forEach(function (node) {
          node.update();
        });
        this.updateParents();
        tree.reflow();
      }
    }, {
      key: "clean",
      value: function clean() {
        var tree = this.tree,
            value = this.value;
        tree.activedMap["delete"](value);
        tree.checkedMap["delete"](value);
        tree.expandedMap["delete"](value);
        tree.nodeMap["delete"](value);
      }
    }, {
      key: "loadChildren",
      value: function () {
        var _loadChildren = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var config, list;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  config = get_1(this, "tree.config") || {};

                  if (!(this.children === true && !this.loading)) {
                    _context.next = 13;
                    break;
                  }

                  if (!(typeof config.load === "function")) {
                    _context.next = 13;
                    break;
                  }

                  this.loading = true;
                  this.update();
                  list = [];
                  _context.next = 8;
                  return config.load(this);

                case 8:
                  list = _context.sent;
                  this.tree.emit("load", {
                    node: this,
                    data: list
                  });
                  this.loading = false;

                  if (Array.isArray(list) && list.length > 0) {
                    this.append(list);
                  } else {
                    this.children = false;
                  }

                  this.update();

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function loadChildren() {
          return _loadChildren.apply(this, arguments);
        }

        return loadChildren;
      }()
    }, {
      key: "set",
      value: function set(item) {
        var _this3 = this;

        var tree = this.tree;
        var keys = Object.keys(item);
        keys.forEach(function (key) {
          if (hasOwnProperty$4.call(defaultStatus, key) || key === "label") {
            _this3[key] = item[key];
          }
        });
        tree.updated(this);
      }
    }, {
      key: "getParent",
      value: function getParent() {
        return this.parent;
      }
    }, {
      key: "getParents",
      value: function getParents() {
        var parents = [];
        var node = this.parent;

        while (node) {
          parents.push(node);
          node = node.parent;
        }

        return parents;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings() {
        var parent = this.parent,
            tree = this.tree;
        var list = [];

        if (parent) {
          if (Array.isArray(parent.children)) {
            list = parent.children;
          }
        } else if (tree) {
          list = tree.children;
        }

        return list;
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        var parents = this.getParents();
        return parents[parents.length - 1] || null;
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        var list = this.getSiblings();
        return list.indexOf(this);
      }
    }, {
      key: "getPath",
      value: function getPath() {
        var nodes = this.getParents();
        nodes.unshift(this);
        return nodes.reverse();
      }
    }, {
      key: "getLevel",
      value: function getLevel() {
        var parents = this.getParents();
        return parents.length;
      }
    }, {
      key: "isRest",
      value: function isRest() {
        var _this$tree = this.tree,
            config = _this$tree.config,
            filterMap = _this$tree.filterMap;
        var rest = true;

        if (typeof config.filter === "function") {
          var nodeModel = this.getModel();
          rest = config.filter(nodeModel);
        }

        if (rest) {
          filterMap.set(this.value, true);
        } else if (filterMap.get(this.value)) {
          filterMap["delete"](this.value);
        }

        return rest;
      }
    }, {
      key: "isVisible",
      value: function isVisible() {
        var nodeMap = this.tree.nodeMap;
        var visible = true;

        if (this.vmIsLocked) {
          return true;
        }

        if (nodeMap.get(this.value)) {
          var filterVisible = this.isRest();
          var expandVisible = true;
          var parents = this.getParents();

          if (parents.length > 0) {
            expandVisible = parents.every(function (node) {
              return node.isExpanded();
            });
          }

          visible = expandVisible && filterVisible;
        } else {
          visible = false;
        }

        return visible;
      }
    }, {
      key: "isDisabled",
      value: function isDisabled() {
        if (this.vmIsLocked) return true;
        var treeDisabled = get_1(this, "tree.config.disabled");
        return !!(treeDisabled || this.disabled);
      }
    }, {
      key: "isDraggable",
      value: function isDraggable() {
        return !!(get_1(this, "tree.config.draggable") || this.draggable);
      }
    }, {
      key: "isExpandMutex",
      value: function isExpandMutex() {
        return !!(get_1(this, "tree.config.expandMutex") || this.expandMutex);
      }
    }, {
      key: "isActivable",
      value: function isActivable() {
        return !!(get_1(this, "tree.config.activable") || this.activable);
      }
    }, {
      key: "isCheckable",
      value: function isCheckable() {
        return !!(get_1(this, "tree.config.checkable") || this.checkable);
      }
    }, {
      key: "isActived",
      value: function isActived(map) {
        var tree = this.tree,
            value = this.value;
        var activedMap = map || tree.activedMap;
        return !!(tree.nodeMap.get(value) && activedMap.get(value));
      }
    }, {
      key: "isExpanded",
      value: function isExpanded(map) {
        var tree = this.tree,
            value = this.value,
            vmIsLocked = this.vmIsLocked;
        if (vmIsLocked) return true;
        var expandedMap = map || tree.expandedMap;
        return !!(tree.nodeMap.get(value) && expandedMap.get(value));
      }
    }, {
      key: "isChecked",
      value: function isChecked(map) {
        var children = this.children,
            tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;
        var checked = false;
        var checkedMap = map || tree.checkedMap;

        if (tree.nodeMap.get(this.value)) {
          if (checkedMap.get(this.value)) {
            checked = true;
          } else if (Array.isArray(children) && children.length > 0 && !checkStrictly) {
            checked = children.every(function (node) {
              var childIsChecked = node.isChecked(checkedMap);
              return childIsChecked;
            });
          } else if (!checkStrictly) {
            var parents = this.getParents();
            checked = parents.some(function (node) {
              return checkedMap.get(node.value);
            });
          }
        }

        return !!checked;
      }
    }, {
      key: "isIndeterminate",
      value: function isIndeterminate() {
        var children = this.children,
            tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;

        if (checkStrictly) {
          return false;
        }

        var indeterminate = false;

        if (Array.isArray(children)) {
          var childChecked = null;
          indeterminate = children.some(function (node) {
            if (node.isIndeterminate()) {
              return true;
            }

            if (childChecked === null) {
              childChecked = node.isChecked();
            }

            if (childChecked !== node.isChecked()) {
              return true;
            }

            return false;
          });
        }

        return indeterminate;
      }
    }, {
      key: "isFirst",
      value: function isFirst() {
        var siblings = this.getSiblings();
        return siblings[0] === this;
      }
    }, {
      key: "isLast",
      value: function isLast() {
        var siblings = this.getSiblings();
        return siblings[siblings.length - 1] === this;
      }
    }, {
      key: "isLeaf",
      value: function isLeaf() {
        var isLeaf = false;

        if (Array.isArray(this.children)) {
          isLeaf = this.children.length <= 0;
        } else {
          isLeaf = !this.children;
        }

        return isLeaf;
      }
    }, {
      key: "lock",
      value: function lock(lockState) {
        this.vmIsLocked = lockState;
        this.expanded = this.isExpanded();
        this.visible = this.isVisible();
      }
    }, {
      key: "afterExpanded",
      value: function afterExpanded() {
        this.update();

        if (this.expanded && this.children === true) {
          this.loadChildren();
        }
      }
    }, {
      key: "toggleExpanded",
      value: function toggleExpanded() {
        return this.setExpanded(!this.isExpanded());
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expanded, opts) {
        var tree = this.tree;

        var options = _objectSpread$1b({
          directly: false
        }, opts);

        var map = tree.expandedMap;

        if (!options.directly) {
          map = new Map(tree.expandedMap);
        }

        if (expanded) {
          var shouldExpandNodes = [];
          shouldExpandNodes.push(this);

          if (get_1(tree, "config.expandParent")) {
            this.getParents().forEach(function (node) {
              shouldExpandNodes.push(node);
            });
          }

          shouldExpandNodes.forEach(function (node) {
            var isExpandMutex = false;

            if (node.parent) {
              isExpandMutex = node.parent.isExpandMutex();
            } else {
              var _tree$config;

              isExpandMutex = tree === null || tree === void 0 ? void 0 : (_tree$config = tree.config) === null || _tree$config === void 0 ? void 0 : _tree$config.expandMutex;
            }

            if (isExpandMutex) {
              var siblings = node.getSiblings();
              siblings.forEach(function (snode) {
                map["delete"](snode.value);
              });
            }

            map.set(node.value, true);
          });
        } else {
          map["delete"](this.value);
        }

        if (options.directly) {
          this.afterExpanded();
          this.update();
          this.updateChildren();
        }

        return tree.getExpanded(map);
      }
    }, {
      key: "toggleActived",
      value: function toggleActived() {
        return this.setActived(!this.isActived());
      }
    }, {
      key: "setActived",
      value: function setActived(actived, opts) {
        var tree = this.tree;

        var options = _objectSpread$1b({
          directly: false
        }, opts);

        var config = tree.config || {};
        var map = tree.activedMap;

        if (!options.directly) {
          map = new Map(tree.activedMap);
        }

        if (this.isActivable()) {
          if (actived) {
            if (!config.activeMultiple) {
              map.clear();
            }

            map.set(this.value, true);
          } else {
            map["delete"](this.value);
          }
        }

        if (options.directly) {
          this.update();
        }

        return tree.getActived(map);
      }
    }, {
      key: "toggleChecked",
      value: function toggleChecked() {
        return this.setChecked(!this.isChecked());
      }
    }, {
      key: "setChecked",
      value: function setChecked(checked, opts) {
        var tree = this.tree;
        var config = tree.config || {};

        var options = _objectSpread$1b({
          directly: false
        }, opts);

        var map = tree.checkedMap;

        if (!options.directly) {
          map = new Map(tree.checkedMap);
        }

        if (this.isCheckable() && checked !== this.isChecked()) {
          if (config.checkStrictly) {
            if (checked) {
              map.set(this.value, true);
            } else {
              map["delete"](this.value);
            }
          } else {
            var children = this.walk();
            children.forEach(function (node) {
              if (checked) {
                map.set(node.value, true);
              } else {
                map["delete"](node.value);
              }
            });
            var parents = this.getParents();
            parents.forEach(function (node) {
              map["delete"](node.value);
            });
          }
        }

        if (options.directly) {
          if (config.checkStrictly) {
            this.updateChecked();
          } else {
            var relatedNodes = tree.getRelatedNodes([this.value]);
            relatedNodes.forEach(function (node) {
              node.updateChecked();
            });
          }
        }

        return tree.getChecked(map);
      }
    }, {
      key: "update",
      value: function update() {
        this.level = this.getLevel();
        this.actived = this.isActived();
        this.expanded = this.isExpanded();
        this.vmCheckable = this.isCheckable();
        this.visible = this.isVisible();
        this.vmIsRest = this.isRest();
        this.vmIsFirst = this.isFirst();
        this.vmIsLast = this.isLast();
        this.vmIsLeaf = this.isLeaf();
        this.tree.updated(this);
      }
    }, {
      key: "updateChecked",
      value: function updateChecked(isFromValueChange) {
        var tree = this.tree;
        this.vmCheckable = this.isCheckable();

        if (this.vmCheckable && (!this.disabled || isFromValueChange)) {
          this.checked = this.isChecked();

          if (this.checked) {
            tree.checkedMap.set(this.value, true);
          }

          this.indeterminate = this.isIndeterminate();
          tree.updated(this);
        }
      }
    }, {
      key: "updateChildren",
      value: function updateChildren() {
        var children = this.children;

        if (Array.isArray(children)) {
          children.forEach(function (node) {
            node.update();
            node.updateChecked();
            node.updateChildren();
          });
        }
      }
    }, {
      key: "updateParents",
      value: function updateParents() {
        var parent = this.parent;

        if (parent) {
          parent.update();
          parent.updateChecked();
          parent.updateParents();
        }
      }
    }, {
      key: "updateRelated",
      value: function updateRelated() {
        var tree = this.tree;
        var relatedNodes = tree.getRelatedNodes([this.value]);
        relatedNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "walk",
      value: function walk() {
        var children = this.children;
        var list = [];
        list.push(this);

        if (Array.isArray(children) && children.length > 0) {
          children.forEach(function (node) {
            list = list.concat(node.walk());
          });
        }

        return list;
      }
    }, {
      key: "getModel",
      value: function getModel() {
        var model = this.model;

        if (!model) {
          model = createNodeModel(this);
          this.model = model;
        }

        updateNodeModel(model, this);
        return model;
      }
    }]);

    return TreeNode;
  }();

  function ownKeys$1a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TreeStore = /*#__PURE__*/function () {
    function TreeStore(options) {
      _classCallCheck(this, TreeStore);

      var config = _objectSpread$1a({
        prefix: "t",
        keys: {},
        expandAll: false,
        expandLevel: 0,
        expandMutex: false,
        expandParent: false,
        activable: false,
        activeMultiple: false,
        checkable: false,
        checkStrictly: false,
        disabled: false,
        draggable: false,
        load: null,
        lazy: false,
        valueMode: "onlyLeaf",
        filter: null,
        onLoad: null,
        onReflow: null,
        onUpdate: null,
        allowFoldNodeOnFilter: false
      }, options);

      this.config = config;
      this.nodes = [];
      this.children = [];
      this.nodeMap = /* @__PURE__ */new Map();
      this.activedMap = /* @__PURE__ */new Map();
      this.expandedMap = /* @__PURE__ */new Map();
      this.checkedMap = /* @__PURE__ */new Map();
      this.updatedMap = /* @__PURE__ */new Map();
      this.filterMap = /* @__PURE__ */new Map();
      this.prevFilter = null;
      this.updateTimer = null;
      this.shouldReflow = false;
      this.initNullNodeModel();
    }

    _createClass(TreeStore, [{
      key: "initNullNodeModel",
      value: function initNullNodeModel() {
        var nullNode = new TreeNode(this, {
          value: "",
          label: "",
          children: []
        });
        this.nullNodeModel = nullNode.getModel();
        nullNode.remove();
      }
    }, {
      key: "setConfig",
      value: function setConfig(options) {
        var _this = this;

        var hasChanged = false;
        Object.keys(options).forEach(function (key) {
          var val = options[key];

          if (val !== _this.config[key]) {
            hasChanged = true;
            _this.config[key] = val;
          }
        });

        if (hasChanged) {
          this.refreshState();
        }
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        return this.children;
      }
    }, {
      key: "getNode",
      value: function getNode(item) {
        var node = null;

        if (typeof item === "string" || typeof item === "number") {
          node = this.nodeMap.get(item);
        } else if (item instanceof TreeNode) {
          node = this.nodeMap.get(item.value);
        }

        return node;
      }
    }, {
      key: "getIndex",
      value: function getIndex(node) {
        return this.nodes.indexOf(node);
      }
    }, {
      key: "getParent",
      value: function getParent(value) {
        var parent = null;
        var node = this.getNode(value);

        if (node) {
          parent = node.getParent();
        }

        return parent;
      }
    }, {
      key: "getParents",
      value: function getParents(value) {
        var node = this.getNode(value);
        var parents = [];

        if (node) {
          parents = node.getParents();
        }

        return parents;
      }
    }, {
      key: "getNodeIndex",
      value: function getNodeIndex(value) {
        var node = this.getNode(value);
        var index = -1;

        if (node) {
          index = node.getIndex();
        }

        return index;
      }
    }, {
      key: "getNodes",
      value: function getNodes(item, options) {
        var nodes = [];
        var val = "";

        if (typeof item === "string" || typeof item === "number") {
          val = item;
        } else if (item instanceof TreeNode) {
          val = item.value;
        }

        if (!val) {
          nodes = this.nodes.slice(0);
        } else {
          var node = this.getNode(val);

          if (node) {
            nodes = node.walk();
          }
        }

        if (options) {
          var conf = _objectSpread$1a({
            filter: null,
            level: Infinity
          }, options);

          if (typeof conf.level === "number" && conf.level !== Infinity) {
            nodes = nodes.filter(function (node) {
              return node.level <= conf.level;
            });
          }

          if (typeof conf.filter === "function") {
            nodes = nodes.filter(function (node) {
              var nodeModel = node.getModel();
              return conf.filter(nodeModel);
            });
          }

          if (isPlainObject_1(conf.props)) {
            nodes = nodes.filter(function (node) {
              var result = Object.keys(conf.props).every(function (key) {
                var propEqual = node[key] === conf.props[key];
                return propEqual;
              });
              return result;
            });
          }
        }

        return nodes;
      }
    }, {
      key: "append",
      value: function append(list) {
        var _this2 = this;

        list.forEach(function (item) {
          var node = new TreeNode(_this2, item);

          _this2.children.push(node);
        });
        this.reflow();
      }
    }, {
      key: "reload",
      value: function reload(list) {
        this.expandedMap.clear();
        this.checkedMap.clear();
        this.activedMap.clear();
        this.filterMap.clear();
        this.removeAll();
        this.append(list);
      }
    }, {
      key: "parseNodeData",
      value: function parseNodeData(para, item) {
        var value = "";
        var node = null;
        var data = null;

        if (typeof para === "string" || typeof para === "number") {
          value = para;
          data = item;
          node = this.getNode(value);
        } else if (para instanceof TreeNode) {
          node = para;
          data = item;
        } else {
          data = para;
        }

        var spec = {
          node: node,
          data: data
        };
        return spec;
      }
    }, {
      key: "appendNodes",
      value: function appendNodes(para, item) {
        var spec = this.parseNodeData(para, item);

        if (spec.data) {
          if (!spec.node) {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this);
            } else if (Array.isArray(spec.data)) {
              this.append(spec.data);
            } else {
              this.append([spec.data]);
            }
          } else {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this, spec.node);
            } else if (Array.isArray(spec.data)) {
              spec.node.append(spec.data);
            } else {
              spec.node.append([spec.data]);
            }

            spec.node.updateRelated();
          }
        }
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(value, item) {
        var node = this.getNode(value);

        if (node) {
          node.insertBefore(item);
        }
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(value, item) {
        var node = this.getNode(value);

        if (node) {
          node.insertAfter(item);
        }
      }
    }, {
      key: "refreshNodes",
      value: function refreshNodes() {
        var children = this.children,
            nodes = this.nodes;
        nodes.length = 0;
        children.forEach(function (node) {
          var list = node.walk();
          Array.prototype.push.apply(nodes, list);
        });
      }
    }, {
      key: "refreshState",
      value: function refreshState() {
        var nodes = this.nodes;
        nodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
      }
    }, {
      key: "reflow",
      value: function reflow(node) {
        this.shouldReflow = true;
        this.updated(node);
      }
    }, {
      key: "updated",
      value: function updated(node) {
        var _this3 = this;

        if (node !== null && node !== void 0 && node.value) {
          this.updatedMap.set(node.value, true);
        }

        if (this.updateTimer) return;
        this.updateTimer = +setTimeout(function () {
          var _this3$config;

          clearTimeout(_this3.updateTimer);
          _this3.updateTimer = null;

          if (_this3.shouldReflow) {
            _this3.refreshNodes();

            _this3.emit("reflow");
          }

          if (!((_this3$config = _this3.config) !== null && _this3$config !== void 0 && _this3$config.allowFoldNodeOnFilter)) _this3.lockFilterPathNodes();
          var updatedList = Array.from(_this3.updatedMap.keys());

          if (updatedList.length > 0) {
            var updatedNodes = updatedList.map(function (value) {
              return _this3.getNode(value);
            });

            _this3.emit("update", {
              nodes: updatedNodes,
              map: _this3.updatedMap
            });
          } else if (_this3.shouldReflow) {
            _this3.emit("update", {
              nodes: [],
              map: _this3.updatedMap
            });
          }

          _this3.shouldReflow = false;

          _this3.updatedMap.clear();
        });
      }
    }, {
      key: "getActived",
      value: function getActived(map) {
        var activedMap = map || this.activedMap;
        return Array.from(activedMap.keys());
      }
    }, {
      key: "getActivedNodes",
      value: function getActivedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isActived();
        });
        return nodes;
      }
    }, {
      key: "replaceActived",
      value: function replaceActived(list) {
        this.resetActived();
        this.setActived(list);
      }
    }, {
      key: "setActived",
      value: function setActived(actived) {
        var _this4 = this;

        var activeMultiple = this.config.activeMultiple;
        var list = actived.slice(0);

        if (!activeMultiple) {
          list.length = 1;
        }

        list.forEach(function (val) {
          _this4.activedMap.set(val, true);

          var node = _this4.getNode(val);

          if (node) {
            node.update();
          }
        });
      }
    }, {
      key: "resetActived",
      value: function resetActived() {
        var actived = this.getActived();
        this.activedMap.clear();
        var relatedNodes = this.getRelatedNodes(actived);
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getExpanded",
      value: function getExpanded(map) {
        var expandedMap = map || this.expandedMap;
        return Array.from(expandedMap.keys());
      }
    }, {
      key: "replaceExpanded",
      value: function replaceExpanded(list) {
        var expanded = this.getExpanded();
        var added = difference_1(list, expanded);
        var removed = difference_1(expanded, list);
        this.setExpandedDirectly(removed, false);
        this.updateExpanded(removed);
        this.setExpanded(added);
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(list) {
        this.setExpandedDirectly(list);
        this.updateExpanded(list);
      }
    }, {
      key: "setExpandedDirectly",
      value: function setExpandedDirectly(list) {
        var _this5 = this;

        var expanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        list.forEach(function (val) {
          if (expanded) {
            _this5.expandedMap.set(val, true);

            var node = _this5.getNode(val);

            if (node) {
              node.afterExpanded();
            }
          } else {
            _this5.expandedMap["delete"](val);
          }
        });
      }
    }, {
      key: "resetExpanded",
      value: function resetExpanded() {
        var expanded = this.getExpanded();
        this.expandedMap.clear();
        this.updateExpanded(expanded);
      }
    }, {
      key: "updateExpanded",
      value: function updateExpanded(list) {
        var relatedNodes = this.getRelatedNodes(list, {
          withParents: false
        });
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getChecked",
      value: function getChecked(map) {
        var nodes = this.nodes,
            config = this.config;
        var valueMode = config.valueMode,
            checkStrictly = config.checkStrictly;
        var list = [];
        var checkedMap = map || this.checkedMap;
        nodes.forEach(function (node) {
          if (node.isChecked(checkedMap)) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              if (!node.parent || !node.parent.isChecked(checkedMap)) {
                list.push(node.value);
              }
            } else if (valueMode === "onlyLeaf" && !checkStrictly) {
              if (node.isLeaf()) {
                list.push(node.value);
              }
            } else {
              list.push(node.value);
            }
          }
        });
        return list;
      }
    }, {
      key: "getCheckedNodes",
      value: function getCheckedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isChecked();
        });
        return nodes;
      }
    }, {
      key: "replaceChecked",
      value: function replaceChecked(list) {
        this.resetChecked();
        this.setChecked(list, true);
      }
    }, {
      key: "setChecked",
      value: function setChecked(list, isFromValueChange) {
        var _this6 = this;

        var _this$config = this.config,
            valueMode = _this$config.valueMode,
            checkStrictly = _this$config.checkStrictly,
            checkable = _this$config.checkable;
        if (!checkable) return;
        list.forEach(function (val) {
          var node = _this6.getNode(val);

          if (node) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              var childrenNodes = node.walk();
              childrenNodes.forEach(function (childNode) {
                _this6.checkedMap.set(childNode.value, true);
              });
            } else {
              _this6.checkedMap.set(val, true);

              node.updateChecked(isFromValueChange);
            }
          }
        });

        if (!checkStrictly) {
          var checked = this.getChecked();
          var relatedNodes = this.getRelatedNodes(checked);
          relatedNodes.forEach(function (node) {
            node.updateChecked();
          });
        }
      }
    }, {
      key: "resetChecked",
      value: function resetChecked() {
        var checked = this.getChecked();
        var relatedNodes = this.getRelatedNodes(checked);
        this.checkedMap.clear();
        relatedNodes.forEach(function (node) {
          node.updateChecked();
        });
      }
    }, {
      key: "updateAll",
      value: function updateAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "remove",
      value: function remove(value) {
        var node = this.getNode(value);

        if (node) {
          node.remove();
        }
      }
    }, {
      key: "removeAll",
      value: function removeAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.remove();
        });
      }
    }, {
      key: "getRelatedNodes",
      value: function getRelatedNodes(list, options) {
        var _this7 = this;

        var conf = _objectSpread$1a({
          withParents: true
        }, options);

        var map = /* @__PURE__ */new Map();
        list.forEach(function (value) {
          if (map.get(value)) return;

          var node = _this7.getNode(value);

          if (node) {
            var parents = node.getParents();
            var children = node.walk();
            var related = [];

            if (conf.withParents) {
              related = parents.concat(children);
            } else {
              related = children;
            }

            related.forEach(function (relatedNode) {
              map.set(relatedNode.value, relatedNode);
            });
          }
        });
        var relatedNodes = Array.from(map.values());
        return relatedNodes;
      }
    }, {
      key: "emit",
      value: function emit(name, state) {
        var config = this.config || {};
        var methodName = camelCase_1("on-".concat(name));
        var method = config[methodName];

        if (typeof method === "function") {
          method(state);
        }
      }
    }, {
      key: "lockFilterPathNodes",
      value: function lockFilterPathNodes() {
        var _this8 = this;

        var config = this.config;
        var allNodes = this.getNodes();

        if (this.prevFilter) {
          allNodes.forEach(function (node) {
            node.lock(false);
          });
        }

        var currentFilter = config.filter;
        if (!currentFilter || typeof currentFilter !== "function") return;
        if (currentFilter(this.nullNodeModel)) return;
        this.prevFilter = config.filter;
        var map = /* @__PURE__ */new Map();
        allNodes.reverse().forEach(function (item) {
          var node = item;
          var parent = node.getParent();

          if (node.vmIsRest) {
            if (parent) {
              parent.expanded = true;
            }

            node.visible = true;
          }

          if (node.vmIsRest || map.get(node.value)) {
            if (parent && !parent.vmIsRest) {
              map.set(parent.value, true);
            }
          }
        });
        var filterPathValues = Array.from(map.keys());
        filterPathValues.forEach(function (value) {
          var node = _this8.getNode(value);

          if (node) {
            node.lock(true);
          }
        });
      }
    }]);

    return TreeStore;
  }();

  function useStore(props, refresh) {
    var storeRef = React.useRef();
    var data = props.data,
        keys = props.keys,
        expandAll = props.expandAll,
        expandParent = props.expandParent,
        expanded = props.expanded,
        expandLevel = props.expandLevel,
        expandMutex = props.expandMutex,
        activable = props.activable,
        activeMultiple = props.activeMultiple,
        actived = props.actived,
        disabled = props.disabled,
        checkable = props.checkable,
        value = props.value,
        checkStrictly = props.checkStrictly,
        load = props.load,
        lazy = props.lazy,
        valueMode = props.valueMode,
        filter = props.filter,
        _onLoad = props.onLoad,
        _props$allowFoldNodeO = props.allowFoldNodeOnFilter,
        allowFoldNodeOnFilter = _props$allowFoldNodeO === void 0 ? false : _props$allowFoldNodeO;
    var handleUpdate = usePersistFn(function () {
      refresh();
    });

    var getExpandedArr = function getExpandedArr(arr, store2) {
      var expandedMap = /* @__PURE__ */new Map();
      arr.forEach(function (val) {
        expandedMap.set(val, true);

        if (expandParent) {
          var node = store2.getNode(val);
          node.getParents().forEach(function (tn) {
            expandedMap.set(tn.value, true);
          });
        }
      });
      return Array.from(expandedMap.keys());
    };

    var createStore = function createStore() {
      var store2 = new TreeStore({
        keys: keys,
        activable: activable,
        activeMultiple: activeMultiple,
        checkable: checkable,
        checkStrictly: checkStrictly,
        expandAll: expandAll,
        expandLevel: expandLevel,
        expandMutex: expandMutex,
        expandParent: expandParent,
        disabled: disabled,
        load: load,
        lazy: lazy,
        valueMode: valueMode,
        filter: filter,
        onLoad: function onLoad(info) {
          var node = info.node;
          _onLoad === null || _onLoad === void 0 ? void 0 : _onLoad({
            node: node.getModel()
          });
        },
        onUpdate: handleUpdate,
        allowFoldNodeOnFilter: allowFoldNodeOnFilter
      });
      var list = cloneDeep_1(data);

      if (!Array.isArray(list)) {
        list = [];
      }

      store2.append(list);
      store2.refreshNodes();

      if (Array.isArray(value)) {
        store2.setChecked(value);
      }

      if (Array.isArray(expanded)) {
        var expandedArr = getExpandedArr(expanded, store2);
        store2.setExpanded(expandedArr);
      }

      if (Array.isArray(actived)) {
        store2.setActived(actived);
      }

      store2.refreshNodes();
      return store2;
    };

    if (!storeRef.current) {
      storeRef.current = createStore();
    }

    var store = storeRef.current;
    useUpdateEffect(function () {
      if (data && Array.isArray(data)) {
        var expanded2 = store.getExpanded();
        var checked = store.getChecked();
        var actived2 = store.getActived();
        store.removeAll();
        store.append(data);
        store.setChecked(checked);
        store.setActived(actived2);
        store.setExpanded(expanded2);
      }
    }, [data, store]);
    useUpdateEffect(function () {
      store.setConfig({
        keys: keys,
        expandAll: expandAll,
        expandLevel: expandLevel,
        expandMutex: expandMutex,
        expandParent: expandParent,
        activable: activable,
        activeMultiple: activeMultiple,
        disabled: disabled,
        checkable: checkable,
        checkStrictly: checkStrictly,
        load: load,
        lazy: lazy,
        valueMode: valueMode
      });
      store.refreshState();
    }, [activable, activeMultiple, checkStrictly, checkable, disabled, expandAll, expandLevel, expandMutex, expandParent, keys, lazy, load, store, valueMode]);
    useUpdateEffect(function () {
      if (Array.isArray(value)) {
        store.replaceChecked(value);
      }
    }, [store, value]);
    useUpdateEffect(function () {
      if (Array.isArray(expanded)) {
        var expandedArr = getExpandedArr(expanded, store);
        store.replaceExpanded(expandedArr);
      }
    }, [expanded, store]);
    useUpdateEffect(function () {
      if (Array.isArray(actived)) {
        store.replaceActived(actived);
      }
    }, [actived, store]);
    useUpdateEffect(function () {
      store.setConfig({
        filter: filter
      });
      store.updateAll();
    }, [filter, store]);
    return storeRef.current;
  }

  function ownKeys$19(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$19(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$19(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$19(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Tree$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var _useTreeConfig = useTreeConfig(),
        treeClassNames = _useTreeConfig.treeClassNames,
        transitionNames = _useTreeConfig.transitionNames,
        transitionClassNames = _useTreeConfig.transitionClassNames,
        transitionDuration = _useTreeConfig.transitionDuration,
        locale = _useTreeConfig.locale;

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        visibleNodes = _useState2[0],
        setVisibleNodes = _useState2[1];

    var empty = props.empty,
        activable = props.activable,
        disabled = props.disabled,
        checkable = props.checkable,
        checkProps = props.checkProps,
        disableCheck = props.disableCheck,
        hover = props.hover,
        icon = props.icon,
        line = props.line,
        label = props.label,
        operations = props.operations,
        transition = props.transition,
        expandOnClickNode = props.expandOnClickNode,
        onClick = props.onClick;

    var _useControllable = useControllable(props),
        value = _useControllable.value,
        onChange = _useControllable.onChange,
        expanded = _useControllable.expanded,
        onExpand = _useControllable.onExpand,
        onActive = _useControllable.onActive,
        actived = _useControllable.actived;

    var emptyText = locale("empty");
    var store = useStore(_objectSpread$19(_objectSpread$19({}, props), {}, {
      value: value,
      onChange: onChange,
      expanded: expanded,
      onExpand: onExpand,
      onActive: onActive,
      actived: actived
    }), function () {
      var nodes = store.getNodes();
      var newVisibleNodes = nodes.filter(function (node) {
        return node.visible;
      });
      setVisibleNodes(newVisibleNodes);
    });
    var setExpanded = usePersistFn(function (node, isExpanded, e) {
      var expanded2 = node.setExpanded(isExpanded);
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      e && (onExpand === null || onExpand === void 0 ? void 0 : onExpand(expanded2, {
        node: treeNodeModel,
        e: e
      }));
      return expanded2;
    });
    var setActived = usePersistFn(function (node, isActived) {
      var actived2 = node.setActived(isActived);
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      onActive === null || onActive === void 0 ? void 0 : onActive(actived2, {
        node: treeNodeModel
      });
      return actived2;
    });
    var setChecked = usePersistFn(function (node, isChecked) {
      var checked = node.setChecked(isChecked);
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      onChange === null || onChange === void 0 ? void 0 : onChange(checked, {
        node: treeNodeModel
      });
      return checked;
    });

    var handleItemClick = function handleItemClick(node, options) {
      if (!node) {
        return;
      }

      var isDisabled = disabled || node.disabled;
      var expand = options.expand,
          active = options.active,
          event = options.event;
      if (expand) setExpanded(node, !node.isExpanded(), event);

      if (active && !isDisabled) {
        setActived(node, !node.isActived());
        var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
        onClick === null || onClick === void 0 ? void 0 : onClick({
          node: treeNodeModel,
          e: event
        });
      }
    };

    var handleChange = function handleChange(node) {
      if (!node || disabled || node.disabled) {
        return;
      }

      setChecked(node, !node.isChecked());
    };

    React.useImperativeHandle(ref, function () {
      return {
        store: store,
        appendTo: function appendTo(value2, newData) {
          var list = [];

          if (Array.isArray(newData)) {
            list = newData;
          } else {
            list = [newData];
          }

          list.forEach(function (item) {
            store.appendNodes(value2, item);
          });
        },
        getIndex: function getIndex(value2) {
          return store.getNodeIndex(value2);
        },
        getItem: function getItem(value2) {
          var node = store.getNode(value2);
          return node === null || node === void 0 ? void 0 : node.getModel();
        },
        getItems: function getItems(value2) {
          var nodes = store.getNodes(value2);
          return nodes.map(function (node) {
            return node.getModel();
          });
        },
        getParent: function getParent(value2) {
          var node = store.getParent(value2);
          return node === null || node === void 0 ? void 0 : node.getModel();
        },
        getParents: function getParents(value2) {
          var nodes = store.getParents(value2);
          return nodes.map(function (node) {
            return node.getModel();
          });
        },
        getPath: function getPath(value2) {
          var node = store.getNode(value2);
          var pathNodes = [];

          if (node) {
            pathNodes = node.getPath().map(function (node2) {
              return node2.getModel();
            });
          }

          return pathNodes;
        },
        insertAfter: function insertAfter(value2, newData) {
          return store.insertAfter(value2, newData);
        },
        insertBefore: function insertBefore(value2, newData) {
          return store.insertBefore(value2, newData);
        },
        remove: function remove(value2) {
          return store.remove(value2);
        },
        setItem: function setItem(value2, options) {
          var node = this.store.getNode(value2);
          var spec = options;

          if (node && spec) {
            if ("expanded" in options) {
              setExpanded(node, spec.expanded);
              delete spec.expanded;
            }

            if ("actived" in options) {
              setActived(node, spec.actived);
              delete spec.actived;
            }

            if ("checked" in options) {
              setChecked(node, spec.checked);
              delete spec.checked;
            }

            node.set(spec);
          }
        }
      };
    }, [store, setExpanded, setActived, setChecked]);
    var nodeList = React.useMemo(function () {
      return visibleNodes.map(function () {
        return /*#__PURE__*/React__default["default"].createRef();
      });
    }, [visibleNodes]);

    var renderEmpty = function renderEmpty() {
      var emptyView = empty || emptyText;

      if (empty instanceof Function) {
        emptyView = empty();
      }

      return emptyView;
    };

    var renderItems = function renderItems() {
      if (visibleNodes.length <= 0) {
        return renderEmpty();
      }

      return /* @__PURE__ */React__default["default"].createElement(TransitionGroup$1, {
        name: transitionNames.treeNode,
        className: treeClassNames.treeList
      }, visibleNodes.map(function (node, index) {
        return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
          nodeRef: nodeList[index],
          key: node.value,
          timeout: transitionDuration,
          classNames: transitionClassNames
        }, /* @__PURE__ */React__default["default"].createElement(TreeItem, {
          ref: nodeList[index],
          node: node,
          empty: empty,
          icon: icon,
          label: label,
          line: line,
          transition: transition,
          expandOnClickNode: expandOnClickNode,
          activable: activable,
          operations: operations,
          checkProps: checkProps,
          disableCheck: disableCheck,
          onClick: handleItemClick,
          onChange: handleChange
        }));
      }));
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(treeClassNames.tree, (_classNames = {}, _defineProperty$3(_classNames, treeClassNames.disabled, disabled), _defineProperty$3(_classNames, treeClassNames.treeHoverable, hover), _defineProperty$3(_classNames, treeClassNames.treeCheckable, checkable), _defineProperty$3(_classNames, treeClassNames.treeFx, transition), _defineProperty$3(_classNames, treeClassNames.treeBlockNode, expandOnClickNode), _classNames))
    }, renderItems());
  });
  Tree$1.displayName = "Tree";
  Tree$1.defaultProps = {
    data: [],
    empty: "",
    expandLevel: 0,
    icon: true,
    line: false,
    transition: true,
    lazy: true,
    valueMode: "onlyLeaf"
  };

  var Tree = Tree$1;

  var useSwitch = function useSwitch() {
    var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var _useState = React.useState(initialState),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

    return [state, {
      on: usePersistFn(function () {
        return setState(true);
      }),
      off: usePersistFn(function () {
        return setState(false);
      }),
      set: setState
    }];
  };

  var treeSelectDefaultProps = {
    autoWidth: false,
    borderless: false,
    clearable: false,
    data: [],
    empty: "",
    filterable: false,
    loading: false,
    max: 0,
    minCollapsedNum: 0,
    multiple: false,
    placeholder: void 0,
    readonly: false,
    size: "medium",
    valueType: "value"
  };

  function ownKeys$18(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$18(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$18(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$18(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useTreeSelectUtils = function useTreeSelectUtils(_ref, treeRef) {
    var data = _ref.data,
        treeProps = _ref.treeProps,
        valueType = _ref.valueType;
    var defaultStore = React.useMemo(function () {
      var store = new TreeStore(_objectSpread$18(_objectSpread$18({}, treeSelectDefaultProps.treeProps), treeProps));
      store.append(data);
      return store;
    }, [data, treeProps]);
    var getNodeItem = usePersistFn(function (value) {
      var _defaultStore$getNode;

      if (treeRef.current) {
        return treeRef.current.getItem(value);
      }

      return (_defaultStore$getNode = defaultStore.getNode(value)) === null || _defaultStore$getNode === void 0 ? void 0 : _defaultStore$getNode.getModel();
    });
    var formatValue = usePersistFn(function (value) {
      var _treeProps$keys$value, _treeProps$keys, _treeProps$keys$label, _treeProps$keys2, _ref2;

      var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(value);
      var valueKey = (_treeProps$keys$value = treeProps === null || treeProps === void 0 ? void 0 : (_treeProps$keys = treeProps.keys) === null || _treeProps$keys === void 0 ? void 0 : _treeProps$keys.value) !== null && _treeProps$keys$value !== void 0 ? _treeProps$keys$value : "value";
      var labelKey = (_treeProps$keys$label = treeProps === null || treeProps === void 0 ? void 0 : (_treeProps$keys2 = treeProps.keys) === null || _treeProps$keys2 === void 0 ? void 0 : _treeProps$keys2.label) !== null && _treeProps$keys$label !== void 0 ? _treeProps$keys$label : "label";
      return value && valueType === "object" ? (_ref2 = {}, _defineProperty$3(_ref2, valueKey, value), _defineProperty$3(_ref2, labelKey, label), _ref2) : value;
    });
    var normalizeValue = usePersistFn(function (value) {
      var _treeProps$keys$value2, _treeProps$keys3, _node$label;

      var valueKey = (_treeProps$keys$value2 = treeProps === null || treeProps === void 0 ? void 0 : (_treeProps$keys3 = treeProps.keys) === null || _treeProps$keys3 === void 0 ? void 0 : _treeProps$keys3.value) !== null && _treeProps$keys$value2 !== void 0 ? _treeProps$keys$value2 : "value";
      var realValue = valueType === "value" ? value : value === null || value === void 0 ? void 0 : value[valueKey];
      var node = getNodeItem(realValue);
      return {
        value: realValue,
        label: (_node$label = node === null || node === void 0 ? void 0 : node.label) !== null && _node$label !== void 0 ? _node$label : String(realValue)
      };
    });
    return {
      getNodeItem: getNodeItem,
      formatValue: formatValue,
      normalizeValue: normalizeValue
    };
  };

  var SelectArrow = function SelectArrow(_ref) {
    var _classNames;

    var isActive = _ref.isActive,
        isHighlight = _ref.isHighlight,
        disabled = _ref.disabled;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
      isActive: isActive,
      disabled: disabled,
      overlayClassName: classNames$1((_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-fake-arrow--highlight"), isHighlight), _defineProperty$3(_classNames, "".concat(classPrefix, "-fake-arrow--disable"), disabled), _classNames))
    });
  };

  var SelectInputPassthroughPropsKey = ["multiple", "style", "disabled", "minCollapsedNum", "popupProps", "clearable", "loading", "autoWidth", "borderless", "readonly"];
  var useTreeSelectPassThroughProps = function useTreeSelectPassThroughProps(props) {
    return pick_1(props, SelectInputPassthroughPropsKey);
  };

  var useTreeSelectLocale = function useTreeSelectLocale(props) {
    var _props$empty, _props$loadingText, _props$placeholder;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useLocaleReceiver = useLocaleReceiver("treeSelect"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var emptyText = t(local.empty);
    var placeholderText = t(local.placeholder);
    var loadingTextLabel = t(local.loadingText);
    return {
      empty: (_props$empty = props.empty) !== null && _props$empty !== void 0 ? _props$empty : /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select__empty")
      }, emptyText),
      loadingItem: /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(classPrefix, "-select__loading-tips")
      }, (_props$loadingText = props.loadingText) !== null && _props$loadingText !== void 0 ? _props$loadingText : /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select__empty")
      }, loadingTextLabel)),
      placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : placeholderText
    };
  };

  function ownKeys$17(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$17(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$17(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$17(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var useMergeFn = function useMergeFn() {
    for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }

    return usePersistFn(function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return fns.forEach(function (fn) {
        return fn === null || fn === void 0 ? void 0 : fn.apply(void 0, args);
      });
    });
  };

  var TreeSelect$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useTreeSelectLocale = useTreeSelectLocale(props),
        placeholder = _useTreeSelectLocale.placeholder,
        empty = _useTreeSelectLocale.empty,
        loadingItem = _useTreeSelectLocale.loadingItem;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var className = props.className,
        onInputChange = props.onInputChange,
        readonly = props.readonly,
        disabled = props.disabled,
        multiple = props.multiple,
        prefixIcon = props.prefixIcon,
        loading = props.loading,
        size = props.size,
        max = props.max,
        data = props.data,
        _props$filter = props.filter,
        filter = _props$filter === void 0 ? function (text, option) {
      return option.label.includes(text);
    } : _props$filter,
        rawFilterable = props.filterable,
        onClear = props.onClear,
        valueDisplay = props.valueDisplay,
        treeProps = props.treeProps,
        inputProps = props.inputProps,
        onBlur = props.onBlur,
        onFocus = props.onFocus,
        onSearch = props.onSearch,
        onRemove = props.onRemove;
    var selectInputProps = useTreeSelectPassThroughProps(props);

    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onChange = _useControlled2[1];

    var _useControlled3 = useControlled(props, "popupVisible", props.onPopupVisibleChange),
        _useControlled4 = _slicedToArray(_useControlled3, 2),
        popupVisible = _useControlled4[0],
        setPopupVisible = _useControlled4[1];

    var _useSwitch = useSwitch(),
        _useSwitch2 = _slicedToArray(_useSwitch, 2),
        hover = _useSwitch2[0],
        hoverAction = _useSwitch2[1];

    var _useControlled5 = useControlled(props, "inputValue", onInputChange),
        _useControlled6 = _slicedToArray(_useControlled5, 2),
        filterInput = _useControlled6[0],
        setFilterInput = _useControlled6[1];

    var treeRef = React.useRef();

    var _useTreeSelectUtils = useTreeSelectUtils(props, treeRef),
        normalizeValue = _useTreeSelectUtils.normalizeValue,
        formatValue = _useTreeSelectUtils.formatValue,
        getNodeItem = _useTreeSelectUtils.getNodeItem;

    var filterable = rawFilterable || !!props.filter;
    var normalizedValue = React.useMemo(function () {
      var calcValue = Array.isArray(value) ? value : [value];
      return calcValue.reduce(function (result, value2) {
        var normalized = normalizeValue(value2);
        normalized.value && result.push(normalized);
        return result;
      }, []);
    }, [normalizeValue, value, data]);
    var internalInputValue = React.useMemo(function () {
      if (multiple) return normalizedValue;
      return filterable && popupVisible ? filterInput : normalizedValue[0] || "";
    }, [multiple, normalizedValue, filterable, popupVisible, filterInput]);
    var inputPlaceholader = React.useMemo(function () {
      if (filterable && !multiple && popupVisible && normalizedValue.length) {
        return typeof normalizedValue[0].label === "string" ? normalizedValue[0].label : String(normalizedValue[0].value);
      }

      return placeholder;
    }, [filterable, multiple, popupVisible, normalizedValue, placeholder]);
    var showLoading = !disabled && loading;
    var showFakePlaceholder = multiple && !filterable && !normalizedValue.length;
    var handleFilter = React.useCallback(function (node) {
      return filterable ? filter(filterInput, node) : true;
    }, [filter, filterInput, filterable]);
    var handleSingleChange = usePersistFn(function (value2, context) {
      var $value = value2.length ? value2[0] : null;
      onChange(formatValue($value, context.node.label), _objectSpread$17(_objectSpread$17({}, context), {}, {
        trigger: $value === null ? "uncheck" : "check"
      }));
      setPopupVisible(false, {
        trigger: "trigger-element-click"
      });
    });
    var handleMultiChange = usePersistFn(function (value2, context) {
      (max === 0 || value2.length <= max) && onChange(value2.map(function (value3) {
        var _getNodeItem;

        return formatValue(value3, (_getNodeItem = getNodeItem(value3)) === null || _getNodeItem === void 0 ? void 0 : _getNodeItem.label);
      }), _objectSpread$17(_objectSpread$17({}, context), {}, {
        trigger: value2.length > normalizedValue.length ? "check" : "uncheck"
      }));
    });
    var handleClear = usePersistFn(function (ctx) {
      ctx.e.stopPropagation();
      onChange(multiple ? [] : formatValue(null), {
        node: null,
        trigger: "clear",
        e: ctx.e
      });
      onClear === null || onClear === void 0 ? void 0 : onClear(ctx);
      setPopupVisible(false, {
        trigger: "trigger-element-click"
      });
    });
    var handleRemove = usePersistFn(function (index, e) {
      var node = getNodeItem(normalizedValue[index].value);
      onChange(normalizedValue.filter(function (value2, i) {
        return i !== index;
      }).map(function (_ref) {
        var value2 = _ref.value,
            label = _ref.label;
        return formatValue(value2, label);
      }), {
        node: node,
        trigger: "tag-remove",
        e: e
      });
      onRemove === null || onRemove === void 0 ? void 0 : onRemove({
        value: node.value,
        data: {
          value: node.value,
          label: node.label
        },
        e: e
      });
    });
    var handleTagChange = usePersistFn(function (tags, ctx) {
      switch (ctx.trigger) {
        case "clear":
          handleClear({
            e: ctx.e
          });
          break;

        case "tag-remove":
          handleRemove(ctx.index, ctx.e);
          break;

        case "backspace":
          handleRemove(ctx.index);
      }
    });
    var handleBlur = usePersistFn(function (v, ctx) {
      onBlur === null || onBlur === void 0 ? void 0 : onBlur({
        value: multiple ? normalizedValue : normalizedValue[0],
        e: ctx.e
      });
    });
    var handleFocus = usePersistFn(function (v, ctx) {
      onFocus === null || onFocus === void 0 ? void 0 : onFocus({
        value: multiple ? normalizedValue : normalizedValue[0],
        e: ctx.e
      });
    });
    var handleEnter = usePersistFn(function (text) {
      onSearch === null || onSearch === void 0 ? void 0 : onSearch(text);
    });
    var handleFilterChange = usePersistFn(function (value2) {
      return setFilterInput(value2);
    });
    React.useEffect(function () {
      popupVisible && setFilterInput("");
    }, [popupVisible]);
    React.useEffect(function () {
      setFilterInput("");
    }, [value]);

    var renderTree = function renderTree() {
      if (readonly) return empty;
      if (showLoading) return loadingItem;
      return /* @__PURE__ */React__default["default"].createElement(Tree, _objectSpread$17(_objectSpread$17({
        ref: treeRef,
        hover: true,
        transition: true,
        expandAll: true,
        filter: handleFilter,
        data: data,
        disabled: disabled,
        empty: empty,
        allowFoldNodeOnFilter: true
      }, multiple ? {
        checkable: true,
        onChange: handleMultiChange,
        value: normalizedValue.map(function (_ref2) {
          var value2 = _ref2.value;
          return value2;
        })
      } : {
        activable: true,
        actived: normalizedValue.map(function (_ref3) {
          var value2 = _ref3.value;
          return value2;
        }),
        onActive: handleSingleChange
      }), treeProps));
    };

    var renderCollapsedItems = React.useMemo(function () {
      return props.collapsedItems ? function () {
        return props.collapsedItems({
          value: normalizedValue,
          collapsedSelectedItems: normalizedValue.slice(props.minCollapsedNum, normalizedValue.length),
          count: normalizedValue.length - props.minCollapsedNum
        });
      } : null;
    }, [normalizedValue, props]);

    var renderLabel = function renderLabel() {
      return showFakePlaceholder ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, prefixIcon, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-tree-select--placeholder")
      }, placeholder)) : prefixIcon;
    };

    var normalizedValueDisplay = function normalizedValueDisplay() {
      if (typeof valueDisplay === "string") return valueDisplay;
      if (multiple) return function (_ref4) {
        var onClose = _ref4.onClose;
        return valueDisplay({
          value: normalizedValue,
          onClose: onClose
        });
      };
      return normalizedValue.length ? valueDisplay({
        value: normalizedValue[0],
        onClose: noop$1
      }) : "";
    };

    return /* @__PURE__ */React__default["default"].createElement(SelectInput$1, _objectSpread$17(_objectSpread$17(_objectSpread$17({
      status: props.status,
      tips: props.tips
    }, props.selectInputProps), selectInputProps), {}, {
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-tree-select"), _defineProperty$3({}, "".concat(classPrefix, "-tree-select--without-input"), multiple && !filterable), className),
      value: internalInputValue,
      inputValue: filterInput,
      panel: renderTree(),
      allowInput: multiple || filterable,
      inputProps: _objectSpread$17(_objectSpread$17({}, inputProps), {}, {
        size: size
      }),
      tagInputProps: {
        size: size,
        excessTagsDisplayType: "break-line",
        inputProps: inputProps,
        tagProps: props.tagProps
      },
      placeholder: inputPlaceholader,
      popupVisible: popupVisible && !disabled,
      onInputChange: handleFilterChange,
      onPopupVisibleChange: useMergeFn(setPopupVisible),
      onFocus: useMergeFn(handleFocus, function () {
        return setPopupVisible(true, {
          trigger: "trigger-element-click"
        });
      }),
      onBlur: useMergeFn(handleBlur),
      onClear: handleClear,
      onTagChange: handleTagChange,
      onEnter: handleEnter,
      onMouseenter: hoverAction.on,
      onMouseleave: hoverAction.off,
      suffixIcon: readonly ? null : /* @__PURE__ */React__default["default"].createElement(SelectArrow, {
        isActive: popupVisible,
        isHighlight: hover || popupVisible,
        disabled: disabled
      }),
      collapsedItems: renderCollapsedItems,
      label: renderLabel(),
      valueDisplay: valueDisplay && normalizedValueDisplay()
    }));
  });
  TreeSelect$1.displayName = "TreeSelect";
  TreeSelect$1.defaultProps = treeSelectDefaultProps;

  var TreeSelect = TreeSelect$1;

  var dividerDefaultProps = {
    align: "center",
    dashed: false,
    layout: "horizontal"
  };

  var _excluded$h = ["layout", "dashed", "align", "className", "style", "children", "content"];

  function ownKeys$16(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$16(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$16(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$16(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Divider$1 = function Divider(props) {
    var _classNames;

    var layout = props.layout,
        dashed = props.dashed,
        align = props.align,
        className = props.className,
        style = props.style,
        children = props.children,
        content = props.content,
        otherDividerProps = _objectWithoutProperties$2(props, _excluded$h);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var childrenNode = content || children;
    var showText = layout !== "vertical" && !!childrenNode;
    var dividerClassNames = classNames$1("".concat(classPrefix, "-divider"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-divider--").concat(layout), layout), _defineProperty$3(_classNames, "".concat(classPrefix, "-divider--dashed"), !!dashed), _defineProperty$3(_classNames, "".concat(classPrefix, "-divider--with-text"), showText), _defineProperty$3(_classNames, "".concat(classPrefix, "-divider--with-text-").concat(align), showText), _classNames));
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$16(_objectSpread$16({}, otherDividerProps), {}, {
      className: dividerClassNames,
      style: style
    }), showText ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-divider__inner-text")
    }, childrenNode) : null);
  };

  Divider$1.displayName = "Divider";
  Divider$1.defaultProps = dividerDefaultProps;

  var Divider = Divider$1;

  var switchDefaultProps = {
    label: [],
    loading: false,
    size: "medium"
  };

  var _excluded$g = ["className", "value", "defaultValue", "disabled", "loading", "size", "label", "customValue", "onChange"];

  function ownKeys$15(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$15(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$15(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$15(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Switch$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var className = props.className,
        value = props.value,
        defaultValue = props.defaultValue,
        disabled = props.disabled,
        loading = props.loading,
        size = props.size,
        label = props.label,
        customValue = props.customValue,
        onChange = props.onChange,
        restProps = _objectWithoutProperties$2(props, _excluded$g);

    var _ref = customValue || [],
        _ref2 = _slicedToArray(_ref, 2),
        _ref2$ = _ref2[0],
        activeValue = _ref2$ === void 0 ? true : _ref2$,
        _ref2$2 = _ref2[1],
        inactiveValue = _ref2$2 === void 0 ? false : _ref2$2;

    var isControlled = typeof value !== "undefined";
    var initChecked = defaultValue === activeValue || value === activeValue;

    var _useState = React.useState(initChecked),
        _useState2 = _slicedToArray(_useState, 2),
        innerChecked = _useState2[0],
        setInnerChecked = _useState2[1];

    function renderContent(checked) {
      if (typeof label === "function") return label({
        value: value
      });
      if (typeof label === "string") return label;

      if (Array.isArray(label)) {
        var _label = _slicedToArray(label, 2),
            _label$ = _label[0],
            activeContent = _label$ === void 0 ? "" : _label$,
            _label$2 = _label[1],
            inactiveContent = _label$2 === void 0 ? "" : _label$2;

        var content = checked ? activeContent : inactiveContent;
        if (typeof content === "function") return content();
        return content;
      }

      return null;
    }

    function onInternalClick() {
      if (disabled) return;
      !isControlled && setInnerChecked(!innerChecked);
      var changedValue = !innerChecked ? activeValue : inactiveValue;
      onChange === null || onChange === void 0 ? void 0 : onChange(changedValue);
    }

    React.useEffect(function () {
      if (Array.isArray(customValue) && !customValue.includes(value)) {
        log.error("Switch", "value is not in customValue: ".concat(JSON.stringify(customValue)));
      }

      isControlled && setInnerChecked(value === activeValue);
    }, [value, customValue, activeValue, isControlled]);

    var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE,
        STATUS = _useCommonClassName.STATUS;

    var switchClassName = classNames$1("".concat(classPrefix, "-switch"), className, (_classNames = {}, _defineProperty$3(_classNames, STATUS.checked, innerChecked), _defineProperty$3(_classNames, STATUS.disabled, disabled), _defineProperty$3(_classNames, STATUS.loading, loading), _classNames), SIZE[size]);
    return /* @__PURE__ */React__default["default"].createElement("button", _objectSpread$15(_objectSpread$15({}, restProps), {}, {
      type: "button",
      role: "switch",
      disabled: disabled || loading,
      className: switchClassName,
      ref: ref,
      onClick: onInternalClick
    }), /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-switch__handle")
    }, loading && /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: true,
      size: "small"
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-switch__content")
    }, renderContent(innerChecked)));
  });
  Switch$1.displayName = "Switch";
  Switch$1.defaultProps = switchDefaultProps;

  var Switch = Switch$1;

  var AnchorContext = /*#__PURE__*/React.createContext({
    onClick: noop$1,
    activeItem: "",
    registerItem: noop$1,
    unregisterItem: noop$1
  });

  function getOffsetTop(target, container) {
    var _target$getBoundingCl = target.getBoundingClientRect(),
        top = _target$getBoundingCl.top;

    if (container === window) {
      return top - document.documentElement.clientTop;
    }

    return top - container.getBoundingClientRect().top;
  }

  function isWindow(obj) {
    return obj && obj === obj.window;
  }

  function getScroll(target, isLeft) {
    if (typeof window === "undefined" || !target) {
      return 0;
    }

    var method = isLeft ? "scrollLeft" : "scrollTop";
    var result = 0;

    if (isWindow(target)) {
      result = target[isLeft ? "pageXOffset" : "pageYOffset"];
    } else if (target instanceof Document) {
      result = target.documentElement[method];
    } else if (target) {
      result = target[method];
    }

    return result;
  }
  function scrollTo(target, opt) {
    var _opt$container = opt.container,
        container = _opt$container === void 0 ? window : _opt$container,
        _opt$duration = opt.duration,
        duration = _opt$duration === void 0 ? 450 : _opt$duration,
        _opt$easing = opt.easing,
        easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
    var scrollTop = getScroll(container);
    var startTime = Date.now();
    return new Promise(function (res) {
      var fnc = function fnc() {
        var timestamp = Date.now();
        var time = timestamp - startTime;
        var nextScrollTop = easing(Math.min(time, duration), scrollTop, target, duration);

        if (isWindow(container)) {
          container.scrollTo(window.pageXOffset, nextScrollTop);
        } else if (container instanceof HTMLDocument || container.constructor.name === "HTMLDocument") {
          container.documentElement.scrollTop = nextScrollTop;
        } else {
          container.scrollTop = nextScrollTop;
        }

        if (time < duration) {
          raf$1(fnc);
        } else {
          raf$1(res);
        }
      };

      raf$1(fnc);
    });
  }

  var anchorDefaultProps = {
    bounds: 5,
    container: function container() {
      return window;
    },
    size: "medium",
    targetOffset: 0
  };
  var anchorItemDefaultProps = {
    target: "_self"
  };
  var anchorTargetDefaultProps = {
    tag: "div"
  };

  var _excluded$f = ["href", "title", "target", "children", "className"];

  function ownKeys$14(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$14(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$14(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$14(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var AnchorItem = function AnchorItem(props) {
    var _useContext = React.useContext(AnchorContext),
        onClick = _useContext.onClick,
        activeItem = _useContext.activeItem,
        registerItem = _useContext.registerItem,
        unregisterItem = _useContext.unregisterItem;

    var href = props.href,
        title = props.title,
        target = props.target,
        children = props.children,
        className = props.className,
        rest = _objectWithoutProperties$2(props, _excluded$f);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var titleAttr = typeof title === "string" ? title : null;

    var handleClick = function handleClick(e) {
      onClick({
        title: titleAttr,
        href: href
      }, e);
    };

    React.useEffect(function () {
      registerItem(href);
      return function () {
        return unregisterItem(href);
      };
    }, [href, registerItem, unregisterItem]);
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$14(_objectSpread$14({}, rest), {}, {
      className: classNames$1("".concat(classPrefix, "-anchor__item"), _defineProperty$3({}, "".concat(classPrefix, "-is-active"), activeItem === href), className)
    }), /* @__PURE__ */React__default["default"].createElement("a", {
      href: href,
      className: classNames$1("".concat(classPrefix, "-anchor__item-link")),
      title: titleAttr,
      target: target,
      onClick: function onClick(e) {
        return handleClick(e);
      }
    }, title), children);
  };

  AnchorItem.displayName = "AnchorItem";
  AnchorItem.defaultProps = anchorItemDefaultProps;

  function copyText(text) {
    if ("clipboard" in navigator) {
      navigator.clipboard.writeText(text);
      return;
    }

    var textarea = document.createElement("textarea");
    textarea.textContent = text;
    textarea.style.width = "0px";
    textarea.style.height = "0px";
    document.body.appendChild(textarea);
    var selection = document.getSelection();
    var range = document.createRange();
    range.selectNode(textarea);
    selection.removeAllRanges();
    selection.addRange(range);
    document.execCommand("copy");
    selection.removeAllRanges();
    document.body.removeChild(textarea);
  }

  var AnchorTarget = function AnchorTarget(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      FileCopyIcon: FileCopyIcon
    }),
        FileCopyIcon$1 = _useGlobalIcon.FileCopyIcon;

    var id = props.id,
        tag = props.tag,
        children = props.children,
        className = props.className,
        style = props.style;
    var tagClassName = classNames$1("".concat(classPrefix, "-anchor__target"), className);
    var iconClassName = "".concat(classPrefix, "-anchor__copy");

    var handleCopyText = function handleCopyText() {
      var a = document.createElement("a");
      a.href = "#".concat(id);
      copyText(a.href);
      MessagePlugin.success("\u94FE\u63A5\u590D\u5236\u6210\u529F", 1e3);
    };

    var Content = function Content() {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, children, /* @__PURE__ */React__default["default"].createElement(Popup, {
        content: "\u590D\u5236\u94FE\u63A5",
        placement: "top",
        showArrow: true
      }, /* @__PURE__ */React__default["default"].createElement(FileCopyIcon$1, {
        className: iconClassName,
        onClick: handleCopyText
      })));
    };

    return /*#__PURE__*/React__default["default"].createElement(tag, {
      id: id,
      className: tagClassName,
      style: style
    }, /*#__PURE__*/React__default["default"].createElement(Content));
  };

  AnchorTarget.displayName = "AnchorTarget";
  AnchorTarget.defaultProps = anchorTargetDefaultProps;

  var _excluded$e = ["affixProps", "bounds", "targetOffset", "container", "size", "children", "cursor", "onClick", "onChange", "className"];

  function ownKeys$13(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$13(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$13(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$13(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ANCHOR_SHARP_REGEXP = /#(\S+)$/;
  var Anchor$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var affixProps = props.affixProps,
        bounds = props.bounds,
        targetOffset = props.targetOffset,
        container = props.container,
        size = props.size,
        children = props.children,
        cursor = props.cursor,
        onClick = props.onClick,
        onChange = props.onChange,
        className = props.className,
        rest = _objectWithoutProperties$2(props, _excluded$e);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(""),
        _useState2 = _slicedToArray(_useState, 2),
        activeItem = _useState2[0],
        setActiveItem = _useState2[1];

    var _useState3 = React.useState({
      top: "0px",
      height: "0px",
      opacity: 0
    }),
        _useState4 = _slicedToArray(_useState3, 2),
        cursorStyle = _useState4[0],
        setCursorStyle = _useState4[1];

    var anchorEl = React.useRef(null);
    var intervalRef = React.useRef({
      items: [],
      scrollContainer: canUseDocument ? window : null,
      handleScrollLock: false
    });
    React.useImperativeHandle(ref, function () {
      return anchorEl.current;
    });

    var registerItem = function registerItem(href) {
      var items = intervalRef.current.items;
      if (ANCHOR_SHARP_REGEXP.test(href) && items.indexOf(href) < 0) items.push(href);
    };

    var unregisterItem = function unregisterItem(href) {
      var items = intervalRef.current.items;
      intervalRef.current.items = items.filter(function (item) {
        return href !== item;
      });
    };

    var getAnchorTarget = function getAnchorTarget(href) {
      return document.querySelector(href);
    };

    var handleScrollTo = function handleScrollTo(link) {
      var anchor = getAnchorTarget(link);
      if (!anchor) return;
      onChange === null || onChange === void 0 ? void 0 : onChange(link, activeItem);
      setActiveItem(link);
      intervalRef.current.handleScrollLock = true;
      var scrollContainer = intervalRef.current.scrollContainer;
      var scrollTop = getScroll(scrollContainer);
      var offsetTop = getOffsetTop(anchor, scrollContainer);
      var top = scrollTop + offsetTop - targetOffset;
      scrollTo(top, {
        container: scrollContainer
      }).then(function () {
        intervalRef.current.handleScrollLock = false;
      });
    };

    var handleClick = function handleClick(item, e) {
      onClick === null || onClick === void 0 ? void 0 : onClick(_objectSpread$13({
        e: e
      }, item));
      handleScrollTo(item.href);
    };

    React.useEffect(function () {
      var _anchorEl$current$que, _anchorEl$current;

      var pointEl = (_anchorEl$current$que = (_anchorEl$current = anchorEl.current).querySelector) === null || _anchorEl$current$que === void 0 ? void 0 : _anchorEl$current$que.call(_anchorEl$current, ".".concat(classPrefix, "-is-active>a"));

      if (!pointEl) {
        setCursorStyle(null);
      } else {
        var top = pointEl.offsetTop,
            height = pointEl.offsetHeight;
        setCursorStyle({
          top: "".concat(top, "px"),
          height: "".concat(height, "px"),
          opacity: 1
        });
      }
    }, [activeItem, classPrefix]);
    var handleScroll = React.useCallback(function () {
      var _intervalRef$current = intervalRef.current,
          scrollContainer = _intervalRef$current.scrollContainer,
          handleScrollLock = _intervalRef$current.handleScrollLock;
      if (handleScrollLock) return;
      var items = intervalRef.current.items;
      var filters = [];
      var active = "";
      items.forEach(function (href) {
        var anchor = getAnchorTarget(href);
        if (!anchor) return;
        var top = getOffsetTop(anchor, scrollContainer);

        if (top <= bounds + targetOffset) {
          filters.push({
            href: href,
            top: top
          });
        }
      });

      if (filters.length) {
        var latest = filters.reduce(function (prev, cur) {
          return prev.top > cur.top ? prev : cur;
        });
        active = latest.href;
      }

      if (active !== activeItem) {
        onChange === null || onChange === void 0 ? void 0 : onChange(active, activeItem);
        setActiveItem(active);
      }
    }, [activeItem, bounds, onChange, targetOffset]);
    React.useEffect(function () {
      intervalRef.current.scrollContainer = getScrollContainer(container);
      var scrollContainer = intervalRef.current.scrollContainer;
      handleScroll();
      scrollContainer.addEventListener("scroll", handleScroll);
      return function () {
        scrollContainer.removeEventListener("scroll", handleScroll);
      };
    }, [container, handleScroll]);
    var anchorClass = classNames$1("".concat(classPrefix, "-anchor"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-m"), size === "medium"), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _classNames), className);

    var CursorCmp = function CursorCmp() {
      if (isFunction_1(cursor)) return cursor();
      if (isEmpty_1(cursor)) return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-anchor__line-cursor")
      });
      return cursor;
    };

    var Cmp = /* @__PURE__ */React__default["default"].createElement(AnchorContext.Provider, {
      value: {
        onClick: handleClick,
        activeItem: activeItem,
        registerItem: registerItem,
        unregisterItem: unregisterItem
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$13(_objectSpread$13({}, rest), {}, {
      className: anchorClass,
      ref: anchorEl
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-anchor__line")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-anchor__line-cursor-wrapper"),
      style: cursorStyle
    }, CursorCmp())), children));
    return isEmpty_1(affixProps) ? Cmp : /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$13({}, affixProps), Cmp);
  }, {
    AnchorItem: AnchorItem,
    AnchorTarget: AnchorTarget
  });
  Anchor$1.displayName = "Anchor";
  Anchor$1.defaultProps = anchorDefaultProps;

  var Anchor = Anchor$1;

  var dayjs_min = {exports: {}};

  (function (module, exports) {
    !function (t, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      var t = 1e3,
          e = 6e4,
          n = 36e5,
          r = "millisecond",
          i = "second",
          s = "minute",
          u = "hour",
          a = "day",
          o = "week",
          f = "month",
          h = "quarter",
          c = "year",
          d = "date",
          $ = "Invalid Date",
          l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
          y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
          M = {
        name: "en",
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
      },
          m = function m(t, e, n) {
        var r = String(t);
        return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
      },
          g = {
        s: m,
        z: function z(t) {
          var e = -t.utcOffset(),
              n = Math.abs(e),
              r = Math.floor(n / 60),
              i = n % 60;
          return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
        },
        m: function t(e, n) {
          if (e.date() < n.date()) return -t(n, e);
          var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
              i = e.clone().add(r, f),
              s = n - i < 0,
              u = e.clone().add(r + (s ? -1 : 1), f);
          return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
        },
        a: function a(t) {
          return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
        },
        p: function p(t) {
          return {
            M: f,
            y: c,
            w: o,
            d: a,
            D: d,
            h: u,
            m: s,
            s: i,
            ms: r,
            Q: h
          }[t] || String(t || "").toLowerCase().replace(/s$/, "");
        },
        u: function u(t) {
          return void 0 === t;
        }
      },
          v = "en",
          D = {};

      D[v] = M;

      var p = function p(t) {
        return t instanceof _;
      },
          S = function t(e, n, r) {
        var i;
        if (!e) return v;

        if ("string" == typeof e) {
          var s = e.toLowerCase();
          D[s] && (i = s), n && (D[s] = n, i = s);
          var u = e.split("-");
          if (!i && u.length > 1) return t(u[0]);
        } else {
          var a = e.name;
          D[a] = e, i = a;
        }

        return !r && i && (v = i), i || !r && v;
      },
          w = function w(t, e) {
        if (p(t)) return t.clone();
        var n = "object" == _typeof$1(e) ? e : {};
        return n.date = t, n.args = arguments, new _(n);
      },
          O = g;

      O.l = S, O.i = p, O.w = function (t, e) {
        return w(t, {
          locale: e.$L,
          utc: e.$u,
          x: e.$x,
          $offset: e.$offset
        });
      };

      var _ = function () {
        function M(t) {
          this.$L = S(t.locale, null, !0), this.parse(t);
        }

        var m = M.prototype;
        return m.parse = function (t) {
          this.$d = function (t) {
            var e = t.date,
                n = t.utc;
            if (null === e) return new Date(NaN);
            if (O.u(e)) return new Date();
            if (e instanceof Date) return new Date(e);

            if ("string" == typeof e && !/Z$/i.test(e)) {
              var r = e.match(l);

              if (r) {
                var i = r[2] - 1 || 0,
                    s = (r[7] || "0").substring(0, 3);
                return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
              }
            }

            return new Date(e);
          }(t), this.$x = t.x || {}, this.init();
        }, m.init = function () {
          var t = this.$d;
          this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
        }, m.$utils = function () {
          return O;
        }, m.isValid = function () {
          return !(this.$d.toString() === $);
        }, m.isSame = function (t, e) {
          var n = w(t);
          return this.startOf(e) <= n && n <= this.endOf(e);
        }, m.isAfter = function (t, e) {
          return w(t) < this.startOf(e);
        }, m.isBefore = function (t, e) {
          return this.endOf(e) < w(t);
        }, m.$g = function (t, e, n) {
          return O.u(t) ? this[e] : this.set(n, t);
        }, m.unix = function () {
          return Math.floor(this.valueOf() / 1e3);
        }, m.valueOf = function () {
          return this.$d.getTime();
        }, m.startOf = function (t, e) {
          var n = this,
              r = !!O.u(e) || e,
              h = O.p(t),
              $ = function $(t, e) {
            var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
            return r ? i : i.endOf(a);
          },
              l = function l(t, e) {
            return O.w(n.toDate()[t].apply(n.toDate("s"), (r ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), n);
          },
              y = this.$W,
              M = this.$M,
              m = this.$D,
              g = "set" + (this.$u ? "UTC" : "");

          switch (h) {
            case c:
              return r ? $(1, 0) : $(31, 11);

            case f:
              return r ? $(1, M) : $(0, M + 1);

            case o:
              var v = this.$locale().weekStart || 0,
                  D = (y < v ? y + 7 : y) - v;
              return $(r ? m - D : m + (6 - D), M);

            case a:
            case d:
              return l(g + "Hours", 0);

            case u:
              return l(g + "Minutes", 1);

            case s:
              return l(g + "Seconds", 2);

            case i:
              return l(g + "Milliseconds", 3);

            default:
              return this.clone();
          }
        }, m.endOf = function (t) {
          return this.startOf(t, !1);
        }, m.$set = function (t, e) {
          var n,
              o = O.p(t),
              h = "set" + (this.$u ? "UTC" : ""),
              $ = (n = {}, n[a] = h + "Date", n[d] = h + "Date", n[f] = h + "Month", n[c] = h + "FullYear", n[u] = h + "Hours", n[s] = h + "Minutes", n[i] = h + "Seconds", n[r] = h + "Milliseconds", n)[o],
              l = o === a ? this.$D + (e - this.$W) : e;

          if (o === f || o === c) {
            var y = this.clone().set(d, 1);
            y.$d[$](l), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
          } else $ && this.$d[$](l);

          return this.init(), this;
        }, m.set = function (t, e) {
          return this.clone().$set(t, e);
        }, m.get = function (t) {
          return this[O.p(t)]();
        }, m.add = function (r, h) {
          var d,
              $ = this;
          r = Number(r);

          var l = O.p(h),
              y = function y(t) {
            var e = w($);
            return O.w(e.date(e.date() + Math.round(t * r)), $);
          };

          if (l === f) return this.set(f, this.$M + r);
          if (l === c) return this.set(c, this.$y + r);
          if (l === a) return y(1);
          if (l === o) return y(7);
          var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[l] || 1,
              m = this.$d.getTime() + r * M;
          return O.w(m, this);
        }, m.subtract = function (t, e) {
          return this.add(-1 * t, e);
        }, m.format = function (t) {
          var e = this,
              n = this.$locale();
          if (!this.isValid()) return n.invalidDate || $;

          var r = t || "YYYY-MM-DDTHH:mm:ssZ",
              i = O.z(this),
              s = this.$H,
              u = this.$m,
              a = this.$M,
              o = n.weekdays,
              f = n.months,
              h = function h(t, n, i, s) {
            return t && (t[n] || t(e, r)) || i[n].slice(0, s);
          },
              c = function c(t) {
            return O.s(s % 12 || 12, t, "0");
          },
              d = n.meridiem || function (t, e, n) {
            var r = t < 12 ? "AM" : "PM";
            return n ? r.toLowerCase() : r;
          },
              l = {
            YY: String(this.$y).slice(-2),
            YYYY: this.$y,
            M: a + 1,
            MM: O.s(a + 1, 2, "0"),
            MMM: h(n.monthsShort, a, f, 3),
            MMMM: h(f, a),
            D: this.$D,
            DD: O.s(this.$D, 2, "0"),
            d: String(this.$W),
            dd: h(n.weekdaysMin, this.$W, o, 2),
            ddd: h(n.weekdaysShort, this.$W, o, 3),
            dddd: o[this.$W],
            H: String(s),
            HH: O.s(s, 2, "0"),
            h: c(1),
            hh: c(2),
            a: d(s, u, !0),
            A: d(s, u, !1),
            m: String(u),
            mm: O.s(u, 2, "0"),
            s: String(this.$s),
            ss: O.s(this.$s, 2, "0"),
            SSS: O.s(this.$ms, 3, "0"),
            Z: i
          };

          return r.replace(y, function (t, e) {
            return e || l[t] || i.replace(":", "");
          });
        }, m.utcOffset = function () {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m.diff = function (r, d, $) {
          var l,
              y = O.p(d),
              M = w(r),
              m = (M.utcOffset() - this.utcOffset()) * e,
              g = this - M,
              v = O.m(this, M);
          return v = (l = {}, l[c] = v / 12, l[f] = v, l[h] = v / 3, l[o] = (g - m) / 6048e5, l[a] = (g - m) / 864e5, l[u] = g / n, l[s] = g / e, l[i] = g / t, l)[y] || g, $ ? v : O.a(v);
        }, m.daysInMonth = function () {
          return this.endOf(f).$D;
        }, m.$locale = function () {
          return D[this.$L];
        }, m.locale = function (t, e) {
          if (!t) return this.$L;
          var n = this.clone(),
              r = S(t, e, !0);
          return r && (n.$L = r), n;
        }, m.clone = function () {
          return O.w(this.$d, this);
        }, m.toDate = function () {
          return new Date(this.valueOf());
        }, m.toJSON = function () {
          return this.isValid() ? this.toISOString() : null;
        }, m.toISOString = function () {
          return this.$d.toISOString();
        }, m.toString = function () {
          return this.$d.toUTCString();
        }, M;
      }(),
          T = _.prototype;

      return w.prototype = T, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function (t) {
        T[t[1]] = function (e) {
          return this.$g(e, t[0], t[1]);
        };
      }), w.extend = function (t, e) {
        return t.$i || (t(e, _, w), t.$i = !0), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function (t) {
        return w(1e3 * t);
      }, w.en = D[v], w.Ls = D, w.p = {}, w;
    });
  })(dayjs_min);

  var dayjs = dayjs_min.exports;

  function usePrefixClass() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return React.useCallback(function () {
      var className = "";

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      args.forEach(function (item, index) {
        if (item && index > 0) className = className.concat(" ");

        if (item instanceof Array) {
          var _item = _slicedToArray(item, 3),
              block = _item[0],
              element = _item[1],
              modifier = _item[2];

          className = className.concat(classPrefix, "-", block);
          if (element) className = className.concat("__", element);
          if (modifier) className = className.concat("--", modifier);
        } else if (typeof item === "string") {
          className = className.concat(classPrefix, "-", item);
        }
      });
      return className;
    }, [classPrefix]);
  }

  var blockName = "calendar";
  var controlSectionSize = "medium";
  var minYear = 1970;
  var getDay = function getDay(dt) {
    var day = dayjs(dt).day();

    if (day === 0) {
      day = 7;
    }

    return day;
  };
  var createDateList = function createDateList(year, month, firstDayOfWeek, currentValue, format) {
    var createCellData = function createCellData(belongTo, isCurrent, date, weekOrder) {
      var day = getDay(date);
      return {
        mode: "month",
        belongTo: belongTo,
        isCurrent: isCurrent,
        day: day,
        weekOrder: weekOrder,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      };
    };

    var monthFirstDay = dayjs("".concat(year, "-").concat(month));
    var rowList = [];
    var list = [];
    var weekCount = 1;
    var lastMonthDaysCount = (getDay(monthFirstDay.toDate()) - firstDayOfWeek + 7) % 7;

    for (var i = 0; i < lastMonthDaysCount; i++) {
      var dayObj = monthFirstDay.subtract(i + 1, "day");
      list.unshift(createCellData(-1, false, dayObj.toDate(), weekCount));
    }

    var monthDaysCount = monthFirstDay.endOf("month").daysInMonth();

    for (var _i = 0; _i < monthDaysCount; _i++) {
      var _dayObj = monthFirstDay.add(_i, "day");

      list.push(createCellData(0, currentValue.isSame(_dayObj), _dayObj.toDate(), weekCount));

      if (list.length === 7) {
        rowList.push(list);
        list = [];
        weekCount += 1;
      }
    }

    if (list.length) {
      var monthLastDay = dayjs("".concat(year, "-").concat(month)).endOf("month");
      var nextMonthDaysCount = 7 - list.length;

      for (var _i2 = 0; _i2 < nextMonthDaysCount; _i2++) {
        var _dayObj2 = monthLastDay.add(_i2 + 1, "day");

        list.push(createCellData(1, false, _dayObj2.toDate(), weekCount));
      }

      rowList.push(list);
    }

    return rowList;
  };
  var createMonthList = function createMonthList(year, currentValue, format) {
    var rowNum = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;
    var monthsArr = [];
    var isCurYear = currentValue.year() === year;
    var tmpArr = [];

    for (var i = 1; i <= 12; i++) {
      var date = new Date(year, i - 1);
      var curDateMon = parseInt(currentValue.format("M"), 10);
      var isCurrent = isCurYear && curDateMon === i;
      tmpArr.push({
        mode: "year",
        isCurrent: isCurrent,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      });

      if (tmpArr.length === rowNum) {
        monthsArr.push(tmpArr);
        tmpArr = [];
      }
    }

    return monthsArr;
  };

  var CalendarCellComp = function CalendarCellComp(props) {
    var mode = props.mode,
        cell = props.cell,
        cellAppend = props.cellAppend,
        theme = props.theme,
        _props$isDisabled = props.isDisabled,
        isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
        cellData = props.cellData,
        isCurrent = props.isCurrent,
        isNow = props.isNow,
        fillWithZero = props.fillWithZero,
        createCalendarCell = props.createCalendarCell,
        onCellClick = props.onCellClick,
        onCellDoubleClick = props.onCellDoubleClick,
        onCellRightClick = props.onCellRightClick;

    var _useLocaleReceiver = useLocaleReceiver("calendar"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var monthLabelList = t(local.cellMonth).split(",");

    var getMonthCN = function getMonthCN(month) {
      return monthLabelList[month];
    };

    var _useConfig = useConfig$1(),
        calendarConfig = _useConfig.calendar;

    var fix0 = function fix0(num) {
      var _ref;

      var fillZero = num < 10 && ((_ref = fillWithZero !== null && fillWithZero !== void 0 ? fillWithZero : calendarConfig.fillWithZero) !== null && _ref !== void 0 ? _ref : true);
      return fillZero ? "0".concat(num) : num;
    };

    var prefixCls = usePrefixClass();
    return /* @__PURE__ */React__default["default"].createElement("td", {
      className: prefixCls([blockName, "table-body-cell"], isDisabled ? "is-disabled" : null, isCurrent ? "is-checked" : null, isNow ? [blockName, "table-body-cell--now"] : null),
      onClick: onCellClick,
      onDoubleClick: onCellDoubleClick,
      onContextMenu: onCellRightClick
    }, function () {
      if (cell && typeof cell === "function") return cell(mode === "month" ? createCalendarCell(cellData) : cellData);
      if (cell && typeof cell !== "function") return cell;
      var cellCtx;

      if (mode === "year") {
        var mIndex = cellData.date.getMonth();
        cellCtx = theme === "full" ? getMonthCN(mIndex) : t(local.monthSelection, {
          month: "".concat(mIndex + 1)
        });
      } else {
        cellCtx = fix0(cellData.date.getDate());
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: prefixCls([blockName, "table-body-cell-display"])
      }, cellCtx);
    }(), function () {
      var cellCtx;

      if (cellAppend && typeof cellAppend === "function") {
        cellCtx = cellAppend(mode === "month" ? createCalendarCell(cellData) : cellData);
      }

      if (cellAppend && typeof cellAppend !== "function") {
        cellCtx = cellAppend;
      }

      return cellAppend && /* @__PURE__ */React__default["default"].createElement("div", {
        className: prefixCls([blockName, "table-body-cell-content"])
      }, cellCtx);
    }());
  };

  var calendarDefaultProps = {
    format: "YYYY-MM-DD",
    isShowWeekendDefault: true,
    mode: "month",
    preventCellContextmenu: false,
    theme: "full"
  };

  function ownKeys$12(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$12(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$12(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$12(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
    var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return {
      visible: visible,
      disabled: false,
      mode: {
        visible: true,
        radioGroupProps: {}
      },
      year: {
        visible: true,
        selectProps: {
          popupProps: {
            overlayInnerStyle: {
              width: "110px"
            }
          }
        }
      },
      month: {
        visible: true,
        selectProps: {
          popupProps: {
            overlayInnerStyle: {
              width: "90px"
            }
          }
        }
      },
      weekend: {
        visible: true,
        showWeekendButtonProps: {},
        hideWeekendButtonProps: {}
      },
      current: {
        visible: true,
        currentDayButtonProps: {},
        currentMonthButtonProps: {}
      }
    };
  };

  var Calendar$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var className = props.className,
        style = props.style,
        modeFromProps = props.mode,
        valueFromProps = props.value,
        firstDayOfWeek = props.firstDayOfWeek,
        format = props.format,
        range = props.range,
        head = props.head,
        cell = props.cell,
        cellAppend = props.cellAppend,
        week = props.week,
        theme = props.theme,
        controllerConfig = props.controllerConfig,
        _props$isShowWeekendD = props.isShowWeekendDefault,
        isShowWeekendDefault = _props$isShowWeekendD === void 0 ? true : _props$isShowWeekendD,
        _props$preventCellCon = props.preventCellContextmenu,
        preventCellContextmenu = _props$preventCellCon === void 0 ? false : _props$preventCellCon,
        monthProps = props.month,
        yearProps = props.year,
        _props$onControllerCh = props.onControllerChange,
        onControllerChange = _props$onControllerCh === void 0 ? noop$1 : _props$onControllerCh,
        _props$onCellClick = props.onCellClick,
        onCellClick = _props$onCellClick === void 0 ? noop$1 : _props$onCellClick,
        _props$onCellDoubleCl = props.onCellDoubleClick,
        onCellDoubleClick = _props$onCellDoubleCl === void 0 ? noop$1 : _props$onCellDoubleCl,
        _props$onCellRightCli = props.onCellRightClick,
        onCellRightClick = _props$onCellRightCli === void 0 ? noop$1 : _props$onCellRightCli,
        _props$onMonthChange = props.onMonthChange,
        onMonthChange = _props$onMonthChange === void 0 ? noop$1 : _props$onMonthChange,
        fillWithZero = props.fillWithZero;
    var controllerConfigData = typeof controllerConfig === "boolean" ? getDefaultControllerConfigData(controllerConfig) : _objectSpread$12(_objectSpread$12({}, getDefaultControllerConfigData()), controllerConfig);

    if (typeof controllerConfig !== "boolean") {
      if (monthProps) {
        controllerConfigData.month.visible = true;
      }

      if (yearProps) {
        controllerConfigData.year.visible = true;
      }
    }

    var visible = controllerConfigData.visible,
        disabled = controllerConfigData.disabled,
        modeFromConfig = controllerConfigData.mode,
        yearFromConfig = controllerConfigData.year,
        monthFromConfig = controllerConfigData.month,
        weekend = controllerConfigData.weekend,
        current = controllerConfigData.current;
    var _modeFromConfig$visib = modeFromConfig.visible,
        visibleForMode = _modeFromConfig$visib === void 0 ? true : _modeFromConfig$visib,
        _modeFromConfig$radio = modeFromConfig.radioGroupProps,
        radioGroupPropsForMode = _modeFromConfig$radio === void 0 ? {} : _modeFromConfig$radio;
    var _yearFromConfig$visib = yearFromConfig.visible,
        visibleForYear = _yearFromConfig$visib === void 0 ? true : _yearFromConfig$visib,
        _yearFromConfig$selec = yearFromConfig.selectProps,
        selectPropsForYear = _yearFromConfig$selec === void 0 ? {} : _yearFromConfig$selec;
    var _monthFromConfig$visi = monthFromConfig.visible,
        visibleForMonth = _monthFromConfig$visi === void 0 ? true : _monthFromConfig$visi,
        _monthFromConfig$sele = monthFromConfig.selectProps,
        selectPropsForMonth = _monthFromConfig$sele === void 0 ? {} : _monthFromConfig$sele;
    var _weekend$visible = weekend.visible,
        visibleForWeekendToggle = _weekend$visible === void 0 ? true : _weekend$visible,
        _weekend$showWeekendB = weekend.showWeekendButtonProps,
        showWeekendButtonProps = _weekend$showWeekendB === void 0 ? {} : _weekend$showWeekendB,
        _weekend$hideWeekendB = weekend.hideWeekendButtonProps,
        hideWeekendButtonProps = _weekend$hideWeekendB === void 0 ? {} : _weekend$hideWeekendB;
    var _current$visible = current.visible,
        visibleForCurrent = _current$visible === void 0 ? true : _current$visible,
        _current$currentDayBu = current.currentDayButtonProps,
        currentDayButtonProps = _current$currentDayBu === void 0 ? {} : _current$currentDayBu,
        _current$currentMonth = current.currentMonthButtonProps,
        currentMonthButtonProps = _current$currentMonth === void 0 ? {} : _current$currentMonth;

    var _useState = React.useState("month"),
        _useState2 = _slicedToArray(_useState, 2),
        mode = _useState2[0],
        setMode = _useState2[1];

    var _useState3 = React.useState(dayjs(valueFromProps || dayjs().format("YYYY-MM-DD"))),
        _useState4 = _slicedToArray(_useState3, 2),
        value = _useState4[0],
        setValue = _useState4[1];

    var _useState5 = React.useState(yearProps ? Number(yearProps) : value.year()),
        _useState6 = _slicedToArray(_useState5, 2),
        year = _useState6[0],
        setYear = _useState6[1];

    var _useState7 = React.useState(monthProps ? Number(monthProps) : parseInt(value.format("M"), 10)),
        _useState8 = _slicedToArray(_useState7, 2),
        month = _useState8[0],
        setMonth = _useState8[1];

    var _useState9 = React.useState(isShowWeekendDefault),
        _useState10 = _slicedToArray(_useState9, 2),
        isShowWeekend = _useState10[0],
        setIsShowWeekend = _useState10[1];

    var _useLocaleReceiver = useLocaleReceiver("calendar"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var weekLabelList = t(local.week).split(",");
    var colHeaderList = React.useMemo(function () {
      if (mode === "year") return [];
      var weekTextArr = Array.isArray(week) && week.length >= 7 ? week : _toConsumableArray(weekLabelList);
      var list = [];

      for (var i = firstDayOfWeek; i <= 7; i++) {
        if (!isShowWeekend && i > 5) {
          break;
        }

        list.push({
          day: i,
          text: weekTextArr[i - 1]
        });
      }

      if (firstDayOfWeek > 1) {
        for (var _i = 1; _i < firstDayOfWeek; _i++) {
          if (!isShowWeekend && _i > 5) {
            break;
          }

          list.push({
            day: _i,
            text: weekTextArr[_i - 1]
          });
        }
      }

      return list;
    }, [mode, firstDayOfWeek, isShowWeekend, week, weekLabelList]);
    var rangeFromTo = React.useMemo(function () {
      if (!range || range.length < 2) {
        return null;
      }

      var _range = _slicedToArray(range, 2),
          v1 = _range[0],
          v2 = _range[1];

      if (dayjs(v1).isBefore(dayjs(v2))) {
        return {
          from: v1,
          to: v2
        };
      }

      return {
        from: v2,
        to: v1
      };
    }, [range]);
    var controllerOptions = React.useMemo(function () {
      var dayJsFilterDate = dayjs("".concat(year, "-").concat(month));
      var re = {
        filterDate: dayJsFilterDate.toDate(),
        formattedFilterDate: dayJsFilterDate.format(format),
        mode: mode,
        isShowWeekend: isShowWeekend
      };
      return re;
    }, [isShowWeekend, mode, year, month, format]);

    var _useMemo = React.useMemo(function () {
      var isRangeValid = rangeFromTo && rangeFromTo.from && rangeFromTo.to;

      var checkMonthSelectorDisabled = function checkMonthSelectorDisabled(yearIn, monthIn) {
        if (isRangeValid) {
          var beginYear = dayjs(rangeFromTo.from).year();
          var endYear = dayjs(rangeFromTo.to).year();

          if (yearIn === beginYear) {
            var beginMon = parseInt(dayjs(rangeFromTo.from).format("M"), 10);
            return monthIn < beginMon;
          }

          if (yearIn === endYear) {
            var endMon = parseInt(dayjs(rangeFromTo.to).format("M"), 10);
            return monthIn > endMon;
          }
        }

        return false;
      };

      var yearList = [];
      var monthList2 = [];
      var yearBegin = isRangeValid ? dayjs(rangeFromTo.from).year() : Math.max(minYear, year - 10);
      var yearEnd = isRangeValid ? dayjs(rangeFromTo.to).year() : Math.max(minYear, year + 10);

      for (var i = yearBegin; i <= yearEnd; i++) {
        yearList.push({
          value: i,
          disabled: checkMonthSelectorDisabled(i, month)
        });
      }

      for (var _i2 = 1; _i2 <= 12; _i2++) {
        monthList2.push({
          value: _i2,
          disabled: checkMonthSelectorDisabled(year, _i2)
        });
      }

      return [yearList, monthList2];
    }, [rangeFromTo, year, month]),
        _useMemo2 = _slicedToArray(_useMemo, 2),
        yearSelectList = _useMemo2[0],
        monthSelectList = _useMemo2[1];

    var dateList = React.useMemo(function () {
      return createDateList(year, month, firstDayOfWeek, value, format);
    }, [year, month, firstDayOfWeek, format, value]);
    var monthList = React.useMemo(function () {
      return createMonthList(year, value, format);
    }, [year, value, format]);
    var createCalendarCell = React.useCallback(function (cellData) {
      return _objectSpread$12(_objectSpread$12({}, cellData), controllerOptions);
    }, [controllerOptions]);
    var toCurrent = React.useCallback(function () {
      var valueIn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var now = dayjs(valueIn).isValid() ? dayjs(valueIn) : dayjs(dayjs().format("YYYY-MM-DD"));
      setValue(now);
      setYear(now.year());
      setMonth(parseInt(now.format("M"), 10));
    }, []);
    React__default["default"].useImperativeHandle(ref, function () {
      return {
        toCurrent: toCurrent
      };
    }, [toCurrent]);

    var handleMonthChange = function handleMonthChange(newMonth) {
      setMonth(newMonth);
      onMonthChange({
        month: String(newMonth),
        year: String(year)
      });
    };

    var execCellEvent = React.useCallback(function (event, calendarCell, handleFunc) {
      if (handleFunc && typeof handleFunc === "function") {
        handleFunc({
          cell: createCalendarCell(calendarCell),
          e: event
        });
      }
    }, [createCalendarCell]);

    var clickCell = function clickCell(event, calendarCell) {
      setValue(dayjs(calendarCell.formattedDate));
      execCellEvent(event, calendarCell, onCellClick);
    };

    var doubleClickCell = function doubleClickCell(event, calendarCell) {
      execCellEvent(event, calendarCell, onCellDoubleClick);
    };

    var rightClickCell = function rightClickCell(event, calendarCell) {
      if (preventCellContextmenu) event.preventDefault();
      execCellEvent(event, calendarCell, onCellRightClick);
    };

    React.useEffect(function () {
      toCurrent(valueFromProps);
    }, [valueFromProps, toCurrent]);
    React.useEffect(function () {
      if (monthProps) {
        setMonth(Number(monthProps));
      }
    }, [monthProps]);
    React.useEffect(function () {
      if (yearProps) {
        setYear(Number(yearProps));
      }
    }, [yearProps]);
    React.useEffect(function () {
      setMode(modeFromProps);
    }, [modeFromProps]);
    React.useEffect(function () {
      setIsShowWeekend(isShowWeekendDefault);
    }, [isShowWeekendDefault]);
    useIsomorphicLayoutEffect(function () {
      onControllerChange(controllerOptions);
    }, [controllerOptions, onControllerChange]);
    var prefixCls = usePrefixClass();
    var currentDate = dayjs().format("YYYY-MM-DD");
    var currentMonth = dayjs().format("YYYY-MM");
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls(blockName, [blockName, "", theme]).concat(" ", className),
      style: style
    }, visible && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control"])
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "title"])
    }, function () {
      if (head && typeof head === "function") return head(controllerOptions);
      if (head && typeof head !== "function") return head;
    }()), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section"])
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section-cell"])
    }, visibleForYear && /* @__PURE__ */React__default["default"].createElement(Select, _objectSpread$12({
      autoWidth: true,
      size: controlSectionSize,
      value: year,
      disabled: disabled,
      options: yearSelectList.map(function (item) {
        return {
          label: t(local.yearSelection, {
            year: item.value
          }),
          value: item.value,
          disabled: item.disabled
        };
      }),
      onChange: function onChange(selectYear) {
        return setYear(selectYear);
      }
    }, selectPropsForYear))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section-cell"])
    }, visibleForMonth && mode === "month" && /* @__PURE__ */React__default["default"].createElement(Select, _objectSpread$12({
      autoWidth: true,
      size: controlSectionSize,
      value: month,
      options: monthSelectList.map(function (item) {
        return {
          label: t(local.monthSelection, {
            month: item.value
          }),
          value: item.value,
          disabled: item.disabled
        };
      }),
      disabled: disabled,
      onChange: handleMonthChange
    }, selectPropsForMonth)))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section"]),
      style: {
        height: "auto"
      }
    }, visibleForMode && /* @__PURE__ */React__default["default"].createElement(Radio.Group, _objectSpread$12({
      variant: "default-filled",
      size: controlSectionSize,
      value: mode,
      disabled: disabled,
      onChange: function onChange(value2) {
        return setMode(value2);
      }
    }, radioGroupPropsForMode), /* @__PURE__ */React__default["default"].createElement(Radio.Button, {
      value: "month"
    }, t(local.monthRadio)), /* @__PURE__ */React__default["default"].createElement(Radio.Button, {
      value: "year"
    }, t(local.yearRadio)))), mode === "month" && theme === "full" && visibleForWeekendToggle && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section"])
    }, /* @__PURE__ */React__default["default"].createElement(CheckTag, _objectSpread$12({
      className: "t-calendar__control-tag",
      checked: !isShowWeekend,
      disabled: disabled,
      size: controlSectionSize,
      onClick: function onClick() {
        setIsShowWeekend(!isShowWeekend);
      }
    }, isShowWeekend ? hideWeekendButtonProps : showWeekendButtonProps), "".concat(isShowWeekend ? t(local.hideWeekend) : t(local.showWeekend)))), theme === "full" && visibleForCurrent && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section"])
    }, /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$12({
      size: controlSectionSize,
      disabled: disabled,
      onClick: function onClick() {
        toCurrent();
      }
    }, mode === "year" ? currentMonthButtonProps : currentDayButtonProps), mode === "year" ? t(local.thisMonth) : t(local.today)))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "panel"], [blockName, "panel--".concat(mode)])
    }, /* @__PURE__ */React__default["default"].createElement("table", {
      className: prefixCls([blockName, "table"])
    }, colHeaderList.length > 0 && /* @__PURE__ */React__default["default"].createElement("thead", {
      className: prefixCls([blockName, "table-head"])
    }, /* @__PURE__ */React__default["default"].createElement("tr", {
      className: prefixCls([blockName, "table-head-row"])
    }, colHeaderList.map(function (item) {
      return /* @__PURE__ */React__default["default"].createElement("th", {
        key: item.day,
        className: prefixCls([blockName, "table-head-cell"])
      }, week && typeof week === "function" ? week({
        day: item.day
      }) : item.text);
    }))), mode === "month" && /* @__PURE__ */React__default["default"].createElement("tbody", {
      className: prefixCls([blockName, "table-body"])
    }, dateList.map(function (dateRow, dateRowIndex) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: String(dateRowIndex),
        className: prefixCls([blockName, "table-body-row"])
      }, dateRow.map(function (dateCell, dateCellIndex) {
        if (!isShowWeekend && [6, 7].indexOf(dateCell.day) >= 0) return null;
        var isNow = dateCell.formattedDate === currentDate;
        return /* @__PURE__ */React__default["default"].createElement(CalendarCellComp, {
          key: dateCellIndex,
          mode: mode,
          theme: theme,
          cell: cell,
          cellData: dateCell,
          cellAppend: cellAppend,
          fillWithZero: fillWithZero,
          isCurrent: dateCell.isCurrent,
          isNow: isNow,
          isDisabled: dateCell.belongTo !== 0,
          createCalendarCell: createCalendarCell,
          onCellClick: function onCellClick(event) {
            return clickCell(event, dateCell);
          },
          onCellDoubleClick: function onCellDoubleClick(event) {
            return doubleClickCell(event, dateCell);
          },
          onCellRightClick: function onCellRightClick(event) {
            return rightClickCell(event, dateCell);
          }
        });
      }));
    })), mode === "year" && /* @__PURE__ */React__default["default"].createElement("tbody", {
      className: prefixCls([blockName, "table-body"])
    }, monthList.map(function (monthRow, monthRowIndex) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: String(monthRowIndex),
        className: prefixCls([blockName, "table-body-row"])
      }, monthRow.map(function (monthCell, monthCellIndex) {
        var isNow = monthCell.formattedDate.startsWith(currentMonth);
        return /* @__PURE__ */React__default["default"].createElement(CalendarCellComp, {
          key: monthCellIndex,
          mode: mode,
          theme: theme,
          cell: cell,
          cellData: monthCell,
          cellAppend: cellAppend,
          fillWithZero: fillWithZero,
          isCurrent: monthCell.isCurrent,
          isNow: isNow,
          createCalendarCell: createCalendarCell,
          onCellClick: function onCellClick(event) {
            return clickCell(event, monthCell);
          },
          onCellDoubleClick: function onCellDoubleClick(event) {
            return doubleClickCell(event, monthCell);
          },
          onCellRightClick: function onCellRightClick(event) {
            return rightClickCell(event, monthCell);
          }
        });
      }));
    })))));
  });
  Calendar$1.displayName = "Calendar";
  Calendar$1.defaultProps = calendarDefaultProps;

  var Calendar = Calendar$1;

  var _excluded$d = ["name"];

  function ownKeys$11(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$11(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$11(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$11(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function getMapValue(name, formMapRef) {
    var mapKeys = _toConsumableArray(formMapRef.current.keys());

    var key = mapKeys.find(function (key2) {
      return String(key2) === String(name);
    });
    return formMapRef.current.get(key);
  }

  function travelMapFromObject(obj, formMapRef, callback) {
    var _iterator = _createForOfIteratorHelper(formMapRef.current.entries()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray(_step.value, 2),
            mapName = _step$value[0],
            formItemRef = _step$value[1];

        if (Array.isArray(mapName)) {
          var symbol = Symbol("name");
          var fieldValue = null;

          for (var i = 0; i < mapName.length; i++) {
            var item = mapName[i];

            if (Reflect.has(fieldValue || obj, item)) {
              fieldValue = Reflect.get(fieldValue || obj, item);
            } else {
              fieldValue = symbol;
              break;
            }
          }

          if (fieldValue !== symbol) {
            callback(formItemRef, fieldValue);
          }
        } else if (Reflect.has(obj, mapName)) {
          callback(formItemRef, obj[mapName]);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  function needValidate(name, fields) {
    if (!fields || !Array.isArray(fields)) return true;
    return fields.indexOf(name) !== -1;
  }

  function formatValidateResult(validateResultList) {
    var result = validateResultList.reduce(function (r, err) {
      return Object.assign(r || {}, err);
    }, {});
    Object.keys(result).forEach(function (key) {
      if (result[key] === true) {
        delete result[key];
      } else {
        result[key] = result[key].filter(function (fr) {
          return fr.result === false;
        });
      }

      if (result[key] && key.includes(",")) {
        var keyList = key.split(",");
        var fieldValue = keyList.reduceRight(function (prev, curr) {
          return _defineProperty$3({}, curr, prev);
        }, result[key]);
        merge_1(result, fieldValue);
        delete result[key];
      }
    });
    return isEmpty_1(result) ? true : result;
  }

  function useInstance(props, formRef, formMapRef) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var FORM_ITEM_CLASS_PREFIX = "".concat(classPrefix, "-form-item__");
    var scrollToFirstError = props.scrollToFirstError,
        _props$preventSubmitD = props.preventSubmitDefault,
        preventSubmitDefault = _props$preventSubmitD === void 0 ? true : _props$preventSubmitD,
        onSubmit = props.onSubmit;

    function getFirstError(r) {
      var _r$firstKey$;

      if (r === true) return;

      var _Object$keys = Object.keys(r),
          _Object$keys2 = _slicedToArray(_Object$keys, 1),
          firstKey = _Object$keys2[0];

      if (scrollToFirstError) {
        scrollTo(".".concat(FORM_ITEM_CLASS_PREFIX + firstKey));
      }

      return (_r$firstKey$ = r[firstKey][0]) === null || _r$firstKey$ === void 0 ? void 0 : _r$firstKey$.message;
    }

    function scrollTo(selector) {
      var _formRef$current$quer, _formRef$current;

      var dom = (_formRef$current$quer = (_formRef$current = formRef.current).querySelector) === null || _formRef$current$quer === void 0 ? void 0 : _formRef$current$quer.call(_formRef$current, selector);
      var behavior = scrollToFirstError;
      dom && dom.scrollIntoView({
        behavior: behavior
      });
    }

    function submit(e) {
      if (preventSubmitDefault) {
        var _e$preventDefault, _e$stopPropagation;

        e === null || e === void 0 ? void 0 : (_e$preventDefault = e.preventDefault) === null || _e$preventDefault === void 0 ? void 0 : _e$preventDefault.call(e);
        e === null || e === void 0 ? void 0 : (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 ? void 0 : _e$stopPropagation.call(e);
      }

      validate().then(function (r) {
        var firstError = getFirstError(r);
        onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit({
          validateResult: r,
          firstError: firstError,
          e: e
        });
      });
    }

    function validate(_x) {
      return _validate.apply(this, arguments);
    }

    function _validate() {
      _validate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(param) {
        var _ref4, fields, _ref4$trigger, trigger, showErrorMessage, list, validateList;

        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref4 = param || {}, fields = _ref4.fields, _ref4$trigger = _ref4.trigger, trigger = _ref4$trigger === void 0 ? "all" : _ref4$trigger, showErrorMessage = _ref4.showErrorMessage;
                list = _toConsumableArray(formMapRef.current.values()).filter(function (formItemRef) {
                  var _formItemRef$current15, _formItemRef$current16;

                  return isFunction_1(formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current15 = formItemRef.current) === null || _formItemRef$current15 === void 0 ? void 0 : _formItemRef$current15.validate) && needValidate(formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current16 = formItemRef.current) === null || _formItemRef$current16 === void 0 ? void 0 : _formItemRef$current16.name, fields);
                }).map(function (formItemRef) {
                  return formItemRef === null || formItemRef === void 0 ? void 0 : formItemRef.current.validate(trigger, showErrorMessage);
                });
                _context.next = 4;
                return Promise.all(list);

              case 4:
                validateList = _context.sent;
                return _context.abrupt("return", formatValidateResult(validateList));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _validate.apply(this, arguments);
    }

    function validateOnly(_x2) {
      return _validateOnly.apply(this, arguments);
    }

    function _validateOnly() {
      _validateOnly = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(param) {
        var _ref5, fields, _ref5$trigger, trigger, list, validateList;

        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _ref5 = param || {}, fields = _ref5.fields, _ref5$trigger = _ref5.trigger, trigger = _ref5$trigger === void 0 ? "all" : _ref5$trigger;
                list = _toConsumableArray(formMapRef.current.values()).filter(function (formItemRef) {
                  var _formItemRef$current17, _formItemRef$current18;

                  return isFunction_1(formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current17 = formItemRef.current) === null || _formItemRef$current17 === void 0 ? void 0 : _formItemRef$current17.validateOnly) && needValidate(formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current18 = formItemRef.current) === null || _formItemRef$current18 === void 0 ? void 0 : _formItemRef$current18.name, fields);
                }).map(function (formItemRef) {
                  var _formItemRef$current$6, _formItemRef$current19;

                  return formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current$6 = (_formItemRef$current19 = formItemRef.current).validateOnly) === null || _formItemRef$current$6 === void 0 ? void 0 : _formItemRef$current$6.call(_formItemRef$current19, trigger);
                });
                _context2.next = 4;
                return Promise.all(list);

              case 4:
                validateList = _context2.sent;
                return _context2.abrupt("return", formatValidateResult(validateList));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return _validateOnly.apply(this, arguments);
    }

    function getFieldValue(name) {
      var _formItemRef$current$, _formItemRef$current;

      if (!name) return null;
      var formItemRef = getMapValue(name, formMapRef);
      return formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current$ = (_formItemRef$current = formItemRef.current).getValue) === null || _formItemRef$current$ === void 0 ? void 0 : _formItemRef$current$.call(_formItemRef$current);
    }

    function getFieldsValue(nameList) {
      var fieldsValue = {};

      if (nameList === true) {
        var _iterator2 = _createForOfIteratorHelper(formMapRef.current.entries()),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _step2$value = _slicedToArray(_step2.value, 2),
                name = _step2$value[0],
                formItemRef = _step2$value[1];

            if (Array.isArray(name)) {
              var _formItemRef$current$2, _formItemRef$current2;

              var fieldValue = name.reduceRight(function (prev, curr) {
                return _defineProperty$3({}, curr, prev);
              }, formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current$2 = (_formItemRef$current2 = formItemRef.current).getValue) === null || _formItemRef$current$2 === void 0 ? void 0 : _formItemRef$current$2.call(_formItemRef$current2));
              merge_1(fieldsValue, fieldValue);
            } else {
              var _formItemRef$current$3, _formItemRef$current3;

              fieldsValue[name] = formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current$3 = (_formItemRef$current3 = formItemRef.current).getValue) === null || _formItemRef$current$3 === void 0 ? void 0 : _formItemRef$current$3.call(_formItemRef$current3);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else {
        if (!Array.isArray(nameList)) throw new Error("getFieldsValue \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
        nameList.forEach(function (name) {
          var formItemRef = getMapValue(name, formMapRef);

          if (Array.isArray(name)) {
            var _formItemRef$current$4, _formItemRef$current4;

            var _fieldValue = name.reduceRight(function (prev, curr) {
              return _defineProperty$3({}, curr, prev);
            }, formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current$4 = (_formItemRef$current4 = formItemRef.current).getValue) === null || _formItemRef$current$4 === void 0 ? void 0 : _formItemRef$current$4.call(_formItemRef$current4));

            merge_1(fieldsValue, _fieldValue);
          } else {
            var _formItemRef$current$5, _formItemRef$current5;

            formItemRef && (fieldsValue[name] = formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current$5 = (_formItemRef$current5 = formItemRef.current).getValue) === null || _formItemRef$current$5 === void 0 ? void 0 : _formItemRef$current$5.call(_formItemRef$current5));
          }
        });
      }

      return fieldsValue;
    }

    function setFieldsValue() {
      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      travelMapFromObject(fields, formMapRef, function (formItemRef, fieldValue) {
        var _formItemRef$current6, _formItemRef$current7;

        formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current6 = formItemRef.current) === null || _formItemRef$current6 === void 0 ? void 0 : (_formItemRef$current7 = _formItemRef$current6.setValue) === null || _formItemRef$current7 === void 0 ? void 0 : _formItemRef$current7.call(_formItemRef$current6, fieldValue);
      });
    }

    function setFields() {
      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      if (!Array.isArray(fields)) throw new Error("setFields \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
      fields.forEach(function (field) {
        var _formItemRef$current8;

        var name = field.name,
            restFields = _objectWithoutProperties$2(field, _excluded$d);

        var formItemRef = getMapValue(name, formMapRef);
        formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current8 = formItemRef.current) === null || _formItemRef$current8 === void 0 ? void 0 : _formItemRef$current8.setField(_objectSpread$11({}, restFields));
      });
    }

    function reset(params) {
      if (typeof params === "undefined") {
        _toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
          var _formItemRef$current9;

          formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current9 = formItemRef.current) === null || _formItemRef$current9 === void 0 ? void 0 : _formItemRef$current9.resetField();
        });
      } else {
        var _params$type = params.type,
            type = _params$type === void 0 ? "initial" : _params$type,
            _params$fields = params.fields,
            fields = _params$fields === void 0 ? [] : _params$fields;
        fields.forEach(function (name) {
          var _formItemRef$current10;

          var formItemRef = getMapValue(name, formMapRef);
          formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current10 = formItemRef.current) === null || _formItemRef$current10 === void 0 ? void 0 : _formItemRef$current10.resetField(type);
        });
      }
    }

    function clearValidate(fields) {
      if (typeof fields === "undefined") {
        _toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
          var _formItemRef$current11;

          formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current11 = formItemRef.current) === null || _formItemRef$current11 === void 0 ? void 0 : _formItemRef$current11.resetValidate();
        });
      } else {
        if (!Array.isArray(fields)) throw new Error("clearValidate \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
        fields.forEach(function (name) {
          var _formItemRef$current12;

          var formItemRef = getMapValue(name, formMapRef);
          formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current12 = formItemRef.current) === null || _formItemRef$current12 === void 0 ? void 0 : _formItemRef$current12.resetValidate();
        });
      }
    }

    function setValidateMessage(message) {
      travelMapFromObject(message, formMapRef, function (formItemRef, fieldValue) {
        var _formItemRef$current13, _formItemRef$current14;

        formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current13 = formItemRef.current) === null || _formItemRef$current13 === void 0 ? void 0 : (_formItemRef$current14 = _formItemRef$current13.setValidateMessage) === null || _formItemRef$current14 === void 0 ? void 0 : _formItemRef$current14.call(_formItemRef$current13, fieldValue);
      });
    }

    return {
      submit: submit,
      reset: reset,
      validate: validate,
      validateOnly: validateOnly,
      clearValidate: clearValidate,
      setFields: setFields,
      setFieldsValue: setFieldsValue,
      setValidateMessage: setValidateMessage,
      getFieldValue: getFieldValue,
      getFieldsValue: getFieldsValue,
      currentElement: formRef.current
    };
  }

  function useForm() {
    var form = React.useRef({});
    return [form.current];
  }

  var FormContext = /*#__PURE__*/React__default["default"].createContext({
    labelWidth: "100px",
    labelAlign: "right",
    layout: "vertical",
    colon: false,
    initialData: {},
    requiredMark: true,
    scrollToFirstError: void 0,
    showErrorMessage: true,
    resetType: "empty",
    disabled: false,
    rules: void 0,
    errorMessage: void 0,
    statusIcon: false,
    onFormItemValueChange: void 0,
    formMapRef: void 0
  });
  var useFormContext = function useFormContext() {
    return React__default["default"].useContext(FormContext);
  };
  var FormListContext = /*#__PURE__*/React__default["default"].createContext({
    name: void 0,
    rules: void 0,
    formListMapRef: void 0
  });
  var useFormListContext = function useFormListContext() {
    return React__default["default"].useContext(FormListContext);
  };

  var copyObject = _copyObject,
      createAssigner = _createAssigner,
      keysIn = keysIn_1;
  /**
   * This method is like `_.assignIn` except that it accepts `customizer`
   * which is invoked to produce the assigned values. If `customizer` returns
   * `undefined`, assignment is handled by the method instead. The `customizer`
   * is invoked with five arguments: (objValue, srcValue, key, object, source).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extendWith
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @see _.assignWith
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   return _.isUndefined(objValue) ? srcValue : objValue;
   * }
   *
   * var defaults = _.partialRight(_.assignInWith, customizer);
   *
   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */

  var assignInWith$1 = createAssigner(function (object, source, srcIndex, customizer) {
    copyObject(source, keysIn(source), object, customizer);
  });
  var assignInWith_1 = assignInWith$1;

  var baseGetTag = _baseGetTag,
      isObjectLike$1 = isObjectLike_1,
      isPlainObject = isPlainObject_1;
  /** `Object#toString` result references. */

  var domExcTag = '[object DOMException]',
      errorTag$1 = '[object Error]';
  /**
   * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
   * @example
   *
   * _.isError(new Error);
   * // => true
   *
   * _.isError(Error);
   * // => false
   */

  function isError$2(value) {
    if (!isObjectLike$1(value)) {
      return false;
    }

    var tag = baseGetTag(value);
    return tag == errorTag$1 || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
  }

  var isError_1 = isError$2;

  var apply = _apply,
      baseRest = _baseRest,
      isError$1 = isError_1;
  /**
   * Attempts to invoke `func`, returning either the result or the caught error
   * object. Any additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Function} func The function to attempt.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {*} Returns the `func` result or error object.
   * @example
   *
   * // Avoid throwing errors for invalid selectors.
   * var elements = _.attempt(function(selector) {
   *   return document.querySelectorAll(selector);
   * }, '>_>');
   *
   * if (_.isError(elements)) {
   *   elements = [];
   * }
   */

  var attempt$1 = baseRest(function (func, args) {
    try {
      return apply(func, undefined, args);
    } catch (e) {
      return isError$1(e) ? e : new Error(e);
    }
  });
  var attempt_1 = attempt$1;

  var arrayMap = _arrayMap;
  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */

  function baseValues$1(object, props) {
    return arrayMap(props, function (key) {
      return object[key];
    });
  }

  var _baseValues = baseValues$1;

  var eq$1 = eq_1;
  /** Used for built-in method references. */

  var objectProto$3 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
  /**
   * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
   * of source objects to the destination object for all destination properties
   * that resolve to `undefined`.
   *
   * @private
   * @param {*} objValue The destination value.
   * @param {*} srcValue The source value.
   * @param {string} key The key of the property to assign.
   * @param {Object} object The parent object of `objValue`.
   * @returns {*} Returns the value to assign.
   */

  function customDefaultsAssignIn$1(objValue, srcValue, key, object) {
    if (objValue === undefined || eq$1(objValue, objectProto$3[key]) && !hasOwnProperty$3.call(object, key)) {
      return srcValue;
    }

    return objValue;
  }

  var _customDefaultsAssignIn = customDefaultsAssignIn$1;

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    "\u2028": 'u2028',
    "\u2029": 'u2029'
  };
  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

  function escapeStringChar$1(chr) {
    return '\\' + stringEscapes[chr];
  }

  var _escapeStringChar = escapeStringChar$1;

  /** Used to match template delimiters. */
  var reInterpolate$2 = /<%=([\s\S]+?)%>/g;
  var _reInterpolate = reInterpolate$2;

  var basePropertyOf = _basePropertyOf;
  /** Used to map characters to HTML entities. */

  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };
  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

  var escapeHtmlChar$1 = basePropertyOf(htmlEscapes);
  var _escapeHtmlChar = escapeHtmlChar$1;

  var escapeHtmlChar = _escapeHtmlChar,
      toString$2 = toString_1;
  /** Used to match HTML entities and HTML characters. */

  var reUnescapedHtml = /[&<>"']/g,
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
  /**
   * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
   * corresponding HTML entities.
   *
   * **Note:** No other characters are escaped. To escape additional
   * characters use a third-party library like [_he_](https://mths.be/he).
   *
   * Though the ">" character is escaped for symmetry, characters like
   * ">" and "/" don't need escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value. See
   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   *
   * When working with HTML you should always
   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
   * XSS vectors.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escape('fred, barney, & pebbles');
   * // => 'fred, barney, &amp; pebbles'
   */

  function escape$2(string) {
    string = toString$2(string);
    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
  }

  var _escape = escape$2;

  /** Used to match template delimiters. */
  var reEscape$1 = /<%-([\s\S]+?)%>/g;
  var _reEscape = reEscape$1;

  /** Used to match template delimiters. */
  var reEvaluate$1 = /<%([\s\S]+?)%>/g;
  var _reEvaluate = reEvaluate$1;

  var escape$1 = _escape,
      reEscape = _reEscape,
      reEvaluate = _reEvaluate,
      reInterpolate$1 = _reInterpolate;
  /**
   * By default, the template delimiters used by lodash are like those in
   * embedded Ruby (ERB) as well as ES2015 template strings. Change the
   * following template settings to use alternative delimiters.
   *
   * @static
   * @memberOf _
   * @type {Object}
   */

  var templateSettings$1 = {
    /**
     * Used to detect `data` property values to be HTML-escaped.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'escape': reEscape,

    /**
     * Used to detect code to be evaluated.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'evaluate': reEvaluate,

    /**
     * Used to detect `data` property values to inject.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'interpolate': reInterpolate$1,

    /**
     * Used to reference the data object in the template text.
     *
     * @memberOf _.templateSettings
     * @type {string}
     */
    'variable': '',

    /**
     * Used to import variables into the compiled template.
     *
     * @memberOf _.templateSettings
     * @type {Object}
     */
    'imports': {
      /**
       * A reference to the `lodash` function.
       *
       * @memberOf _.templateSettings.imports
       * @type {Function}
       */
      '_': {
        'escape': escape$1
      }
    }
  };
  var templateSettings_1 = templateSettings$1;

  var assignInWith = assignInWith_1,
      attempt = attempt_1,
      baseValues = _baseValues,
      customDefaultsAssignIn = _customDefaultsAssignIn,
      escapeStringChar = _escapeStringChar,
      isError = isError_1,
      isIterateeCall$2 = _isIterateeCall,
      keys = keys_1,
      reInterpolate = _reInterpolate,
      templateSettings = templateSettings_1,
      toString$1 = toString_1;
  /** Error message constants. */

  var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
  /** Used to match empty string literals in compiled template source. */

  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */

  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */

  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
  /** Used to ensure capturing order of template delimiters. */

  var reNoMatch = /($^)/;
  /** Used to match unescaped characters in compiled string literals. */

  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
  /** Used for built-in method references. */

  var objectProto$2 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
  /**
   * Creates a compiled template function that can interpolate data properties
   * in "interpolate" delimiters, HTML-escape interpolated data properties in
   * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
   * properties may be accessed as free variables in the template. If a setting
   * object is given, it takes precedence over `_.templateSettings` values.
   *
   * **Note:** In the development build `_.template` utilizes
   * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
   * for easier debugging.
   *
   * For more information on precompiling templates see
   * [lodash's custom builds documentation](https://lodash.com/custom-builds).
   *
   * For more information on Chrome extension sandboxes see
   * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The template string.
   * @param {Object} [options={}] The options object.
   * @param {RegExp} [options.escape=_.templateSettings.escape]
   *  The HTML "escape" delimiter.
   * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
   *  The "evaluate" delimiter.
   * @param {Object} [options.imports=_.templateSettings.imports]
   *  An object to import into the template as free variables.
   * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
   *  The "interpolate" delimiter.
   * @param {string} [options.sourceURL='templateSources[n]']
   *  The sourceURL of the compiled template.
   * @param {string} [options.variable='obj']
   *  The data object variable name.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Function} Returns the compiled template function.
   * @example
   *
   * // Use the "interpolate" delimiter to create a compiled template.
   * var compiled = _.template('hello <%= user %>!');
   * compiled({ 'user': 'fred' });
   * // => 'hello fred!'
   *
   * // Use the HTML "escape" delimiter to escape data property values.
   * var compiled = _.template('<b><%- value %></b>');
   * compiled({ 'value': '<script>' });
   * // => '<b>&lt;script&gt;</b>'
   *
   * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
   * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the internal `print` function in "evaluate" delimiters.
   * var compiled = _.template('<% print("hello " + user); %>!');
   * compiled({ 'user': 'barney' });
   * // => 'hello barney!'
   *
   * // Use the ES template literal delimiter as an "interpolate" delimiter.
   * // Disable support by replacing the "interpolate" delimiter.
   * var compiled = _.template('hello ${ user }!');
   * compiled({ 'user': 'pebbles' });
   * // => 'hello pebbles!'
   *
   * // Use backslashes to treat delimiters as plain text.
   * var compiled = _.template('<%= "\\<%- value %\\>" %>');
   * compiled({ 'value': 'ignored' });
   * // => '<%- value %>'
   *
   * // Use the `imports` option to import `jQuery` as `jq`.
   * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
   * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the `sourceURL` option to specify a custom sourceURL for the template.
   * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
   * compiled(data);
   * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
   *
   * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
   * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
   * compiled.source;
   * // => function(data) {
   * //   var __t, __p = '';
   * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
   * //   return __p;
   * // }
   *
   * // Use custom template delimiters.
   * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
   * var compiled = _.template('hello {{ user }}!');
   * compiled({ 'user': 'mustache' });
   * // => 'hello mustache!'
   *
   * // Use the `source` property to inline compiled templates for meaningful
   * // line numbers in error messages and stack traces.
   * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
   *   var JST = {\
   *     "main": ' + _.template(mainText).source + '\
   *   };\
   * ');
   */

  function template(string, options, guard) {
    // Based on John Resig's `tmpl` implementation
    // (http://ejohn.org/blog/javascript-micro-templating/)
    // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    var settings = templateSettings.imports._.templateSettings || templateSettings;

    if (guard && isIterateeCall$2(string, options, guard)) {
      options = undefined;
    }

    string = toString$1(string);
    options = assignInWith({}, options, settings, customDefaultsAssignIn);
    var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
        importsKeys = keys(imports),
        importsValues = baseValues(imports, importsKeys);
    var isEscaping,
        isEvaluating,
        index = 0,
        interpolate = options.interpolate || reNoMatch,
        source = "__p += '"; // Compile the regexp to match each delimiter.

    var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.
    // The sourceURL gets injected into the source that's eval-ed, so be careful
    // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
    // and escape the comment, thus injecting code that gets evaled.

    var sourceURL = hasOwnProperty$2.call(options, 'sourceURL') ? '//# sourceURL=' + (options.sourceURL + '').replace(/\s/g, ' ') + '\n' : '';
    string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
      interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.

      source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar); // Replace delimiters with snippets.

      if (escapeValue) {
        isEscaping = true;
        source += "' +\n__e(" + escapeValue + ") +\n'";
      }

      if (evaluateValue) {
        isEvaluating = true;
        source += "';\n" + evaluateValue + ";\n__p += '";
      }

      if (interpolateValue) {
        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
      }

      index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in
      // order to produce the correct `offset` value.

      return match;
    });
    source += "';\n"; // If `variable` is not specified wrap a with-statement around the generated
    // code to add the data object to the top of the scope chain.

    var variable = hasOwnProperty$2.call(options, 'variable') && options.variable;

    if (!variable) {
      source = 'with (obj) {\n' + source + '\n}\n';
    } // Throw an error if a forbidden character was found in `variable`, to prevent
    // potential command injection attacks.
    else if (reForbiddenIdentifierChars.test(variable)) {
      throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
    } // Cleanup code by stripping empty strings.


    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.

    source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
    var result = attempt(function () {
      return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
    }); // Provide the compiled function's source by its `toString` method or
    // the `source` property as a convenience for inlining compiled templates.

    result.source = source;

    if (isError(result)) {
      throw result;
    }

    return result;
  }

  var template_1 = template;

  var ValidateStatus = /* @__PURE__ */function (ValidateStatus2) {
    ValidateStatus2["SUCCESS"] = "success";
    ValidateStatus2["WARNING"] = "warning";
    ValidateStatus2["ERROR"] = "error";
    ValidateStatus2["VALIDATING"] = "validating";
    return ValidateStatus2;
  }(ValidateStatus || {});

  function useFormItemStyle(props) {
    var _classNames, _classNames2;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var className = props.className,
        help = props.help,
        tips = props.tips,
        name = props.name,
        status = props.status,
        successBorder = props.successBorder,
        errorList = props.errorList,
        successList = props.successList,
        layout = props.layout,
        verifyStatus = props.verifyStatus,
        colon = props.colon,
        label = props.label,
        labelWidth = props.labelWidth,
        labelAlign = props.labelAlign,
        requiredMark = props.requiredMark,
        showErrorMessage = props.showErrorMessage,
        innerRules = props.innerRules;
    var renderName = Array.isArray(name) ? name.join("-") : name;
    var renderStatus = status || verifyStatus;
    var helpNode = help && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-input__help")
    }, renderTNode(help));
    var extraNode = React.useMemo(function () {
      var _errorList$;

      var extra = tips ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-input__extra"),
        title: tips
      }, tips) : null;

      if (showErrorMessage && errorList !== null && errorList !== void 0 && (_errorList$ = errorList[0]) !== null && _errorList$ !== void 0 && _errorList$.message) {
        extra = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-input__extra"),
          title: errorList[0].message
        }, errorList[0].message);
      } else if (successList.length) {
        extra = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-input__extra"),
          title: successList[0].message
        }, successList[0].message);
      }

      return extra;
    }, [showErrorMessage, errorList, successList, tips, classPrefix]);
    var formItemClass = classNames$1("".concat(classPrefix, "-form__item"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-form-item__").concat(renderName), renderName), _defineProperty$3(_classNames, "".concat(classPrefix, "-form__item-with-help"), helpNode), _defineProperty$3(_classNames, "".concat(classPrefix, "-form__item-with-extra"), extraNode), _classNames));
    var formItemLabelClass = classNames$1("".concat(classPrefix, "-form__label"), (_classNames2 = {}, _defineProperty$3(_classNames2, "".concat(classPrefix, "-form__label--required"), requiredMark && innerRules.filter(function (rule) {
      return rule.required;
    }).length > 0), _defineProperty$3(_classNames2, "".concat(classPrefix, "-form__label--colon"), colon && label), _defineProperty$3(_classNames2, "".concat(classPrefix, "-form__label--top"), labelAlign === "top" || !labelWidth), _defineProperty$3(_classNames2, "".concat(classPrefix, "-form__label--left"), labelAlign === "left" && labelWidth), _defineProperty$3(_classNames2, "".concat(classPrefix, "-form__label--right"), labelAlign === "right" && labelWidth), _classNames2));

    var contentClass = function contentClass() {
      var _classNames4;

      var controlCls = "".concat(classPrefix, "-form__controls");
      if (!showErrorMessage) return controlCls;
      var isSuccess = renderStatus === ValidateStatus.SUCCESS;

      if (isSuccess) {
        return classNames$1(controlCls, "".concat(classPrefix, "-is-success"), _defineProperty$3({}, "".concat(classPrefix, "-form--success-border"), successBorder));
      }

      return classNames$1(controlCls, (_classNames4 = {}, _defineProperty$3(_classNames4, "".concat(classPrefix, "-is-warning"), renderStatus === "warning"), _defineProperty$3(_classNames4, "".concat(classPrefix, "-is-error"), ["fail", "error"].includes(renderStatus)), _classNames4));
    };

    var labelStyle = {};
    var contentStyle = {};

    if (label && labelWidth && labelAlign !== "top") {
      if (typeof labelWidth === "number") {
        labelStyle = {
          width: "".concat(labelWidth, "px")
        };
        contentStyle = {
          marginLeft: layout !== "inline" ? "".concat(labelWidth, "px") : ""
        };
      } else {
        labelStyle = {
          width: labelWidth
        };
        contentStyle = {
          marginLeft: layout !== "inline" ? labelWidth : ""
        };
      }
    }

    return {
      formItemClass: formItemClass,
      formItemLabelClass: formItemLabelClass,
      contentClass: contentClass,
      labelStyle: labelStyle,
      contentStyle: contentStyle,
      helpNode: helpNode,
      extraNode: extraNode
    };
  }

  var formDefaultProps = {
    colon: false,
    labelAlign: "right",
    labelWidth: "100px",
    layout: "vertical",
    preventSubmitDefault: true,
    resetType: "empty",
    showErrorMessage: true,
    submitWithWarningMessage: false
  };
  var formItemDefaultProps = {
    successBorder: false
  };

  function getSingleContent(cascaderContext) {
    var value = cascaderContext.value,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        showAllLevels = cascaderContext.showAllLevels;
    if (multiple || !value) return "";
    if (Array.isArray(value)) return "";
    var node = treeStore && treeStore.getNodes(value);

    if (!(node && node.length)) {
      return value;
    }

    var path = node && node[0].getPath();

    if (path && path.length) {
      return showAllLevels ? path.map(function (node2) {
        return node2.label;
      }).join(" / ") : path[path.length - 1].label;
    }

    return value;
  }
  function getMultipleContent(cascaderContext) {
    var value = cascaderContext.value,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        showAllLevels = cascaderContext.showAllLevels;
    if (!multiple) return [];
    if (multiple && !Array.isArray(value)) return [];
    var node = treeStore && treeStore.getNodes(value);
    if (!node) return [];
    return value.map(function (item) {
      var node2 = treeStore.getNodes(item);
      return showAllLevels ? getFullPathLabel(node2[0]) : node2[0].label;
    }).filter(function (item) {
      return !!item;
    });
  }
  function getPanels(treeNodes) {
    var panels = [];
    treeNodes.forEach(function (node) {
      if (panels[node.level]) {
        panels[node.level].push(node);
      } else {
        panels[node.level] = [node];
      }
    });
    return panels;
  }
  function getFullPathLabel(node) {
    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "/";
    return node === null || node === void 0 ? void 0 : node.getPath().map(function (node2) {
      return node2.label;
    }).join(separator);
  }
  var getTreeValue = function getTreeValue(value) {
    var treeValue = [];

    if (Array.isArray(value)) {
      if (value.length > 0 && _typeof$1(value[0]) === "object") {
        treeValue = value.map(function (val) {
          return val.value;
        });
      } else if (value.length) {
        treeValue = value;
      }
    } else if (value) {
      if (_typeof$1(value) === "object") {
        treeValue = [value.value];
      } else {
        treeValue = [value];
      }
    }

    return treeValue;
  };
  var getCascaderValue = function getCascaderValue(value, valueType, multiple) {
    if (valueType === "single") {
      return value;
    }

    if (multiple) {
      return value.map(function (item) {
        return item[item.length - 1];
      });
    }

    return value[value.length - 1];
  };
  function isEmptyValues(value) {
    if (typeof value === "number" && !isNaN(value)) return false;
    return isEmpty_1(value);
  }
  function isValueInvalid(value, cascaderContext) {
    var multiple = cascaderContext.multiple,
        showAllLevels = cascaderContext.showAllLevels;
    return multiple && !Array.isArray(value) || !multiple && Array.isArray(value) && !showAllLevels;
  }

  function getFakeArrowIconClass(prefix, STATUS, cascaderContext) {
    var disabled = cascaderContext.disabled;
    return ["".concat(prefix, "-cascader__icon"), _defineProperty$3({}, STATUS.disabled, disabled)];
  }
  function getNodeStatusClass(node, STATUS, cascaderContext) {
    var _ref2;

    var checkStrictly = cascaderContext.checkStrictly,
        multiple = cascaderContext.multiple,
        value = cascaderContext.value,
        max = cascaderContext.max;
    var expandedActive = !checkStrictly && node.expanded && (multiple ? !node.isLeaf() : true) || checkStrictly && node.expanded;
    var isLeaf = node.isLeaf();
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    var isSelected = node.checked || multiple && !checkStrictly && node.expanded && !isLeaf;
    return [(_ref2 = {}, _defineProperty$3(_ref2, STATUS.selected, !isDisabled && isSelected), _defineProperty$3(_ref2, STATUS.expanded, !isDisabled && expandedActive), _defineProperty$3(_ref2, STATUS.disabled, isDisabled), _ref2)];
  }
  function getCascaderItemClass(prefix, node, SIZE, STATUS, cascaderContext) {
    var _ref3;

    var size = cascaderContext.size;
    return ["".concat(prefix, "-cascader__item")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)), [SIZE[size], (_ref3 = {}, _defineProperty$3(_ref3, "".concat(prefix, "-cascader__item--with-icon"), !!node.children), _defineProperty$3(_ref3, "".concat(prefix, "-cascader__item--leaf"), node.isLeaf()), _ref3)]);
  }
  function getCascaderItemIconClass(prefix, node, STATUS, cascaderContext) {
    return ["".concat(prefix, "-cascader__item-icon"), "".concat(prefix, "-icon")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)));
  }

  function ownKeys$10(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$10(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$10(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$10(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Item = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var node = props.node,
        multiple = props.cascaderContext.multiple,
        _onClick = props.onClick,
        _onChange = props.onChange,
        _onMouseEnter = props.onMouseEnter,
        cascaderContext = props.cascaderContext;

    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      ChevronRightIcon: ChevronRightIcon
    }),
        ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;

    var COMPONENT_NAME = "".concat(prefix, "-cascader__item");
    var itemRef = React.useRef();
    useRipple(ref || itemRef);

    var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;

    var itemClass = React.useMemo(function () {
      return classNames$1(getCascaderItemClass(prefix, node, SIZE, STATUS, cascaderContext));
    }, [prefix, node, SIZE, STATUS, cascaderContext]);
    var iconClass = React.useMemo(function () {
      return classNames$1(getCascaderItemIconClass(prefix, node, STATUS, cascaderContext));
    }, [prefix, node, STATUS, cascaderContext]);

    var RenderLabelInner = function RenderLabelInner(node2, cascaderContext2) {
      var inputVal = cascaderContext2.inputVal;
      var labelText = inputVal ? getFullPathLabel(node2) : node2.label;

      if (inputVal) {
        var texts = labelText.split(inputVal);
        var doms = [];

        for (var index = 0; index < texts.length; index++) {
          doms.push( /* @__PURE__ */React__default["default"].createElement("span", {
            key: index
          }, texts[index]));
          if (index === texts.length - 1) break;
          doms.push( /* @__PURE__ */React__default["default"].createElement("span", {
            key: "".concat(index, "filter"),
            className: "".concat(COMPONENT_NAME, "-label--filter")
          }, inputVal));
        }

        return doms;
      }

      return labelText;
    };

    var RenderLabelContent = function RenderLabelContent(node2, cascaderContext2) {
      var label = RenderLabelInner(node2, cascaderContext2);
      var labelCont = /* @__PURE__ */React__default["default"].createElement("span", {
        title: cascaderContext2.inputVal ? getFullPathLabel(node2) : node2.label,
        className: classNames$1("".concat(COMPONENT_NAME, "-label"), "".concat(COMPONENT_NAME, "-label--ellipsis")),
        role: "label"
      }, label);
      return labelCont;
    };

    var RenderCheckBox = function RenderCheckBox(node2, cascaderContext2) {
      var checkProps = cascaderContext2.checkProps,
          value = cascaderContext2.value,
          max = cascaderContext2.max,
          inputVal = cascaderContext2.inputVal;
      var label = RenderLabelInner(node2, cascaderContext2);
      return /* @__PURE__ */React__default["default"].createElement(Checkbox$1, _objectSpread$10({
        checked: node2.checked,
        indeterminate: node2.indeterminate,
        disabled: node2.isDisabled() || value && value.length >= max && max !== 0,
        name: String(node2.value),
        stopLabelTrigger: true,
        title: inputVal ? getFullPathLabel(node2) : node2.label,
        onChange: function onChange() {
          _onChange(node2);
        }
      }, checkProps), label);
    };

    return /* @__PURE__ */React__default["default"].createElement("li", {
      ref: ref || itemRef,
      className: itemClass,
      onClick: function onClick(e) {
        var _e$nativeEvent, _e$nativeEvent$stopIm;

        e.stopPropagation();
        e === null || e === void 0 ? void 0 : (_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 ? void 0 : (_e$nativeEvent$stopIm = _e$nativeEvent.stopImmediatePropagation) === null || _e$nativeEvent$stopIm === void 0 ? void 0 : _e$nativeEvent$stopIm.call(_e$nativeEvent);

        _onClick(node);
      },
      onMouseEnter: function onMouseEnter(e) {
        e.stopPropagation();

        _onMouseEnter(node);
      }
    }, multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext), node.children && (node.loading ? /* @__PURE__ */React__default["default"].createElement(Loading, {
      className: iconClass,
      loading: true,
      size: "small"
    }) : /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon$1, {
      className: iconClass
    })));
  });

  function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
    var checkStrictly = cascaderContext.checkStrictly,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        setVisible = cascaderContext.setVisible,
        setValue = cascaderContext.setValue,
        setTreeNodes = cascaderContext.setTreeNodes,
        setExpend = cascaderContext.setExpend,
        value = cascaderContext.value,
        max = cascaderContext.max,
        valueType = cascaderContext.valueType;
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    if (isDisabled) return;

    if (propsTrigger === trigger && !node.isLeaf()) {
      var expanded = node.setExpanded(true);
      treeStore.refreshNodes();
      treeStore.replaceExpanded(expanded);
      var nodes = treeStore.getNodes().filter(function (node2) {
        return node2.visible;
      });
      setTreeNodes(nodes);

      if (multiple) {
        setExpend(expanded);
      }
    }

    if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
      treeStore.resetChecked();
      var checked = node.setChecked(!node.checked);

      var _checked = _slicedToArray(checked, 1),
          value2 = _checked[0];

      setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
        return item.value;
      }), "check", node.getModel());

      if (!checkStrictly) {
        setVisible(false, {});
      }
    }
  }
  function valueChangeEffect(node, cascaderContext) {
    var disabled = cascaderContext.disabled,
        max = cascaderContext.max,
        inputVal = cascaderContext.inputVal,
        multiple = cascaderContext.multiple,
        setVisible = cascaderContext.setVisible,
        setValue = cascaderContext.setValue,
        treeNodes = cascaderContext.treeNodes,
        treeStore = cascaderContext.treeStore,
        valueType = cascaderContext.valueType;

    if (!node || disabled || node.disabled) {
      return;
    }

    var checked = node.setChecked(!node.isChecked());

    if (isNumber_1(max) && max < 0) {
      console.warn("TDesign Warn:", "max should > 0");
    }

    if (checked.length > max && isNumber_1(max) && max > 0) {
      return;
    }

    if (checked.length === 0) {
      var expanded = treeStore.getExpanded();
      setTimeout(function () {
        treeStore.replaceExpanded(expanded);
        treeStore.refreshNodes();
      }, 0);
    }

    if (!multiple) {
      setVisible(false, {});
    }

    var isSelectAll = treeNodes.every(function (item) {
      return checked.indexOf(item.value) > -1;
    });

    if (inputVal && isSelectAll) {
      setVisible(false, {});
    }

    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "check", node.getModel());
  }
  function closeIconClickEffect(cascaderContext) {
    var setVisible = cascaderContext.setVisible,
        multiple = cascaderContext.multiple,
        setExpend = cascaderContext.setExpend,
        setValue = cascaderContext.setValue;
    setVisible(false, {});

    if (multiple) {
      setExpend([]);
    }

    setValue(multiple ? [] : "", "clear");
  }
  function handleRemoveTagEffect(cascaderContext, index, onRemove) {
    var disabled = cascaderContext.disabled,
        setValue = cascaderContext.setValue,
        value = cascaderContext.value,
        valueType = cascaderContext.valueType,
        treeStore = cascaderContext.treeStore;
    if (disabled) return;
    var newValue = cloneDeep_1(value);
    var res = newValue.splice(index, 1);
    var node = treeStore.getNodes(res[0])[0];
    setValue(newValue, "uncheck", node.getModel());
    var checked = node.setChecked(!node.isChecked());
    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "uncheck", node.getModel());

    if (isFunction_1(onRemove)) {
      onRemove({
        value: checked,
        node: node
      });
    }
  }
  var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes, filter) {
    if (!treeStore) return;
    var nodes = [];

    if (inputVal) {
      var filterMethods = function filterMethods(node) {
        if (!node.isLeaf()) return;

        if (isFunction_1(filter)) {
          return filter("".concat(inputVal), node);
        }

        var fullPathLabel = getFullPathLabel(node, "");
        return fullPathLabel.indexOf("".concat(inputVal)) > -1;
      };

      nodes = treeStore.nodes.filter(filterMethods);
    } else {
      nodes = treeStore.getNodes().filter(function (node) {
        return node.visible;
      });
    }

    setTreeNodes(nodes);
  };
  var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
    var treeValue = getTreeValue(value);
    if (!treeStore) return;

    if (Array.isArray(treeValue) && expend.length === 0) {
      var expandedMap = /* @__PURE__ */new Map();

      var _treeValue = _slicedToArray(treeValue, 1),
          val = _treeValue[0];

      if (val) {
        expandedMap.set(val, true);
        var node = treeStore.getNode(val);

        if (!node) {
          treeStore.refreshNodes();
          return;
        }

        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
        var expandedArr = Array.from(expandedMap.keys());
        treeStore.replaceExpanded(expandedArr);
      } else {
        treeStore.resetExpanded();
      }
    }

    if (treeStore.getExpanded() && expend.length) {
      treeStore.replaceExpanded(expend);
    }

    treeStore.refreshNodes();
  };

  var Panel$1 = function Panel(props) {
    var cascaderContext = props.cascaderContext;
    var panels = React.useMemo(function () {
      return getPanels(cascaderContext.treeNodes);
    }, [cascaderContext.treeNodes]);

    var handleExpand = function handleExpand(node, trigger) {
      var propsTrigger = props.trigger,
          cascaderContext2 = props.cascaderContext;
      expendClickEffect(propsTrigger, trigger, node, cascaderContext2);
    };

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useLocaleReceiver = useLocaleReceiver("cascader"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
        global = _useLocaleReceiver2[0];

    var COMPONENT_NAME = "".concat(classPrefix, "-cascader");

    var renderItem = function renderItem(node, index) {
      return /* @__PURE__ */React__default["default"].createElement(Item, {
        key: index,
        node: node,
        cascaderContext: cascaderContext,
        onClick: function onClick() {
          handleExpand(node, "click");
        },
        onMouseEnter: function onMouseEnter() {
          handleExpand(node, "hover");
        },
        onChange: function onChange() {
          valueChangeEffect(node, cascaderContext);
        }
      });
    };

    var renderList = function renderList(treeNodes) {
      var _classNames;

      var isFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var segment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "1";
      return /* @__PURE__ */React__default["default"].createElement("ul", {
        className: classNames$1("".concat(COMPONENT_NAME, "__menu"), "narrow-scrollbar", (_classNames = {}, _defineProperty$3(_classNames, "".concat(COMPONENT_NAME, "__menu--segment"), segment), _defineProperty$3(_classNames, "".concat(COMPONENT_NAME, "__menu--filter"), isFilter), _classNames)),
        key: key
      }, treeNodes.map(function (node, index) {
        return renderItem(node, index);
      }));
    };

    var renderPanels = function renderPanels() {
      var _props$cascaderContex = props.cascaderContext,
          inputVal = _props$cascaderContex.inputVal,
          treeNodes = _props$cascaderContex.treeNodes;
      return inputVal ? renderList(treeNodes, true) : panels.map(function (treeNodes2, index) {
        return renderList(treeNodes2, false, index !== panels.length - 1, "".concat(COMPONENT_NAME, "__menu").concat(index));
      });
    };

    var content;

    if (props.loading) {
      var _props$loadingText;

      content = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(COMPONENT_NAME, "__panel--empty")
      }, (_props$loadingText = props.loadingText) !== null && _props$loadingText !== void 0 ? _props$loadingText : global.loadingText);
    } else {
      var _props$empty;

      content = panels !== null && panels !== void 0 && panels.length ? renderPanels() : /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(COMPONENT_NAME, "__panel--empty")
      }, (_props$empty = props.empty) !== null && _props$empty !== void 0 ? _props$empty : global.empty);
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(COMPONENT_NAME, "__panel"), _defineProperty$3({}, "".concat(COMPONENT_NAME, "--normal"), panels.length && !props.loading), props.className),
      style: props.style
    }, content);
  };

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */

  function arraySome$1(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  var _arraySome = arraySome$1;

  var SetCache = _SetCache,
      arraySome = _arraySome,
      cacheHas = _cacheHas;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$3 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;
  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */

  function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    } // Check that cyclic values are equal.


    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);

    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG$1 ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array); // Ignore non-index properties.

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      } // Recursively compare arrays (susceptible to call stack limits).


      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays$2;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */

  function mapToArray$1(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray$1;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */

  function setToArray$1(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray$1;

  var _Symbol = _Symbol$6,
      Uint8Array = _Uint8Array,
      eq = eq_1,
      equalArrays$1 = _equalArrays,
      mapToArray = _mapToArray,
      setToArray = _setToArray;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$2 = 1,
      COMPARE_UNORDERED_FLAG = 2;
  /** `Object#toString` result references. */

  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  /** Used to convert symbols to primitives and strings. */

  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        } // Assume cyclic values are equal.


        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).

        stack.set(object, other);
        var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  var _equalByTag = equalByTag$1;

  var getAllKeys = _getAllKeys;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$1 = 1;
  /** Used for built-in method references. */

  var objectProto$1 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
        return false;
      }
    } // Check that cyclic values are equal.


    var objStacked = stack.get(object);
    var othStacked = stack.get(other);

    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      } // Recursively compare objects (susceptible to call stack limits).


      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects$1;

  var Stack = _Stack,
      equalArrays = _equalArrays,
      equalByTag = _equalByTag,
      equalObjects = _equalObjects,
      getTag = _getTag,
      isArray = isArray_1,
      isBuffer = isBuffer$5.exports,
      isTypedArray = isTypedArray_1;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG = 1;
  /** `Object#toString` result references. */

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  /** Used for built-in method references. */

  var objectProto = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty = objectProto.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep$1;

  var baseIsEqualDeep = _baseIsEqualDeep,
      isObjectLike = isObjectLike_1;
  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */

  function baseIsEqual$1(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$1, stack);
  }

  var _baseIsEqual = baseIsEqual$1;

  var baseIsEqual = _baseIsEqual;
  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */

  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  var isEqual_1 = isEqual;

  function ownKeys$$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$$(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useCascaderContext = function useCascaderContext(props) {
    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        innerValue = _useControlled2[0],
        setInnerValue = _useControlled2[1];

    var _useControlled3 = useControlled(props, "popupVisible", props.onPopupVisibleChange),
        _useControlled4 = _slicedToArray(_useControlled3, 2),
        innerPopupVisible = _useControlled4[0],
        setPopupVisible = _useControlled4[1];

    var _useState = React.useState(""),
        _useState2 = _slicedToArray(_useState, 2),
        inputVal = _useState2[0],
        setInputVal = _useState2[1];

    var _useState3 = React.useState(null),
        _useState4 = _slicedToArray(_useState3, 2),
        treeStore = _useState4[0],
        setTreeStore = _useState4[1];

    var _useState5 = React.useState([]),
        _useState6 = _slicedToArray(_useState5, 2),
        treeNodes = _useState6[0],
        setTreeNodes = _useState6[1];

    var _useState7 = React.useState([]),
        _useState8 = _slicedToArray(_useState7, 2),
        expend = _useState8[0],
        setExpend = _useState8[1];

    var _useState9 = React.useState(void 0),
        _useState10 = _slicedToArray(_useState9, 2),
        scopeVal = _useState10[0],
        setScopeVal = _useState10[1];

    var cascaderContext = React.useMemo(function () {
      var size = props.size,
          checkStrictly2 = props.checkStrictly,
          lazy2 = props.lazy,
          multiple = props.multiple,
          filterable = props.filterable,
          clearable = props.clearable,
          checkProps = props.checkProps,
          max = props.max,
          disabled2 = props.disabled,
          showAllLevels = props.showAllLevels,
          minCollapsedNum = props.minCollapsedNum,
          valueType = props.valueType;
      return {
        value: scopeVal,
        size: size,
        checkStrictly: checkStrictly2,
        lazy: lazy2,
        multiple: multiple,
        filterable: filterable,
        clearable: clearable,
        checkProps: checkProps,
        max: max,
        disabled: disabled2,
        showAllLevels: showAllLevels,
        minCollapsedNum: minCollapsedNum,
        valueType: valueType,
        treeStore: treeStore,
        setValue: function setValue(val, source, node) {
          if (isEqual_1(val, scopeVal)) return;
          setInnerValue(val, {
            source: source,
            node: node
          });
        },
        visible: innerPopupVisible,
        setVisible: setPopupVisible,
        treeNodes: treeNodes,
        setTreeNodes: setTreeNodes,
        inputVal: inputVal,
        setInputVal: setInputVal,
        setExpend: setExpend
      };
    }, [props, scopeVal, innerPopupVisible, treeStore, treeNodes, inputVal, setInnerValue, setPopupVisible]);
    var isFilterable = React.useMemo(function () {
      return Boolean(props.filterable || isFunction_1(props.filter));
    }, [props.filterable, props.filter]);
    var disabled = props.disabled,
        _props$options = props.options,
        options = _props$options === void 0 ? [] : _props$options,
        _props$keys = props.keys,
        keys = _props$keys === void 0 ? {} : _props$keys,
        _props$checkStrictly = props.checkStrictly,
        checkStrictly = _props$checkStrictly === void 0 ? false : _props$checkStrictly,
        _props$lazy = props.lazy,
        lazy = _props$lazy === void 0 ? true : _props$lazy,
        load = props.load,
        _props$valueMode = props.valueMode,
        valueMode = _props$valueMode === void 0 ? "onlyLeaf" : _props$valueMode;
    React.useEffect(function () {
      if (!options.length) return;

      if (!treeStore) {
        var store = new TreeStore({
          keys: _objectSpread$$(_objectSpread$$({}, keys), {}, {
            children: typeof keys.children === "string" ? keys.children : "children"
          }),
          onLoad: function onLoad() {
            setTimeout(function () {
              store.refreshNodes();
              treeNodesEffect(inputVal, store, setTreeNodes, props.filter);
            });
          }
        });
        store.append(options);
        setTreeStore(store);
      } else {
        if (isEqual_1(treeStore.config.options, options)) return;
        treeStore.reload(options);
        treeStore.refreshNodes();
        treeStoreExpendEffect(treeStore, scopeVal, []);
        treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter);
      }
    }, [options]);
    React.useEffect(function () {
      if (!treeStore) return;
      var treeProps = {
        keys: _objectSpread$$(_objectSpread$$({}, keys), {}, {
          children: typeof keys.children === "string" ? keys.children : "children"
        }),
        checkable: true,
        expandMutex: true,
        expandParent: true,
        checkStrictly: checkStrictly,
        disabled: disabled,
        load: load,
        lazy: lazy,
        valueMode: valueMode,
        options: options
      };
      treeStore.setConfig(treeProps);
    }, [checkStrictly, disabled, keys, lazy, load, options, valueMode, treeStore]);
    React.useEffect(function () {
      var setValue = cascaderContext.setValue,
          multiple = cascaderContext.multiple,
          _cascaderContext$valu = cascaderContext.valueType,
          valueType = _cascaderContext$valu === void 0 ? "single" : _cascaderContext$valu;

      if (isValueInvalid(innerValue, cascaderContext)) {
        setValue(multiple ? [] : "", "invalid-value");
      }

      if (!isEmptyValues(innerValue)) {
        setScopeVal(getCascaderValue(innerValue, valueType, multiple));
      } else {
        setScopeVal(multiple ? [] : "");
      }
    }, [innerValue]);
    React.useEffect(function () {
      if (!treeStore) return;
      treeStoreExpendEffect(treeStore, scopeVal, expend);
    }, [treeStore, scopeVal, expend]);
    React.useEffect(function () {
      if (!treeStore) return;
      treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter);
    }, [inputVal, treeStore, props.filter]);
    React.useEffect(function () {
      if (!treeStore) return;
      treeStore.replaceChecked(getTreeValue(scopeVal));
    }, [scopeVal, treeStore, cascaderContext.multiple]);
    React.useEffect(function () {
      if (!innerPopupVisible && isFilterable) {
        setInputVal("");
      }
    }, [innerPopupVisible, isFilterable]);
    React.useEffect(function () {
      var inputVal2 = cascaderContext.inputVal,
          treeStore2 = cascaderContext.treeStore,
          setTreeNodes2 = cascaderContext.setTreeNodes;
      treeNodesEffect(inputVal2, treeStore2, setTreeNodes2, props.filter);
    }, [inputVal, scopeVal]);
    return {
      cascaderContext: cascaderContext,
      isFilterable: isFilterable
    };
  };

  var cascaderDefaultProps = {
    checkStrictly: false,
    clearable: false,
    filterable: false,
    lazy: true,
    loading: false,
    max: 0,
    minCollapsedNum: 0,
    multiple: false,
    options: [],
    placeholder: void 0,
    readonly: false,
    showAllLevels: true,
    size: "medium",
    trigger: "click",
    defaultValue: [],
    valueMode: "onlyLeaf",
    valueType: "single"
  };

  function ownKeys$_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$_(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Cascader$1 = function Cascader(props) {
    var _props$popupProps;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;

    var _useLocaleReceiver = useLocaleReceiver("cascader"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
        global = _useLocaleReceiver2[0];

    var COMPONENT_NAME = "".concat(classPrefix, "-cascader");

    var _useCascaderContext = useCascaderContext(props),
        cascaderContext = _useCascaderContext.cascaderContext,
        isFilterable = _useCascaderContext.isFilterable;

    var displayValue = React.useMemo(function () {
      return props.multiple ? getMultipleContent(cascaderContext) : getSingleContent(cascaderContext);
    }, [props.multiple, cascaderContext]);
    var panels = React.useMemo(function () {
      return getPanels(cascaderContext.treeNodes);
    }, [cascaderContext]);
    var inputPlaceholder = React.useMemo(function () {
      var _props$placeholder;

      return cascaderContext.visible && !props.multiple && getSingleContent(cascaderContext) || ((_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : global.placeholder);
    }, [props.placeholder, cascaderContext, props.multiple, global.placeholder]);

    var renderSuffixIcon = function renderSuffixIcon() {
      var visible2 = cascaderContext.visible,
          disabled = cascaderContext.disabled;
      return /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
        overlayClassName: getFakeArrowIconClass(classPrefix, STATUS, cascaderContext),
        isActive: visible2,
        disabled: disabled
      });
    };

    var setVisible = cascaderContext.setVisible,
        visible = cascaderContext.visible,
        inputVal = cascaderContext.inputVal,
        setInputVal = cascaderContext.setInputVal;
    return /* @__PURE__ */React__default["default"].createElement(SelectInput, _objectSpread$_(_objectSpread$_({
      className: classNames$1(COMPONENT_NAME, props.className),
      style: props.style,
      value: displayValue,
      inputValue: visible ? inputVal : "",
      popupVisible: visible,
      allowInput: isFilterable,
      minCollapsedNum: props.minCollapsedNum,
      collapsedItems: props.collapsedItems,
      readonly: props.readonly,
      clearable: props.clearable,
      placeholder: inputPlaceholder,
      multiple: props.multiple,
      loading: props.loading,
      disabled: props.disabled,
      status: props.status,
      tips: props.tips,
      suffixIcon: function suffixIcon() {
        return renderSuffixIcon();
      },
      popupProps: _objectSpread$_(_objectSpread$_({}, props.popupProps), {}, {
        overlayInnerStyle: panels.length && !props.loading ? {
          width: "auto"
        } : {},
        overlayClassName: ["".concat(classPrefix, "-cascader__popup"), (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayClassName]
      }),
      inputProps: _objectSpread$_({
        size: props.size
      }, props.inputProps),
      tagInputProps: _objectSpread$_({
        size: props.size
      }, props.tagInputProps),
      tagProps: _objectSpread$_({}, props.tagProps),
      onInputChange: function onInputChange(value, ctx) {
        var _props$selectInputPro, _props$selectInputPro2;

        if (!visible) return;
        setInputVal("".concat(value));
        props === null || props === void 0 ? void 0 : (_props$selectInputPro = props.selectInputProps) === null || _props$selectInputPro === void 0 ? void 0 : (_props$selectInputPro2 = _props$selectInputPro.onInputChange) === null || _props$selectInputPro2 === void 0 ? void 0 : _props$selectInputPro2.call(_props$selectInputPro, value, ctx);
      },
      onTagChange: function onTagChange(val, ctx) {
        var _props$selectInputPro3, _props$selectInputPro4;

        if (ctx.trigger === "enter") return;
        handleRemoveTagEffect(cascaderContext, ctx.index, props.onRemove);
        props === null || props === void 0 ? void 0 : (_props$selectInputPro3 = props.selectInputProps) === null || _props$selectInputPro3 === void 0 ? void 0 : (_props$selectInputPro4 = _props$selectInputPro3.onTagChange) === null || _props$selectInputPro4 === void 0 ? void 0 : _props$selectInputPro4.call(_props$selectInputPro3, val, ctx);
      },
      onPopupVisibleChange: function onPopupVisibleChange(val, context) {
        var _props$selectInputPro5, _props$selectInputPro6;

        if (props.disabled) return;
        setVisible(val, context);
        props === null || props === void 0 ? void 0 : (_props$selectInputPro5 = props.selectInputProps) === null || _props$selectInputPro5 === void 0 ? void 0 : (_props$selectInputPro6 = _props$selectInputPro5.onPopupVisibleChange) === null || _props$selectInputPro6 === void 0 ? void 0 : _props$selectInputPro6.call(_props$selectInputPro5, val, context);
      },
      onBlur: function onBlur(val, context) {
        var _props$onBlur, _props$selectInputPro7, _props$selectInputPro8;

        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
          value: cascaderContext.value,
          e: context.e
        });
        props === null || props === void 0 ? void 0 : (_props$selectInputPro7 = props.selectInputProps) === null || _props$selectInputPro7 === void 0 ? void 0 : (_props$selectInputPro8 = _props$selectInputPro7.onBlur) === null || _props$selectInputPro8 === void 0 ? void 0 : _props$selectInputPro8.call(_props$selectInputPro7, val, context);
      },
      onFocus: function onFocus(val, context) {
        var _props$onFocus, _props$selectInputPro9, _props$selectInputPro10;

        (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
          value: cascaderContext.value,
          e: context.e
        });
        props === null || props === void 0 ? void 0 : (_props$selectInputPro9 = props.selectInputProps) === null || _props$selectInputPro9 === void 0 ? void 0 : (_props$selectInputPro10 = _props$selectInputPro9.onFocus) === null || _props$selectInputPro10 === void 0 ? void 0 : _props$selectInputPro10.call(_props$selectInputPro9, val, context);
      },
      onClear: function onClear(context) {
        var _props$selectInputPro11, _props$selectInputPro12;

        closeIconClickEffect(cascaderContext);
        props === null || props === void 0 ? void 0 : (_props$selectInputPro11 = props.selectInputProps) === null || _props$selectInputPro11 === void 0 ? void 0 : (_props$selectInputPro12 = _props$selectInputPro11.onClear) === null || _props$selectInputPro12 === void 0 ? void 0 : _props$selectInputPro12.call(_props$selectInputPro11, context);
      }
    }, omit_1(props.selectInputProps, ["onTagChange", "onInputChange", "onPopupVisibleChange", "onBlur", "onFocus", "onClear"])), {}, {
      panel: /* @__PURE__ */React__default["default"].createElement(Panel$1, _objectSpread$_({
        cascaderContext: cascaderContext
      }, pick_1(props, ["trigger", "onChange", "empty", "loading", "loadingText"])))
    }));
  };

  Cascader$1.displayName = "Cascader";
  Cascader$1.defaultProps = cascaderDefaultProps;

  var _excluded$c = ["children", "content", "className", "underline", "prefixIcon", "suffixIcon", "theme", "disabled", "hover", "onClick", "href", "size"];

  function ownKeys$Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Link$1 = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
    var _classNames;

    var children = _ref.children,
        content = _ref.content,
        className = _ref.className,
        underline = _ref.underline,
        prefixIcon = _ref.prefixIcon,
        suffixIcon = _ref.suffixIcon,
        _ref$theme = _ref.theme,
        theme = _ref$theme === void 0 ? "default" : _ref$theme,
        disabled = _ref.disabled,
        _ref$hover = _ref.hover,
        hover = _ref$hover === void 0 ? "underline" : _ref$hover,
        onClick = _ref.onClick,
        href = _ref.href,
        size = _ref.size,
        props = _objectWithoutProperties$2(_ref, _excluded$c);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var childNode = content || children;

    var handleClick = function handleClick(e) {
      if (disabled) return;
      onClick === null || onClick === void 0 ? void 0 : onClick(e);
    };

    return /* @__PURE__ */React__default["default"].createElement("a", _objectSpread$Z(_objectSpread$Z({}, props), {}, {
      href: disabled || !href ? void 0 : href,
      ref: ref,
      className: classNames$1(className, ["".concat(classPrefix, "-link"), "".concat(classPrefix, "-link--theme-").concat(theme)], (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), !!disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-underline"), !!underline), _defineProperty$3(_classNames, "".concat(classPrefix, "-link--hover-").concat(hover), !disabled), _classNames)),
      onClick: handleClick
    }), prefixIcon && /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(["".concat(classPrefix, "-link__prefix-icon")])
    }, prefixIcon), childNode, suffixIcon && /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(["".concat(classPrefix, "-link__suffix-icon")])
    }, suffixIcon));
  });
  Link$1.displayName = "Link";

  var Link = Link$1;

  var SIZE_MAP = {
    B: 1,
    KB: 1024,
    MB: 1048576,
    GB: 1073741824
  };
  function returnFileSize(number) {
    if (number < SIZE_MAP.B) {
      return "".concat(number, " Bytes");
    }

    if (number >= SIZE_MAP.B && number < SIZE_MAP.MB) {
      return "".concat((number / SIZE_MAP.B).toFixed(1), " KB");
    }

    if (number >= SIZE_MAP.MB) {
      return "".concat((number / SIZE_MAP.MB).toFixed(1), " MB");
    }

    return "";
  }
  function getCurrentDate() {
    var d = new Date();
    var month = d.getMonth() + 1;
    month = month < 10 ? "0".concat(month) : month;
    return "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate(), " ").concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
  }
  function abridgeName(inputName) {
    var leftCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
    var rightCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
    var name = inputName;
    var leftLength = 0;
    var rightLength = 0;
    if (!name) return "";

    for (var i = 0; i < name.length; i++) {
      var w = name[i];
      var isCn = escape(w).indexOf("%u") === 0;

      if (i < leftCount * 2 && leftLength < leftCount) {
        isCn ? leftLength += 1 : leftLength += 2;
      } else if (i > i - rightCount && rightLength < rightCount) {
        isCn ? rightLength += 1 : rightLength += 2;
      }
    }

    return name.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
  }
  function getFileSizeText(number) {
    if (number < 1024) {
      return "".concat(number, " Bytes");
    }

    if (number >= 1024 && number < 1048576) {
      return "".concat((number / 1024).toFixed(1), " KB");
    }

    if (number >= 1048576) {
      return "".concat((number / 1048576).toFixed(1), " MB");
    }

    return "";
  }
  function isOverSizeLimit(fileSize, sizeLimit, unit) {
    var units = ["B", "KB", "MB", "GB"];
    var KBIndex = 1;
    var index = units.indexOf(unit);

    if (index === -1) {
      log.warn("Upload", "`sizeLimit.unit` can only be one of ".concat(units.join()));
      index = KBIndex;
    }

    var num = SIZE_MAP[unit];
    return fileSize > sizeLimit * num;
  }
  function getFileUrlByFileRaw(fileRaw) {
    return new Promise(function (resolve) {
      if (!fileRaw) {
        resolve("");
        return;
      }

      var reader = new FileReader();
      reader.readAsDataURL(fileRaw);

      reader.onload = function (event) {
        resolve(event.target.result);
      };
    });
  }

  function NormalFile(props) {
    var _props$fileListDispla, _displayFiles$, _displayFiles$0$respo;

    var theme = props.theme,
        disabled = props.disabled,
        classPrefix = props.classPrefix,
        locale = props.locale;

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon,
      TimeFilledIcon: TimeFilledIcon,
      CheckCircleFilledIcon: CheckCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon,
      CloseCircleFilledIcon: CloseCircleFilledIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon,
        TimeFilledIcon$1 = _useGlobalIcon.TimeFilledIcon,
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon,
        CloseCircleFilledIcon$1 = _useGlobalIcon.CloseCircleFilledIcon;

    var uploadPrefix = "".concat(classPrefix, "-upload");

    var renderProgress = function renderProgress(percent) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__single-progress")
      }, /* @__PURE__ */React__default["default"].createElement(Loading, null), /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__single-percent")
      }, percent, "%"));
    };

    var renderFilePreviewAsText = function renderFilePreviewAsText(files) {
      var _files$;

      if (theme !== "file") return null;

      if (!props.multiple && ((_files$ = files[0]) === null || _files$ === void 0 ? void 0 : _files$.status) === "fail") {
        return null;
      }

      return files.map(function (file, index) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(uploadPrefix, "__single-display-text ").concat(uploadPrefix, "__display-text--margin"),
          key: file.name + index
        }, file.url ? /* @__PURE__ */React__default["default"].createElement(Link, {
          href: file.url,
          target: "_blank",
          hover: "color",
          size: "small",
          className: "".concat(uploadPrefix, "__single-name")
        }, file.name) : /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(uploadPrefix, "__single-name")
        }, file.name), file.status === "fail" && /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(uploadPrefix, "__flow-status")
        }, /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon$1, null)), file.status === "waiting" && /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(uploadPrefix, "__flow-status")
        }, /* @__PURE__ */React__default["default"].createElement(TimeFilledIcon$1, null)), file.status === "progress" && renderProgress(file.percent), !disabled && file.status !== "progress" && /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, {
          className: "".concat(uploadPrefix, "__icon-delete"),
          onClick: function onClick(e) {
            return props.onRemove({
              e: e,
              file: file,
              index: index
            });
          }
        }));
      });
    };

    var renderFilePreviewAsInput = function renderFilePreviewAsInput() {
      if (theme !== "file-input") return;
      var file = props.displayFiles[0];
      var inputTextClass = ["".concat(classPrefix, "-input__inner"), _defineProperty$3({}, "".concat(uploadPrefix, "__placeholder"), !props.displayFiles[0])];
      var disabledClass = disabled ? "".concat(classPrefix, "-is-disabled") : "";
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__single-input-preview ").concat(classPrefix, "-input ").concat(disabledClass)
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(inputTextClass)
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__single-input-text")
      }, file !== null && file !== void 0 && file.name ? abridgeName(file.name, 4, 6) : props.placeholder), (file === null || file === void 0 ? void 0 : file.status) === "progress" && renderProgress(file.percent), (file === null || file === void 0 ? void 0 : file.status) === "waiting" && /* @__PURE__ */React__default["default"].createElement(TimeFilledIcon$1, {
        className: "".concat(uploadPrefix, "__status-icon")
      }), (file === null || file === void 0 ? void 0 : file.url) && file.status === "success" && /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon$1, {
        className: "".concat(uploadPrefix, "__status-icon")
      }), (file === null || file === void 0 ? void 0 : file.name) && file.status === "fail" && /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon$1, {
        className: "".concat(uploadPrefix, "__status-icon")
      }), !disabled && /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon$1, {
        className: "".concat(uploadPrefix, "__single-input-clear"),
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            file: file,
            index: 0
          });
        }
      })));
    };

    var displayFiles = props.displayFiles;
    var fileListDisplay = (_props$fileListDispla = props.fileListDisplay) === null || _props$fileListDispla === void 0 ? void 0 : _props$fileListDispla.call(props, {
      files: displayFiles
    });
    var classes = ["".concat(uploadPrefix, "__single"), "".concat(uploadPrefix, "__single-").concat(theme)];
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(classes)
    }, theme === "file-input" && renderFilePreviewAsInput(), props.children, props.tips && /* @__PURE__ */React__default["default"].createElement("small", {
      className: classNames$1(props.tipsClasses)
    }, props.tips), theme === "file" && props.placeholder && !displayFiles[0] && /* @__PURE__ */React__default["default"].createElement("small", {
      className: classNames$1(props.tipsClasses)
    }, props.placeholder), fileListDisplay || renderFilePreviewAsText(displayFiles), props.sizeOverLimitMessage && /* @__PURE__ */React__default["default"].createElement("small", {
      className: classNames$1(props.errorClasses)
    }, props.sizeOverLimitMessage), !props.multiple && ((_displayFiles$ = displayFiles[0]) === null || _displayFiles$ === void 0 ? void 0 : _displayFiles$.status) === "fail" ? /* @__PURE__ */React__default["default"].createElement("small", {
      className: classNames$1(props.errorClasses)
    }, ((_displayFiles$0$respo = displayFiles[0].response) === null || _displayFiles$0$respo === void 0 ? void 0 : _displayFiles$0$respo.error) || locale.progress.failText) : null);
  }
  NormalFile.displayName = "NormalFile";

  function useDrag$2(props) {
    var _useState = React.useState(null),
        _useState2 = _slicedToArray(_useState, 2),
        target = _useState2[0],
        setTarget = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        dragActive = _useState4[0],
        setDragActive = _useState4[1];

    var handleDrop = function handleDrop(event) {
      var _props$onDragFileChan, _props$onDrop;

      event.preventDefault();
      (_props$onDragFileChan = props.onDragFileChange) === null || _props$onDragFileChan === void 0 ? void 0 : _props$onDragFileChan.call(props, event);
      (_props$onDrop = props.onDrop) === null || _props$onDrop === void 0 ? void 0 : _props$onDrop.call(props, {
        e: event
      });
      setDragActive(false);
    };

    var handleDragenter = function handleDragenter(event) {
      var _props$onDragenter;

      event.preventDefault();
      setTarget(event.target);
      (_props$onDragenter = props.onDragenter) === null || _props$onDragenter === void 0 ? void 0 : _props$onDragenter.call(props, {
        e: event
      });
      setDragActive(true);
    };

    var handleDragleave = function handleDragleave(event) {
      var _props$onDragleave;

      if (event.target !== target) return;
      event.preventDefault();
      (_props$onDragleave = props.onDragleave) === null || _props$onDragleave === void 0 ? void 0 : _props$onDragleave.call(props, {
        e: event
      });
      setDragActive(false);
    };

    var handleDragover = function handleDragover(event) {
      event.preventDefault();
    };

    return {
      target: target,
      dragActive: dragActive,
      handleDrop: handleDrop,
      handleDragenter: handleDragenter,
      handleDragleave: handleDragleave,
      handleDragover: handleDragover
    };
  }

  var DraggerFile = function DraggerFile(props) {
    var _props$trigger;

    var displayFiles = props.displayFiles,
        locale = props.locale,
        disabled = props.disabled;

    var _useCommonClassName = useCommonClassName(),
        SIZE = _useCommonClassName.SIZE;

    var uploadPrefix = "".concat(props.classPrefix, "-upload");
    var drag = useDrag$2(props.dragEvents);
    var dragActive = drag.dragActive;
    var draggerFileRef = React.useRef();

    var _useGlobalIcon = useGlobalIcon({
      CheckCircleFilledIcon: CheckCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon
    }),
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon;

    var classes = React.useMemo(function () {
      var _displayFiles$;

      return ["".concat(uploadPrefix, "__dragger"), _defineProperty$3({}, "".concat(uploadPrefix, "__dragger-center"), !displayFiles[0]), _defineProperty$3({}, "".concat(uploadPrefix, "__dragger-error"), ((_displayFiles$ = displayFiles[0]) === null || _displayFiles$ === void 0 ? void 0 : _displayFiles$.status) === "fail")];
    }, [displayFiles, uploadPrefix]);

    var renderImage = function renderImage() {
      var file = displayFiles[0];
      if (!file) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-img-wrap")
      }, file.url && /* @__PURE__ */React__default["default"].createElement("img", {
        src: file.url
      }));
    };

    var renderUploading = function renderUploading() {
      var file = displayFiles[0];
      if (!file) return null;

      if (file.status === "progress") {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(uploadPrefix, "__single-progress")
        }, /* @__PURE__ */React__default["default"].createElement(Loading, null), /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(uploadPrefix, "__single-percent")
        }, file.percent, "%"));
      }
    };

    var renderMainPreview = function renderMainPreview() {
      var file = displayFiles[0];
      if (!file) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-progress")
      }, props.theme === "image" && renderImage(), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-progress-info")
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-text")
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__single-name")
      }, abridgeName(file.name)), file.status === "progress" && renderUploading(), file.status === "success" && /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon$1, null), file.status === "fail" && /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon$1, null)), /* @__PURE__ */React__default["default"].createElement("small", {
        className: "".concat(SIZE.small)
      }, locale.file.fileSizeText, "\uFF1A", getFileSizeText(file.size)), /* @__PURE__ */React__default["default"].createElement("small", {
        className: "".concat(SIZE.small)
      }, locale.file.fileOperationDateText, "\uFF1A", file.uploadTime || getCurrentDate()), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-btns")
      }, ["progress", "waiting"].includes(file.status) && !disabled && /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        variant: "text",
        className: "".concat(uploadPrefix, "__dragger-progress-cancel"),
        onClick: function onClick(e) {
          var _props$cancelUpload;

          return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
            e: e,
            file: props.toUploadFiles[0] || props.files[0]
          });
        }
      }, locale === null || locale === void 0 ? void 0 : locale.cancelUploadText), !props.autoUpload && file.status === "waiting" && /* @__PURE__ */React__default["default"].createElement(Button, {
        variant: "text",
        theme: "primary",
        disabled: disabled,
        onClick: function onClick() {
          var _props$uploadFiles;

          return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
        },
        className: "".concat(uploadPrefix, "__dragger-upload-btn")
      }, locale.triggerUploadText.normal)), ["fail", "success"].includes(file === null || file === void 0 ? void 0 : file.status) && !disabled && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-btns")
      }, /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        variant: "text",
        disabled: disabled,
        className: "".concat(uploadPrefix, "__dragger-progress-cancel"),
        onClick: props.triggerUpload
      }, locale.triggerUploadText.reupload), /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "danger",
        variant: "text",
        disabled: disabled,
        className: "".concat(uploadPrefix, "__dragger-delete-btn"),
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            index: 0,
            file: file
          });
        }
      }, locale.triggerUploadText["delete"]))));
    };

    var renderDefaultDragElement = function renderDefaultDragElement() {
      var _locale$triggerUpload;

      var unActiveElement = /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "--highlight")
      }, (_locale$triggerUpload = locale.triggerUploadText) === null || _locale$triggerUpload === void 0 ? void 0 : _locale$triggerUpload.normal), /* @__PURE__ */React__default["default"].createElement("span", null, "\xA0\xA0/\xA0\xA0", locale.dragger.draggingText));
      var activeElement = /* @__PURE__ */React__default["default"].createElement("div", null, locale.dragger.dragDropText);
      return dragActive ? activeElement : unActiveElement;
    };

    var getContent = function getContent() {
      var file = displayFiles[0];

      if (file && ["progress", "success", "fail", "waiting"].includes(file.status)) {
        return renderMainPreview();
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__trigger"),
        onClick: props.triggerUpload
      }, props.children || renderDefaultDragElement());
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: draggerFileRef,
      className: classNames$1(classes),
      onDrop: drag.handleDrop,
      onDragEnter: drag.handleDragenter,
      onDragOver: drag.handleDragover,
      onDragLeave: drag.handleDragleave
    }, ((_props$trigger = props.trigger) === null || _props$trigger === void 0 ? void 0 : _props$trigger.call(props, {
      files: displayFiles,
      dragActive: dragActive
    })) || getContent());
  };

  DraggerFile.displayName = "DraggerFile";

  var downloadFile = function downloadFile(imgSrc) {
    var _imgSrc$split;

    var image = new Image();
    var name = (imgSrc === null || imgSrc === void 0 ? void 0 : (_imgSrc$split = imgSrc.split) === null || _imgSrc$split === void 0 ? void 0 : _imgSrc$split.call(imgSrc, "/").pop()) || Math.random().toString(32).slice(2);
    image.setAttribute("crossOrigin", "anonymous");

    image.onload = function () {
      var canvas = document.createElement("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      var context = canvas.getContext("2d");
      context.drawImage(image, 0, 0, image.width, image.height);
      canvas.toBlob(function (blob) {
        var url = URL.createObjectURL(blob);
        var a = document.createElement("a");
        a.download = name;
        a.href = url;
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      });
    };

    image.src = imgSrc;
  };

  function ownKeys$Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ImageModelMiniContent = function ImageModelMiniContent(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer-mini__content")
    }, /* @__PURE__ */React__default["default"].createElement(ImageModelItem, {
      rotateZ: props.rotateZ,
      scale: props.scale,
      mirror: props.mirror,
      src: props.currentImage.mainImage,
      preSrc: props.currentImage.thumbnail
    }));
  };
  var DIALOG_CSS_PADDING = {
    padding: 0
  };
  var ImageModelMini = function ImageModelMini(props) {
    var visible = props.visible,
        title = props.title,
        index = props.index,
        images = props.images,
        scale = props.scale,
        currentImage = props.currentImage,
        draggable = props.draggable,
        onZoomOut = props.onZoomOut,
        onZoom = props.onZoom,
        onClose = props.onClose,
        onRotate = props.onRotate,
        onMirror = props.onMirror,
        onReset = props.onReset;

    var _useConfig2 = useConfig$1(),
        classPrefix = _useConfig2.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon;

    var header = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__mini--header")
    }, /* @__PURE__ */React__default["default"].createElement("span", null, title), "".concat(index + 1, "/").concat(images.length), /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-image-viewer__mini--close")
    }, /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, {
      size: "1.5rem",
      onClick: function onClick(e) {
        return onClose({
          trigger: "close-btn",
          e: e
        });
      }
    })));
    var footer = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer-mini__footer")
    }, /* @__PURE__ */React__default["default"].createElement(ImageViewerUtils, {
      onZoom: onZoom,
      onZoomOut: onZoomOut,
      scale: scale,
      currentImage: currentImage,
      onRotate: onRotate,
      onMirror: onMirror,
      onReset: onReset
    }));
    return /* @__PURE__ */React__default["default"].createElement(Dialog, {
      className: "".concat(classPrefix, "-image-viewer__dialog"),
      draggable: draggable,
      visible: visible,
      width: "min(90vw, 1000px)",
      placement: "center",
      mode: "modeless",
      cancelBtn: null,
      confirmBtn: null,
      closeBtn: false,
      header: header,
      footer: footer,
      onClose: onClose,
      style: DIALOG_CSS_PADDING
    }, /* @__PURE__ */React__default["default"].createElement(ImageModelMiniContent, _objectSpread$Y({}, props)));
  };

  var useMirror = function useMirror() {
    var _useState = React.useState(1),
        _useState2 = _slicedToArray(_useState, 2),
        mirror = _useState2[0],
        setMirror = _useState2[1];

    var onMirror = React.useCallback(function () {
      setMirror(function (mirror2) {
        return mirror2 > 0 ? -1 : 1;
      });
    }, []);
    var onResetMirror = React.useCallback(function () {
      return setMirror(1);
    }, []);
    return {
      mirror: mirror,
      onResetMirror: onResetMirror,
      onMirror: onMirror
    };
  };

  var usePosition = function usePosition(_ref, $dom) {
    var initPosition = _ref.initPosition,
        _ref$move = _ref.move,
        move = _ref$move === void 0 ? true : _ref$move,
        onEnd = _ref.onMouseUp,
        onUpdate = _ref.onMouseMove,
        onStart = _ref.onMouseDown;

    var _useState = React.useState(initPosition),
        _useState2 = _slicedToArray(_useState, 2),
        position = _useState2[0],
        setPosition = _useState2[1];

    var cacheMoveDataRef = React.useRef(null);
    var onMouseUp = React.useCallback(function () {
      if (!cacheMoveDataRef.current) return;
      cacheMoveDataRef.current = null;
      if (!move) return;
      isFunction_1(onEnd) && onEnd();
    }, [move, onEnd]);
    var onMouseMove = React.useCallback(function (event) {
      if (!event.buttons) cacheMoveDataRef.current = null;
      if (!cacheMoveDataRef.current || cacheMoveDataRef.current.updating || !move) return;
      cacheMoveDataRef.current.updating = true;
      var _cacheMoveDataRef$cur = cacheMoveDataRef.current,
          oldX = _cacheMoveDataRef$cur.screenX,
          oldY = _cacheMoveDataRef$cur.screenY;
      var screenX = event.screenX,
          screenY = event.screenY;
      requestAnimationFrame(function () {
        if (!cacheMoveDataRef.current) return;
        setPosition(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
              X = _ref3[0],
              Y = _ref3[1];

          return [X + screenX - oldX, Y + screenY - oldY];
        });
        cacheMoveDataRef.current.screenX = screenX;
        cacheMoveDataRef.current.screenY = screenY;
        cacheMoveDataRef.current.updating = false;
        isFunction_1(onUpdate) && onUpdate();
      });
    }, [move, onUpdate]);
    var onMouseDown = React.useCallback(function (event) {
      var screenX = event.screenX,
          screenY = event.screenY;
      cacheMoveDataRef.current = {
        screenX: screenX,
        screenY: screenY
      };
      if (!move) return;
      isFunction_1(onStart) && onStart();
    }, [move, onStart]);
    React.useEffect(function () {
      var dom = $dom || document;
      dom.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", onMouseUp);
      return function () {
        dom.removeEventListener("mousemove", onMouseMove);
        document.removeEventListener("mouseup", onMouseUp);
      };
    }, [$dom, move, onMouseMove, onMouseUp]);
    return [position, onMouseDown];
  };

  var useIndex = function useIndex(resProps, images) {
    var _useControlled = useControlled(resProps, "index", resProps.onIndexChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        index = _useControlled2[0],
        setIndex = _useControlled2[1];

    var next = React.useCallback(function () {
      var newIndex = index + 1;
      if (newIndex >= images.length) return index;
      setIndex(newIndex, {
        trigger: "next"
      });
    }, [setIndex, index, images.length]);
    var prev = React.useCallback(function () {
      var newIndex = index - 1 > 0 ? index - 1 : 0;
      setIndex(newIndex, {
        trigger: "prev"
      });
    }, [index, setIndex]);
    return {
      index: index,
      next: next,
      prev: prev,
      setIndex: setIndex
    };
  };

  var useRotate = function useRotate() {
    var _useState = React.useState(0),
        _useState2 = _slicedToArray(_useState, 2),
        rotateZ = _useState2[0],
        setRotateZ = _useState2[1];

    var onRotate = React.useCallback(function (ROTATE_COUNT) {
      setRotateZ(function (rotateZ2) {
        return rotateZ2 + ROTATE_COUNT;
      });
    }, []);
    var onResetRotate = React.useCallback(function () {
      return setRotateZ(0);
    }, []);
    return {
      rotateZ: rotateZ,
      onResetRotate: onResetRotate,
      onRotate: onRotate
    };
  };

  var useScale = function useScale(imageScale) {
    var _useState = React.useState(1),
        _useState2 = _slicedToArray(_useState, 2),
        scale = _useState2[0],
        setScale = _useState2[1];

    var onZoom = React.useCallback(function () {
      setScale(function (scale2) {
        var newScale = scale2 + imageScale.step;
        if (newScale < imageScale.min) return imageScale.min;
        if (newScale > imageScale.max) return imageScale.max;
        return newScale;
      });
    }, [imageScale]);
    var onZoomOut = React.useCallback(function () {
      setScale(function (scale2) {
        var newScale = scale2 - imageScale.step;
        if (newScale < imageScale.min) return imageScale.min;
        if (newScale > imageScale.max) return imageScale.max;
        return newScale;
      });
    }, [imageScale]);
    var onResetScale = React.useCallback(function () {
      return setScale(1);
    }, []);
    return {
      scale: scale,
      onZoom: onZoom,
      onZoomOut: onZoomOut,
      onResetScale: onResetScale
    };
  };

  var useIconMap = function useIconMap() {
    var Icons = useGlobalIcon({
      ChevronDownIcon: ChevronDownIcon,
      ChevronLeftIcon: ChevronLeftIcon,
      ChevronRightIcon: ChevronRightIcon,
      CloseIcon: CloseIcon,
      DownloadIcon: DownloadIcon,
      MirrorIcon: MirrorIcon,
      RotationIcon: RotationIcon,
      ZoomInIcon: ZoomInIcon,
      ZoomOutIcon: ZoomOutIcon
    });
    return {
      rotation: Icons.RotationIcon,
      "zoom-in": Icons.ZoomInIcon,
      mirror: Icons.MirrorIcon,
      "zoom-out": Icons.ZoomOutIcon,
      download: Icons.DownloadIcon,
      "chevron-left": Icons.ChevronLeftIcon,
      "chevron-right": Icons.ChevronRightIcon,
      "chevron-down": Icons.ChevronDownIcon,
      close: Icons.CloseIcon
    };
  };

  var _excluded$b = ["closeOnOverlay", "showOverlay", "zIndex", "images", "isMini", "imageScale", "viewerScale", "closeBtn", "draggable", "onOpen", "onClose", "visible", "title"];

  var ImageError = function ImageError() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      ImageErrorIcon: ImageErrorIcon
    }),
        ImageErrorIcon$1 = _useGlobalIcon.ImageErrorIcon;

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__img-error")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__img-error--content")
    }, /* @__PURE__ */React__default["default"].createElement(ImageErrorIcon$1, {
      size: "4em"
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__img-error--text")
    }, "\u56FE\u7247\u52A0\u8F7D\u5931\u8D25\uFF0C\u53EF\u5C1D\u8BD5\u91CD\u65B0\u52A0\u8F7D")));
  };

  var ImageModelItem = function ImageModelItem(_ref) {
    var rotateZ = _ref.rotateZ,
        scale = _ref.scale,
        src = _ref.src,
        preSrc = _ref.preSrc,
        mirror = _ref.mirror;

    var _useConfig2 = useConfig$1(),
        classPrefix = _useConfig2.classPrefix;

    var _usePosition = usePosition({
      initPosition: [0, 0]
    }),
        _usePosition2 = _slicedToArray(_usePosition, 2),
        position = _usePosition2[0],
        _onMouseDown = _usePosition2[1];

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        loaded = _useState2[0],
        setLoaded = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        error = _useState4[0],
        setError = _useState4[1];

    var imgStyle = {
      transform: "rotateZ(".concat(rotateZ, "deg) scale(").concat(scale, ")"),
      display: !preSrc || loaded ? "block" : "none"
    };
    var preImgStyle = {
      transform: "rotateZ(".concat(rotateZ, "deg) scale(").concat(scale, ")"),
      display: !loaded ? "block" : "none"
    };
    var boxStyle = {
      transform: "translate(".concat(position[0], "px, ").concat(position[1], "px) scale(").concat(mirror, ", 1)")
    };
    React.useEffect(function () {
      setError(false);
    }, [src]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal--pic")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal--box"),
      style: boxStyle
    }, error && /* @__PURE__ */React__default["default"].createElement(ImageError, null), !error && !!preSrc && /* @__PURE__ */React__default["default"].createElement("img", {
      className: "".concat(classPrefix, "-image-viewer__modal--image"),
      onMouseDown: function onMouseDown(event) {
        event.stopPropagation();

        _onMouseDown(event);
      },
      src: preSrc,
      style: preImgStyle,
      "data-testid": "img-drag",
      alt: "image",
      draggable: "false"
    }), !error && /* @__PURE__ */React__default["default"].createElement("img", {
      className: "".concat(classPrefix, "-image-viewer__modal--image"),
      onMouseDown: function onMouseDown(event) {
        event.stopPropagation();

        _onMouseDown(event);
      },
      src: src,
      onLoad: function onLoad() {
        return setLoaded(true);
      },
      onError: function onError() {
        return setError(true);
      },
      style: imgStyle,
      "data-testid": "img-drag",
      alt: "image",
      draggable: "false"
    })));
  };
  var ROTATE_COUNT = 90;

  var ImageModelIcon = function ImageModelIcon(_ref2) {
    var onClick = _ref2.onClick,
        className = _ref2.className,
        disabled = _ref2.disabled,
        isRange = _ref2.isRange,
        name = _ref2.name,
        label = _ref2.label,
        _ref2$size = _ref2.size,
        size = _ref2$size === void 0 ? "3em" : _ref2$size;

    var _useConfig3 = useConfig$1(),
        classPrefix = _useConfig3.classPrefix;

    var Icons = useIconMap();
    var Icon = Icons[name];
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-image-viewer__modal--icon"), className, _defineProperty$3({}, "".concat(classPrefix, "-is-disabled"), disabled)),
      onClick: onClick
    }, name && /* @__PURE__ */React__default["default"].createElement(Icon, {
      size: size,
      className: isRange ? "is-range" : null
    }), label && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-image-viewer__modal--icon-label")
    }, label));
  };

  var ImageViewerUtils = function ImageViewerUtils(_ref3) {
    var onZoom = _ref3.onZoom,
        scale = _ref3.scale,
        onZoomOut = _ref3.onZoomOut,
        currentImage = _ref3.currentImage,
        onRotate = _ref3.onRotate,
        onMirror = _ref3.onMirror,
        onReset = _ref3.onReset;

    var _useConfig4 = useConfig$1(),
        classPrefix = _useConfig4.classPrefix;

    var _useGlobalIcon2 = useGlobalIcon({
      MirrorIcon: MirrorIcon,
      RotationIcon: RotationIcon,
      ImageIcon: ImageIcon
    }),
        MirrorIcon$1 = _useGlobalIcon2.MirrorIcon,
        RotationIcon$1 = _useGlobalIcon2.RotationIcon,
        ImageIcon$1 = _useGlobalIcon2.ImageIcon;

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__utils")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__utils--content")
    }, /* @__PURE__ */React__default["default"].createElement(Tooltip, {
      overlayClassName: "".concat(classPrefix, "-image-viewer__utils--tip"),
      content: "\u955C\u50CF",
      destroyOnClose: true,
      placement: "top",
      showArrow: true,
      theme: "default"
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal--icon")
    }, /* @__PURE__ */React__default["default"].createElement(MirrorIcon$1, {
      size: "medium",
      onClick: onMirror
    }))), /* @__PURE__ */React__default["default"].createElement(Tooltip, {
      overlayClassName: "".concat(classPrefix, "-image-viewer__utils--tip"),
      content: "\u65CB\u8F6C",
      destroyOnClose: true,
      placement: "top",
      showArrow: true,
      theme: "default"
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal--icon")
    }, /* @__PURE__ */React__default["default"].createElement(RotationIcon$1, {
      size: "medium",
      onClick: function onClick() {
        return onRotate(-ROTATE_COUNT);
      }
    }))), /* @__PURE__ */React__default["default"].createElement(ImageModelIcon, {
      size: "medium",
      name: "zoom-out",
      onClick: onZoomOut
    }), /* @__PURE__ */React__default["default"].createElement(ImageModelIcon, {
      className: "".concat(classPrefix, "-image-viewer__utils--scale"),
      size: "medium",
      label: "".concat(scale * 100, "%")
    }), /* @__PURE__ */React__default["default"].createElement(ImageModelIcon, {
      size: "medium",
      name: "zoom-in",
      onClick: onZoom
    }), /* @__PURE__ */React__default["default"].createElement(Tooltip, {
      overlayClassName: "".concat(classPrefix, "-image-viewer__utils--tip"),
      content: "\u539F\u59CB\u5927\u5C0F",
      destroyOnClose: true,
      placement: "top",
      showArrow: true,
      theme: "default"
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal--icon")
    }, /* @__PURE__ */React__default["default"].createElement(ImageIcon$1, {
      size: "medium",
      name: "image",
      onClick: function onClick() {
        onReset();
      }
    }))), currentImage.download && /* @__PURE__ */React__default["default"].createElement(ImageModelIcon, {
      size: "medium",
      name: "download",
      onClick: function onClick() {
        downloadFile(currentImage.mainImage);
      }
    })));
  };

  var ImageViewerHeader = function ImageViewerHeader(props) {
    var _useConfig5 = useConfig$1(),
        classPrefix = _useConfig5.classPrefix;

    var images = props.images,
        currentIndex = props.currentIndex,
        onImgClick = props.onImgClick;

    var _useState5 = React.useState(true),
        _useState6 = _slicedToArray(_useState5, 2),
        isExpand = _useState6[0],
        setIsExpand = _useState6[1];

    var transStyle = {
      transform: "translateX(-".concat(currentIndex * 84, "px)")
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-image-viewer__modal-header"), _defineProperty$3({}, "".concat(classPrefix, "-is-show"), isExpand))
    }, /* @__PURE__ */React__default["default"].createElement(ImageModelIcon, {
      size: "20px",
      name: "chevron-down",
      className: "".concat(classPrefix, "-image-viewer__header--pre__bt"),
      onClick: function onClick() {
        return setIsExpand(!isExpand);
      }
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__header--prev")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__bokeh--left")
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__bokeh--right")
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__header--trans"),
      style: transStyle
    }, images.map(function (image, index) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: index,
        className: classNames$1("".concat(classPrefix, "-image-viewer__header--box"), _defineProperty$3({}, "".concat(classPrefix, "-is-active"), index === currentIndex)),
        onClick: function onClick() {
          return onImgClick(index);
        }
      }, /* @__PURE__ */React__default["default"].createElement("img", {
        alt: "",
        src: image.thumbnail || image.mainImage,
        className: "".concat(classPrefix, "-image-viewer__header--img")
      }));
    }))));
  };

  var ImageModal = function ImageModal(props) {
    var closeOnOverlay = props.closeOnOverlay,
        _props$showOverlay = props.showOverlay,
        showOverlay = _props$showOverlay === void 0 ? true : _props$showOverlay,
        zIndex = props.zIndex,
        images = props.images,
        isMini = props.isMini,
        imageScale = props.imageScale,
        viewerScale = props.viewerScale,
        closeBtn = props.closeBtn,
        draggable = props.draggable,
        onOpen = props.onOpen,
        onClose = props.onClose,
        visible = props.visible,
        title = props.title,
        resProps = _objectWithoutProperties$2(props, _excluded$b);

    var _useConfig6 = useConfig$1(),
        classPrefix = _useConfig6.classPrefix;

    if (resProps.index === void 0) delete resProps.index;

    var _useIndex = useIndex(resProps, images),
        index = _useIndex.index,
        next = _useIndex.next,
        prev = _useIndex.prev,
        setIndex = _useIndex.setIndex;

    var _useRotate = useRotate(),
        rotateZ = _useRotate.rotateZ,
        onResetRotate = _useRotate.onResetRotate,
        onRotate = _useRotate.onRotate;

    var _useScale = useScale(imageScale),
        scale = _useScale.scale,
        onZoom = _useScale.onZoom,
        onZoomOut = _useScale.onZoomOut,
        onResetScale = _useScale.onResetScale;

    var _useMirror = useMirror(),
        mirror = _useMirror.mirror,
        onResetMirror = _useMirror.onResetMirror,
        onMirror = _useMirror.onMirror;

    var onReset = React.useCallback(function () {
      onResetScale();
      onResetRotate();
      onResetMirror();
    }, [onResetMirror, onResetScale, onResetRotate]);
    var onScroll = React.useCallback(function (e) {
      var deltaY = e.deltaY;
      deltaY > 0 ? onZoom() : onZoomOut();
    }, [onZoom, onZoomOut]);
    var onKeyDown = React.useCallback(function (event) {
      switch (event.code) {
        case "ArrowRight":
          return next();

        case "ArrowLeft":
          return prev();

        case "ArrowUp":
          return onZoom();

        case "ArrowDown":
          return onZoomOut();

        case "Escape":
          return onClose === null || onClose === void 0 ? void 0 : onClose({
            trigger: "esc",
            e: event
          });
      }
    }, [next, onClose, prev, onZoom, onZoomOut]);
    React.useEffect(function () {
      document.addEventListener("keydown", onKeyDown);
      return function () {
        return document.removeEventListener("keydown", onKeyDown);
      };
    }, [onKeyDown]);
    React.useEffect(function () {
      onReset();
    }, [index, onReset]);
    if (!isArray_1(images) || images.length < 1) return null;
    var currentImage = images[index];

    if (isMini) {
      return /* @__PURE__ */React__default["default"].createElement(ImageModelMini, {
        visible: visible,
        draggable: draggable,
        index: index,
        images: images,
        imageScale: imageScale,
        viewerScale: viewerScale,
        rotateZ: rotateZ,
        zIndex: zIndex,
        currentImage: currentImage,
        prev: prev,
        next: next,
        mirror: mirror,
        scale: scale,
        title: title,
        onMirror: onMirror,
        onZoom: onZoom,
        onClose: onClose,
        onZoomOut: onZoomOut,
        onScroll: onScroll,
        onReset: onReset,
        onRotate: onRotate
      });
    }

    var closeNode = closeBtn;

    if (closeBtn === true) {
      closeNode = /* @__PURE__ */React__default["default"].createElement(ImageModelIcon, {
        name: "close",
        size: "24px",
        className: "".concat(classPrefix, "-image-viewer__modal--close-bt "),
        onClick: function onClick(e) {
          return onClose && onClose({
            trigger: "close-btn",
            e: e
          });
        }
      });
    } else if (isFunction_1(closeBtn)) closeNode = closeBtn({
      onClose: onClose,
      onOpen: onOpen
    });

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-image-viewer-preview-image"), _defineProperty$3({}, "".concat(classPrefix, "-is-hide"), !visible)),
      onWheel: onScroll,
      style: {
        zIndex: zIndex
      }
    }, !!showOverlay && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal--mask"),
      onClick: function onClick(e) {
        return closeOnOverlay && (onClose === null || onClose === void 0 ? void 0 : onClose({
          trigger: "overlay",
          e: e
        }));
      }
    }), images.length > 1 && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement(ImageViewerHeader, {
      images: images,
      currentIndex: index,
      onImgClick: setIndex
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal--index")
    }, /* @__PURE__ */React__default["default"].createElement("span", null, title), "".concat(index + 1, "/").concat(images.length)), /* @__PURE__ */React__default["default"].createElement(ImageModelIcon, {
      size: "24px",
      name: "chevron-left",
      className: "".concat(classPrefix, "-image-viewer__modal--prev-bt"),
      onClick: prev,
      disabled: index <= 0
    }), /* @__PURE__ */React__default["default"].createElement(ImageModelIcon, {
      size: "24px",
      name: "chevron-right",
      className: "".concat(classPrefix, "-image-viewer__modal--next-bt"),
      onClick: next,
      disabled: index >= images.length - 1
    })), /* @__PURE__ */React__default["default"].createElement(ImageViewerUtils, {
      onZoom: onZoom,
      onZoomOut: onZoomOut,
      scale: scale,
      currentImage: currentImage,
      onRotate: onRotate,
      onMirror: onMirror,
      onReset: onReset
    }), closeNode, /* @__PURE__ */React__default["default"].createElement(ImageModelItem, {
      scale: scale,
      rotateZ: rotateZ,
      mirror: mirror,
      preSrc: currentImage.thumbnail,
      src: currentImage.mainImage
    }));
  };

  var imageViewerDefaultProps = {
    closeBtn: true,
    draggable: void 0,
    images: [],
    mode: "modal",
    showOverlay: void 0,
    defaultVisible: false,
    defaultIndex: 0
  };

  var useImageScale = function useImageScale(imageScale) {
    var result = {
      max: 2,
      min: 0.5,
      step: 0.5
    };
    if ((imageScale === null || imageScale === void 0 ? void 0 : imageScale.min) !== void 0) result.min = imageScale.min;
    if ((imageScale === null || imageScale === void 0 ? void 0 : imageScale.max) !== void 0) result.max = imageScale.max;
    if ((imageScale === null || imageScale === void 0 ? void 0 : imageScale.step) !== void 0) result.step = imageScale.step;
    return result;
  };

  var checkImages = function checkImages(images) {
    return images.map(function (image) {
      var result = {
        mainImage: ""
      };
      if (typeof image === "string" || !image) result.mainImage = image;else {
        result.mainImage = image.mainImage;
        result.thumbnail = image.thumbnail;
        result.download = image.download;
      }
      return result;
    });
  };

  var useList = function useList(images) {
    var _useState = React.useState(function () {
      return checkImages(images);
    }),
        _useState2 = _slicedToArray(_useState, 2),
        list = _useState2[0],
        setList = _useState2[1];

    React.useEffect(function () {
      setList(checkImages(images));
    }, [images]);
    return list;
  };

  var useViewerScale = function useViewerScale(viewerScale) {
    var result = {
      minWidth: 1e3,
      minHeight: 1e3
    };
    if ((viewerScale === null || viewerScale === void 0 ? void 0 : viewerScale.minWidth) !== void 0) result.minWidth = viewerScale.minWidth;
    if ((viewerScale === null || viewerScale === void 0 ? void 0 : viewerScale.minHeight) !== void 0) result.minHeight = viewerScale.minHeight;
    return result;
  };

  var ImageViewer$1 = function ImageViewer(props) {
    var mode = props.mode,
        trigger = props.trigger,
        images = props.images,
        title = props.title,
        imageScaleD = props.imageScale,
        viewerScaleD = props.viewerScale;

    var _useControlled = useControlled(props, "visible", function (visible2, context) {
      isFunction_1(props.onClose) && props.onClose(context);
    }),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        visible = _useControlled2[0],
        setVisible = _useControlled2[1];

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        visibled = _useState2[0],
        setVisibled = _useState2[1];

    var list = useList(images);
    var imageScale = useImageScale(imageScaleD);
    var viewerScale = useViewerScale(viewerScaleD);
    var isMini = mode === "modeless";

    var close = function close(context) {
      setVisible(false, context);
      setTimeout(function () {
        return setVisibled(false);
      }, 196);
    };

    var open = function open() {
      if (!images) return;
      setVisible(true, null);
      setVisibled(true);
    };

    var uiImage = isFunction_1(trigger) ? trigger({
      open: open,
      close: close,
      onOpen: open,
      onClose: close
    }) : trigger;
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, uiImage, visibled && /*#__PURE__*/ReactDOM.createPortal( /* @__PURE__ */React__default["default"].createElement(ImageModal, {
      title: title,
      visible: visible,
      images: list,
      isMini: isMini,
      imageScale: imageScale,
      viewerScale: viewerScale,
      zIndex: props.zIndex,
      defaultIndex: props.defaultIndex,
      index: props.index,
      onIndexChange: props.onIndexChange,
      draggable: props.draggable,
      closeOnOverlay: props.closeOnOverlay,
      closeBtn: props.closeBtn,
      showOverlay: props.showOverlay,
      onClose: close,
      onOpen: open
    }), document.body));
  };

  ImageViewer$1.displayName = "ImageViewer";
  ImageViewer$1.defaultProps = imageViewerDefaultProps;

  var ImageViewer = ImageViewer$1;

  var ImageCard = function ImageCard(props) {
    var _locale$triggerUpload;

    var displayFiles = props.displayFiles,
        locale = props.locale,
        classPrefix = props.classPrefix,
        multiple = props.multiple,
        _props$max = props.max,
        max = _props$max === void 0 ? 0 : _props$max,
        onRemove = props.onRemove,
        showUploadProgress = props.showUploadProgress,
        disabled = props.disabled;

    var _useGlobalIcon = useGlobalIcon({
      AddIcon: AddIcon,
      BrowseIcon: BrowseIcon,
      DeleteIcon: DeleteIcon
    }),
        BrowseIcon$1 = _useGlobalIcon.BrowseIcon,
        DeleteIcon$1 = _useGlobalIcon.DeleteIcon,
        AddIcon$1 = _useGlobalIcon.AddIcon;

    var showTrigger = React__default["default"].useMemo(function () {
      if (multiple) {
        return !max || displayFiles.length < max;
      }

      return !(displayFiles !== null && displayFiles !== void 0 && displayFiles[0]);
    }, [displayFiles, max, multiple]);

    var renderMainContent = function renderMainContent(file, index) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__card-content ").concat(classPrefix, "-upload__card-box")
      }, /* @__PURE__ */React__default["default"].createElement("img", {
        className: "".concat(classPrefix, "-upload__card-image"),
        src: file.url
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__card-mask")
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-upload__card-mask-item"),
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      }, /* @__PURE__ */React__default["default"].createElement(ImageViewer, {
        trigger: function trigger(_ref) {
          var onOpen = _ref.onOpen;
          return /* @__PURE__ */React__default["default"].createElement(BrowseIcon$1, {
            onClick: function onClick(e) {
              var _props$onPreview;

              (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 ? void 0 : _props$onPreview.call(props, {
                file: file,
                index: index,
                e: e
              });
              onOpen();
            }
          });
        },
        images: displayFiles.map(function (t) {
          return t.url;
        }),
        defaultIndex: index
      })), !disabled && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-upload__card-mask-item-divider")
      }), /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-upload__card-mask-item"),
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      }, /* @__PURE__ */React__default["default"].createElement(DeleteIcon$1, {
        onClick: function onClick(e) {
          return onRemove === null || onRemove === void 0 ? void 0 : onRemove({
            e: e,
            file: file,
            index: index
          });
        }
      })))));
    };

    var cardItemClasses = "".concat(classPrefix, "-upload__card-item ").concat(classPrefix, "-is-background");
    return /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-upload__card")
    }, displayFiles === null || displayFiles === void 0 ? void 0 : displayFiles.map(function (file, index) {
      if (file.status === "progress") {
        var _locale$progress;

        return /* @__PURE__ */React__default["default"].createElement("li", {
          className: cardItemClasses,
          key: file.name + index
        }, /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-upload__card-container ").concat(classPrefix, "-upload__card-box")
        }, /* @__PURE__ */React__default["default"].createElement(Loading, {
          loading: true,
          size: "medium",
          text: /* @__PURE__ */React__default["default"].createElement("p", null, locale === null || locale === void 0 ? void 0 : (_locale$progress = locale.progress) === null || _locale$progress === void 0 ? void 0 : _locale$progress.uploadingText, showUploadProgress ? "".concat(file.percent, "%") : "")
        })));
      }

      return /* @__PURE__ */React__default["default"].createElement("li", {
        className: cardItemClasses,
        key: file.name + index
      }, renderMainContent(file, index));
    }), showTrigger && /* @__PURE__ */React__default["default"].createElement("li", {
      className: cardItemClasses,
      onClick: props.triggerUpload
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload__card-container ").concat(classPrefix, "-upload__card-box")
    }, /* @__PURE__ */React__default["default"].createElement(AddIcon$1, null), /* @__PURE__ */React__default["default"].createElement("p", {
      className: "".concat(classPrefix, "-size-s")
    }, locale === null || locale === void 0 ? void 0 : (_locale$triggerUpload = locale.triggerUploadText) === null || _locale$triggerUpload === void 0 ? void 0 : _locale$triggerUpload.image)))), props.tips && /* @__PURE__ */React__default["default"].createElement("small", {
      className: classNames$1(props.tipsClasses)
    }, props.tips));
  };

  ImageCard.displayName = "ImageCard";

  function ownKeys$X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$X(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var ImageFlowList = function ImageFlowList(props) {
    var _props$draggable;

    var locale = props.locale,
        uploading = props.uploading,
        disabled = props.disabled,
        displayFiles = props.displayFiles,
        classPrefix = props.classPrefix;
    var uploadPrefix = "".concat(classPrefix, "-upload");

    var _useGlobalIcon = useGlobalIcon({
      BrowseIcon: BrowseIcon,
      DeleteIcon: DeleteIcon,
      CheckCircleFilledIcon: CheckCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon,
      TimeFilledIcon: TimeFilledIcon
    }),
        BrowseIcon$1 = _useGlobalIcon.BrowseIcon,
        DeleteIcon$1 = _useGlobalIcon.DeleteIcon,
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon,
        TimeFilledIcon$1 = _useGlobalIcon.TimeFilledIcon;

    var drag = useDrag$2(props.dragEvents);
    var dragActive = drag.dragActive;
    var uploadText = React.useMemo(function () {
      if (uploading) return "".concat(locale.progress.uploadingText);
      return locale.triggerUploadText.normal;
    }, [locale, uploading]);
    var draggable = (_props$draggable = props.draggable) !== null && _props$draggable !== void 0 ? _props$draggable : true;
    var dragEvents = draggable ? {
      onDrop: drag.handleDrop,
      onDragEnter: drag.handleDragenter,
      onDragOver: drag.handleDragover,
      onDragLeave: drag.handleDragleave
    } : {};

    var getStatusMap = function getStatusMap() {
      var _locale$progress, _locale$progress2, _locale$progress3, _locale$progress4;

      var iconMap = {
        success: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon$1, null),
        fail: /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon$1, null),
        progress: /* @__PURE__ */React__default["default"].createElement(Loading, null),
        waiting: /* @__PURE__ */React__default["default"].createElement(TimeFilledIcon$1, null)
      };
      var textMap = {
        success: (_locale$progress = locale.progress) === null || _locale$progress === void 0 ? void 0 : _locale$progress.successText,
        fail: (_locale$progress2 = locale.progress) === null || _locale$progress2 === void 0 ? void 0 : _locale$progress2.failText,
        progress: (_locale$progress3 = locale.progress) === null || _locale$progress3 === void 0 ? void 0 : _locale$progress3.uploadingText,
        waiting: (_locale$progress4 = locale.progress) === null || _locale$progress4 === void 0 ? void 0 : _locale$progress4.waitingText
      };
      return {
        iconMap: iconMap,
        textMap: textMap
      };
    };

    var renderEmpty = function renderEmpty() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__flow-empty")
      }, dragActive ? locale.dragger.dragDropText : locale.dragger.clickAndDragText);
    };

    var renderImgItem = function renderImgItem(file, index) {
      var _getStatusMap = getStatusMap(),
          iconMap = _getStatusMap.iconMap,
          textMap = _getStatusMap.textMap;

      return /* @__PURE__ */React__default["default"].createElement("li", {
        className: "".concat(uploadPrefix, "__card-item"),
        key: file.name + index
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(["".concat(uploadPrefix, "__card-content"), _defineProperty$3({}, "".concat(classPrefix, "-is-bordered"), file.status !== "waiting")])
      }, ["fail", "progress"].includes(file.status) && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__card-status-wrap")
      }, iconMap[file.status], /* @__PURE__ */React__default["default"].createElement("p", null, textMap[file.status])), (["waiting", "success"].includes(file.status) || !file.status && file.url) && /* @__PURE__ */React__default["default"].createElement("img", {
        className: "".concat(uploadPrefix, "__card-image"),
        src: file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__card-mask")
      }, file.url && /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__card-mask-item")
      }, /* @__PURE__ */React__default["default"].createElement(ImageViewer, {
        trigger: function trigger(_ref2) {
          var onOpen = _ref2.onOpen;
          return /* @__PURE__ */React__default["default"].createElement(BrowseIcon$1, {
            onClick: function onClick(e) {
              var _props$onPreview;

              (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 ? void 0 : _props$onPreview.call(props, {
                file: file,
                index: index,
                e: e
              });
              onOpen();
            }
          });
        },
        images: displayFiles.map(function (t) {
          return t.url;
        }),
        defaultIndex: index
      }), /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__card-mask-item-divider")
      })), !disabled && /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__card-mask-item"),
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            index: index,
            file: file
          });
        }
      }, /* @__PURE__ */React__default["default"].createElement(DeleteIcon$1, null)))), /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(uploadPrefix, "__card-name")
      }, abridgeName(file.name)));
    };

    var renderStatus = function renderStatus(file) {
      var _getStatusMap2 = getStatusMap(),
          iconMap = _getStatusMap2.iconMap,
          textMap = _getStatusMap2.textMap;

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__flow-status")
      }, iconMap[file.status], /* @__PURE__ */React__default["default"].createElement("span", null, textMap[file.status]));
    };

    var renderNormalActionCol = function renderNormalActionCol(file, index) {
      var _locale$triggerUpload;

      return /* @__PURE__ */React__default["default"].createElement("td", null, /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        variant: "text",
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            index: index,
            file: file
          });
        }
      }, locale === null || locale === void 0 ? void 0 : (_locale$triggerUpload = locale.triggerUploadText) === null || _locale$triggerUpload === void 0 ? void 0 : _locale$triggerUpload["delete"]));
    };

    var renderBatchActionCol = function renderBatchActionCol(index) {
      var _locale$triggerUpload2;

      return index === 0 ? /* @__PURE__ */React__default["default"].createElement("td", {
        rowSpan: displayFiles.length,
        className: "".concat(uploadPrefix, "__flow-table__batch-row")
      }, /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        variant: "text",
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            index: -1,
            file: null
          });
        }
      }, locale === null || locale === void 0 ? void 0 : (_locale$triggerUpload2 = locale.triggerUploadText) === null || _locale$triggerUpload2 === void 0 ? void 0 : _locale$triggerUpload2["delete"])) : null;
    };

    var renderFileList = function renderFileList() {
      var _locale$file, _locale$file2, _locale$file3, _locale$file4;

      return /* @__PURE__ */React__default["default"].createElement("table", {
        className: "".concat(uploadPrefix, "__flow-table")
      }, /* @__PURE__ */React__default["default"].createElement("thead", null, /* @__PURE__ */React__default["default"].createElement("tr", null, /* @__PURE__ */React__default["default"].createElement("th", null, (_locale$file = locale.file) === null || _locale$file === void 0 ? void 0 : _locale$file.fileNameText), /* @__PURE__ */React__default["default"].createElement("th", null, (_locale$file2 = locale.file) === null || _locale$file2 === void 0 ? void 0 : _locale$file2.fileSizeText), /* @__PURE__ */React__default["default"].createElement("th", null, (_locale$file3 = locale.file) === null || _locale$file3 === void 0 ? void 0 : _locale$file3.fileStatusText), disabled ? null : /* @__PURE__ */React__default["default"].createElement("th", null, (_locale$file4 = locale.file) === null || _locale$file4 === void 0 ? void 0 : _locale$file4.fileOperationText))), /* @__PURE__ */React__default["default"].createElement("tbody", null, !displayFiles.length && /* @__PURE__ */React__default["default"].createElement("tr", null, /* @__PURE__ */React__default["default"].createElement("td", {
        colSpan: 4
      }, renderEmpty())), displayFiles.map(function (file, index) {
        var showBatchUploadAction = props.isBatchUpload;
        var deleteNode = showBatchUploadAction && !displayFiles.find(function (item) {
          return item.status !== "success";
        }) ? renderBatchActionCol(index) : renderNormalActionCol(file, index);
        return /* @__PURE__ */React__default["default"].createElement("tr", {
          key: file.name + index
        }, /* @__PURE__ */React__default["default"].createElement("td", null, abridgeName(file.name, 7, 10)), /* @__PURE__ */React__default["default"].createElement("td", null, returnFileSize(file.size)), /* @__PURE__ */React__default["default"].createElement("td", null, renderStatus(file)), disabled ? null : deleteNode);
      })));
    };

    var cardClassName = "".concat(uploadPrefix, "__flow-card-area");
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__flow ").concat(uploadPrefix, "__flow-").concat(props.theme)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__flow-op")
    }, props.children, props.placeholder && /* @__PURE__ */React__default["default"].createElement("small", {
      className: "".concat(uploadPrefix, "__flow-placeholder ").concat(uploadPrefix, "__placeholder")
    }, props.placeholder)), props.theme === "image-flow" && /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$X({
      className: cardClassName
    }, dragEvents), displayFiles.length ? /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(uploadPrefix, "__card clearfix")
    }, displayFiles.map(function (file, index) {
      return renderImgItem(file, index);
    })) : renderEmpty()), props.theme === "file-flow" && (displayFiles.length ? renderFileList() : /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$X({
      className: cardClassName
    }, dragEvents), renderEmpty())), !props.autoUpload && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__flow-bottom")
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "default",
      onClick: function onClick(e) {
        var _props$cancelUpload;

        return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
          e: e
        });
      },
      disabled: disabled || !uploading
    }, locale === null || locale === void 0 ? void 0 : locale.cancelUploadText), /* @__PURE__ */React__default["default"].createElement(Button, {
      disabled: disabled || uploading || !displayFiles.length,
      theme: "primary",
      loading: uploading,
      onClick: function onClick() {
        var _props$uploadFiles;

        return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
      }
    }, uploadText)));
  };

  ImageFlowList.displayName = "ImageFlowList";

  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableRest();
  }

  function ownKeys$W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$W(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function xhr(_ref) {
    var _ref$method = _ref.method,
        method = _ref$method === void 0 ? "POST" : _ref$method,
        action = _ref.action,
        _ref$withCredentials = _ref.withCredentials,
        withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials,
        _ref$headers = _ref.headers,
        headers = _ref$headers === void 0 ? {} : _ref$headers,
        _ref$data = _ref.data,
        data = _ref$data === void 0 ? {} : _ref$data,
        file = _ref.file,
        files = _ref.files,
        _ref$name = _ref.name,
        name = _ref$name === void 0 ? "file" : _ref$name,
        _ref$useMockProgress = _ref.useMockProgress,
        useMockProgress = _ref$useMockProgress === void 0 ? true : _ref$useMockProgress,
        formatRequest = _ref.formatRequest,
        onError = _ref.onError,
        onProgress = _ref.onProgress,
        onSuccess = _ref.onSuccess;
    var innerFiles = files || [];
    var percent = 0;
    var xhr2 = new XMLHttpRequest();

    if (withCredentials) {
      xhr2.withCredentials = true;
    }

    var timer1;
    var timer2;

    if (useMockProgress && files[0].status === "progress") {
      var timer22 = setTimeout(function () {
        timer1 = setInterval(function () {
          if (!percent && percent < 100) {
            percent += 10;
            onProgress({
              percent: percent,
              file: file,
              files: innerFiles.map(function (file2) {
                return _objectSpread$W(_objectSpread$W({}, file2), {}, {
                  percent: percent
                });
              }),
              type: "mock"
            });
          } else {
            clearInterval(timer1);
          }
        }, 300);
        clearTimeout(timer22);
      }, 300);
    }

    var requestData = {};

    if (data) {
      var extraData = typeof data === "function" ? data(file) : data;
      Object.assign(requestData, extraData);
    }

    innerFiles.forEach(function (file2, index) {
      var fileField = innerFiles.length > 1 ? "".concat(name, "[").concat(index, "]") : name;
      requestData[fileField] = file2.raw;
      requestData[name] = file2.raw;
    });

    if (formatRequest) {
      requestData = formatRequest(requestData);
    }

    var formData = new FormData();
    Object.keys(requestData).forEach(function (key) {
      formData.append(key, requestData[key]);
    });
    xhr2.open(method, action, true);
    Object.keys(headers).forEach(function (key) {
      xhr2.setRequestHeader(key, headers[key]);
    });

    xhr2.onerror = function (event) {
      onError({
        event: event,
        file: file,
        files: innerFiles
      });
      clearInterval(timer1);
      clearTimeout(timer2);
    };

    if (xhr2.upload) {
      xhr2.upload.onprogress = function (event) {
        var realPercent = 0;

        if (event.total > 0) {
          realPercent = Math.round(event.loaded / event.total * 100);
        }

        percent = Math.max(realPercent, percent);
        onProgress({
          event: event,
          percent: percent,
          file: file,
          files: innerFiles.map(function (file2) {
            return _objectSpread$W(_objectSpread$W({}, file2), {}, {
              percent: percent
            });
          }),
          type: "real"
        });
      };
    }

    xhr2.onload = function (event) {
      var response;
      var isFail = xhr2.status < 200 || xhr2.status >= 300;

      if (isFail) {
        return onError({
          event: event,
          file: file,
          files: innerFiles,
          response: response
        });
      }

      var text = xhr2.responseText || xhr2.response;

      try {
        response = JSON.parse(text);
      } catch (e) {
        response = text;
      }

      clearInterval(timer1);
      clearTimeout(timer2);
      onSuccess({
        event: event,
        file: file,
        files: innerFiles,
        response: response
      });
    };

    xhr2.send(formData);
    return xhr2;
  }

  function ownKeys$V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$V(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function handleBeforeUpload(file, params) {
    var sizeLimit = params.sizeLimit,
        beforeUpload = params.beforeUpload;
    var sizePromise = new Promise(function (resolve) {
      var result = null;

      if (sizeLimit) {
        var sizeLimitObj = typeof sizeLimit === "number" ? {
          size: sizeLimit,
          unit: "KB"
        } : sizeLimit;
        var limit = isOverSizeLimit(file.size, sizeLimitObj.size, sizeLimitObj.unit);

        if (limit) {
          result = sizeLimitObj;
        }
      }

      resolve(result);
    });
    var promiseList = [sizePromise, void 0];

    if (typeof beforeUpload === "function") {
      var r = beforeUpload(file);
      var p = r instanceof Promise ? r : new Promise(function (resolve) {
        return resolve(r);
      });
      promiseList[1] = p;
    }

    return new Promise(function (resolve) {
      Promise.all(promiseList).then(function (r) {
        resolve(r);
      });
    });
  }
  function handleError(options) {
    var event = options.event,
        files = options.files,
        response = options.response,
        formatResponse = options.formatResponse;
    files.forEach(function (file) {
      file.status = "fail";
    });
    var res = response;

    if (typeof formatResponse === "function") {
      res = formatResponse(response, {
        file: files[0],
        currentFiles: files
      });
    }

    return {
      response: res,
      event: event,
      files: files
    };
  }
  function handleSuccess(params) {
    var event = params.event,
        files = params.files,
        response = params.response;

    if ((files === null || files === void 0 ? void 0 : files.length) <= 0) {
      log.error("Upload", "Empty File in Success Callback");
    }

    files.forEach(function (file) {
      var _file$response;

      file.status = "success";
      (_file$response = file.response) === null || _file$response === void 0 ? true : delete _file$response.error;
    });
    var res = response;
    files[0].url = res.url || files[0].url;
    return {
      response: res,
      event: event,
      files: files
    };
  }
  function handleRequestMethodResponse(res) {
    if (!res) {
      log.error("Upload", "`requestMethodResponse` is required.");
      return false;
    }

    if (!res.status) {
      log.error("Upload", "`requestMethodResponse.status` is missing, which value only can be `success` or `fail`");
      return false;
    }

    if (!["success", "fail"].includes(res.status)) {
      log.error("Upload", "`requestMethodResponse.status` must be `success` or `fail`, examples `{ status: 'success', response: { url: '' } }`");
      return false;
    }

    if (res.status === "success" && (!res.response || !res.response.url)) {
      log.warn("Upload", "`requestMethodResponse.response.url` is required as `status` is `success`");
    }

    return true;
  }
  function uploadOneRequest(params) {
    var action = params.action,
        toUploadFiles = params.toUploadFiles,
        requestMethod = params.requestMethod;
    return new Promise(function (resolve) {
      if (!action && !requestMethod) {
        log.error("Upload", "one of action and requestMethod must be exist.");
        resolve({});
        return;
      }

      if (!toUploadFiles || !toUploadFiles.length) {
        log.warn("Upload", "No files need to be uploaded");
        resolve({});
        return;
      }

      toUploadFiles.forEach(function (file) {
        file.status = "progress";
      });

      if (requestMethod) {
        requestMethod(params.multiple ? toUploadFiles : toUploadFiles[0]).then(function (res) {
          if (!handleRequestMethodResponse(res)) {
            resolve({});
            return;
          }

          var response = res.response;

          if (res.status === "fail") {
            response = response || {};
            response.error = res.error || response.error;
          }

          toUploadFiles.forEach(function (file) {
            file.status = res.status;
            file.response = response;
          });
          var result = {
            response: response,
            file: toUploadFiles[0],
            files: toUploadFiles
          };

          if (res.status === "success") {
            var _params$onResponseSuc;

            (_params$onResponseSuc = params.onResponseSuccess) === null || _params$onResponseSuc === void 0 ? void 0 : _params$onResponseSuc.call(params, result);
          } else if (res.status === "fail") {
            var _params$onResponseErr;

            (_params$onResponseErr = params.onResponseError) === null || _params$onResponseErr === void 0 ? void 0 : _params$onResponseErr.call(params, result);
          }

          resolve({
            status: res.status,
            data: result
          });
        });
      } else {
        var _params$setXhrObject;

        var xhrReq = xhr({
          action: params.action,
          files: params.toUploadFiles,
          useMockProgress: params.useMockProgress,
          onError: function onError(p) {
            var _params$onResponseErr2;

            var r = handleError(_objectSpread$V(_objectSpread$V({}, p), {}, {
              formatResponse: params.formatResponse
            }));
            (_params$onResponseErr2 = params.onResponseError) === null || _params$onResponseErr2 === void 0 ? void 0 : _params$onResponseErr2.call(params, r);
            resolve({
              status: "fail",
              data: r
            });
          },
          onProgress: params.onResponseProgress,
          onSuccess: function onSuccess(p) {
            var formatResponse = params.formatResponse;
            var res = p.response;

            if (typeof formatResponse === "function") {
              res = formatResponse(p.response, {
                file: p.file,
                currentFiles: p.files
              });
            }

            if (res.error) {
              var _params$onResponseErr3;

              var r = handleError(_objectSpread$V(_objectSpread$V({}, p), {}, {
                response: res
              }));
              (_params$onResponseErr3 = params.onResponseError) === null || _params$onResponseErr3 === void 0 ? void 0 : _params$onResponseErr3.call(params, r);
              resolve({
                status: "fail",
                data: r
              });
            } else {
              var _params$onResponseSuc2;

              var _r = handleSuccess(_objectSpread$V(_objectSpread$V({}, p), {}, {
                response: res
              }));

              (_params$onResponseSuc2 = params.onResponseSuccess) === null || _params$onResponseSuc2 === void 0 ? void 0 : _params$onResponseSuc2.call(params, _r);
              resolve({
                status: "success",
                data: _r
              });
            }
          },
          formatRequest: params.formatRequest,
          data: params.data,
          name: params.name,
          headers: params.headers,
          withCredentials: params.withCredentials,
          method: params.method
        });
        (_params$setXhrObject = params.setXhrObject) === null || _params$setXhrObject === void 0 ? void 0 : _params$setXhrObject.call(params, {
          files: params.toUploadFiles,
          xhrReq: xhrReq
        });
      }
    });
  }
  function upload(params) {
    var uploadAllFilesInOneRequest = params.uploadAllFilesInOneRequest,
        toUploadFiles = params.toUploadFiles,
        uploadedFiles = params.uploadedFiles,
        isBatchUpload = params.isBatchUpload;
    var thisUploadFiles = toUploadFiles.filter(function (t) {
      return !t.response || t.response && !t.response.error;
    });
    return new Promise(function (resolve) {
      if (uploadAllFilesInOneRequest || !params.multiple) {
        uploadOneRequest(params).then(function (r) {
          if (r.status === "success") {
            r.data.files = isBatchUpload || !params.multiple ? r.data.files : uploadedFiles.concat(r.data.files);
          }

          var failedFiles = r.status === "fail" ? r.data.files : [];
          resolve(_objectSpread$V(_objectSpread$V({}, r), {}, {
            failedFiles: failedFiles
          }));
        });
        return;
      }

      var list = thisUploadFiles.map(function (file) {
        return uploadOneRequest(_objectSpread$V(_objectSpread$V({}, params), {}, {
          toUploadFiles: [file]
        }));
      });
      Promise.all(list).then(function (arr) {
        var files = [];
        var failedFiles = [];
        arr.forEach(function (one) {
          if (one.status === "success") {
            files.push(one.data.files[0]);
          } else if (one.status === "fail") {
            failedFiles.push(one.data.files[0]);
          }
        });
        var newFiles = isBatchUpload || !params.multiple ? files : uploadedFiles.concat(files);
        resolve({
          status: files.length ? "success" : "fail",
          data: {
            files: newFiles
          },
          failedFiles: failedFiles,
          list: arr
        });
      });
    });
  }
  function formatToUploadFile(tmpFiles, format, autoUpload) {
    return tmpFiles.map(function (fileRaw) {
      var file = fileRaw;

      if (typeof format === "function") {
        file = format(fileRaw);
      }

      var uploadFile = _objectSpread$V({
        raw: fileRaw,
        lastModified: fileRaw.lastModified,
        name: fileRaw.name,
        size: fileRaw.size,
        type: fileRaw.type,
        percent: 0,
        status: autoUpload ? "progress" : "waiting"
      }, file);

      return uploadFile;
    });
  }
  function validateFile(params) {
    var files = params.files,
        uploadValue = params.uploadValue,
        max = params.max,
        allowUploadDuplicateFile = params.allowUploadDuplicateFile;
    return new Promise(function (resolve) {
      var tmpFiles = files.filter(function (file) {
        var sameNameFile = uploadValue.find(function (t) {
          return t.name === file.name;
        });
        return allowUploadDuplicateFile || !sameNameFile;
      });
      var hasSameNameFile = false;

      if (tmpFiles.length < files.length) {
        hasSameNameFile = true;
      }

      if (!tmpFiles.length) {
        var tFiles = formatToUploadFile(files, params.format, params.autoUpload);
        resolve({
          hasSameNameFile: hasSameNameFile,
          file: tFiles === null || tFiles === void 0 ? void 0 : tFiles[0],
          files: tFiles,
          validateResult: {
            type: "FILTER_FILE_SAME_NAME"
          }
        });
        return;
      }

      var lengthOverLimit = false;

      if (max && tmpFiles.length && !params.isBatchUpload) {
        tmpFiles = tmpFiles.slice(0, max - uploadValue.length);

        if (tmpFiles.length !== files.length) {
          lengthOverLimit = true;
        }
      }

      var formattedFiles = formatToUploadFile(tmpFiles, params.format, params.autoUpload);
      var allFileValidatePromise;

      if (params.beforeAllFilesUpload) {
        var _params$beforeAllFile;

        var r = (_params$beforeAllFile = params.beforeAllFilesUpload) === null || _params$beforeAllFile === void 0 ? void 0 : _params$beforeAllFile.call(params, formattedFiles);
        allFileValidatePromise = r instanceof Promise ? r : new Promise(function (resolve2) {
          return resolve2(r);
        });
      }

      var promiseList = formattedFiles.map(function (file) {
        return new Promise(function (resolve2) {
          handleBeforeUpload(file, {
            beforeUpload: params.beforeUpload,
            sizeLimit: params.sizeLimit
          }).then(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                sizeResult = _ref2[0],
                customResult = _ref2[1];

            if (sizeResult) {
              resolve2({
                file: file,
                validateResult: {
                  type: "FILE_OVER_SIZE_LIMIT",
                  extra: sizeResult
                }
              });
            } else if (customResult === false) {
              resolve2({
                file: file,
                validateResult: {
                  type: "CUSTOME_BEFORE_UPLOAD"
                }
              });
            }

            resolve2({
              file: file
            });
          });
        });
      });
      Promise.all([allFileValidatePromise].concat(promiseList)).then(function (results) {
        var _results = _toArray(results),
            allFilesResult = _results[0],
            others = _results.slice(1);

        if (allFilesResult === false) {
          resolve({
            lengthOverLimit: lengthOverLimit,
            hasSameNameFile: hasSameNameFile,
            validateResult: {
              type: "BEFORE_ALL_FILES_UPLOAD"
            },
            files: formattedFiles
          });
        } else {
          resolve({
            lengthOverLimit: lengthOverLimit,
            hasSameNameFile: hasSameNameFile,
            fileValidateList: others,
            files: formattedFiles
          });
        }
      });
    });
  }
  function getFilesAndErrors(fileValidateList, getError) {
    var sizeLimitErrors = [];
    var toFiles = [];
    fileValidateList.forEach(function (oneFile) {
      var _oneFile$validateResu, _oneFile$validateResu2;

      if (((_oneFile$validateResu = oneFile.validateResult) === null || _oneFile$validateResu === void 0 ? void 0 : _oneFile$validateResu.type) === "CUSTOME_BEFORE_UPLOAD") return;

      if (((_oneFile$validateResu2 = oneFile.validateResult) === null || _oneFile$validateResu2 === void 0 ? void 0 : _oneFile$validateResu2.type) === "FILE_OVER_SIZE_LIMIT") {
        if (!oneFile.file.response) {
          oneFile.file.response = {};
        }

        oneFile.file.response.error = oneFile.file.response.error || getError(oneFile.validateResult.extra);
        sizeLimitErrors.push(oneFile);
        return;
      }

      toFiles.push(oneFile.file);
    });
    return {
      sizeLimitErrors: sizeLimitErrors,
      toFiles: toFiles
    };
  }
  function getTriggerTextField(p) {
    if (p.isBatchUpload && p.status) return "reupload";
    if (p.status === "fail") return "reupload";
    if (p.status === "progress") return "uploading";

    if (p.status === "success" || !p.autoUpload && p.status === "waiting") {
      return p.multiple ? "continueUpload" : "reupload";
    }

    return "fileInput";
  }
  function getDisplayFiles(params) {
    var multiple = params.multiple,
        uploadValue = params.uploadValue,
        toUploadFiles = params.toUploadFiles;
    var waitingUploadFiles = toUploadFiles.filter(function (file) {
      return file.status !== "success";
    });

    if (multiple && !params.isBatchUpload) {
      if (!params.autoUpload) return uploadValue;
      return (waitingUploadFiles.length ? uploadValue.concat(waitingUploadFiles) : uploadValue) || [];
    }

    return (waitingUploadFiles.length ? waitingUploadFiles : uploadValue) || [];
  }

  function ownKeys$U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$U(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useUpload(props) {
    var inputRef = React.useRef();
    var disabled = props.disabled,
        autoUpload = props.autoUpload,
        isBatchUpload = props.isBatchUpload;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useLocaleReceiver = useLocaleReceiver("upload"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        globalLocale = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useControlled = useControlled(props, "files", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        uploadValue = _useControlled2[0],
        setUploadValue = _useControlled2[1];

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        xhrReq = _useState2[0],
        setXhrReq = _useState2[1];

    var _useState3 = React.useState([]),
        _useState4 = _slicedToArray(_useState3, 2),
        toUploadFiles = _useState4[0],
        setToUploadFiles = _useState4[1];

    var _useState5 = React.useState(""),
        _useState6 = _slicedToArray(_useState5, 2),
        sizeOverLimitMessage = _useState6[0],
        setSizeOverLimitMessage = _useState6[1];

    var locale = React.useMemo(function () {
      return merge_1({}, globalLocale, props.locale);
    }, [globalLocale, props.locale]);
    var tipsClasses = "".concat(classPrefix, "-upload__tips ").concat(classPrefix, "-size-s");
    var errorClasses = [tipsClasses].concat("".concat(classPrefix, "-upload__tips-error"));
    var triggerUploadText = React.useMemo(function () {
      var _uploadValue$;

      var field = getTriggerTextField({
        isBatchUpload: props.isBatchUpload,
        multiple: props.multiple,
        status: uploadValue === null || uploadValue === void 0 ? void 0 : (_uploadValue$ = uploadValue[0]) === null || _uploadValue$ === void 0 ? void 0 : _uploadValue$.status,
        autoUpload: props.autoUpload
      });
      return locale.triggerUploadText[field];
    }, [locale.triggerUploadText, uploadValue, props.multiple, props.isBatchUpload, props.autoUpload]);

    var _useState7 = React.useState(false),
        _useState8 = _slicedToArray(_useState7, 2),
        uploading = _useState8[0],
        setUploading = _useState8[1];

    var displayFiles = React.useMemo(function () {
      return getDisplayFiles({
        multiple: props.multiple,
        toUploadFiles: toUploadFiles,
        uploadValue: uploadValue,
        autoUpload: autoUpload,
        isBatchUpload: isBatchUpload
      });
    }, [props.multiple, toUploadFiles, uploadValue, autoUpload, isBatchUpload]);

    var onResponseError = function onResponseError(p) {
      var _props$onOneFileFail;

      if (!p) return;
      var response = p.response,
          event = p.event,
          files = p.files;
      (files === null || files === void 0 ? void 0 : files[0]) && ((_props$onOneFileFail = props.onOneFileFail) === null || _props$onOneFileFail === void 0 ? void 0 : _props$onOneFileFail.call(props, {
        e: event,
        file: files === null || files === void 0 ? void 0 : files[0],
        currentFiles: files,
        failedFiles: files,
        response: response
      }));
    };

    var onResponseProgress = function onResponseProgress(p) {
      var _props$onProgress;

      (_props$onProgress = props.onProgress) === null || _props$onProgress === void 0 ? void 0 : _props$onProgress.call(props, {
        e: p.event,
        file: p.file,
        currentFiles: p.files,
        percent: p.percent,
        type: p.type
      });
    };

    var onResponseSuccess = function onResponseSuccess(p) {
      var _props$onOneFileSucce;

      if (!props.multiple || props.uploadAllFilesInOneRequest) return;
      (_props$onOneFileSucce = props.onOneFileSuccess) === null || _props$onOneFileSucce === void 0 ? void 0 : _props$onOneFileSucce.call(props, {
        e: p.event,
        file: p.files[0],
        response: p.response
      });
      var index = uploadValue.findIndex(function (file) {
        return file.raw === p.files[0].raw;
      });

      if (index > 0) {
        uploadValue.splice(index, 1, p.files[0]);
        setUploadValue(_toConsumableArray(uploadValue), {
          trigger: "status-change"
        });
      }
    };

    function getSizeLimitError(sizeLimitObj) {
      var limit = sizeLimitObj;
      return limit.message ? t(limit.message, {
        sizeLimit: limit.size
      }) : "".concat(t(locale.sizeLimitMessage, {
        sizeLimit: limit.size
      }), " ").concat(limit.unit);
    }

    var handleNonAutoUpload = function handleNonAutoUpload(toFiles) {
      var tmpFiles = props.multiple && !props.isBatchUpload ? uploadValue.concat(toFiles) : toFiles;

      if (["image", "image-flow"].includes(props.theme)) {
        var list = tmpFiles.map(function (file) {
          return new Promise(function (resolve) {
            getFileUrlByFileRaw(file.raw).then(function (url) {
              resolve(_objectSpread$U(_objectSpread$U({}, file), {}, {
                url: url
              }));
            });
          });
        });
        Promise.all(list).then(function (files) {
          setUploadValue(files, {
            trigger: "add",
            index: uploadValue.length,
            file: files[0]
          });
        });
      } else {
        setUploadValue(tmpFiles, {
          trigger: "add",
          index: uploadValue.length,
          file: tmpFiles[0]
        });
      }

      setToUploadFiles([]);
    };

    var onFileChange = function onFileChange(files) {
      var _props$onSelectChange;

      if (props.disabled) return;
      (_props$onSelectChange = props.onSelectChange) === null || _props$onSelectChange === void 0 ? void 0 : _props$onSelectChange.call(props, _toConsumableArray(files), {
        currentSelectedFiles: toUploadFiles
      });
      validateFile({
        uploadValue: uploadValue,
        files: _toConsumableArray(files),
        allowUploadDuplicateFile: props.allowUploadDuplicateFile,
        max: props.max,
        sizeLimit: props.sizeLimit,
        isBatchUpload: props.isBatchUpload,
        autoUpload: props.autoUpload,
        format: props.format,
        beforeUpload: props.beforeUpload,
        beforeAllFilesUpload: props.beforeAllFilesUpload
      }).then(function (args) {
        var _args$validateResult;

        if (((_args$validateResult = args.validateResult) === null || _args$validateResult === void 0 ? void 0 : _args$validateResult.type) === "BEFORE_ALL_FILES_UPLOAD") return;

        if (args.lengthOverLimit) {
          var _props$onValidate;

          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, {
            type: "FILES_OVER_LENGTH_LIMIT",
            files: args.files
          });
        }

        if (args.hasSameNameFile) {
          var _props$onValidate2;

          (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 ? void 0 : _props$onValidate2.call(props, {
            type: "FILTER_FILE_SAME_NAME",
            files: args.files
          });
        }

        if (args.fileValidateList instanceof Array) {
          var _props$onWaitingUploa;

          var _getFilesAndErrors = getFilesAndErrors(args.fileValidateList, getSizeLimitError),
              sizeLimitErrors = _getFilesAndErrors.sizeLimitErrors,
              toFiles = _getFilesAndErrors.toFiles;

          var tmpWaitingFiles = autoUpload ? toFiles : toUploadFiles.concat(toFiles);
          setToUploadFiles(tmpWaitingFiles);
          (_props$onWaitingUploa = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa === void 0 ? void 0 : _props$onWaitingUploa.call(props, {
            files: tmpWaitingFiles,
            trigger: "validate"
          });

          if (sizeLimitErrors[0]) {
            var _props$onValidate3;

            setSizeOverLimitMessage(sizeLimitErrors[0].file.response.error);
            (_props$onValidate3 = props.onValidate) === null || _props$onValidate3 === void 0 ? void 0 : _props$onValidate3.call(props, {
              type: "FILE_OVER_SIZE_LIMIT",
              files: sizeLimitErrors.map(function (t2) {
                return t2.file;
              })
            });
          }

          setSizeOverLimitMessage("");

          if (autoUpload) {
            uploadFiles(toFiles);
          } else {
            handleNonAutoUpload(toFiles);
          }
        }
      });
      inputRef.current.value = null;
    };

    var onNormalFileChange = function onNormalFileChange(e) {
      onFileChange === null || onFileChange === void 0 ? void 0 : onFileChange(e.target.files);
    };

    function onDragFileChange(e) {
      onFileChange === null || onFileChange === void 0 ? void 0 : onFileChange(e.dataTransfer.files);
    }

    var xhrReqList = [];

    function uploadFiles(toFiles) {
      var notUploadedFiles = uploadValue.filter(function (t2) {
        return t2.status !== "success";
      });
      var files = props.autoUpload ? toFiles || toUploadFiles : notUploadedFiles;
      if (!files || !files.length) return;
      setUploading(true);
      upload({
        action: props.action,
        uploadedFiles: uploadValue,
        toUploadFiles: files,
        multiple: props.multiple,
        isBatchUpload: props.isBatchUpload,
        uploadAllFilesInOneRequest: props.uploadAllFilesInOneRequest,
        useMockProgress: props.useMockProgress,
        data: props.data,
        requestMethod: props.requestMethod,
        formatRequest: props.formatRequest,
        formatResponse: props.formatResponse,
        onResponseProgress: onResponseProgress,
        onResponseSuccess: onResponseSuccess,
        onResponseError: onResponseError,
        setXhrObject: function setXhrObject(xhr) {
          var _xhr$files$;

          if ((_xhr$files$ = xhr.files[0]) !== null && _xhr$files$ !== void 0 && _xhr$files$.raw && xhrReqList.find(function (item) {
            return item.files[0].raw === xhr.files[0].raw;
          })) return;
          xhrReqList = xhrReqList.concat(xhr);
          var timer = setTimeout(function () {
            setXhrReq(xhrReqList);
            clearTimeout(timer);
          }, 10);
        }
      }).then(function (_ref) {
        var status = _ref.status,
            data = _ref.data,
            list = _ref.list,
            failedFiles = _ref.failedFiles;
        setUploading(false);

        if (status === "success") {
          var _props$onSuccess;

          if (props.autoUpload) {
            setUploadValue(data.files, {
              e: data.event,
              trigger: "add",
              index: uploadValue.length,
              file: data.files[0]
            });
          }

          (_props$onSuccess = props.onSuccess) === null || _props$onSuccess === void 0 ? void 0 : _props$onSuccess.call(props, {
            fileList: data.files,
            currentFiles: files,
            file: files[0],
            results: list === null || list === void 0 ? void 0 : list.map(function (t2) {
              return t2.data;
            })
          });
          xhrReqList = [];
          setXhrReq([]);
        } else if (failedFiles !== null && failedFiles !== void 0 && failedFiles[0]) {
          var _props$onFail;

          (_props$onFail = props.onFail) === null || _props$onFail === void 0 ? void 0 : _props$onFail.call(props, {
            e: data.event,
            file: failedFiles[0],
            failedFiles: failedFiles,
            currentFiles: files,
            response: data.response
          });
        }

        if (props.autoUpload) {
          var _props$onWaitingUploa2;

          setToUploadFiles(failedFiles);
          (_props$onWaitingUploa2 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa2 === void 0 ? void 0 : _props$onWaitingUploa2.call(props, {
            files: failedFiles,
            trigger: "uploaded"
          });
        }
      }, function (p) {
        onResponseError(p);
        setUploading(false);
      });
    }

    function onRemove(p) {
      var _props$onRemove2;

      setSizeOverLimitMessage("");
      var changePrams = {
        e: p.e,
        trigger: "remove",
        index: p.index,
        file: p.file
      };

      if (!p.file && p.index === -1) {
        var _props$onWaitingUploa3, _props$onRemove;

        setToUploadFiles([]);
        (_props$onWaitingUploa3 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa3 === void 0 ? void 0 : _props$onWaitingUploa3.call(props, {
          files: [],
          trigger: "remove"
        });
        setUploadValue([], changePrams);
        (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 ? void 0 : _props$onRemove.call(props, p);
        return;
      }

      if (autoUpload && p.file.status !== "success") {
        var _props$onWaitingUploa4;

        toUploadFiles.splice(p.index, 1);
        setToUploadFiles(_toConsumableArray(toUploadFiles));
        (_props$onWaitingUploa4 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa4 === void 0 ? void 0 : _props$onWaitingUploa4.call(props, {
          files: _toConsumableArray(toUploadFiles),
          trigger: "remove"
        });

        if (p.file.raw || p.file.name) {
          var fileIndex = uploadValue.findIndex(function (file) {
            return file.raw && file.raw === p.file.raw || file.name && file.name === p.file.name;
          });

          if (fileIndex !== -1) {
            uploadValue.splice(fileIndex, 1);
            setUploadValue(_toConsumableArray(uploadValue), changePrams);
          }
        }
      } else {
        uploadValue.splice(p.index, 1);
        setUploadValue(_toConsumableArray(uploadValue), changePrams);
      }

      (_props$onRemove2 = props.onRemove) === null || _props$onRemove2 === void 0 ? void 0 : _props$onRemove2.call(props, p);
    }

    var triggerUpload = function triggerUpload() {
      if (disabled) return;
      inputRef.current.click();
    };

    var cancelUpload = function cancelUpload(context) {
      xhrReq === null || xhrReq === void 0 ? void 0 : xhrReq.forEach(function (item) {
        var _item$xhrReq;

        (_item$xhrReq = item.xhrReq) === null || _item$xhrReq === void 0 ? void 0 : _item$xhrReq.abort();
      });
      setUploading(false);

      if (props.autoUpload) {
        setToUploadFiles(toUploadFiles.map(function (item) {
          return _objectSpread$U(_objectSpread$U({}, item), {}, {
            status: "waiting"
          });
        }));
      } else {
        setUploadValue(uploadValue.map(function (item) {
          if (item.status !== "success") {
            return _objectSpread$U(_objectSpread$U({}, item), {}, {
              status: "waiting"
            });
          }

          return item;
        }), {
          trigger: "abort"
        });
      }

      if (context !== null && context !== void 0 && context.file) {
        onRemove === null || onRemove === void 0 ? void 0 : onRemove({
          file: context.file,
          e: context.e,
          index: 0
        });
      }
    };

    return {
      t: t,
      locale: locale,
      classPrefix: classPrefix,
      triggerUploadText: triggerUploadText,
      toUploadFiles: toUploadFiles,
      uploadValue: uploadValue,
      displayFiles: displayFiles,
      sizeOverLimitMessage: sizeOverLimitMessage,
      uploading: uploading,
      tipsClasses: tipsClasses,
      errorClasses: errorClasses,
      inputRef: inputRef,
      disabled: disabled,
      xhrReq: xhrReq,
      uploadFiles: uploadFiles,
      onFileChange: onFileChange,
      onNormalFileChange: onNormalFileChange,
      onDragFileChange: onDragFileChange,
      onRemove: onRemove,
      triggerUpload: triggerUpload,
      cancelUpload: cancelUpload
    };
  }

  var uploadDefaultProps = {
    allowUploadDuplicateFile: false,
    autoUpload: true,
    disabled: false,
    draggable: void 0,
    defaultFiles: [],
    isBatchUpload: false,
    max: 0,
    method: "POST",
    multiple: false,
    name: "file",
    showUploadProgress: true,
    theme: "file",
    uploadAllFilesInOneRequest: false,
    useMockProgress: true,
    withCredentials: false
  };

  function ownKeys$T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$T(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var CustomFile = function CustomFile(props) {
    var classPrefix = props.classPrefix,
        displayFiles = props.displayFiles;
    var drag = useDrag$2(props.dragEvents);
    var dragActive = drag.dragActive;
    var dragEvents = props.draggable ? {
      onDrop: drag.handleDrop,
      onDragEnter: drag.handleDragenter,
      onDragOver: drag.handleDragover,
      onDragLeave: drag.handleDragleave
    } : {};

    var renderDragContent = function renderDragContent() {
      var _props$dragContent, _props$trigger;

      return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$T(_objectSpread$T({
        className: "".concat(classPrefix, "-upload__dragger ").concat(classPrefix, "-upload__dragger-center")
      }, dragEvents), {}, {
        onClick: props.triggerUpload
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__trigger")
      }, ((_props$dragContent = props.dragContent) === null || _props$dragContent === void 0 ? void 0 : _props$dragContent.call(props, {
        dragActive: dragActive,
        files: displayFiles
      })) || ((_props$trigger = props.trigger) === null || _props$trigger === void 0 ? void 0 : _props$trigger.call(props, {
        dragActive: dragActive,
        files: displayFiles
      })) || props.childrenNode));
    };

    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, props.draggable ? renderDragContent() : /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload__trigger"),
      onClick: props.triggerUpload
    }, props.childrenNode || props.children), props.tips && /* @__PURE__ */React__default["default"].createElement("small", {
      className: classNames$1(props.tipsClasses)
    }, props.tips));
  };

  CustomFile.displayName = "CustomFile";

  function ownKeys$S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$S(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Upload$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var theme = props.theme;

    var _useUpload = useUpload(props),
        locale = _useUpload.locale,
        classPrefix = _useUpload.classPrefix,
        triggerUploadText = _useUpload.triggerUploadText,
        toUploadFiles = _useUpload.toUploadFiles,
        displayFiles = _useUpload.displayFiles,
        uploadValue = _useUpload.uploadValue,
        sizeOverLimitMessage = _useUpload.sizeOverLimitMessage,
        uploading = _useUpload.uploading,
        tipsClasses = _useUpload.tipsClasses,
        errorClasses = _useUpload.errorClasses,
        inputRef = _useUpload.inputRef,
        disabled = _useUpload.disabled,
        onRemove = _useUpload.onRemove,
        uploadFiles = _useUpload.uploadFiles,
        onNormalFileChange = _useUpload.onNormalFileChange,
        onDragFileChange = _useUpload.onDragFileChange,
        triggerUpload = _useUpload.triggerUpload,
        cancelUpload = _useUpload.cancelUpload;

    React__default["default"].useImperativeHandle(ref, function () {
      return {
        upload: inputRef.current,
        uploading: uploading,
        triggerUpload: triggerUpload,
        uploadFiles: uploadFiles
      };
    });

    var renderTrigger = function renderTrigger() {
      var getDefaultTrigger = function getDefaultTrigger() {
        if (theme === "file-input") {
          return /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$S({
            disabled: props.disabled,
            variant: "outline"
          }, props.triggerButtonProps), triggerUploadText);
        }

        return /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$S({
          disabled: props.disabled,
          variant: "outline",
          icon: /* @__PURE__ */React__default["default"].createElement(UploadIcon, null)
        }, props.triggerButtonProps), triggerUploadText);
      };

      return props.trigger || props.children || getDefaultTrigger();
    };

    var triggerElement = renderTrigger();
    var commonDisplayFileProps = {
      files: uploadValue,
      toUploadFiles: toUploadFiles,
      displayFiles: displayFiles,
      theme: theme,
      placeholder: props.placeholder,
      disabled: props.disabled,
      tips: props.tips,
      sizeOverLimitMessage: sizeOverLimitMessage,
      uploading: uploading,
      classPrefix: classPrefix,
      tipsClasses: tipsClasses,
      errorClasses: errorClasses,
      locale: locale,
      autoUpload: props.autoUpload,
      fileListDisplay: props.fileListDisplay,
      onRemove: onRemove
    };
    var dragProps = {
      onDragFileChange: onDragFileChange,
      onDragenter: props.onDragenter,
      onDragleave: props.onDragleave,
      onDrop: props.onDrop
    };

    var getNormalFileNode = function getNormalFileNode() {
      return /* @__PURE__ */React__default["default"].createElement(NormalFile, _objectSpread$S(_objectSpread$S({}, commonDisplayFileProps), {}, {
        multiple: props.multiple
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__trigger"),
        onClick: triggerUpload
      }, triggerElement));
    };

    var getSingleFileDraggerUploadNode = function getSingleFileDraggerUploadNode() {
      return /* @__PURE__ */React__default["default"].createElement(DraggerFile, _objectSpread$S(_objectSpread$S({}, commonDisplayFileProps), {}, {
        dragEvents: dragProps,
        trigger: props.trigger,
        cancelUpload: cancelUpload,
        triggerUpload: triggerUpload,
        uploadFiles: uploadFiles
      }));
    };

    var getImageCardUploadNode = function getImageCardUploadNode() {
      return /* @__PURE__ */React__default["default"].createElement(ImageCard, _objectSpread$S(_objectSpread$S({}, commonDisplayFileProps), {}, {
        multiple: props.multiple,
        max: props.max,
        showUploadProgress: props.showUploadProgress,
        triggerUpload: triggerUpload,
        uploadFiles: uploadFiles,
        cancelUpload: cancelUpload,
        onPreview: props.onPreview
      }));
    };

    var getFlowListNode = function getFlowListNode() {
      return /* @__PURE__ */React__default["default"].createElement(ImageFlowList, _objectSpread$S(_objectSpread$S({}, commonDisplayFileProps), {}, {
        isBatchUpload: props.isBatchUpload,
        draggable: props.draggable,
        dragEvents: dragProps,
        uploadFiles: uploadFiles,
        cancelUpload: cancelUpload,
        onPreview: props.onPreview
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__trigger"),
        onClick: triggerUpload
      }, triggerElement));
    };

    var getCustomFile = function getCustomFile() {
      return /* @__PURE__ */React__default["default"].createElement(CustomFile, _objectSpread$S(_objectSpread$S({}, commonDisplayFileProps), {}, {
        draggable: props.draggable,
        dragContent: props.dragContent,
        dragEvents: dragProps,
        triggerUpload: triggerUpload,
        childrenNode: props.children,
        trigger: props.trigger
      }), triggerElement);
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1([props.className, "".concat(classPrefix, "-upload")]),
      style: props.style
    }, /* @__PURE__ */React__default["default"].createElement("input", {
      ref: inputRef,
      type: "file",
      disabled: disabled,
      onChange: onNormalFileChange,
      multiple: props.multiple,
      accept: props.accept,
      hidden: true
    }), ["file", "file-input"].includes(theme) && !props.draggable && getNormalFileNode(), ["file", "image"].includes(theme) && props.draggable && getSingleFileDraggerUploadNode(), theme === "image" && !props.draggable && getImageCardUploadNode(), ["image-flow", "file-flow"].includes(theme) && getFlowListNode(), theme === "custom" && getCustomFile());
  });
  Upload$1.displayName = "Upload";
  Upload$1.defaultProps = uploadDefaultProps;

  var rangeInputDefaultProps = {
    clearable: false,
    readonly: false,
    separator: "-",
    showClearIconOnEmpty: false,
    size: "medium",
    defaultValue: []
  };

  var _excluded$a = ["className", "style", "activeIndex", "disabled", "format", "inputProps", "label", "placeholder", "readonly", "separator", "status", "size", "tips", "suffix", "prefixIcon", "suffixIcon", "clearable", "showClearIconOnEmpty", "onClick", "onEnter", "onClear", "onFocus", "onBlur", "onMouseenter", "onMouseleave", "onChange"];

  function ownKeys$R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$R(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function calcArrayValue(value) {
    if (Array.isArray(value)) {
      return value;
    }

    return [value, value];
  }

  var renderIcon = function renderIcon(classPrefix, type, icon) {
    var result = null;
    if (icon) result = icon;
    if (typeof icon === "function") result = icon();
    var iconClassName = icon ? "".concat(classPrefix, "-range-input__").concat(type, "-icon") : "";

    if (result) {
      result = /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-range-input__").concat(type, " ").concat(iconClassName)
      }, result);
    }

    return result;
  };

  var RangeInput$1 = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var _classNames;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      CloseCircleFilledIcon: CloseCircleFilledIcon
    }),
        CloseCircleFilledIcon$1 = _useGlobalIcon.CloseCircleFilledIcon;

    var className = props.className,
        style = props.style,
        activeIndex = props.activeIndex,
        disabled = props.disabled,
        format = props.format,
        inputProps = props.inputProps,
        label = props.label,
        placeholder = props.placeholder,
        readonly = props.readonly,
        separator = props.separator,
        status = props.status,
        size = props.size,
        tips = props.tips,
        suffix = props.suffix,
        prefixIcon = props.prefixIcon,
        suffixIcon = props.suffixIcon,
        clearable = props.clearable,
        showClearIconOnEmpty = props.showClearIconOnEmpty,
        _onClick = props.onClick,
        onEnter = props.onEnter,
        onClear = props.onClear,
        onFocus = props.onFocus,
        onBlur = props.onBlur,
        onMouseenter = props.onMouseenter,
        onMouseleave = props.onMouseleave,
        onChangeFromProps = props.onChange,
        restProps = _objectWithoutProperties$2(props, _excluded$a);

    var name = "".concat(classPrefix, "-range-input");
    var wrapperRef = React.useRef();
    var inputRefs = {
      firstInputRef: React.useRef(),
      secondInputRef: React.useRef()
    };

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isFocused = _useState2[0],
        toggleIsFocused = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isHover = _useState4[0],
        toggleIsHover = _useState4[1];

    var _calcArrayValue = calcArrayValue(format),
        _calcArrayValue2 = _slicedToArray(_calcArrayValue, 2),
        firstFormat = _calcArrayValue2[0],
        secondFormat = _calcArrayValue2[1];

    var _calcArrayValue3 = calcArrayValue(placeholder),
        _calcArrayValue4 = _slicedToArray(_calcArrayValue3, 2),
        _calcArrayValue4$ = _calcArrayValue4[0],
        firstPlaceholder = _calcArrayValue4$ === void 0 ? "\u8BF7\u8F93\u5165\u5185\u5BB9" : _calcArrayValue4$,
        _calcArrayValue4$2 = _calcArrayValue4[1],
        secondPlaceholder = _calcArrayValue4$2 === void 0 ? "\u8BF7\u8F93\u5165\u5185\u5BB9" : _calcArrayValue4$2;

    var _calcArrayValue5 = calcArrayValue(inputProps),
        _calcArrayValue6 = _slicedToArray(_calcArrayValue5, 2),
        firstInputProps = _calcArrayValue6[0],
        secondInputProps = _calcArrayValue6[1];

    var _useControlled = useControlled(props, "value", onChangeFromProps),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        _onChange = _useControlled2[1];

    var _ref = value || [],
        _ref2 = _slicedToArray(_ref, 2),
        firstValue = _ref2[0],
        secondValue = _ref2[1];

    var isShowClearIcon = (clearable && (value === null || value === void 0 ? void 0 : value.length) && !disabled || showClearIconOnEmpty) && isHover;
    var suffixIconNew = suffixIcon;

    if (isShowClearIcon) {
      suffixIconNew = /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon$1, {
        className: "".concat(name, "__suffix-clear"),
        onClick: handleClear
      });
    }

    var labelContent = isFunction_1(label) ? label() : label;
    var prefixIconContent = renderIcon(classPrefix, "prefix", prefixIcon);
    var suffixContent = isFunction_1(suffix) ? suffix() : suffix;
    var suffixIconContent = renderIcon(classPrefix, "suffix", suffixIconNew);

    function handleClear(e) {
      onClear === null || onClear === void 0 ? void 0 : onClear({
        e: e
      });
      _onChange === null || _onChange === void 0 ? void 0 : _onChange(["", ""], {
        e: e,
        trigger: "clear",
        position: "all"
      });
    }

    function handleEnter(rangeValue, context) {
      onEnter === null || onEnter === void 0 ? void 0 : onEnter(rangeValue, context);
    }

    function handleFocus(rangeValue, context) {
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(rangeValue, context);
      toggleIsFocused(true);
    }

    function handleBlur(rangeValue, context) {
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(rangeValue, context);
      toggleIsFocused(false);
    }

    function handleMouseEnter(e) {
      var _props$onMouseEnter;

      toggleIsHover(true);
      onMouseenter === null || onMouseenter === void 0 ? void 0 : onMouseenter({
        e: e
      });
      (_props$onMouseEnter = props.onMouseEnter) === null || _props$onMouseEnter === void 0 ? void 0 : _props$onMouseEnter.call(props, {
        e: e
      });
    }

    function handleMouseLeave(e) {
      var _props$onMouseLeave;

      toggleIsHover(false);
      onMouseleave === null || onMouseleave === void 0 ? void 0 : onMouseleave({
        e: e
      });
      (_props$onMouseLeave = props.onMouseLeave) === null || _props$onMouseLeave === void 0 ? void 0 : _props$onMouseLeave.call(props, {
        e: e
      });
    }

    React.useImperativeHandle(ref, function () {
      return {
        currentElement: wrapperRef.current,
        firstInputElement: inputRefs.firstInputRef.current,
        secondInputElement: inputRefs.secondInputRef.current,
        focus: function focus(options) {
          var _inputRefs$current;

          var _ref3 = options || {},
              _ref3$position = _ref3.position,
              position = _ref3$position === void 0 ? "first" : _ref3$position;

          (_inputRefs$current = inputRefs["".concat(position, "InputRef")].current) === null || _inputRefs$current === void 0 ? void 0 : _inputRefs$current.focus();
        },
        blur: function blur(options) {
          var _inputRefs$current2;

          var _ref4 = options || {},
              _ref4$position = _ref4.position,
              position = _ref4$position === void 0 ? "first" : _ref4$position;

          (_inputRefs$current2 = inputRefs["".concat(position, "InputRef")].current) === null || _inputRefs$current2 === void 0 ? void 0 : _inputRefs$current2.blur();
        },
        select: function select(options) {
          var _inputRefs$current3;

          var _ref5 = options || {},
              _ref5$position = _ref5.position,
              position = _ref5$position === void 0 ? "first" : _ref5$position;

          (_inputRefs$current3 = inputRefs["".concat(position, "InputRef")].current) === null || _inputRefs$current3 === void 0 ? void 0 : _inputRefs$current3.select();
        }
      };
    });
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$R(_objectSpread$R({
      ref: wrapperRef,
      style: style,
      className: classNames$1(name, className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-focused"), isFocused), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-").concat(status), status), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty$3(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$3(_classNames, "".concat(name, "--prefix"), prefixIconContent || labelContent), _defineProperty$3(_classNames, "".concat(name, "--suffix"), suffixContent || suffixIconContent), _classNames))
    }, restProps), {}, {
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__inner")
    }, prefixIconContent, labelContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-input__prefix")
    }, labelContent) : null, /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$R({
      ref: inputRefs.firstInputRef,
      className: "".concat(name, "__inner-left"),
      inputClass: classNames$1(_defineProperty$3({}, "".concat(classPrefix, "-is-focused"), activeIndex === 0)),
      placeholder: firstPlaceholder,
      disabled: disabled,
      readonly: readonly,
      format: firstFormat,
      value: firstValue,
      onClick: function onClick(_ref6) {
        var e = _ref6.e;
        return _onClick === null || _onClick === void 0 ? void 0 : _onClick({
          e: e,
          position: "first"
        });
      },
      onClear: function onClear() {
        return _onChange === null || _onChange === void 0 ? void 0 : _onChange([], {
          position: "first",
          trigger: "input"
        });
      },
      onEnter: function onEnter(val, _ref7) {
        var e = _ref7.e;
        return handleEnter([val, secondValue], {
          e: e,
          position: "first"
        });
      },
      onFocus: function onFocus(val, _ref8) {
        var e = _ref8.e;
        return handleFocus([val, secondValue], {
          e: e,
          position: "first"
        });
      },
      onBlur: function onBlur(val, _ref9) {
        var e = _ref9.e;
        return handleBlur([val, secondValue], {
          e: e,
          position: "first"
        });
      },
      onChange: function onChange(val, _ref10) {
        var e = _ref10.e;
        return _onChange === null || _onChange === void 0 ? void 0 : _onChange([val, secondValue], {
          e: e,
          position: "first",
          trigger: "input"
        });
      }
    }, firstInputProps)), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__inner-separator")
    }, separator), /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$R({
      ref: inputRefs.secondInputRef,
      className: "".concat(name, "__inner-right"),
      inputClass: classNames$1(_defineProperty$3({}, "".concat(classPrefix, "-is-focused"), activeIndex === 1)),
      placeholder: secondPlaceholder,
      disabled: disabled,
      readonly: readonly,
      format: secondFormat,
      value: secondValue,
      onClick: function onClick(_ref11) {
        var e = _ref11.e;
        return _onClick === null || _onClick === void 0 ? void 0 : _onClick({
          e: e,
          position: "second"
        });
      },
      onClear: function onClear() {
        return _onChange === null || _onChange === void 0 ? void 0 : _onChange([], {
          position: "second",
          trigger: "input"
        });
      },
      onEnter: function onEnter(val, _ref12) {
        var e = _ref12.e;
        return handleEnter([firstValue, val], {
          e: e,
          position: "second"
        });
      },
      onFocus: function onFocus(val, _ref13) {
        var e = _ref13.e;
        return handleFocus([firstValue, val], {
          e: e,
          position: "second"
        });
      },
      onBlur: function onBlur(val, _ref14) {
        var e = _ref14.e;
        return handleBlur([firstValue, val], {
          e: e,
          position: "second"
        });
      },
      onChange: function onChange(val, _ref15) {
        var e = _ref15.e;
        return _onChange === null || _onChange === void 0 ? void 0 : _onChange([firstValue, val], {
          e: e,
          position: "second",
          trigger: "input"
        });
      }
    }, secondInputProps)), suffixContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__suffix")
    }, suffixContent) : null, suffixIconContent), tips && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__tips")
    }, tips));
  });
  RangeInput$1.displayName = "RangeInput";
  RangeInput$1.defaultProps = rangeInputDefaultProps;

  function ownKeys$Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var getDefaultValue = function getDefaultValue(value, defaultValue) {
    if (isEmpty_1(value)) {
      return Array.isArray(defaultValue) ? defaultValue : [defaultValue, defaultValue];
    }

    if (Array.isArray(value)) return value;
    return [defaultValue, defaultValue];
  };
  var getJSX = function getJSX(value) {
    if (isString_1(value)) return value;
    if (isFunction_1(value)) return value();
    if ( /*#__PURE__*/React__default["default"].isValidElement(value)) return value;
    return value;
  };
  var getLeafNodes = function getLeafNodes(nodes) {
    var resData = [];

    var map = function map(nodes2) {
      nodes2.forEach(function (child) {
        if (child.children && child.children.length > 0) {
          return map(child.children);
        }

        resData.push(child);
      });
    };

    map(nodes);
    return resData;
  };
  var filterCheckedTreeNodes = function filterCheckedTreeNodes(nodes, checkeds) {
    return nodes.filter(function (item) {
      return !checkeds.includes(item.value);
    }).map(function (item) {
      var newItem = _objectSpread$Q({}, item);

      if (item.children && item.children.length > 0) {
        newItem.children = filterCheckedTreeNodes(item.children, checkeds);
      }

      return newItem;
    }).filter(function (item) {
      return item.children && item.children.length !== 0 || !item.children;
    });
  };
  var getTargetNodes = function getTargetNodes(sourceNodes, data) {
    var source = getLeafNodes(sourceNodes).map(function (item) {
      return item.value;
    });
    return filterCheckedTreeNodes(data, source);
  };

  var TransferList = function TransferList(props) {
    var className = props.className,
        style = props.style,
        data = props.data,
        _props$search = props.search,
        search = _props$search === void 0 ? false : _props$search,
        _props$checked = props.checked,
        checked = _props$checked === void 0 ? [] : _props$checked,
        empty = props.empty,
        title = props.title,
        footer = props.footer,
        content = props.content,
        onCheckbox = props.onCheckbox,
        onSearch = props.onSearch,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        pagination = props.pagination,
        transferItem = props.transferItem,
        treeNode = props.tree,
        showCheckAll = props.showCheckAll;
    var notDisabledData = !treeNode ? data.filter(function (item) {
      return !item.disabled;
    }) : getLeafNodes(data).filter(function (item) {
      return !item.disabled;
    });

    var _useState = React.useState(1),
        _useState2 = _slicedToArray(_useState, 2),
        currentPage = _useState2[0],
        setCurrentPage = _useState2[1];

    var _useMemo = React.useMemo(function () {
      var activeLen = checked.length;
      var notLen = notDisabledData.length;
      return [activeLen && activeLen < notLen, activeLen && activeLen === notLen];
    }, [checked, notDisabledData]),
        _useMemo2 = _slicedToArray(_useMemo, 2),
        indeterminate = _useMemo2[0],
        allChecked = _useMemo2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      SearchIcon: SearchIcon
    }),
        SearchIcon$1 = _useGlobalIcon.SearchIcon;

    var CLASSPREFIX = "".concat(classPrefix, "-transfer__list");

    var _useLocaleReceiver = useLocaleReceiver("transfer"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var handleCheckbox = function handleCheckbox(vals) {
      if (isFunction_1(onCheckbox)) onCheckbox(vals);
    };

    var handleAllCheckbox = function handleAllCheckbox(checked2) {
      if (isFunction_1(onCheckbox)) onCheckbox(checked2 ? notDisabledData.map(function (item) {
        return item.value;
      }) : []);
    };

    var HeaderCmp = function HeaderCmp() {
      var total = treeNode ? getLeafNodes(data).length : data.length;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(CLASSPREFIX, "-header")
      }, /* @__PURE__ */React__default["default"].createElement("div", null, showCheckAll ? /* @__PURE__ */React__default["default"].createElement(Checkbox, {
        indeterminate: indeterminate,
        checked: allChecked,
        disabled: disabled,
        onChange: handleAllCheckbox
      }) : null, /* @__PURE__ */React__default["default"].createElement("span", null, t(local.title, {
        checked: checked.length,
        total: total
      }))), /* @__PURE__ */React__default["default"].createElement("span", null, title));
    };

    var SearchCmp = function SearchCmp() {
      return search ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-transfer__search-wrapper")
      }, /* @__PURE__ */React__default["default"].createElement(Input, {
        placeholder: local.placeholder,
        suffixIcon: /* @__PURE__ */React__default["default"].createElement(SearchIcon$1, null),
        onChange: onSearch
      })) : null;
    };

    var viewData = React.useMemo(function () {
      if (!isEmpty_1(pagination)) {
        var pageSize = pagination.pageSize || 10;
        var start = (currentPage - 1) * pageSize;
        return data.slice(start, start + pageSize);
      }

      return data;
    }, [currentPage, data, pagination]);

    var EmptyCmp = function EmptyCmp() {
      return isString_1(empty) ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-transfer__empty")
      }, /* @__PURE__ */React__default["default"].createElement("span", null, empty || "\u6682\u65E0\u6570\u636E")) : empty;
    };

    var contentCmp = function contentCmp() {
      if (typeof treeNode === "function") {
        return treeNode({
          data: viewData,
          value: checked,
          onChange: handleCheckbox
        });
      }

      if (typeof content === "function") {
        return content({
          data: viewData
        });
      }

      return /* @__PURE__ */React__default["default"].createElement(Checkbox.Group, {
        value: checked,
        onChange: handleCheckbox,
        disabled: disabled
      }, viewData.map(function (item, index) {
        return /* @__PURE__ */React__default["default"].createElement(Checkbox, {
          key: item.value,
          value: item.value,
          disabled: item.disabled,
          className: "".concat(CLASSPREFIX, "-item")
        }, /* @__PURE__ */React__default["default"].createElement("span", null, typeof transferItem === "function" ? transferItem({
          data: item,
          index: index,
          type: "source"
        }) : item.label));
      }));
    };

    var BodyCmp = function BodyCmp() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(CLASSPREFIX, "-body"), _defineProperty$3({}, "".concat(CLASSPREFIX, "--with-search"), search))
      }, SearchCmp(), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(CLASSPREFIX, "-content narrow-scrollbar")
      }, viewData.length ? contentCmp() : EmptyCmp()));
    };

    var PaginationCmp = function PaginationCmp() {
      var handleCurrentPagination = function handleCurrentPagination(current) {
        setCurrentPage(current);

        if (isFunction_1(pagination.onPageChange)) {
          pagination.onPageChange(current);
        }
      };

      return pagination ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(CLASSPREFIX, "-pagination")
      }, /* @__PURE__ */React__default["default"].createElement(Pagination, {
        size: "small",
        theme: "simple",
        pageSizeOptions: [],
        total: data.length,
        totalContent: false,
        onCurrentChange: handleCurrentPagination,
        pageSize: pagination.pageSize
      })) : null;
    };

    var footerCmp = function footerCmp() {
      return !isEmpty_1(footer) ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-transfer__footer")
      }, footer) : null;
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: style,
      className: classNames$1(CLASSPREFIX, className)
    }, HeaderCmp(), BodyCmp(), PaginationCmp(), footerCmp());
  };

  var transferDefaultProps = {
    defaultChecked: [],
    data: [],
    direction: "both",
    search: false,
    showCheckAll: true,
    targetSort: "original",
    title: [],
    defaultValue: []
  };

  function ownKeys$P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$P(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Transfer$1 = function Transfer(props) {
    var _classnames;

    var data = props.data,
        search = props.search,
        checked = props.checked,
        defaultChecked = props.defaultChecked,
        onCheckedChange = props.onCheckedChange,
        value = props.value,
        defaultValue = props.defaultValue,
        onChange = props.onChange,
        empty = props.empty,
        disabled = props.disabled,
        pagination = props.pagination,
        title = props.title,
        operation = props.operation,
        footer = props.footer,
        transferItem = props.transferItem,
        content = props.content,
        tree = props.tree,
        showCheckAll = props.showCheckAll;

    var _useState = React.useState(function () {
      return {
        source: data.filter(function (item) {
          return !defaultValue.includes(item.value);
        }),
        target: data.filter(function (item) {
          return defaultValue.includes(item.value);
        })
      };
    }),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

    var _useState3 = React.useState(function () {
      return {
        source: state.source.filter(function (item) {
          return !item.disabled && defaultChecked.includes(item.value);
        }).map(function (item) {
          return item.value;
        }),
        target: state.target.filter(function (item) {
          return !item.disabled && defaultChecked.includes(item.value);
        }).map(function (item) {
          return item.value;
        })
      };
    }),
        _useState4 = _slicedToArray(_useState3, 2),
        checkeds = _useState4[0],
        setCheckeds = _useState4[1];

    var _useState5 = React.useState({
      source: "",
      target: ""
    }),
        _useState6 = _slicedToArray(_useState5, 2),
        searchState = _useState6[0],
        setSearchState = _useState6[1];

    var isTargetControlled = ("value" in props);
    var isCheckedControlled = ("checked" in props);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      ChevronLeftIcon: ChevronLeftIcon,
      ChevronRightIcon: ChevronRightIcon
    }),
        ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon,
        ChevronLeftIcon$1 = _useGlobalIcon.ChevronLeftIcon;

    var transferClassName = "".concat(classPrefix, "-transfer");

    var _useLocaleReceiver = useLocaleReceiver("transfer"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useMemo = React.useMemo(function () {
      var source = state.source,
          target = state.target;
      var searchSource = searchState.source,
          searchTarget = searchState.target;
      return [source.filter(function (item) {
        return !searchSource || item.label.indexOf(searchState.source) > -1;
      }), target.filter(function (item) {
        return !searchTarget || item.label.indexOf(searchState.target) > -1;
      })];
    }, [searchState, state]),
        _useMemo2 = _slicedToArray(_useMemo, 2),
        sourceData = _useMemo2[0],
        targetData = _useMemo2[1];

    var _getDefaultValue$map = getDefaultValue(empty, t(local.empty)).map(function (item) {
      return getJSX(item);
    }),
        _getDefaultValue$map2 = _slicedToArray(_getDefaultValue$map, 2),
        SourceEmptyCmp = _getDefaultValue$map2[0],
        TargetEmptyCmp = _getDefaultValue$map2[1];

    var _getDefaultValue = getDefaultValue(disabled, false),
        _getDefaultValue2 = _slicedToArray(_getDefaultValue, 2),
        sourceDisable = _getDefaultValue2[0],
        targetDisable = _getDefaultValue2[1];

    var _getDefaultValue3 = getDefaultValue(pagination),
        _getDefaultValue4 = _slicedToArray(_getDefaultValue3, 2),
        sourcePagonation = _getDefaultValue4[0],
        targetPagonation = _getDefaultValue4[1];

    var _getDefaultValue$map3 = getDefaultValue(title).map(function (item) {
      return getJSX(item);
    }),
        _getDefaultValue$map4 = _slicedToArray(_getDefaultValue$map3, 2),
        sourceTitle = _getDefaultValue$map4[0],
        targetTitle = _getDefaultValue$map4[1];

    var _getDefaultValue$map5 = getDefaultValue(operation, [function () {
      return /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon$1, null);
    }, function () {
      return /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon$1, null);
    }]).map(function (item) {
      return getJSX(item);
    }),
        _getDefaultValue$map6 = _slicedToArray(_getDefaultValue$map5, 2),
        leftOperation = _getDefaultValue$map6[0],
        rightOperation = _getDefaultValue$map6[1];

    var _getDefaultValue$map7 = getDefaultValue(footer).map(function (item) {
      return getJSX(item);
    }),
        _getDefaultValue$map8 = _slicedToArray(_getDefaultValue$map7, 2),
        sourceFooter = _getDefaultValue$map8[0],
        targetFooter = _getDefaultValue$map8[1];

    var _getDefaultValue5 = getDefaultValue(transferItem),
        _getDefaultValue6 = _slicedToArray(_getDefaultValue5, 2),
        sourceTransferItem = _getDefaultValue6[0],
        targetTransferItem = _getDefaultValue6[1];

    var _getDefaultValue7 = getDefaultValue(content),
        _getDefaultValue8 = _slicedToArray(_getDefaultValue7, 2),
        sourceContent = _getDefaultValue8[0],
        targetContent = _getDefaultValue8[1];

    var _useMemo3 = React.useMemo(function () {
      var _showCheckAll$, _showCheckAll$2;

      return Array.isArray(showCheckAll) ? [(_showCheckAll$ = showCheckAll[0]) !== null && _showCheckAll$ !== void 0 ? _showCheckAll$ : true, (_showCheckAll$2 = showCheckAll[1]) !== null && _showCheckAll$2 !== void 0 ? _showCheckAll$2 : true] : [showCheckAll, showCheckAll];
    }, [showCheckAll]),
        _useMemo4 = _slicedToArray(_useMemo3, 2),
        showCheckAllSource = _useMemo4[0],
        showCheckAllTarget = _useMemo4[1];

    var transformSource = function transformSource() {
      var source = state.source,
          target = state.target;
      var sourceCheckeds = source.filter(function (item) {
        return checkeds.source.includes(item.value);
      });
      var newSource = difference_1(source, sourceCheckeds);
      var newTarget = [].concat(_toConsumableArray(target), _toConsumableArray(sourceCheckeds));
      var newTargetValue = newTarget.map(function (t2) {
        return t2.value;
      });

      if (tree) {
        newSource = filterCheckedTreeNodes(source, checkeds.source);
        newTarget = getTargetNodes(newSource, data);
        newTargetValue = getLeafNodes(newTarget).map(function (t2) {
          return t2.value;
        });
      }

      if (isTargetControlled) {
        onChange === null || onChange === void 0 ? void 0 : onChange(newTargetValue, {
          type: "source",
          movedValue: sourceCheckeds.map(function (s) {
            return s.value;
          })
        });
      } else {
        setState(_objectSpread$P(_objectSpread$P({}, state), {}, {
          source: newSource,
          target: _toConsumableArray(newTarget)
        }));
        setCheckeds(_objectSpread$P(_objectSpread$P({}, checkeds), {}, {
          source: []
        }));
      }
    };

    var transformTarget = function transformTarget() {
      var source = state.source,
          target = state.target;
      var targetCheckeds = target.filter(function (item) {
        return checkeds.target.includes(item.value);
      });
      var newSource = [].concat(_toConsumableArray(source), _toConsumableArray(targetCheckeds));
      var newTarget = difference_1(target, targetCheckeds);
      var newTargetValue = newTarget.map(function (t2) {
        return t2.value;
      });

      if (tree) {
        newTarget = filterCheckedTreeNodes(target, checkeds.target);
        newSource = getTargetNodes(newTarget, data);
        newTargetValue = getLeafNodes(newTarget).map(function (t2) {
          return t2.value;
        });
      }

      if (isTargetControlled) {
        onChange === null || onChange === void 0 ? void 0 : onChange(newTargetValue, {
          type: "target",
          movedValue: targetCheckeds.map(function (s) {
            return s.value;
          })
        });
      } else {
        setState(_objectSpread$P(_objectSpread$P({}, state), {}, {
          source: newSource,
          target: newTarget
        }));
        setCheckeds(_objectSpread$P(_objectSpread$P({}, checkeds), {}, {
          target: []
        }));
      }
    };

    var OperationsCmp = function OperationsCmp() {
      var isSourceDisabled = sourceDisable || !checkeds.source.length;
      var isTargetDisabled = targetDisable || !checkeds.target.length;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(transferClassName, "__operations")
      }, /* @__PURE__ */React__default["default"].createElement(Button, {
        key: isSourceDisabled ? "right-outline" : "right-base",
        variant: "outline",
        disabled: isSourceDisabled,
        onClick: transformSource
      }, leftOperation), /* @__PURE__ */React__default["default"].createElement(Button, {
        key: isSourceDisabled ? "left-outline" : "left-base",
        variant: "outline",
        disabled: isTargetDisabled,
        onClick: transformTarget
      }, rightOperation));
    };

    var handleCheckChange = function handleCheckChange(value2, type) {
      var sourceChecked = checkeds.source,
          targetChecked = checkeds.target;
      var inverseMap = {
        source: "target",
        target: "source"
      };
      isCheckedControlled ? onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange({
        type: type,
        checked: value2.concat(checkeds[inverseMap[type]]),
        sourceChecked: sourceChecked,
        targetChecked: targetChecked
      }) : setCheckeds(_objectSpread$P(_objectSpread$P({}, checkeds), {}, _defineProperty$3({}, type, value2)));
    };

    React.useEffect(function () {
      if (isTargetControlled && Array.isArray(value)) {
        var newTarget = data.filter(function (item) {
          return value.includes(item.value);
        });
        var newSource = difference_1(data, newTarget);

        if (tree) {
          newSource = filterCheckedTreeNodes(data, value);
          newTarget = getTargetNodes(newSource, data);
        }

        setState({
          source: _toConsumableArray(newSource),
          target: _toConsumableArray(newTarget)
        });
        setCheckeds({
          source: [],
          target: []
        });
      }
    }, [value, data, isTargetControlled, tree]);
    React.useEffect(function () {
      var source = state.source,
          target = state.target;

      if (isCheckedControlled && Array.isArray(checked)) {
        var newSourceChecked = source.filter(function (item) {
          return !item.disabled && checked.includes(item.value);
        }).map(function (item) {
          return item.value;
        });
        var newTargetChecked = target.filter(function (item) {
          return !item.disabled && checked.includes(item.value);
        }).map(function (item) {
          return item.value;
        });
        setCheckeds({
          source: newSourceChecked,
          target: newTargetChecked
        });
      }
    }, [checked, state, isCheckedControlled]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(transferClassName, (_classnames = {}, _defineProperty$3(_classnames, "".concat(transferClassName, "__search"), search), _defineProperty$3(_classnames, "".concat(transferClassName, "__pagination"), pagination), _defineProperty$3(_classnames, "".concat(transferClassName, "__footer"), footer), _defineProperty$3(_classnames, "".concat(transferClassName, "--with-tree"), tree), _classnames))
    }, /* @__PURE__ */React__default["default"].createElement(TransferList, {
      className: "".concat(transferClassName, "__list-source"),
      data: sourceData,
      search: search,
      checked: checkeds.source,
      empty: SourceEmptyCmp,
      disabled: sourceDisable,
      pagination: sourcePagonation,
      title: sourceTitle,
      footer: sourceFooter,
      transferItem: sourceTransferItem,
      content: sourceContent,
      onCheckbox: function onCheckbox(value2) {
        return handleCheckChange(value2, "source");
      },
      onSearch: function onSearch(val) {
        return setSearchState(_objectSpread$P(_objectSpread$P({}, searchState), {}, {
          source: val
        }));
      },
      tree: tree,
      showCheckAll: showCheckAllSource
    }), OperationsCmp(), /* @__PURE__ */React__default["default"].createElement(TransferList, {
      className: "".concat(transferClassName, "__list-target"),
      data: targetData,
      search: search,
      checked: checkeds.target,
      empty: TargetEmptyCmp,
      disabled: targetDisable,
      pagination: targetPagonation,
      title: targetTitle,
      footer: targetFooter,
      transferItem: targetTransferItem,
      content: targetContent,
      onCheckbox: function onCheckbox(value2) {
        return handleCheckChange(value2, "target");
      },
      onSearch: function onSearch(val) {
        return setSearchState(_objectSpread$P(_objectSpread$P({}, searchState), {}, {
          target: val
        }));
      },
      tree: tree,
      showCheckAll: showCheckAllTarget
    }));
  };

  Transfer$1.displayName = "Transfer";
  Transfer$1.defaultProps = transferDefaultProps;

  function ownKeys$O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$O(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var RangeInputPopup$1 = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-range-input-popup");
    var className = props.className,
        style = props.style,
        inputValue = props.inputValue,
        panel = props.panel,
        popupProps = props.popupProps,
        rangeInputProps = props.rangeInputProps,
        popupVisible = props.popupVisible,
        onInputChange = props.onInputChange,
        disabled = props.disabled;

    var _useOverlayInnerStyle = useOverlayInnerStyle(props),
        tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
        innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
        onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;

    var popupClasses = classNames$1([name, _defineProperty$3({}, "".concat(name, "--visible"), popupVisible !== null && popupVisible !== void 0 ? popupVisible : innerPopupVisible)]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1(name, className, popupClasses)
    }, /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$O(_objectSpread$O({
      hideEmptyPopup: true,
      content: panel,
      trigger: "click",
      placement: "bottom-left",
      visible: popupVisible !== null && popupVisible !== void 0 ? popupVisible : innerPopupVisible,
      onVisibleChange: onInnerPopupVisibleChange,
      disabled: disabled
    }, popupProps), {}, {
      overlayInnerStyle: tOverlayInnerStyle
    }), /* @__PURE__ */React__default["default"].createElement(RangeInput$1, _objectSpread$O({
      disabled: disabled,
      status: props.status,
      tips: props.tips,
      value: inputValue,
      onChange: onInputChange
    }, rangeInputProps))));
  });
  RangeInputPopup$1.displayName = "RangeInputPopup";

  var RangeInput = RangeInput$1;
  var RangeInputPopup = RangeInputPopup$1;

  var jumperDefaultProps = {
    layout: "horizontal",
    showCurrent: true,
    size: "medium",
    variant: "text"
  };

  var Jumper$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      RoundIcon: RoundIcon,
      ChevronUpIcon: ChevronUpIcon,
      ChevronDownIcon: ChevronDownIcon,
      ChevronLeftIcon: ChevronLeftIcon,
      ChevronRightIcon: ChevronRightIcon
    }),
        RoundIcon$1 = _useGlobalIcon.RoundIcon,
        ChevronUpIcon$1 = _useGlobalIcon.ChevronUpIcon,
        ChevronDownIcon$1 = _useGlobalIcon.ChevronDownIcon,
        ChevronLeftIcon$1 = _useGlobalIcon.ChevronLeftIcon,
        ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;

    var variant = props.variant,
        tips = props.tips,
        showCurrent = props.showCurrent,
        disabled = props.disabled,
        layout = props.layout,
        size = props.size,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop$1 : _props$onChange,
        className = props.className,
        style = props.style;
    var titleConfig = React.useMemo(function () {
      if (isObject_1(tips)) return tips;
      if (tips === true) return {
        prev: "\u4E0A\u4E00\u9875",
        current: "\u5F53\u524D",
        next: "\u4E0B\u4E00\u9875"
      };
      return {};
    }, [tips]);
    var disabledConfig = React.useMemo(function () {
      if (isObject_1(disabled)) return disabled;
      if (disabled === true) return {
        prev: true,
        current: true,
        next: true
      };
      return {
        prev: false,
        current: false,
        next: false
      };
    }, [disabled]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-jumper"), className, _defineProperty$3({}, "".concat(classPrefix, "-jumper--outline"), variant === "outline")),
      ref: ref,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      title: titleConfig.prev,
      variant: variant,
      size: size,
      shape: "square",
      onClick: function onClick(e) {
        return onChange({
          e: e,
          trigger: "prev"
        });
      },
      icon: layout === "horizontal" ? /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon$1, null) : /* @__PURE__ */React__default["default"].createElement(ChevronUpIcon$1, null),
      className: "".concat(classPrefix, "-jumper__prev"),
      disabled: disabledConfig.prev
    }), showCurrent && /* @__PURE__ */React__default["default"].createElement(Button, {
      title: titleConfig.current,
      variant: variant,
      size: size,
      shape: "square",
      onClick: function onClick(e) {
        return onChange({
          e: e,
          trigger: "current"
        });
      },
      icon: /* @__PURE__ */React__default["default"].createElement(RoundIcon$1, null),
      className: "".concat(classPrefix, "-jumper__current"),
      disabled: disabledConfig.current
    }), /* @__PURE__ */React__default["default"].createElement(Button, {
      title: titleConfig.next,
      variant: variant,
      size: size,
      shape: "square",
      onClick: function onClick(e) {
        return onChange({
          e: e,
          trigger: "next"
        });
      },
      icon: layout === "horizontal" ? /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon$1, null) : /* @__PURE__ */React__default["default"].createElement(ChevronDownIcon$1, null),
      className: "".concat(classPrefix, "-jumper__next"),
      disabled: disabledConfig.next
    }));
  });
  Jumper$1.displayName = "Jumper";
  Jumper$1.defaultProps = jumperDefaultProps;

  var Jumper = Jumper$1;

  var useDatePickerLocalConfig = function useDatePickerLocalConfig() {
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    return {
      months: t(local.months),
      nextYear: t(local.nextYear),
      preYear: t(local.preYear),
      nextMonth: t(local.nextMonth),
      preMonth: t(local.preMonth),
      preDecade: t(local.preDecade),
      nextDecade: t(local.nextDecade),
      now: t(local.now)
    };
  };

  var DatePickerHeader = function DatePickerHeader(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var mode = props.mode,
        year = props.year,
        month = props.month,
        onMonthChange = props.onMonthChange,
        onYearChange = props.onYearChange,
        onJumperClick = props.onJumperClick;

    var _useDatePickerLocalCo = useDatePickerLocalConfig(),
        now = _useDatePickerLocalCo.now,
        months = _useDatePickerLocalCo.months,
        preMonth = _useDatePickerLocalCo.preMonth,
        preYear = _useDatePickerLocalCo.preYear,
        nextMonth = _useDatePickerLocalCo.nextMonth,
        nextYear = _useDatePickerLocalCo.nextYear,
        preDecade = _useDatePickerLocalCo.preDecade,
        nextDecade = _useDatePickerLocalCo.nextDecade;

    var monthOptions = months.map(function (item, index) {
      return {
        label: item,
        value: index
      };
    });
    var initOptions = React.useCallback(function (year2) {
      var options = [];

      if (mode === "year") {
        var extraYear = year2 % 10;
        var minYear = year2 - extraYear - 100;
        var maxYear = year2 - extraYear + 100;

        for (var i = minYear; i <= maxYear; i += 10) {
          options.push({
            label: "".concat(i, " - ").concat(i + 9),
            value: i + extraYear
          });
        }
      } else {
        options.push({
          label: "".concat(year2),
          value: year2
        });

        for (var _i = 1; _i <= 10; _i++) {
          options.push({
            label: "".concat(year2 + _i),
            value: year2 + _i
          });
          options.unshift({
            label: "".concat(year2 - _i),
            value: year2 - _i
          });
        }
      }

      return options;
    }, [mode]);

    var _useState = React.useState(initOptions(year)),
        _useState2 = _slicedToArray(_useState, 2),
        yearOptions = _useState2[0],
        setYearOptions = _useState2[1];

    var nearestYear = React.useMemo(function () {
      var _yearOptions$find;

      return ((_yearOptions$find = yearOptions.find(function (option) {
        return option.value - year <= 9 && option.value - year >= 0;
      })) === null || _yearOptions$find === void 0 ? void 0 : _yearOptions$find.value) || year;
    }, [yearOptions, year]);
    React.useEffect(function () {
      var yearRange = initOptions(year);
      setYearOptions(yearRange);
    }, [initOptions, year]);

    function loadMoreYear(year2, type) {
      var options = [];

      if (mode === "year") {
        var extraYear = year2 % 10;

        if (type === "add") {
          for (var i = year2 - extraYear + 10; i <= year2 - extraYear + 50; i += 10) {
            options.push({
              label: "".concat(i, " - ").concat(i + 9),
              value: i
            });
          }
        } else {
          for (var _i2 = year2 - extraYear - 1; _i2 > year2 - extraYear - 50; _i2 -= 10) {
            options.unshift({
              label: "".concat(_i2 - 9, " - ").concat(_i2),
              value: _i2
            });
          }
        }
      } else if (type === "add") {
        for (var _i3 = year2 + 1; _i3 <= year2 + 10; _i3++) {
          options.push({
            label: "".concat(_i3),
            value: _i3
          });
        }
      } else {
        for (var _i4 = year2 - 1; _i4 > year2 - 10; _i4--) {
          options.unshift({
            label: "".concat(_i4),
            value: _i4
          });
        }
      }

      return options;
    }

    var labelMap = {
      year: {
        prev: preDecade,
        current: now,
        next: nextDecade
      },
      month: {
        prev: preYear,
        current: now,
        next: nextYear
      },
      date: {
        prev: preMonth,
        current: now,
        next: nextMonth
      }
    };
    var headerClassName = "".concat(classPrefix, "-date-picker__header");
    var showMonthPicker = mode === "date" || mode === "week";

    function handlePanelTopClick(e) {
      var _e$stopPropagation, _e$nativeEvent, _e$nativeEvent$stopIm;

      e === null || e === void 0 ? void 0 : (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 ? void 0 : _e$stopPropagation.call(e);
      e === null || e === void 0 ? void 0 : (_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 ? void 0 : (_e$nativeEvent$stopIm = _e$nativeEvent.stopImmediatePropagation) === null || _e$nativeEvent$stopIm === void 0 ? void 0 : _e$nativeEvent$stopIm.call(_e$nativeEvent);
      var firstYear = yearOptions[0].value;
      var options = loadMoreYear(firstYear, "reduce");
      setYearOptions([].concat(_toConsumableArray(options), _toConsumableArray(yearOptions)));
    }

    function handlePanelBottomClick(e) {
      var _e$stopPropagation2, _e$nativeEvent2;

      e === null || e === void 0 ? void 0 : (_e$stopPropagation2 = e.stopPropagation) === null || _e$stopPropagation2 === void 0 ? void 0 : _e$stopPropagation2.call(e);
      e === null || e === void 0 ? void 0 : (_e$nativeEvent2 = e.nativeEvent) === null || _e$nativeEvent2 === void 0 ? void 0 : _e$nativeEvent2.stopImmediatePropagation();
      var lastYear = yearOptions.slice(-1)[0].value;
      var options = loadMoreYear(lastYear, "add");
      setYearOptions([].concat(_toConsumableArray(yearOptions), _toConsumableArray(options)));
    }

    function handleScroll(_ref) {
      var e = _ref.e;

      if (e.target.scrollTop === 0) {
        handlePanelTopClick();
      } else if (e.target.scrollTop === e.target.scrollHeight - e.target.clientHeight) {
        handlePanelBottomClick();
      }
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: headerClassName
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(headerClassName, "-controller")
    }, showMonthPicker && /* @__PURE__ */React__default["default"].createElement(Select, {
      className: "".concat(headerClassName, "-controller-month"),
      value: month,
      options: monthOptions,
      onChange: function onChange(val) {
        return onMonthChange(val);
      },
      popupProps: {
        attach: function attach(triggerElement) {
          return triggerElement.parentNode;
        },
        overlayClassName: "".concat(headerClassName, "-controller-month-popup")
      }
    }), /* @__PURE__ */React__default["default"].createElement(Select, {
      className: "".concat(headerClassName, "-controller-year"),
      value: mode === "year" ? nearestYear : year,
      options: yearOptions,
      onChange: function onChange(val) {
        return onYearChange(val);
      },
      popupProps: {
        onScroll: handleScroll,
        attach: function attach(triggerElement) {
          return triggerElement.parentNode;
        },
        overlayClassName: "".concat(headerClassName, "-controller-year-popup")
      },
      panelTopContent: /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select-option"),
        onClick: handlePanelTopClick
      }, "..."),
      panelBottomContent: /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select-option"),
        onClick: handlePanelBottomClick
      }, "...")
    })), /* @__PURE__ */React__default["default"].createElement(Jumper, {
      tips: labelMap[mode],
      size: "small",
      onChange: onJumperClick
    }));
  };

  DatePickerHeader.displayName = "DatePickerHeader";

  var isBetween = {exports: {}};

  (function (module, exports) {
    !function (e, i) {
      module.exports = i() ;
    }(commonjsGlobal, function () {

      return function (e, i, t) {
        i.prototype.isBetween = function (e, i, s, f) {
          var n = t(e),
              o = t(i),
              r = "(" === (f = f || "()")[0],
              u = ")" === f[1];
          return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
        };
      };
    });
  })(isBetween);

  var dayJsIsBetween = isBetween.exports;

  var weekYear$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t) {
        t.prototype.weekYear = function () {
          var e = this.month(),
              t = this.week(),
              n = this.year();
          return 1 === t && 11 === e ? n + 1 : 0 === e && t >= 52 ? n - 1 : n;
        };
      };
    });
  })(weekYear$1);

  var weekYear = weekYear$1.exports;

  var localeData$1 = {exports: {}};

  (function (module, exports) {
    !function (n, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      return function (n, e, t) {
        var r = e.prototype,
            o = function o(n) {
          return n && (n.indexOf ? n : n.s);
        },
            u = function u(n, e, t, r, _u) {
          var i = n.name ? n : n.$locale(),
              a = o(i[e]),
              s = o(i[t]),
              f = a || s.map(function (n) {
            return n.slice(0, r);
          });
          if (!_u) return f;
          var d = i.weekStart;
          return f.map(function (n, e) {
            return f[(e + (d || 0)) % 7];
          });
        },
            i = function i() {
          return t.Ls[t.locale()];
        },
            a = function a(n, e) {
          return n.formats[e] || function (n) {
            return n.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (n, e, t) {
              return e || t.slice(1);
            });
          }(n.formats[e.toUpperCase()]);
        },
            s = function s() {
          var n = this;
          return {
            months: function months(e) {
              return e ? e.format("MMMM") : u(n, "months");
            },
            monthsShort: function monthsShort(e) {
              return e ? e.format("MMM") : u(n, "monthsShort", "months", 3);
            },
            firstDayOfWeek: function firstDayOfWeek() {
              return n.$locale().weekStart || 0;
            },
            weekdays: function weekdays(e) {
              return e ? e.format("dddd") : u(n, "weekdays");
            },
            weekdaysMin: function weekdaysMin(e) {
              return e ? e.format("dd") : u(n, "weekdaysMin", "weekdays", 2);
            },
            weekdaysShort: function weekdaysShort(e) {
              return e ? e.format("ddd") : u(n, "weekdaysShort", "weekdays", 3);
            },
            longDateFormat: function longDateFormat(e) {
              return a(n.$locale(), e);
            },
            meridiem: this.$locale().meridiem,
            ordinal: this.$locale().ordinal
          };
        };

        r.localeData = function () {
          return s.bind(this)();
        }, t.localeData = function () {
          var n = i();
          return {
            firstDayOfWeek: function firstDayOfWeek() {
              return n.weekStart || 0;
            },
            weekdays: function weekdays() {
              return t.weekdays();
            },
            weekdaysShort: function weekdaysShort() {
              return t.weekdaysShort();
            },
            weekdaysMin: function weekdaysMin() {
              return t.weekdaysMin();
            },
            months: function months() {
              return t.months();
            },
            monthsShort: function monthsShort() {
              return t.monthsShort();
            },
            longDateFormat: function longDateFormat(e) {
              return a(n, e);
            },
            meridiem: n.meridiem,
            ordinal: n.ordinal
          };
        }, t.months = function () {
          return u(i(), "months");
        }, t.monthsShort = function () {
          return u(i(), "monthsShort", "months", 3);
        }, t.weekdays = function (n) {
          return u(i(), "weekdays", null, null, n);
        }, t.weekdaysShort = function (n) {
          return u(i(), "weekdaysShort", "weekdays", 3, n);
        }, t.weekdaysMin = function (n) {
          return u(i(), "weekdaysMin", "weekdays", 2, n);
        };
      };
    });
  })(localeData$1);

  var localeData = localeData$1.exports;

  var weekOfYear$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = "week",
          t = "year";
      return function (i, n, r) {
        var f = n.prototype;
        f.week = function (i) {
          if (void 0 === i && (i = null), null !== i) return this.add(7 * (i - this.week()), "day");
          var n = this.$locale().yearStart || 1;

          if (11 === this.month() && this.date() > 25) {
            var f = r(this).startOf(t).add(1, t).date(n),
                s = r(this).endOf(e);
            if (f.isBefore(s)) return 1;
          }

          var a = r(this).startOf(t).date(n).startOf(e).subtract(1, "millisecond"),
              o = this.diff(a, e, !0);
          return o < 0 ? r(this).startOf("week").week() : Math.ceil(o);
        }, f.weeks = function (e) {
          return void 0 === e && (e = null), this.week(e);
        };
      };
    });
  })(weekOfYear$1);

  var weekOfYear = weekOfYear$1.exports;

  var quarterOfYear$1 = {exports: {}};

  (function (module, exports) {
    !function (t, n) {
      module.exports = n() ;
    }(commonjsGlobal, function () {

      var t = "month",
          n = "quarter";
      return function (e, i) {
        var r = i.prototype;

        r.quarter = function (t) {
          return this.$utils().u(t) ? Math.ceil((this.month() + 1) / 3) : this.month(this.month() % 3 + 3 * (t - 1));
        };

        var s = r.add;

        r.add = function (e, i) {
          return e = Number(e), this.$utils().p(i) === n ? this.add(3 * e, t) : s.bind(this)(e, i);
        };

        var u = r.startOf;

        r.startOf = function (e, i) {
          var r = this.$utils(),
              s = !!r.u(i) || i;

          if (r.p(e) === n) {
            var o = this.quarter() - 1;
            return s ? this.month(3 * o).startOf(t).startOf("day") : this.month(3 * o + 2).endOf(t).endOf("day");
          }

          return u.bind(this)(e, i);
        };
      };
    });
  })(quarterOfYear$1);

  var quarterOfYear = quarterOfYear$1.exports;

  var isoWeek$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = "day";
      return function (t, i, s) {
        var a = function a(t) {
          return t.add(4 - t.isoWeekday(), e);
        },
            d = i.prototype;

        d.isoWeekYear = function () {
          return a(this).year();
        }, d.isoWeek = function (t) {
          if (!this.$utils().u(t)) return this.add(7 * (t - this.isoWeek()), e);
          var i,
              d,
              n,
              o,
              r = a(this),
              u = (i = this.isoWeekYear(), d = this.$u, n = (d ? s.utc : s)().year(i).startOf("year"), o = 4 - n.isoWeekday(), n.isoWeekday() > 4 && (o += 7), n.add(o, e));
          return r.diff(u, "week") + 1;
        }, d.isoWeekday = function (e) {
          return this.$utils().u(e) ? this.day() || 7 : this.day(this.day() % 7 ? e : e - 7);
        };
        var n = d.startOf;

        d.startOf = function (e, t) {
          var i = this.$utils(),
              s = !!i.u(t) || t;
          return "isoweek" === i.p(e) ? s ? this.date(this.date() - (this.isoWeekday() - 1)).startOf("day") : this.date(this.date() - 1 - (this.isoWeekday() - 1) + 7).endOf("day") : n.bind(this)(e, t);
        };
      };
    });
  })(isoWeek$1);

  var isoWeek = isoWeek$1.exports;

  var advancedFormat$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t, r) {
        var n = t.prototype,
            s = n.format;
        r.en.ordinal = function (e) {
          var t = ["th", "st", "nd", "rd"],
              r = e % 100;
          return "[" + e + (t[(r - 20) % 10] || t[r] || t[0]) + "]";
        }, n.format = function (e) {
          var t = this,
              r = this.$locale();
          if (!this.isValid()) return s.bind(this)(e);
          var n = this.$utils(),
              a = (e || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function (e) {
            switch (e) {
              case "Q":
                return Math.ceil((t.$M + 1) / 3);

              case "Do":
                return r.ordinal(t.$D);

              case "gggg":
                return t.weekYear();

              case "GGGG":
                return t.isoWeekYear();

              case "wo":
                return r.ordinal(t.week(), "W");

              case "w":
              case "ww":
                return n.s(t.week(), "w" === e ? 1 : 2, "0");

              case "W":
              case "WW":
                return n.s(t.isoWeek(), "W" === e ? 1 : 2, "0");

              case "k":
              case "kk":
                return n.s(String(0 === t.$H ? 24 : t.$H), "k" === e ? 1 : 2, "0");

              case "X":
                return Math.floor(t.$d.getTime() / 1e3);

              case "x":
                return t.$d.getTime();

              case "z":
                return "[" + t.offsetName() + "]";

              case "zzz":
                return "[" + t.offsetName("long") + "]";

              default:
                return e;
            }
          });
          return s.bind(this)(a);
        };
      };
    });
  })(advancedFormat$1);

  var advancedFormat = advancedFormat$1.exports;

  var customParseFormat$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      },
          t = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
          n = /\d\d/,
          r = /\d\d?/,
          i = /\d*[^-_:/,()\s\d]+/,
          o = {},
          s = function s(e) {
        return (e = +e) + (e > 68 ? 1900 : 2e3);
      };

      var a = function a(e) {
        return function (t) {
          this[e] = +t;
        };
      },
          f = [/[+-]\d\d:?(\d\d)?|Z/, function (e) {
        (this.zone || (this.zone = {})).offset = function (e) {
          if (!e) return 0;
          if ("Z" === e) return 0;
          var t = e.match(/([+-]|\d\d)/g),
              n = 60 * t[1] + (+t[2] || 0);
          return 0 === n ? 0 : "+" === t[0] ? -n : n;
        }(e);
      }],
          h = function h(e) {
        var t = o[e];
        return t && (t.indexOf ? t : t.s.concat(t.f));
      },
          u = function u(e, t) {
        var n,
            r = o.meridiem;

        if (r) {
          for (var i = 1; i <= 24; i += 1) {
            if (e.indexOf(r(i, 0, t)) > -1) {
              n = i > 12;
              break;
            }
          }
        } else n = e === (t ? "pm" : "PM");

        return n;
      },
          d = {
        A: [i, function (e) {
          this.afternoon = u(e, !1);
        }],
        a: [i, function (e) {
          this.afternoon = u(e, !0);
        }],
        S: [/\d/, function (e) {
          this.milliseconds = 100 * +e;
        }],
        SS: [n, function (e) {
          this.milliseconds = 10 * +e;
        }],
        SSS: [/\d{3}/, function (e) {
          this.milliseconds = +e;
        }],
        s: [r, a("seconds")],
        ss: [r, a("seconds")],
        m: [r, a("minutes")],
        mm: [r, a("minutes")],
        H: [r, a("hours")],
        h: [r, a("hours")],
        HH: [r, a("hours")],
        hh: [r, a("hours")],
        D: [r, a("day")],
        DD: [n, a("day")],
        Do: [i, function (e) {
          var t = o.ordinal,
              n = e.match(/\d+/);
          if (this.day = n[0], t) for (var r = 1; r <= 31; r += 1) {
            t(r).replace(/\[|\]/g, "") === e && (this.day = r);
          }
        }],
        M: [r, a("month")],
        MM: [n, a("month")],
        MMM: [i, function (e) {
          var t = h("months"),
              n = (h("monthsShort") || t.map(function (e) {
            return e.slice(0, 3);
          })).indexOf(e) + 1;
          if (n < 1) throw new Error();
          this.month = n % 12 || n;
        }],
        MMMM: [i, function (e) {
          var t = h("months").indexOf(e) + 1;
          if (t < 1) throw new Error();
          this.month = t % 12 || t;
        }],
        Y: [/[+-]?\d+/, a("year")],
        YY: [n, function (e) {
          this.year = s(e);
        }],
        YYYY: [/\d{4}/, a("year")],
        Z: f,
        ZZ: f
      };

      function c(n) {
        var r, i;
        r = n, i = o && o.formats;

        for (var s = (n = r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (t, n, r) {
          var o = r && r.toUpperCase();
          return n || i[r] || e[r] || i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (e, t, n) {
            return t || n.slice(1);
          });
        })).match(t), a = s.length, f = 0; f < a; f += 1) {
          var h = s[f],
              u = d[h],
              c = u && u[0],
              l = u && u[1];
          s[f] = l ? {
            regex: c,
            parser: l
          } : h.replace(/^\[|\]$/g, "");
        }

        return function (e) {
          for (var t = {}, n = 0, r = 0; n < a; n += 1) {
            var i = s[n];
            if ("string" == typeof i) r += i.length;else {
              var o = i.regex,
                  f = i.parser,
                  h = e.slice(r),
                  u = o.exec(h)[0];
              f.call(t, u), e = e.replace(u, "");
            }
          }

          return function (e) {
            var t = e.afternoon;

            if (void 0 !== t) {
              var n = e.hours;
              t ? n < 12 && (e.hours += 12) : 12 === n && (e.hours = 0), delete e.afternoon;
            }
          }(t), t;
        };
      }

      return function (e, t, n) {
        n.p.customParseFormat = !0, e && e.parseTwoDigitYear && (s = e.parseTwoDigitYear);
        var r = t.prototype,
            i = r.parse;

        r.parse = function (e) {
          var t = e.date,
              r = e.utc,
              s = e.args;
          this.$u = r;
          var a = s[1];

          if ("string" == typeof a) {
            var f = !0 === s[2],
                h = !0 === s[3],
                u = f || h,
                d = s[2];
            h && (d = s[2]), o = this.$locale(), !f && d && (o = n.Ls[d]), this.$d = function (e, t, n) {
              try {
                if (["x", "X"].indexOf(t) > -1) return new Date(("X" === t ? 1e3 : 1) * e);
                var r = c(t)(e),
                    i = r.year,
                    o = r.month,
                    s = r.day,
                    a = r.hours,
                    f = r.minutes,
                    h = r.seconds,
                    u = r.milliseconds,
                    d = r.zone,
                    l = new Date(),
                    m = s || (i || o ? 1 : l.getDate()),
                    M = i || l.getFullYear(),
                    Y = 0;
                i && !o || (Y = o > 0 ? o - 1 : l.getMonth());
                var p = a || 0,
                    v = f || 0,
                    D = h || 0,
                    g = u || 0;
                return d ? new Date(Date.UTC(M, Y, m, p, v, D, g + 60 * d.offset * 1e3)) : n ? new Date(Date.UTC(M, Y, m, p, v, D, g)) : new Date(M, Y, m, p, v, D, g);
              } catch (e) {
                return new Date("");
              }
            }(t, a, r), this.init(), d && !0 !== d && (this.$L = this.locale(d).$L), u && t != this.format(a) && (this.$d = new Date("")), o = {};
          } else if (a instanceof Array) for (var l = a.length, m = 1; m <= l; m += 1) {
            s[1] = a[m - 1];
            var M = n.apply(this, s);

            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }

            m === l && (this.$d = new Date(""));
          } else i.call(this, e);
        };
      };
    });
  })(customParseFormat$1);

  var customParseFormat = customParseFormat$1.exports;

  var toNumber$1 = toNumber_1;
  /** Used as references for various `Number` constants. */

  var INFINITY = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;
  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */

  function toFinite$2(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }

    value = toNumber$1(value);

    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }

    return value === value ? value : 0;
  }

  var toFinite_1 = toFinite$2;

  var toFinite$1 = toFinite_1;
  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */

  function toInteger$2(value) {
    var result = toFinite$1(value),
        remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  var toInteger_1 = toInteger$2;

  var baseSlice = _baseSlice,
      isIterateeCall$1 = _isIterateeCall,
      toInteger$1 = toInteger_1;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeCeil$2 = Math.ceil,
      nativeMax$1 = Math.max;
  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `array` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the new array of chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */

  function chunk(array, size, guard) {
    if (guard ? isIterateeCall$1(array, size, guard) : size === undefined) {
      size = 1;
    } else {
      size = nativeMax$1(toInteger$1(size), 0);
    }

    var length = array == null ? 0 : array.length;

    if (!length || size < 1) {
      return [];
    }

    var index = 0,
        resIndex = 0,
        result = Array(nativeCeil$2(length / size));

    while (index < length) {
      result[resIndex++] = baseSlice(array, index, index += size);
    }

    return result;
  }

  var chunk_1 = chunk;

  function ownKeys$N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$N(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(isoWeek);
  dayjs.extend(weekYear);
  dayjs.extend(localeData);
  dayjs.extend(weekOfYear);
  dayjs.extend(quarterOfYear);
  dayjs.extend(advancedFormat);
  dayjs.extend(customParseFormat);
  dayjs.extend(dayJsIsBetween);
  function firstUpperCase(str) {
    if (!str) return str;
    return str[0].toUpperCase().concat(str.substring(1, str.length));
  }

  function getFirstDayOfMonth(_ref) {
    var year = _ref.year,
        month = _ref.month;
    return new Date(year, month, 1);
  }

  function getDaysInMonth(_ref2) {
    var year = _ref2.year,
        month = _ref2.month;
    return new Date(year, month + 1, 0).getDate();
  }

  function getLastDayOfMonth(_ref3) {
    var year = _ref3.year,
        month = _ref3.month;
    return new Date(year, month, getDaysInMonth({
      year: year,
      month: month
    }));
  }

  function isSameYear(date1, date2) {
    return date1.getFullYear() === date2.getFullYear();
  }

  function isSameQuarter(date1, date2) {
    return isSameYear(date1, date2) && dayjs(date1).quarter() === dayjs(date2).quarter();
  }

  function isSameMonth(date1, date2) {
    return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
  }

  function isSameWeek(date1, date2) {
    return isSameMonth(date1, date2) && dayjs(date1).week() === dayjs(date2).week();
  }

  function isSameDate(date1, date2) {
    return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
  }

  function compareAsc(date1, date2) {
    var d1 = date1.getTime();
    var d2 = date2.getTime();
    if (d1 < d2) return -1;
    if (d1 > d2) return 1;
    return 0;
  }

  function isSame(date1, date2) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "date";
    var func = {
      isSameYear: isSameYear,
      isSameQuarter: isSameQuarter,
      isSameMonth: isSameMonth,
      isSameWeek: isSameWeek,
      isSameDate: isSameDate
    };
    return func["isSame".concat(firstUpperCase(type))](date1, date2);
  }
  function outOfRanges(d, min, max) {
    return min && compareAsc(d, min) === -1 || max && compareAsc(d, max) === 1;
  }
  function getToday() {
    var now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
  }
  function subtractMonth(date, num) {
    return dayjs(date).subtract(num, "month").toDate();
  }
  function addMonth(date, num) {
    return dayjs(date).add(num, "month").toDate();
  }
  function getWeeks(_ref4, _ref5) {
    var year = _ref4.year,
        month = _ref4.month;
    var firstDayOfWeek = _ref5.firstDayOfWeek,
        _ref5$showWeekOfYear = _ref5.showWeekOfYear,
        showWeekOfYear = _ref5$showWeekOfYear === void 0 ? false : _ref5$showWeekOfYear,
        _ref5$disableDate = _ref5.disableDate,
        disableDate = _ref5$disableDate === void 0 ? function () {
      return false;
    } : _ref5$disableDate,
        minDate = _ref5.minDate,
        maxDate = _ref5.maxDate;
    var prependDay = getFirstDayOfMonth({
      year: year,
      month: month
    });
    var appendDay = getLastDayOfMonth({
      year: year,
      month: month
    });
    var maxDays = getDaysInMonth({
      year: year,
      month: month
    });
    var daysArr = [];
    var i = 1;
    var today = getToday();

    for (i; i <= maxDays; i++) {
      var currentDay = new Date(year, month, i);
      daysArr.push({
        text: i,
        active: false,
        value: currentDay,
        disabled: typeof disableDate === "function" && disableDate(currentDay) || outOfRanges(currentDay, minDate, maxDate),
        now: isSame(today, currentDay),
        firstDayOfMonth: i === 1,
        lastDayOfMonth: i === maxDays,
        type: "current-month"
      });
    }

    if (prependDay.getDay() !== firstDayOfWeek) {
      prependDay.setDate(0);

      while (true) {
        daysArr.unshift({
          text: prependDay.getDate().toString(),
          active: false,
          value: new Date(prependDay),
          disabled: typeof disableDate === "function" && disableDate(prependDay) || outOfRanges(prependDay, minDate, maxDate),
          additional: true,
          type: "prev-month"
        });
        prependDay.setDate(prependDay.getDate() - 1);
        if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7) break;
      }
    }

    var LEN = 42;

    while (daysArr.length < LEN) {
      appendDay.setDate(appendDay.getDate() + 1);
      daysArr.push({
        text: appendDay.getDate(),
        active: false,
        value: new Date(appendDay),
        disabled: typeof disableDate === "function" && disableDate(appendDay) || outOfRanges(appendDay, minDate, maxDate),
        additional: true,
        type: "next-month"
      });
    }

    var dataList = chunk_1(daysArr, 7);

    if (showWeekOfYear) {
      dataList.forEach(function (d) {
        d.unshift(_objectSpread$N(_objectSpread$N({}, d[0]), {}, {
          active: false,
          value: d[0].value,
          text: dayjs(d[0].value).week()
        }));
      });
    }

    return dataList;
  }
  function getQuarters(year, _ref6) {
    var _ref6$disableDate = _ref6.disableDate,
        disableDate = _ref6$disableDate === void 0 ? function () {
      return false;
    } : _ref6$disableDate,
        minDate = _ref6.minDate,
        maxDate = _ref6.maxDate,
        quarterLocal = _ref6.quarterLocal;
    var quarterArr = [];
    var today = getToday();

    for (var i = 1; i <= 4; i++) {
      var date = dayjs(new Date(year, 0)).quarter(i).toDate();
      quarterArr.push({
        value: date,
        now: isSame(date, today, "quarter"),
        disabled: typeof disableDate === "function" && disableDate(date) || outOfRanges(date, minDate, maxDate),
        active: false,
        text: quarterLocal[i - 1]
      });
    }

    return chunk_1(quarterArr, 4);
  }
  function getYears(year, _ref7) {
    var _ref7$disableDate = _ref7.disableDate,
        disableDate = _ref7$disableDate === void 0 ? function () {
      return false;
    } : _ref7$disableDate,
        minDate = _ref7.minDate,
        maxDate = _ref7.maxDate;
    var startYear = parseInt((year / 10).toString(), 10) * 10;
    var endYear = startYear + 9;
    var yearArr = [];
    var today = getToday();

    for (var i = startYear; i <= endYear; i++) {
      var date = new Date(i, 1);
      var disabledMonth = 0;
      var outOfRangeMonth = 0;

      for (var j = 0; j < 12; j++) {
        var d = new Date(i, j);
        if (typeof disableDate === "function" && disableDate(d)) disabledMonth += 1;
        if (outOfRanges(d, minDate, maxDate)) outOfRangeMonth += 1;
      }

      yearArr.push({
        value: date,
        now: isSame(date, today, "year"),
        disabled: disabledMonth === 12 || outOfRangeMonth === 12,
        active: false,
        text: "".concat(date.getFullYear())
      });
    }

    return chunk_1(yearArr, 3);
  }
  function getMonths(year, params) {
    var _params$disableDate = params.disableDate,
        disableDate = _params$disableDate === void 0 ? function () {
      return false;
    } : _params$disableDate,
        minDate = params.minDate,
        maxDate = params.maxDate,
        monthLocal = params.monthLocal;
    var MonthArr = [];
    var today = getToday();

    for (var i = 0; i <= 11; i++) {
      var date = new Date(year, i);
      var disabledDay = 0;
      var outOfRangeDay = 0;
      var daysInMonth = getDaysInMonth({
        year: year,
        month: i
      });

      for (var j = 1; j <= daysInMonth; j++) {
        var d = new Date(year, i, j);
        if (typeof disableDate === "function" && disableDate(d)) disabledDay += 1;
        if (outOfRanges(d, minDate, maxDate)) outOfRangeDay += 1;
      }

      MonthArr.push({
        value: date,
        now: isSame(date, today, "month"),
        disabled: disabledDay === daysInMonth || outOfRangeDay === daysInMonth,
        active: false,
        text: monthLocal[date.getMonth()]
      });
    }

    return chunk_1(MonthArr, 3);
  }
  function flagActive(data, _ref8) {
    var args = _extends$1({}, _ref8);

    var start = args.start,
        end = args.end,
        hoverStart = args.hoverStart,
        hoverEnd = args.hoverEnd,
        _args$type = args.type,
        type = _args$type === void 0 ? "date" : _args$type,
        _args$isRange = args.isRange,
        isRange = _args$isRange === void 0 ? false : _args$isRange;
    if (type === "week") return data;

    if (!isRange) {
      return data.map(function (row) {
        return row.map(function (item) {
          var _item = item;
          _item.active = start && isSame(item.value, start, type) && !_item.additional;
          return _item;
        });
      });
    }

    return data.map(function (row) {
      return row.map(function (item) {
        var _item = item;
        var date = item.value;
        var isStart = start && isSame(start, date, type);
        var isHoverStart = hoverStart && isSame(hoverStart, date, type);
        var isEnd = end && isSame(end, date, type);
        var isHoverEnd = hoverEnd && isSame(hoverEnd, date, type);
        _item.active = (isStart || isEnd) && !_item.additional;

        if (start && end) {
          _item.highlight = dayjs(date).isBetween(start, end, type, "[]") && !_item.additional;
          _item.startOfRange = isStart;
          _item.endOfRange = isEnd;
        }

        if (hoverStart && hoverEnd) {
          _item.hoverHighlight = dayjs(date).isBetween(hoverStart, hoverEnd, type, "[]") && !_item.additional;
          _item.hoverStartOfRange = isHoverStart;
          _item.hoverEndOfRange = isHoverEnd;
        }

        return _item;
      });
    });
  }
  function extractTimeFormat() {
    var dateFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var res = dateFormat.match(/(a\s)?h{1,2}:m{1,2}(:s{1,2})?(\sa)?/i);
    if (!res) return null;
    return res[0];
  }
  function extractTimeObj() {
    var timeFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var matchedMeridiem = timeFormat.match(/[ap]m/i) || [""];
    var timeReg = /\d{1,2}:\d{1,2}(:\d{1,2})?(:\d{1,3})?/;
    var matchedTimeStr = timeFormat.match(timeReg) || ["0:0:0:0"];

    var _matchedTimeStr$0$spl = matchedTimeStr[0].split(":"),
        _matchedTimeStr$0$spl2 = _slicedToArray(_matchedTimeStr$0$spl, 4),
        _matchedTimeStr$0$spl3 = _matchedTimeStr$0$spl2[0],
        hours = _matchedTimeStr$0$spl3 === void 0 ? 0 : _matchedTimeStr$0$spl3,
        _matchedTimeStr$0$spl4 = _matchedTimeStr$0$spl2[1],
        minutes = _matchedTimeStr$0$spl4 === void 0 ? 0 : _matchedTimeStr$0$spl4,
        _matchedTimeStr$0$spl5 = _matchedTimeStr$0$spl2[2],
        seconds = _matchedTimeStr$0$spl5 === void 0 ? 0 : _matchedTimeStr$0$spl5,
        _matchedTimeStr$0$spl6 = _matchedTimeStr$0$spl2[3],
        milliseconds = _matchedTimeStr$0$spl6 === void 0 ? 0 : _matchedTimeStr$0$spl6;

    return {
      hours: +hours,
      minutes: +minutes,
      seconds: +seconds,
      milliseconds: +milliseconds,
      meridiem: matchedMeridiem[0]
    };
  }

  var DatePickerCell = function DatePickerCell(props) {
    var _classNames;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var cellClass = classNames$1("".concat(classPrefix, "-date-picker__cell"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--now"), props.now), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--active"), props.active), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--disabled"), props.disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--highlight"), props.highlight), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--hover-highlight"), props.hoverHighlight), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--active-start"), props.startOfRange), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--active-end"), props.endOfRange), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--hover-start"), props.hoverStartOfRange), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--hover-end"), props.hoverEndOfRange), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--additional"), props.additional), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--first-day-of-month"), props.firstDayOfMonth), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--last-day-of-month"), props.lastDayOfMonth), _defineProperty$3(_classNames, "".concat(classPrefix, "-date-picker__cell--week-of-year"), props.weekOfYear), _classNames));

    function handleClick(e) {
      var _props$onClick;

      if (props.disabled) return;

      if (props.time) {
        var _extractTimeObj = extractTimeObj(props.time),
            hours = _extractTimeObj.hours,
            minutes = _extractTimeObj.minutes,
            seconds = _extractTimeObj.seconds,
            milliseconds = _extractTimeObj.milliseconds,
            meridiem = _extractTimeObj.meridiem;

        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        props.value.setHours(nextHours);
        props.value.setMinutes(minutes);
        props.value.setSeconds(seconds);
        props.value.setMilliseconds(milliseconds);
      }

      (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, props.value, {
        e: e
      });
    }

    function handleMouseEnter() {
      var _props$onMouseEnter;

      if (props.disabled) return;

      if (props.time) {
        var _extractTimeObj2 = extractTimeObj(props.time),
            hours = _extractTimeObj2.hours,
            minutes = _extractTimeObj2.minutes,
            seconds = _extractTimeObj2.seconds,
            milliseconds = _extractTimeObj2.milliseconds,
            meridiem = _extractTimeObj2.meridiem;

        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        props.value.setHours(nextHours);
        props.value.setMinutes(minutes);
        props.value.setSeconds(seconds);
        props.value.setMilliseconds(milliseconds);
      }

      (_props$onMouseEnter = props.onMouseEnter) === null || _props$onMouseEnter === void 0 ? void 0 : _props$onMouseEnter.call(props, props.value);
    }

    return /* @__PURE__ */React__default["default"].createElement("td", {
      className: cellClass,
      onClick: handleClick,
      onMouseEnter: handleMouseEnter
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__cell-inner")
    }, props.text));
  };

  DatePickerCell.displayName = "DatePickerCell";

  var TIME_FORMAT$1 = "HH:mm:ss";
  function parseToDayjs(value, format, timeOfDay) {
    if (value === "") return dayjs();
    var dateText = value;

    if (/[w|W]/g.test(format)) {
      if (typeof dateText !== "string") {
        dateText = dayjs(dateText).format(format);
      }

      var yearStr = dateText.split(/[-/.]/)[0];
      var weekStr = dateText.split(/[-/.]/)[1];
      var weekFormatStr = format.split(/[-/.]/)[1];
      var firstWeek = dayjs(yearStr, "YYYY").startOf("year");

      for (var i = 0; i <= 52; i += 1) {
        var nextWeek = firstWeek.add(i, "week");
        if (timeOfDay === "start") nextWeek = nextWeek.subtract(5, "day");

        if (nextWeek.format(weekFormatStr) === weekStr) {
          return nextWeek;
        }
      }
    }

    if (/Q/g.test(format)) {
      if (typeof dateText !== "string") {
        dateText = dayjs(dateText).format(format);
      }

      var _yearStr = dateText.split(/[-/.]/)[0];
      var quarterStr = dateText.split(/[-/.]/)[1];
      var quarterFormatStr = format.split(/[-/.]/)[1];

      var _firstWeek = dayjs(_yearStr, "YYYY").startOf("year");

      for (var _i = 0; _i <= 52; _i += 1) {
        var nextQuarter = _firstWeek.add(_i, "quarter");

        if (nextQuarter.format(quarterFormatStr) === quarterStr) {
          return nextQuarter;
        }
      }
    }

    return dayjs(dateText, format).isValid() ? dayjs(dateText, format) : dayjs(dateText);
  }

  function formatRange(_ref) {
    var newDate = _ref.newDate,
        format = _ref.format,
        targetFormat = _ref.targetFormat;
    if (!newDate || !Array.isArray(newDate)) return [];
    var dayjsDateList = newDate.map(function (d) {
      return d && parseToDayjs(d, format);
    });

    if (dayjsDateList[0] && dayjsDateList[1] && dayjsDateList[0].toDate().getTime() > dayjsDateList[1].toDate().getTime()) {
      dayjsDateList = [dayjsDateList[1], dayjsDateList[0]];
    }

    if (dayjsDateList.some(function (r) {
      return r && !r.isValid();
    })) {
      log.error("DatePicker", "\u8BF7\u68C0\u67E5 format\u3001valueType\u3001value \u683C\u5F0F\u662F\u5426\u6709\u6548.\nformat: '".concat(format, "' valueType: '").concat(targetFormat, "' value: '").concat(newDate, "'"));
      return [];
    }

    if (targetFormat === "time-stamp") {
      return dayjsDateList.map(function (da) {
        return da && da.toDate().getTime();
      });
    }

    return dayjsDateList.map(function (da) {
      return da && da.format(targetFormat);
    });
  }

  function formatSingle(_ref2) {
    var newDate = _ref2.newDate,
        format = _ref2.format,
        targetFormat = _ref2.targetFormat;
    if (!newDate) return "";
    var dayJsDate = parseToDayjs(newDate, format);

    if (!dayJsDate.isValid()) {
      log.error("DatePicker", "\u8BF7\u68C0\u67E5 format\u3001valueType\u3001value \u683C\u5F0F\u662F\u5426\u6709\u6548.\nformat: '".concat(format, "' valueType: '").concat(targetFormat, "' value: '").concat(newDate, "'"));
      return "";
    }

    if (targetFormat === "time-stamp") return dayJsDate.toDate().getTime();
    return dayJsDate.format(targetFormat);
  }

  function isValidDate(value, format) {
    if (Array.isArray(value)) {
      if (format === "time-stamp") return value.every(function (v) {
        return dayjs(v).isValid();
      });
      return value.every(function (v) {
        return dayjs(v, format).isValid() || dayjs(v).isValid();
      });
    }

    if (format === "time-stamp") return dayjs(value).isValid();
    return dayjs(value, format).isValid() || dayjs(value).isValid();
  }
  function formatDate(newDate, _ref3) {
    var format = _ref3.format,
        targetFormat = _ref3.targetFormat;
    var result;

    if (Array.isArray(newDate)) {
      result = formatRange({
        newDate: newDate,
        format: format,
        targetFormat: targetFormat
      });
    } else {
      result = formatSingle({
        newDate: newDate,
        format: format,
        targetFormat: targetFormat
      });
    }

    return result;
  }
  function formatTime(value, timeFormat) {
    var result;

    if (Array.isArray(value)) {
      result = value.map(function (v) {
        return dayjs(v || new Date(new Date().setHours(0, 0, 0, 0))).format(timeFormat);
      });
    } else {
      result = dayjs(value || new Date(new Date().setHours(0, 0, 0, 0))).format(timeFormat);
    }

    return result;
  }
  function getDefaultFormat(_ref4) {
    var _ref4$mode = _ref4.mode,
        mode = _ref4$mode === void 0 ? "date" : _ref4$mode,
        format = _ref4.format,
        valueType = _ref4.valueType,
        enableTimePicker = _ref4.enableTimePicker;

    if (mode === "year") {
      return {
        format: format || "YYYY",
        valueType: valueType || format || "YYYY",
        timeFormat: TIME_FORMAT$1
      };
    }

    if (mode === "month") {
      return {
        format: format || "YYYY-MM",
        valueType: valueType || format || "YYYY-MM",
        timeFormat: TIME_FORMAT$1
      };
    }

    if (mode === "quarter") {
      return {
        format: format || "YYYY-[Q]Q",
        valueType: valueType || format || "YYYY-[Q]Q",
        timeFormat: TIME_FORMAT$1
      };
    }

    if (mode === "week") {
      return {
        format: format || "YYYY-wo",
        valueType: valueType || format || "YYYY-wo",
        timeFormat: TIME_FORMAT$1
      };
    }

    if (mode === "date") {
      return {
        format: format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
        valueType: valueType || format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
        timeFormat: extractTimeFormat(format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : "")) || TIME_FORMAT$1
      };
    }

    log.error("DatePicker", "Invalid mode: ".concat(mode));
    return {};
  }

  function ownKeys$M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$M(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var DatePickerTable = function DatePickerTable(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var value = props.value,
        format = props.format,
        mode = props.mode,
        data = props.data,
        time = props.time,
        onCellClick = props.onCellClick,
        onCellMouseEnter = props.onCellMouseEnter,
        onCellMouseLeave = props.onCellMouseLeave,
        firstDayOfWeek = props.firstDayOfWeek;

    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var weekdays = t(local.weekdays);
    var weekAbbreviation = t(local.weekAbbreviation);
    var weekArr = [];
    var wi = firstDayOfWeek - 1;
    var len = weekdays.length;

    while (weekArr.length < len) {
      weekArr.push(weekdays[wi]);
      wi = (wi + len + 1) % len;
    }

    if (mode === "week") weekArr.unshift(weekAbbreviation);
    var showThead = mode === "date" || mode === "week";

    var weekRowClass = function weekRowClass(value2, format2, targetValue) {
      if (mode !== "week") return {};

      if (Array.isArray(value2)) {
        var _startObj$year, _startObj$week, _endObj$year, _endObj$week, _ref;

        if (!value2.length) return {};

        var _value2$map = value2.map(function (v) {
          return v && parseToDayjs(v, format2);
        }),
            _value2$map2 = _slicedToArray(_value2$map, 2),
            startObj = _value2$map2[0],
            endObj = _value2$map2[1];

        var startYear = startObj === null || startObj === void 0 ? void 0 : (_startObj$year = startObj.year) === null || _startObj$year === void 0 ? void 0 : _startObj$year.call(startObj);
        var startWeek = startObj === null || startObj === void 0 ? void 0 : (_startObj$week = startObj.week) === null || _startObj$week === void 0 ? void 0 : _startObj$week.call(startObj);
        var endYear = endObj === null || endObj === void 0 ? void 0 : (_endObj$year = endObj.year) === null || _endObj$year === void 0 ? void 0 : _endObj$year.call(endObj);
        var endWeek = endObj === null || endObj === void 0 ? void 0 : (_endObj$week = endObj.week) === null || _endObj$week === void 0 ? void 0 : _endObj$week.call(endObj);
        var targetObj = parseToDayjs(targetValue, format2);
        var targetYear = targetObj.year();
        var targetWeek = targetObj.week();
        var isActive = targetYear === startYear && targetWeek === startWeek || targetYear === endYear && targetWeek === endWeek;
        var isRange = targetYear >= startYear && targetYear <= endYear && targetWeek > startWeek && targetWeek < endWeek;
        return _ref = {}, _defineProperty$3(_ref, "".concat(classPrefix, "-date-picker__table-").concat(mode, "-row--active"), isActive), _defineProperty$3(_ref, "".concat(classPrefix, "-date-picker__table-").concat(mode, "-row--range"), isRange), _ref;
      }

      return _defineProperty$3({}, "".concat(classPrefix, "-date-picker__table-").concat(mode, "-row--active"), parseToDayjs(value2, format2).week() === parseToDayjs(targetValue, format2).week());
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__table"),
      onMouseLeave: function onMouseLeave(e) {
        return onCellMouseLeave === null || onCellMouseLeave === void 0 ? void 0 : onCellMouseLeave({
          e: e
        });
      }
    }, /* @__PURE__ */React__default["default"].createElement("table", null, showThead && /* @__PURE__ */React__default["default"].createElement("thead", null, /* @__PURE__ */React__default["default"].createElement("tr", null, weekArr.map(function (value2, i) {
      return /* @__PURE__ */React__default["default"].createElement("th", {
        key: i
      }, value2);
    }))), /* @__PURE__ */React__default["default"].createElement("tbody", null, data.map(function (row, i) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: i,
        className: classNames$1("".concat(classPrefix, "-date-picker__table-").concat(mode, "-row"), _objectSpread$M({}, weekRowClass(value, format, row[0].value)))
      }, row.map(function (col, j) {
        return /* @__PURE__ */React__default["default"].createElement(DatePickerCell, _objectSpread$M(_objectSpread$M({}, col), {}, {
          key: j,
          time: time,
          onClick: onCellClick,
          onMouseEnter: onCellMouseEnter
        }));
      }));
    }))));
  };

  DatePickerTable.displayName = "DatePickerTable";

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeFloor = Math.floor;
  /**
   * The base implementation of `_.repeat` which doesn't coerce arguments.
   *
   * @private
   * @param {string} string The string to repeat.
   * @param {number} n The number of times to repeat the string.
   * @returns {string} Returns the repeated string.
   */

  function baseRepeat$1(string, n) {
    var result = '';

    if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
      return result;
    } // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.


    do {
      if (n % 2) {
        result += string;
      }

      n = nativeFloor(n / 2);

      if (n) {
        string += string;
      }
    } while (n);

    return result;
  }

  var _baseRepeat = baseRepeat$1;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function baseProperty$1(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  var _baseProperty = baseProperty$1;

  var baseProperty = _baseProperty;
  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

  var asciiSize$1 = baseProperty('length');
  var _asciiSize = asciiSize$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange = "\\ud800-\\udfff",
      rsComboMarksRange = "\\u0300-\\u036f",
      reComboHalfMarksRange = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange = "\\u20d0-\\u20ff",
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsVarRange = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsAstral = '[' + rsAstralRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsFitz = "\\ud83c[\\udffb-\\udfff]",
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsZWJ = "\\u200d";
  /** Used to compose unicode regexes. */

  var reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

  function unicodeSize$1(string) {
    var result = reUnicode.lastIndex = 0;

    while (reUnicode.test(string)) {
      ++result;
    }

    return result;
  }

  var _unicodeSize = unicodeSize$1;

  var asciiSize = _asciiSize,
      hasUnicode$1 = _hasUnicode,
      unicodeSize = _unicodeSize;
  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */

  function stringSize$2(string) {
    return hasUnicode$1(string) ? unicodeSize(string) : asciiSize(string);
  }

  var _stringSize = stringSize$2;

  var baseRepeat = _baseRepeat,
      baseToString = _baseToString,
      castSlice = _castSlice,
      hasUnicode = _hasUnicode,
      stringSize$1 = _stringSize,
      stringToArray = _stringToArray;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeCeil$1 = Math.ceil;
  /**
   * Creates the padding for `string` based on `length`. The `chars` string
   * is truncated if the number of characters exceeds `length`.
   *
   * @private
   * @param {number} length The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padding for `string`.
   */

  function createPadding$1(length, chars) {
    chars = chars === undefined ? ' ' : baseToString(chars);
    var charsLength = chars.length;

    if (charsLength < 2) {
      return charsLength ? baseRepeat(chars, length) : chars;
    }

    var result = baseRepeat(chars, nativeCeil$1(length / stringSize$1(chars)));
    return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
  }

  var _createPadding = createPadding$1;

  var createPadding = _createPadding,
      stringSize = _stringSize,
      toInteger = toInteger_1,
      toString = toString_1;
  /**
   * Pads `string` on the left side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padStart('abc', 6);
   * // => '   abc'
   *
   * _.padStart('abc', 6, '_-');
   * // => '_-_abc'
   *
   * _.padStart('abc', 3);
   * // => 'abc'
   */

  function padStart(string, length, chars) {
    string = toString(string);
    length = toInteger(length);
    var strLength = length ? stringSize(string) : 0;
    return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
  }

  var padStart_1 = padStart;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil,
      nativeMax = Math.max;
  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */

  function baseRange$1(start, end, step, fromRight) {
    var index = -1,
        length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
        result = Array(length);

    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step;
    }

    return result;
  }

  var _baseRange = baseRange$1;

  var baseRange = _baseRange,
      isIterateeCall = _isIterateeCall,
      toFinite = toFinite_1;
  /**
   * Creates a `_.range` or `_.rangeRight` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new range function.
   */

  function createRange$1(fromRight) {
    return function (start, end, step) {
      if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
        end = step = undefined;
      } // Ensure the sign of `-0` is preserved.


      start = toFinite(start);

      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }

      step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
      return baseRange(start, end, step, fromRight);
    };
  }

  var _createRange = createRange$1;

  var createRange = _createRange;
  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to, but not including, `end`. A step of `-1` is used if a negative
   * `start` is specified without an `end` or `step`. If `end` is not specified,
   * it's set to `start` with `start` then set to `0`.
   *
   * **Note:** JavaScript follows the IEEE-754 standard for resolving
   * floating-point values which can produce unexpected results.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @param {number} [step=1] The value to increment or decrement by.
   * @returns {Array} Returns the range of numbers.
   * @see _.inRange, _.rangeRight
   * @example
   *
   * _.range(4);
   * // => [0, 1, 2, 3]
   *
   * _.range(-4);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 5);
   * // => [1, 2, 3, 4]
   *
   * _.range(0, 20, 5);
   * // => [0, 5, 10, 15]
   *
   * _.range(0, -4, -1);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 4, 0);
   * // => [1, 1, 1]
   *
   * _.range(0);
   * // => []
   */

  var range = createRange();
  var range_1 = range;

  var useTimePickerTextConfig = function useTimePickerTextConfig() {
    var _useLocaleReceiver = useLocaleReceiver("timePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    return {
      nowTime: t(local.now),
      confirm: t(local.confirm),
      am: t(local.anteMeridiem),
      pm: t(local.postMeridiem),
      placeholder: t(local.placeholder),
      rangePlaceholder: [t(local.placeholder), t(local.placeholder)]
    };
  };

  var AM = "am";
  var PM = "pm";
  var MERIDIEM_LIST = [AM, PM];
  var TIME_PICKER_EMPTY = [void 0, void 0];
  var DEFAULT_STEPS = [1, 1, 1];
  var DEFAULT_FORMAT = "HH:mm:ss";
  var EPickerCols = /* @__PURE__ */function (EPickerCols2) {
    EPickerCols2["hour"] = "hour";
    EPickerCols2["minute"] = "minute";
    EPickerCols2["second"] = "second";
    EPickerCols2["milliSecond"] = "millisecond";
    EPickerCols2["meridiem"] = "meridiem";
    return EPickerCols2;
  }(EPickerCols || {});
  var TIME_FORMAT = /(a\s+|A\s+)?(h+|H+)?:?(m+)?:?(s+)?:?(S+)?(\s+a|\s+A)?/;
  var TWELVE_HOUR_FORMAT = /[h]{1}/;

  function validateInputValue(value, format) {
    return dayjs(value, format).format(format) === value;
  }
  function formatInputValue(value, format) {
    return dayjs(value, format).format(format);
  }
  function closestLookup(availableArr, calcVal, step) {
    if (step <= 1) return calcVal;
    return availableArr.sort(function (a, b) {
      return Math.abs(calcVal + 1 - a) - Math.abs(calcVal + 1 - b);
    })[0];
  }

  var usePropRef = function usePropRef(prop) {
    var ref = React.useRef(prop);
    React.useEffect(function () {
      ref.current = prop;
    }, [prop]);
    return ref;
  };

  var timeArr = [EPickerCols.hour, EPickerCols.minute, EPickerCols.second, EPickerCols.milliSecond];
  var panelOffset = {
    top: 15,
    bottom: 21
  };
  dayjs.extend(customParseFormat);

  var SinglePanel$1 = function SinglePanel(props) {
    var steps = props.steps,
        format = props.format,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop$1 : _props$onChange,
        value = props.value,
        _props$hideDisabledTi = props.hideDisabledTime,
        hideDisabledTime = _props$hideDisabledTi === void 0 ? true : _props$hideDisabledTi,
        disableTime = props.disableTime,
        _props$position = props.position,
        position = _props$position === void 0 ? "start" : _props$position,
        triggerScroll = props.triggerScroll,
        resetTriggerScroll = props.resetTriggerScroll,
        isVisible = props.isVisible;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var TEXT_CONFIG = useTimePickerTextConfig();
    var panelClassName = "".concat(classPrefix, "-time-picker__panel");

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        cols = _useState2[0],
        setCols = _useState2[1];

    var colsRef = React.useRef([]);
    var maskRef = React.useRef(null);
    var dayjsValue = React.useMemo(function () {
      var isStepsSet = !!steps.filter(function (v) {
        return v > 1;
      }).length;
      if (value) return dayjs(value, format);
      if (isStepsSet) return dayjs().hour(0).minute(0).second(0);
      return dayjs();
    }, [value, format, steps]);
    React.useEffect(function () {
      colsRef.current = colsRef.current.slice(0, cols.length);
    }, [cols]);
    React.useEffect(function () {
      var match = format.match(TIME_FORMAT);

      var _match = _slicedToArray(match, 7),
          startCol = _match[1],
          hourCol = _match[2],
          minuteCol = _match[3],
          secondCol = _match[4],
          milliSecondCol = _match[5],
          endCol = _match[6];

      var meridiem = EPickerCols.meridiem,
          hour = EPickerCols.hour,
          minute = EPickerCols.minute,
          second = EPickerCols.second,
          milliSecond = EPickerCols.milliSecond;
      var renderCol = [startCol && meridiem, hourCol && hour, minuteCol && minute, secondCol && second, milliSecondCol && milliSecond, endCol && meridiem].filter(function (v) {
        return !!v;
      });
      setCols(renderCol);
    }, [format]);
    var getItemHeight = React.useCallback(function () {
      var _maskRef$current;

      var maskDom = maskRef === null || maskRef === void 0 ? void 0 : (_maskRef$current = maskRef.current) === null || _maskRef$current === void 0 ? void 0 : _maskRef$current.querySelector("div");

      if (!maskDom) {
        return {
          offsetHeight: 0,
          margin: 0
        };
      }

      return {
        offsetHeight: maskDom.offsetHeight,
        margin: parseInt(getComputedStyle(maskDom).marginTop, 10)
      };
    }, []);
    var timeItemCanUsed = React.useCallback(function (col, el) {
      var colIdx = timeArr.indexOf(col);

      if (colIdx !== -1) {
        var _ref, _ref$col;

        var params = [dayjsValue.hour(), dayjsValue.minute(), dayjsValue.second()];
        params[colIdx] = Number(el);
        return !((_ref = disableTime && (disableTime === null || disableTime === void 0 ? void 0 : disableTime.apply(void 0, params.concat([{
          partial: position
        }])))) !== null && _ref !== void 0 && (_ref$col = _ref[col]) !== null && _ref$col !== void 0 && _ref$col.includes(Number(el)));
      }

      return true;
    }, [position, disableTime, dayjsValue]);
    var getColList = React.useCallback(function (col) {
      var count = 0;

      if (timeArr.includes(col)) {
        var colIdx = timeArr.indexOf(col);
        var colStep = steps[colIdx] || 1;
        if (col === EPickerCols.hour) count = TWELVE_HOUR_FORMAT.test(format) ? 11 : 23;else if (col === EPickerCols.milliSecond) count = 999;else count = 59;
        var colList = range_1(0, count + 1, Number(colStep)).map(function (v) {
          return padStart_1(String(v), 2, "0");
        }) || [];
        return hideDisabledTime && !!disableTime ? colList.filter(function (t) {
          var _disableTime, _disableTime$col;

          var params = [dayjsValue.hour(), dayjsValue.minute(), dayjsValue.second()];
          params[colIdx] = Number(t);
          return !(disableTime !== null && disableTime !== void 0 && (_disableTime = disableTime.apply(void 0, params.concat([{
            partial: position
          }]))) !== null && _disableTime !== void 0 && (_disableTime$col = _disableTime[col]) !== null && _disableTime$col !== void 0 && _disableTime$col.includes(Number(t)));
        }) : colList;
      }

      return MERIDIEM_LIST;
    }, [steps, format, hideDisabledTime, dayjsValue, disableTime, position]);
    var getScrollDistance = React.useCallback(function (col, time) {
      if (col === EPickerCols.hour && /[h]{1}/.test(format)) time %= 12;
      var itemIdx = getColList(col).indexOf(padStart_1(String(time), 2, "0"));

      var _getItemHeight = getItemHeight(),
          offsetHeight = _getItemHeight.offsetHeight,
          margin = _getItemHeight.margin;

      var timeItemTotalHeight = offsetHeight + margin;
      var distance = Math.abs(Math.max(0, itemIdx) * timeItemTotalHeight);
      return distance;
    }, [getItemHeight, getColList, format]);
    var isVisibleRef = usePropRef(isVisible);
    var handleScroll = useDebounce(function (col, idx) {
      var _colsRef$current$idx;

      if (!isVisibleRef.current) {
        return;
      }

      var val;
      var formattedVal;
      var scrollTop = (_colsRef$current$idx = colsRef.current[idx]) === null || _colsRef$current$idx === void 0 ? void 0 : _colsRef$current$idx.scrollTop;

      var _getItemHeight2 = getItemHeight(),
          offsetHeight = _getItemHeight2.offsetHeight,
          margin = _getItemHeight2.margin;

      var timeItemTotalHeight = offsetHeight + margin;
      var colStep = Math.abs(Math.round(scrollTop / timeItemTotalHeight + 0.5));
      var meridiem = MERIDIEM_LIST[Math.min(colStep - 1, 1)].toLowerCase();
      if (Number.isNaN(colStep)) colStep = 1;

      if (timeArr.includes(col)) {
        var max = 59;
        if (col === EPickerCols.hour) max = /[h]{1}/.test(format) ? 11 : 23;else if (col === EPickerCols.milliSecond) max = 999;
        var colIdx = timeArr.indexOf(col);
        var availableArr = range_1(0, max + 1, Number(steps[colIdx]) || 1);
        val = closestLookup(availableArr, Number(getColList(col)[Math.min(colStep - 1, max + 1, availableArr.length - 1)]), Number(steps[colIdx]) || 1);
        if (Number.isNaN(val)) val = availableArr[availableArr.length - 1];

        if (col === EPickerCols.hour && cols.includes(EPickerCols.meridiem) && dayjsValue.hour() >= 12) {
          val = Number(val) + 12;
        }
      } else val = meridiem;

      var distance = getScrollDistance(col, val);

      if (!dayjs(dayjsValue).isValid() || value && !dayjs(value, format, true).isValid()) {
        return;
      }

      if (timeArr.includes(col)) {
        var _dayjsValue$col;

        if (timeItemCanUsed(col, val)) formattedVal = (_dayjsValue$col = dayjsValue[col]) === null || _dayjsValue$col === void 0 ? void 0 : _dayjsValue$col.call(dayjsValue, val).format(format);
      } else {
        var currentHour = dayjsValue.hour();

        if (meridiem === AM && currentHour >= 12) {
          formattedVal = dayjsValue.hour(currentHour - 12).format(format);
        } else if (meridiem === PM && currentHour < 12) {
          formattedVal = dayjsValue.hour(currentHour + 12).format(format);
        } else {
          formattedVal = dayjsValue.format(format);
        }
      }

      if (formattedVal !== value) {
        onChange(formattedVal);
      }

      if (distance !== scrollTop) {
        var _scrollCtrl$scrollTo;

        var scrollCtrl = colsRef.current[cols.indexOf(col)];
        if (!scrollCtrl || scrollCtrl.scrollTop === distance) return;
        (_scrollCtrl$scrollTo = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo === void 0 ? void 0 : _scrollCtrl$scrollTo.call(scrollCtrl, {
          top: distance,
          behavior: "smooth"
        });
      }
    }, 50);
    var scrollToTime = React.useCallback(function (col, time, idx) {
      var _scrollCtrl$scrollTo2;

      var behavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "auto";
      var distance = getScrollDistance(col, time);
      var scrollCtrl = colsRef.current[idx];
      if (!scrollCtrl || scrollCtrl.scrollTop === distance || !timeItemCanUsed(col, time)) return;
      (_scrollCtrl$scrollTo2 = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo2 === void 0 ? void 0 : _scrollCtrl$scrollTo2.call(scrollCtrl, {
        top: distance,
        behavior: behavior
      });
    }, [getScrollDistance]);
    var updateTimeScrollPos = React.useCallback(function () {
      var isAutoScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var behavior = value && !isAutoScroll ? "smooth" : "auto";
      var isStepsSet = !!steps.filter(function (v) {
        return v > 1;
      }).length;
      cols.forEach(function (col, idx) {
        if (!isStepsSet || isStepsSet && value) {
          var _dayjsValue$col2;

          scrollToTime(col, timeArr.includes(col) ? (_dayjsValue$col2 = dayjsValue[col]) === null || _dayjsValue$col2 === void 0 ? void 0 : _dayjsValue$col2.call(dayjsValue) : dayjsValue.format("a"), idx, behavior);
        } else {
          var _getColList;

          scrollToTime(col, (_getColList = getColList(col)) === null || _getColList === void 0 ? void 0 : _getColList[0], idx, behavior);
        }
      });
      resetTriggerScroll();
    }, [cols, scrollToTime, dayjsValue, value, steps, getColList, resetTriggerScroll]);

    var handleTimeItemClick = function handleTimeItemClick(col, el, idx) {
      if (!timeItemCanUsed(col, el)) return;

      if (timeArr.includes(col)) {
        if (col === EPickerCols.hour && dayjsValue.format("a") === PM && cols.includes(EPickerCols.meridiem)) {
          el = Number(el) + 12;
        }

        scrollToTime(col, el, idx, "smooth");
        setTimeout(function () {
          var _dayjsValue$col3;

          onChange((_dayjsValue$col3 = dayjsValue[col]) === null || _dayjsValue$col3 === void 0 ? void 0 : _dayjsValue$col3.call(dayjsValue, el).format(format));
        }, 100);
      } else {
        var currentHour = dayjsValue.hour();

        if (el === AM && currentHour >= 12) {
          onChange(dayjsValue.hour(currentHour - 12).format(format));
        } else if (el === PM && currentHour < 12) {
          onChange(dayjsValue.hour(currentHour + 12).format(format));
        }
      }
    };

    React.useEffect(function () {
      updateTimeScrollPos(true);
    }, [value, updateTimeScrollPos]);
    React.useEffect(function () {
      if (triggerScroll) updateTimeScrollPos(true);
    }, [triggerScroll, updateTimeScrollPos]);
    var isCurrent = React.useCallback(function (col, colItem) {
      var _dayjsValue$col4;

      var colVal;

      if (col === EPickerCols.meridiem) {
        var currentMeridiem = dayjsValue.format("a");
        return currentMeridiem === colItem;
      }

      colVal = (_dayjsValue$col4 = dayjsValue[col]) === null || _dayjsValue$col4 === void 0 ? void 0 : _dayjsValue$col4.call(dayjsValue);

      if (col === EPickerCols.hour && /[h]{1}/.test(format)) {
        colVal %= 12;
      }

      return colVal === Number(colItem);
    }, [format, dayjsValue]);

    function renderScrollCtrl() {
      return cols.map(function (col, idx) {
        return /* @__PURE__ */React__default["default"].createElement("ul", {
          key: "".concat(col, "_").concat(idx),
          ref: function ref(el) {
            return colsRef.current[idx] = el;
          },
          className: "".concat(panelClassName, "-body-scroll"),
          onScroll: function onScroll() {
            return handleScroll(col, idx);
          },
          style: {
            "--timePickerPanelOffsetTop": panelOffset.top,
            "--timePickerPanelOffsetBottom": panelOffset.bottom
          }
        }, getColList(col).map(function (el) {
          var _classNames;

          return /* @__PURE__ */React__default["default"].createElement("li", {
            key: el,
            className: classNames$1("".concat(panelClassName, "-body-scroll-item"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), !timeItemCanUsed(col, el)), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-current"), isCurrent(col, el)), _classNames)),
            onClick: function onClick() {
              return handleTimeItemClick(col, el, idx);
            }
          }, timeArr.includes(col) ? TWELVE_HOUR_FORMAT.test(format) && el === "00" ? "12" : el : TEXT_CONFIG[el]);
        }));
      });
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-body")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-body-active-mask"),
      ref: maskRef
    }, cols.map(function (col, idx) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: "".concat(col, "_").concat(idx)
      });
    })), renderScrollCtrl());
  };

  function ownKeys$L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$L(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var TimePickerPanel$1 = function TimePickerPanel(props) {
    var _props$format = props.format,
        format = _props$format === void 0 ? DEFAULT_FORMAT : _props$format,
        _props$steps = props.steps,
        steps = _props$steps === void 0 ? DEFAULT_STEPS : _props$steps,
        handleConfirmClick = props.handleConfirmClick,
        isFooterDisplay = props.isFooterDisplay,
        onChange = props.onChange,
        value = props.value,
        _props$isShowPanel = props.isShowPanel,
        isShowPanel = _props$isShowPanel === void 0 ? true : _props$isShowPanel;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        triggerScroll = _useState2[0],
        toggleTriggerScroll = _useState2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var TEXT_CONFIG = useTimePickerTextConfig();
    var panelClassName = "".concat(classPrefix, "-time-picker__panel");
    var showNowTimeBtn = !!steps.filter(function (v) {
      return v > 1;
    }).length;
    var defaultValue = React.useMemo(function () {
      var isStepsSet = !!steps.filter(function (v) {
        return v > 1;
      }).length;

      if (value) {
        return dayjs(value, format);
      }

      if (isStepsSet) {
        return dayjs().hour(0).minute(0).second(0);
      }

      return dayjs();
    }, [value, format, steps]);
    React.useEffect(function () {
      if (isShowPanel) toggleTriggerScroll(true);
    }, [isShowPanel]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: panelClassName
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-section-body")
    }, /* @__PURE__ */React__default["default"].createElement(SinglePanel$1, _objectSpread$L(_objectSpread$L({}, props), {}, {
      format: format,
      steps: steps,
      value: value,
      triggerScroll: triggerScroll,
      isVisible: isShowPanel,
      resetTriggerScroll: function resetTriggerScroll() {
        return toggleTriggerScroll(false);
      }
    }))), isFooterDisplay ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-section-footer")
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "primary",
      variant: "base",
      onClick: function onClick() {
        handleConfirmClick(defaultValue);
      },
      size: "small"
    }, TEXT_CONFIG.confirm), !showNowTimeBtn ? /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "primary",
      variant: "text",
      size: "small",
      onClick: function onClick() {
        return onChange(dayjs().format(format));
      }
    }, TEXT_CONFIG.nowTime) : null) : null);
  };

  var timePickerDefaultProps = {
    allowInput: false,
    clearable: false,
    format: "HH:mm:ss",
    hideDisabledTime: true,
    size: "medium",
    steps: [1, 1, 1],
    defaultValue: ""
  };
  var timeRangePickerDefaultProps = {
    allowInput: false,
    clearable: false,
    format: "HH:mm:ss",
    hideDisabledTime: true,
    size: "medium",
    steps: [1, 1, 1],
    defaultValue: []
  };

  function ownKeys$K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$K(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var defaultArrVal = [void 0, void 0];

  var TimeRangePicker$1 = function TimeRangePicker(props) {
    var TEXT_CONFIG = useTimePickerTextConfig();
    var allowInput = props.allowInput,
        clearable = props.clearable,
        disabled = props.disabled,
        format = props.format,
        hideDisabledTime = props.hideDisabledTime,
        _props$placeholder = props.placeholder,
        placeholder = _props$placeholder === void 0 ? TEXT_CONFIG.rangePlaceholder : _props$placeholder,
        size = props.size,
        steps = props.steps,
        disableTime = props.disableTime,
        _props$onBlur = props.onBlur,
        onBlur = _props$onBlur === void 0 ? noop$1 : _props$onBlur,
        _props$onFocus = props.onFocus,
        onFocus = _props$onFocus === void 0 ? noop$1 : _props$onFocus,
        _props$onInput = props.onInput,
        onInput = _props$onInput === void 0 ? noop$1 : _props$onInput,
        style = props.style,
        className = props.className;

    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onChange = _useControlled2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      TimeIcon: TimeIcon
    }),
        TimeIcon$1 = _useGlobalIcon.TimeIcon;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isPanelShowed = _useState2[0],
        setPanelShow = _useState2[1];

    var _useState3 = React.useState(void 0),
        _useState4 = _slicedToArray(_useState3, 2),
        currentPanelIdx = _useState4[0],
        setCurrentPanelIdx = _useState4[1];

    var _useState5 = React.useState(["", ""]),
        _useState6 = _slicedToArray(_useState5, 2),
        currentValue = _useState6[0],
        setCurrentValue = _useState6[1];

    var name = "".concat(classPrefix, "-time-picker");
    var inputClasses = classNames$1("".concat(name, "__group"), _defineProperty$3({}, "".concat(classPrefix, "-is-focused"), isPanelShowed));

    var handleShowPopup = function handleShowPopup(visible) {
      setPanelShow(visible);
    };

    var handleClear = function handleClear(context) {
      var e = context.e;
      e.stopPropagation();
      onChange(void 0);
    };

    var handleClick = function handleClick(_ref) {
      var position = _ref.position;
      setCurrentPanelIdx(position === "first" ? 0 : 1);
    };

    var handleTimeChange = function handleTimeChange(newValue) {
      if (currentPanelIdx === 0) {
        var _currentValue$;

        setCurrentValue([newValue, (_currentValue$ = currentValue[1]) !== null && _currentValue$ !== void 0 ? _currentValue$ : newValue]);
      } else {
        var _currentValue$2;

        setCurrentValue([(_currentValue$2 = currentValue[0]) !== null && _currentValue$2 !== void 0 ? _currentValue$2 : newValue, newValue]);
      }
    };

    var handleInputBlur = function handleInputBlur(value2, _ref2) {
      var e = _ref2.e;

      if (allowInput) {
        var isValidTime = validateInputValue(currentValue[currentPanelIdx], format);

        if (isValidTime) {
          var _currentValue$3, _currentValue$4;

          var formattedVal = formatInputValue(currentValue[currentPanelIdx], format);
          currentPanelIdx === 0 ? setCurrentValue([formattedVal, (_currentValue$3 = currentValue[1]) !== null && _currentValue$3 !== void 0 ? _currentValue$3 : formattedVal]) : setCurrentValue([(_currentValue$4 = currentValue[0]) !== null && _currentValue$4 !== void 0 ? _currentValue$4 : formattedVal, formattedVal]);
        }
      }

      onBlur({
        value: value2,
        e: e
      });
    };

    var handleInputChange = function handleInputChange(inputVal, _ref3) {
      var e = _ref3.e,
          position = _ref3.position;
      setCurrentValue(inputVal);
      onInput({
        value: value,
        e: e,
        position: position
      });
    };

    var handleClickConfirm = function handleClickConfirm() {
      var isValidTime = !currentValue.find(function (v) {
        return !validateInputValue(v, format);
      });
      if (isValidTime) onChange(currentValue);
      setPanelShow(false);
    };

    var handleFocus = function handleFocus(value2, _ref4) {
      var e = _ref4.e,
          position = _ref4.position;
      onFocus({
        value: value2,
        e: e,
        position: position
      });
    };

    React.useEffect(function () {
      setCurrentValue(isPanelShowed ? value !== null && value !== void 0 ? value : TIME_PICKER_EMPTY : defaultArrVal);
      if (!isPanelShowed) setCurrentPanelIdx(void 0);
    }, [isPanelShowed]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(name, className),
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(RangeInputPopup, {
      style: style,
      disabled: disabled,
      popupVisible: isPanelShowed,
      onPopupVisibleChange: handleShowPopup,
      popupProps: _objectSpread$K({
        overlayInnerStyle: {
          width: "auto"
        }
      }, props.popupProps),
      onInputChange: handleInputChange,
      inputValue: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : defaultArrVal,
      rangeInputProps: _objectSpread$K({
        size: size,
        clearable: clearable,
        className: inputClasses,
        value: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : void 0,
        placeholder: placeholder,
        suffixIcon: /* @__PURE__ */React__default["default"].createElement(TimeIcon$1, null),
        onClear: handleClear,
        onClick: handleClick,
        onFocus: handleFocus,
        onBlur: handleInputBlur,
        readonly: !allowInput,
        activeIndex: currentPanelIdx
      }, props.rangeInputProps),
      panel: /* @__PURE__ */React__default["default"].createElement(TimePickerPanel$1, {
        steps: steps,
        format: format,
        disableTime: disableTime,
        isShowPanel: isPanelShowed,
        hideDisabledTime: hideDisabledTime,
        isFooterDisplay: true,
        value: currentValue[currentPanelIdx || 0],
        onChange: handleTimeChange,
        handleConfirmClick: handleClickConfirm,
        position: currentPanelIdx === 0 ? "start" : "end"
      })
    }));
  };

  TimeRangePicker$1.displayName = "TimeRangePicker";
  TimeRangePicker$1.defaultProps = timeRangePickerDefaultProps;

  function ownKeys$J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$J(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(customParseFormat);
  var TimePicker$1 = forwardRefWithStatics(function (props, ref) {
    var TEXT_CONFIG = useTimePickerTextConfig();
    var allowInput = props.allowInput,
        className = props.className,
        clearable = props.clearable,
        disabled = props.disabled,
        style = props.style,
        _props$format = props.format,
        format = _props$format === void 0 ? DEFAULT_FORMAT : _props$format,
        _props$hideDisabledTi = props.hideDisabledTime,
        hideDisabledTime = _props$hideDisabledTi === void 0 ? true : _props$hideDisabledTi,
        _props$steps = props.steps,
        steps = _props$steps === void 0 ? DEFAULT_STEPS : _props$steps,
        _props$placeholder = props.placeholder,
        placeholder = _props$placeholder === void 0 ? TEXT_CONFIG.placeholder : _props$placeholder,
        disableTime = props.disableTime,
        _props$onBlur = props.onBlur,
        onBlur = _props$onBlur === void 0 ? noop$1 : _props$onBlur,
        _props$onClose = props.onClose,
        onClose = _props$onClose === void 0 ? noop$1 : _props$onClose,
        _props$onFocus = props.onFocus,
        onFocus = _props$onFocus === void 0 ? noop$1 : _props$onFocus,
        _props$onOpen = props.onOpen,
        onOpen = _props$onOpen === void 0 ? noop$1 : _props$onOpen;

    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onChange = _useControlled2[1];

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isPanelShowed = _useState2[0],
        setPanelShow = _useState2[1];

    var _useState3 = React.useState(""),
        _useState4 = _slicedToArray(_useState3, 2),
        currentValue = _useState4[0],
        setCurrentValue = _useState4[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      TimeIcon: TimeIcon
    }),
        TimeIcon$1 = _useGlobalIcon.TimeIcon;

    var name = "".concat(classPrefix, "-time-picker");
    var inputClasses = classNames$1("".concat(name, "__group"), _defineProperty$3({}, "".concat(classPrefix, "-is-focused"), isPanelShowed));

    var handleShowPopup = function handleShowPopup(visible, context) {
      setPanelShow(visible);
      visible ? onOpen(context) : onClose(context);
    };

    var handleClear = function handleClear(context) {
      var e = context.e;
      e.stopPropagation();
      setCurrentValue("");
      onChange(null);
    };

    var handleInputChange = function handleInputChange(value2) {
      setCurrentValue(value2);
    };

    var handleInputBlur = function handleInputBlur(value2, _ref) {
      var e = _ref.e;

      if (allowInput) {
        var isValidTime = validateInputValue(currentValue, format);

        if (isValidTime) {
          onChange(formatInputValue(currentValue, format));
        }
      }

      onBlur({
        value: value2,
        e: e
      });
    };

    var handleClickConfirm = function handleClickConfirm() {
      var isValidTime = validateInputValue(currentValue, format);
      if (isValidTime) onChange(currentValue);
      setPanelShow(false);
    };

    React.useEffect(function () {
      setCurrentValue(isPanelShowed ? value !== null && value !== void 0 ? value : "" : "");
    }, [isPanelShowed, value]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(name, className),
      ref: ref,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(SelectInput, {
      onFocus: onFocus,
      onClear: handleClear,
      disabled: disabled,
      clearable: clearable,
      allowInput: allowInput,
      className: inputClasses,
      suffixIcon: /* @__PURE__ */React__default["default"].createElement(TimeIcon$1, null),
      popupVisible: isPanelShowed,
      onInputChange: handleInputChange,
      onBlur: handleInputBlur,
      onPopupVisibleChange: handleShowPopup,
      placeholder: !value ? placeholder : void 0,
      value: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : void 0,
      inputValue: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : void 0,
      inputProps: props.inputProps,
      popupProps: _objectSpread$J({
        overlayInnerStyle: {
          width: "auto"
        }
      }, props.popupProps),
      panel: /* @__PURE__ */React__default["default"].createElement(TimePickerPanel$1, {
        steps: steps,
        format: format,
        value: currentValue,
        isFooterDisplay: true,
        isShowPanel: isPanelShowed,
        disableTime: disableTime,
        onChange: setCurrentValue,
        hideDisabledTime: hideDisabledTime,
        handleConfirmClick: handleClickConfirm
      })
    }));
  }, {
    TimeRangePicker: TimeRangePicker$1,
    TimePickerPanel: TimePickerPanel$1
  });
  TimePicker$1.displayName = "TimePicker";
  TimePicker$1.defaultProps = timePickerDefaultProps;

  var TimePicker = TimePicker$1;
  var TimeRangePicker = TimeRangePicker$1;
  var TimePickerPanel = TimePickerPanel$1;

  function ownKeys$I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$I(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function PanelContent(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var panelName = "".concat(classPrefix, "-date-picker__panel");
    var value = props.value,
        year = props.year,
        month = props.month,
        mode = props.mode,
        format = props.format,
        enableTimePicker = props.enableTimePicker,
        timePickerProps = props.timePickerProps,
        firstDayOfWeek = props.firstDayOfWeek,
        _props$partial = props.partial,
        partial = _props$partial === void 0 ? "start" : _props$partial,
        time = props.time,
        tableData = props.tableData,
        _onMonthChange = props.onMonthChange,
        _onYearChange = props.onYearChange,
        _onJumperClick = props.onJumperClick,
        _onCellClick = props.onCellClick,
        _onCellMouseEnter = props.onCellMouseEnter,
        onCellMouseLeave = props.onCellMouseLeave,
        onTimePickerChange = props.onTimePickerChange;

    var _getDefaultFormat = getDefaultFormat({
      mode: mode,
      format: format,
      enableTimePicker: enableTimePicker
    }),
        timeFormat = _getDefaultFormat.timeFormat;

    var showTimePicker = enableTimePicker && mode === "date";
    var defaultTime = "00:00:00";
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelName, "-content")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelName, "-").concat(mode)
    }, /* @__PURE__ */React__default["default"].createElement(DatePickerHeader, {
      mode: mode,
      year: year,
      month: month,
      onMonthChange: function onMonthChange(val) {
        return _onMonthChange === null || _onMonthChange === void 0 ? void 0 : _onMonthChange(val, {
          partial: partial
        });
      },
      onYearChange: function onYearChange(val) {
        return _onYearChange === null || _onYearChange === void 0 ? void 0 : _onYearChange(val, {
          partial: partial
        });
      },
      onJumperClick: function onJumperClick(_ref) {
        var trigger = _ref.trigger;
        return _onJumperClick === null || _onJumperClick === void 0 ? void 0 : _onJumperClick({
          trigger: trigger,
          partial: partial
        });
      }
    }), /* @__PURE__ */React__default["default"].createElement(DatePickerTable, {
      mode: mode,
      data: tableData,
      value: value,
      time: time,
      format: format,
      firstDayOfWeek: firstDayOfWeek,
      onCellClick: function onCellClick(date, _ref2) {
        var e = _ref2.e;
        return _onCellClick === null || _onCellClick === void 0 ? void 0 : _onCellClick(date, {
          e: e,
          partial: partial
        });
      },
      onCellMouseEnter: function onCellMouseEnter(date) {
        return _onCellMouseEnter === null || _onCellMouseEnter === void 0 ? void 0 : _onCellMouseEnter(date, {
          partial: partial
        });
      },
      onCellMouseLeave: onCellMouseLeave
    })), showTimePicker && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelName, "-time")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelName, "-time-viewer")
    }, time || defaultTime), /* @__PURE__ */React__default["default"].createElement(TimePickerPanel, _objectSpread$I({
      key: partial,
      format: timeFormat,
      value: time || defaultTime,
      onChange: onTimePickerChange,
      isShowPanel: props.popupVisible
    }, timePickerProps))));
  }

  var DatePickerFooter = function DatePickerFooter(props) {
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var confirmText = t(local.confirm);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var enableTimePicker = props.enableTimePicker,
        onConfirmClick = props.onConfirmClick,
        _props$presetsPlaceme = props.presetsPlacement,
        presetsPlacement = _props$presetsPlaceme === void 0 ? "bottom" : _props$presetsPlaceme,
        presets = props.presets,
        onPresetClick = props.onPresetClick,
        selectedValue = props.selectedValue;
    var footerClass = classNames$1("".concat(classPrefix, "-date-picker__footer"), "".concat(classPrefix, "-date-picker__footer--").concat(presetsPlacement));
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: footerClass
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__presets")
    }, presets && Object.keys(presets).map(function (key) {
      return /* @__PURE__ */React__default["default"].createElement(Button, {
        key: key,
        size: "small",
        variant: "text",
        onClick: function onClick(e) {
          return onPresetClick(presets[key], {
            e: e,
            preset: _defineProperty$3({}, key, presets[key])
          });
        }
      }, key);
    })), enableTimePicker && /* @__PURE__ */React__default["default"].createElement(Button, {
      disabled: !selectedValue,
      size: "small",
      theme: "primary",
      onClick: function onClick(e) {
        return onConfirmClick({
          e: e
        });
      }
    }, confirmText));
  };

  DatePickerFooter.displayName = "DatePickerFooter";

  function ExtraContent(props) {
    var presets = props.presets,
        enableTimePicker = props.enableTimePicker,
        presetsPlacement = props.presetsPlacement,
        onPresetClick = props.onPresetClick,
        onConfirmClick = props.onConfirmClick,
        selectedValue = props.selectedValue;
    var showPanelFooter = enableTimePicker || presets;
    return showPanelFooter ? /* @__PURE__ */React__default["default"].createElement(DatePickerFooter, {
      presets: presets,
      onPresetClick: onPresetClick,
      enableTimePicker: enableTimePicker,
      onConfirmClick: onConfirmClick,
      presetsPlacement: presetsPlacement,
      selectedValue: selectedValue
    }) : null;
  }

  function useTableData(props) {
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var monthLocal = t(local.months);
    var quarterLocal = t(local.quarters);
    var start = props.start,
        end = props.end,
        hoverStart = props.hoverStart,
        hoverEnd = props.hoverEnd,
        year = props.year,
        month = props.month,
        mode = props.mode,
        firstDayOfWeek = props.firstDayOfWeek,
        disableDate = props.disableDate,
        minDate = props.minDate,
        maxDate = props.maxDate,
        isRange = props.isRange;
    var data = [];
    var options = {
      minDate: minDate,
      maxDate: maxDate,
      disableDate: disableDate,
      firstDayOfWeek: firstDayOfWeek,
      monthLocal: monthLocal,
      quarterLocal: quarterLocal,
      showWeekOfYear: mode === "week"
    };

    if (mode === "date") {
      data = getWeeks({
        year: year,
        month: month
      }, options);
    } else if (mode === "week") {
      data = getWeeks({
        year: year,
        month: month
      }, options);
    } else if (mode === "quarter") {
      data = getQuarters(year, options);
    } else if (mode === "month") {
      data = getMonths(year, options);
    } else if (mode === "year") {
      data = getYears(year, options);
    }

    return flagActive(data, {
      start: start,
      end: end,
      hoverStart: hoverStart,
      hoverEnd: hoverEnd,
      type: mode,
      isRange: isRange
    });
  }

  function useDisableDate(props) {
    var _disableDate = props.disableDate,
        format = props.format,
        mode = props.mode,
        start = props.start,
        end = props.end;
    return {
      disableDate: function disableDate(value) {
        return !isEnabled({
          disableDate: _disableDate,
          format: format,
          mode: mode,
          value: value
        });
      },
      minDate: isObject_1(_disableDate) && "before" in _disableDate ? new Date(_disableDate.before) : start,
      maxDate: isObject_1(_disableDate) && "after" in _disableDate ? new Date(_disableDate.after) : end
    };
  }

  function isEnabled(props) {
    var disableDate = props.disableDate,
        value = props.value,
        format = props.format,
        mode = props.mode;
    if (!disableDate) return true;
    var isEnabled2 = true;

    if (typeof disableDate === "function") {
      return !disableDate(value);
    }

    if (Array.isArray(disableDate)) {
      var isIncludes = false;
      var formatedDisabledDate = disableDate.map(function (item) {
        return dayjs(item, format);
      });
      formatedDisabledDate.forEach(function (item) {
        if (item.isSame(dayjs(value))) {
          isIncludes = true;
        }
      });
      return !isIncludes;
    }

    var from = disableDate.from,
        to = disableDate.to,
        before = disableDate.before,
        after = disableDate.after;

    if (from && to) {
      var compareMin = dayjs(new Date(from));
      var compareMax = dayjs(new Date(to));
      return !dayjs(value).isBetween(compareMin, compareMax, mode, "[]");
    }

    var min = before ? new Date(before) : null;
    var max = after ? new Date(after) : null;

    if (max && min) {
      var _compareMin = dayjs(new Date(min));

      var _compareMax = dayjs(new Date(max));

      isEnabled2 = dayjs(value).isBetween(_compareMin, _compareMax, mode, "[]");
    } else if (min) {
      var _compareMin2 = dayjs(new Date(min));

      isEnabled2 = !dayjs(value).isBefore(_compareMin2, mode);
    } else if (max) {
      var _compareMax2 = dayjs(new Date(max));

      isEnabled2 = !dayjs(value).isAfter(_compareMax2, mode);
    }

    return isEnabled2;
  }

  function ownKeys$H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$H(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var RangePanel = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix,
        globalDatePickerConfig = _useConfig.datePicker;

    var panelName = "".concat(classPrefix, "-date-range-picker__panel");
    var _props$value = props.value,
        value = _props$value === void 0 ? [] : _props$value,
        _props$hoverValue = props.hoverValue,
        hoverValue = _props$hoverValue === void 0 ? [] : _props$hoverValue,
        mode = props.mode,
        presets = props.presets,
        enableTimePicker = props.enableTimePicker,
        presetsPlacement = props.presetsPlacement,
        disableDateFromProps = props.disableDate,
        _props$firstDayOfWeek = props.firstDayOfWeek,
        firstDayOfWeek = _props$firstDayOfWeek === void 0 ? globalDatePickerConfig.firstDayOfWeek : _props$firstDayOfWeek,
        isFirstValueSelected = props.isFirstValueSelected,
        style = props.style,
        className = props.className,
        activeIndex = props.activeIndex,
        year = props.year,
        month = props.month,
        _props$time = props.time,
        time = _props$time === void 0 ? [] : _props$time,
        panelPreselection = props.panelPreselection,
        _onClick = props.onClick,
        onConfirmClick = props.onConfirmClick,
        onPresetClick = props.onPresetClick;

    var _getDefaultFormat = getDefaultFormat({
      mode: props.mode,
      format: props.format,
      enableTimePicker: props.enableTimePicker
    }),
        format = _getDefaultFormat.format;

    var disableDateOptions = useDisableDate({
      disableDate: disableDateFromProps,
      mode: mode,
      format: format,
      start: isFirstValueSelected && activeIndex === 1 ? new Date(parseToDayjs(value[0], format, "start").toDate().setHours(0, 0, 0)) : void 0,
      end: isFirstValueSelected && activeIndex === 0 ? new Date(parseToDayjs(value[1], format).toDate().setHours(23, 59, 59)) : void 0
    });

    var _year = _slicedToArray(year, 2),
        startYear = _year[0],
        endYear = _year[1];

    var _month = _slicedToArray(month, 2),
        startMonth = _month[0],
        endMonth = _month[1];

    var hidePreselection = !panelPreselection && value.length === 2;
    var startTableData = useTableData(_objectSpread$H({
      isRange: true,
      start: value[0] ? parseToDayjs(value[0], format).toDate() : void 0,
      end: value[1] ? parseToDayjs(value[1], format).toDate() : void 0,
      hoverStart: !hidePreselection && hoverValue[0] ? parseToDayjs(hoverValue[0], format).toDate() : void 0,
      hoverEnd: !hidePreselection && hoverValue[1] ? parseToDayjs(hoverValue[1], format).toDate() : void 0,
      year: startYear,
      month: startMonth,
      mode: mode,
      firstDayOfWeek: firstDayOfWeek
    }, disableDateOptions));
    var endTableData = useTableData(_objectSpread$H({
      isRange: true,
      start: value[0] ? parseToDayjs(value[0], format).toDate() : void 0,
      end: value[1] ? parseToDayjs(value[1], format).toDate() : void 0,
      hoverStart: !hidePreselection && hoverValue[0] ? parseToDayjs(hoverValue[0], format).toDate() : void 0,
      hoverEnd: !hidePreselection && hoverValue[1] ? parseToDayjs(hoverValue[1], format).toDate() : void 0,
      year: endYear,
      month: endMonth,
      mode: mode,
      firstDayOfWeek: firstDayOfWeek
    }, disableDateOptions));
    var panelContentProps = {
      mode: mode,
      format: format,
      firstDayOfWeek: firstDayOfWeek,
      popupVisible: props.popupVisible,
      enableTimePicker: props.enableTimePicker,
      timePickerProps: props.timePickerProps,
      onMonthChange: props.onMonthChange,
      onYearChange: props.onYearChange,
      onJumperClick: props.onJumperClick,
      onCellClick: props.onCellClick,
      onCellMouseEnter: props.onCellMouseEnter,
      onCellMouseLeave: props.onCellMouseLeave,
      onTimePickerChange: props.onTimePickerChange
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1(panelName, className, _defineProperty$3({}, "".concat(panelName, "--direction-row"), ["left", "right"].includes(presetsPlacement))),
      onClick: function onClick(e) {
        return _onClick === null || _onClick === void 0 ? void 0 : _onClick({
          e: e
        });
      }
    }, ["top", "left"].includes(presetsPlacement) ? /* @__PURE__ */React__default["default"].createElement(ExtraContent, {
      presets: presets,
      selectedValue: value[activeIndex],
      enableTimePicker: enableTimePicker,
      onPresetClick: onPresetClick,
      onConfirmClick: onConfirmClick,
      presetsPlacement: presetsPlacement
    }) : null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelName, "-content-wrapper")
    }, !enableTimePicker ? [/* @__PURE__ */React__default["default"].createElement(PanelContent, _objectSpread$H({
      key: "startPanel",
      partial: "start",
      year: startYear,
      month: startMonth,
      time: time[0],
      tableData: startTableData,
      value: value
    }, panelContentProps)), /* @__PURE__ */React__default["default"].createElement(PanelContent, _objectSpread$H({
      key: "endPanel",
      partial: "end",
      year: endYear,
      month: endMonth,
      time: time[1],
      value: value,
      tableData: endTableData
    }, panelContentProps))] : /* @__PURE__ */React__default["default"].createElement(PanelContent, _objectSpread$H({
      key: "start",
      partial: activeIndex ? "end" : "start",
      year: activeIndex ? endYear : startYear,
      month: activeIndex ? endMonth : startMonth,
      time: activeIndex ? time[1] : time[0],
      value: value,
      tableData: activeIndex ? endTableData : startTableData
    }, panelContentProps))), ["bottom", "right"].includes(presetsPlacement) ? /* @__PURE__ */React__default["default"].createElement(ExtraContent, {
      presets: presets,
      selectedValue: value[activeIndex],
      enableTimePicker: enableTimePicker,
      onPresetClick: onPresetClick,
      onConfirmClick: onConfirmClick,
      presetsPlacement: presetsPlacement
    }) : null);
  });
  RangePanel.displayName = "RangePanel";
  RangePanel.defaultProps = {
    mode: "date",
    panelPreselection: true,
    enableTimePicker: false,
    presetsPlacement: "bottom"
  };

  function initYearMonthTime(_ref) {
    var value = _ref.value,
        _ref$mode = _ref.mode,
        mode = _ref$mode === void 0 ? "date" : _ref$mode,
        format = _ref.format,
        _ref$timeFormat = _ref.timeFormat,
        timeFormat = _ref$timeFormat === void 0 ? "HH:mm:ss" : _ref$timeFormat,
        enableTimePicker = _ref.enableTimePicker;
    var defaultYearMonthTime = {
      year: [dayjs().year(), dayjs().year()],
      month: [dayjs().month(), dayjs().month()],
      time: [dayjs().format(timeFormat), dayjs().format(timeFormat)]
    };

    if (mode === "year") {
      defaultYearMonthTime.year[1] += 10;
    } else if (mode === "month" || mode === "quarter") {
      defaultYearMonthTime.year[1] += 1;
    } else if ((mode === "date" || mode === "week") && !enableTimePicker) {
      defaultYearMonthTime.month[1] += 1;
    }

    if (!value || !Array.isArray(value) || !value.length) {
      return defaultYearMonthTime;
    }

    return {
      year: value.map(function (v) {
        return parseToDayjs(v, format).year();
      }),
      month: value.map(function (v) {
        return parseToDayjs(v, format).month();
      }),
      time: value.map(function (v) {
        return parseToDayjs(v, format).format(timeFormat);
      })
    };
  }
  function useRange$1(props) {
    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onChange = _useControlled2[1];

    var _getDefaultFormat = getDefaultFormat({
      mode: props.mode,
      format: props.format,
      valueType: props.valueType,
      enableTimePicker: props.enableTimePicker
    }),
        format = _getDefaultFormat.format,
        valueType = _getDefaultFormat.valueType,
        timeFormat = _getDefaultFormat.timeFormat;

    if (props.enableTimePicker) {
      if (!extractTimeFormat(format)) log.error("DatePicker", "format: ".concat(format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
      if (!extractTimeFormat(valueType) && valueType !== "time-stamp") log.error("DatePicker", "valueType: ".concat(valueType, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
    }

    if (!Array.isArray(value)) {
      log.error("DatePicker", "typeof value: ".concat(value, " must be Array!"));
    } else if (!isValidDate(value, valueType)) {
      log.error("DatePicker", "value: ".concat(value, " is invalid dateTime! Check whether the value is consistent with format: ").concat(format));
    }

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isFirstValueSelected = _useState2[0],
        setIsFirstValueSelected = _useState2[1];

    var _useState3 = React.useState(initYearMonthTime({
      value: value,
      mode: props.mode,
      format: format,
      timeFormat: timeFormat
    }).time),
        _useState4 = _slicedToArray(_useState3, 2),
        time = _useState4[0],
        setTime = _useState4[1];

    var _useState5 = React.useState(initYearMonthTime({
      value: value,
      mode: props.mode,
      format: format,
      enableTimePicker: props.enableTimePicker
    }).month),
        _useState6 = _slicedToArray(_useState5, 2),
        month = _useState6[0],
        setMonth = _useState6[1];

    var _useState7 = React.useState(initYearMonthTime({
      value: value,
      mode: props.mode,
      format: format
    }).year),
        _useState8 = _slicedToArray(_useState7, 2),
        year = _useState8[0],
        setYear = _useState8[1];

    var _useState9 = React.useState(formatDate(value, {
      format: format,
      targetFormat: format
    })),
        _useState10 = _slicedToArray(_useState9, 2),
        cacheValue = _useState10[0],
        setCacheValue = _useState10[1];

    React.useEffect(function () {
      if (!value) {
        setCacheValue([]);
        return;
      }

      if (!isValidDate(value, valueType)) return;
      setCacheValue(formatDate(value, {
        format: format,
        targetFormat: format
      }));
      setTime(formatTime(value, timeFormat));
    }, [value]);
    return {
      value: value,
      onChange: onChange,
      year: year,
      setYear: setYear,
      month: month,
      setMonth: setMonth,
      time: time,
      setTime: setTime,
      isFirstValueSelected: isFirstValueSelected,
      setIsFirstValueSelected: setIsFirstValueSelected,
      cacheValue: cacheValue,
      setCacheValue: setCacheValue
    };
  }

  function ownKeys$G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$G(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var PARTIAL_MAP = {
    first: "start",
    second: "end"
  };
  function useRange(props) {
    var _props$separator, _props$placeholder, _props$suffixIcon, _props$popupProps$ove, _props$popupProps, _props$popupProps2;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix,
        globalDatePickerConfig = _useConfig.datePicker;

    var _useGlobalIcon = useGlobalIcon({
      CalendarIcon: CalendarIcon
    }),
        CalendarIcon$1 = _useGlobalIcon.CalendarIcon;

    var name = "".concat(classPrefix, "-date-range-picker");
    var isMountedRef = React.useRef(false);
    var inputRef = React.useRef();

    var _useRangeValue = useRange$1(props),
        value = _useRangeValue.value,
        onChange = _useRangeValue.onChange,
        time = _useRangeValue.time,
        setTime = _useRangeValue.setTime,
        month = _useRangeValue.month,
        setMonth = _useRangeValue.setMonth,
        year = _useRangeValue.year,
        setYear = _useRangeValue.setYear,
        cacheValue = _useRangeValue.cacheValue,
        setCacheValue = _useRangeValue.setCacheValue,
        isFirstValueSelected = _useRangeValue.isFirstValueSelected,
        setIsFirstValueSelected = _useRangeValue.setIsFirstValueSelected;

    var _getDefaultFormat = getDefaultFormat({
      mode: props.mode,
      format: props.format,
      valueType: props.valueType,
      enableTimePicker: props.enableTimePicker
    }),
        format = _getDefaultFormat.format,
        valueType = _getDefaultFormat.valueType,
        timeFormat = _getDefaultFormat.timeFormat;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        popupVisible = _useState2[0],
        setPopupVisible = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isHoverCell = _useState4[0],
        setIsHoverCell = _useState4[1];

    var _useState5 = React.useState(0),
        _useState6 = _slicedToArray(_useState5, 2),
        activeIndex = _useState6[0],
        setActiveIndex = _useState6[1];

    var _useState7 = React.useState(formatDate(value, {
      format: format,
      targetFormat: format
    })),
        _useState8 = _slicedToArray(_useState7, 2),
        inputValue = _useState8[0],
        setInputValue = _useState8[1];

    var rangeInputProps = _objectSpread$G(_objectSpread$G({}, props.rangeInputProps), {}, {
      ref: inputRef,
      separator: (_props$separator = props.separator) !== null && _props$separator !== void 0 ? _props$separator : globalDatePickerConfig.rangeSeparator,
      clearable: props.clearable,
      prefixIcon: props.prefixIcon,
      readonly: !props.allowInput,
      placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : globalDatePickerConfig.placeholder[props.mode],
      activeIndex: popupVisible ? activeIndex : void 0,
      suffixIcon: (_props$suffixIcon = props.suffixIcon) !== null && _props$suffixIcon !== void 0 ? _props$suffixIcon : /* @__PURE__ */React__default["default"].createElement(CalendarIcon$1, null),
      className: classNames$1(_defineProperty$3({}, "".concat(name, "__input--placeholder"), isHoverCell)),
      onClick: function onClick(_ref) {
        var position = _ref.position;
        setActiveIndex(position === "first" ? 0 : 1);
      },
      onClear: function onClear(_ref2) {
        var e = _ref2.e;
        e.stopPropagation();
        setPopupVisible(false);
        onChange([], {
          dayjsValue: [],
          trigger: "clear"
        });
      },
      onBlur: function onBlur(newVal, _ref3) {
        var _props$onBlur;

        var e = _ref3.e,
            position = _ref3.position;
        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
          value: newVal,
          partial: PARTIAL_MAP[position],
          e: e
        });
      },
      onFocus: function onFocus(newVal, _ref4) {
        var _props$onFocus;

        var e = _ref4.e,
            position = _ref4.position;
        (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
          value: newVal,
          partial: PARTIAL_MAP[position],
          e: e
        });
        setActiveIndex(position === "first" ? 0 : 1);
      },
      onChange: function onChange(newVal, _ref5) {
        var _props$onInput;

        var e = _ref5.e,
            position = _ref5.position;
        var index = position === "first" ? 0 : 1;
        (_props$onInput = props.onInput) === null || _props$onInput === void 0 ? void 0 : _props$onInput.call(props, {
          input: newVal[index],
          value: value,
          partial: PARTIAL_MAP[position],
          e: e
        });
        setInputValue(newVal);
        if (!isValidDate(newVal, format)) return;
        var newYear = [];
        var newMonth = [];
        var newTime = [];
        newVal.forEach(function (v, i) {
          newYear.push(dayjs(v).year() || year[i]);
          newMonth.push(dayjs(v).month() || month[i]);
          newTime.push(dayjs(v).format(timeFormat) || time[i]);
        });
        setYear(newYear);
        setMonth(newMonth);
        setTime(newTime);
      },
      onEnter: function onEnter(newVal) {
        if (!isValidDate(newVal, format) && !isValidDate(value, format)) return;
        setPopupVisible(false);

        if (isValidDate(newVal, format)) {
          onChange(formatDate(newVal, {
            format: format,
            targetFormat: valueType
          }), {
            dayjsValue: newVal.map(function (v) {
              return dayjs(v);
            }),
            trigger: "enter"
          });
        } else if (isValidDate(value, format)) {
          setInputValue(formatDate(value, {
            format: format,
            targetFormat: format
          }));
        } else {
          setInputValue([]);
        }
      }
    });

    var popupProps = _objectSpread$G(_objectSpread$G({
      expandAnimation: true
    }, props.popupProps), {}, {
      overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
        width: "auto"
      },
      overlayClassName: classNames$1((_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(name, "__panel-container")),
      onVisibleChange: function onVisibleChange(visible, context) {
        if (context.trigger === "trigger-element-click") {
          var indexMap = {
            0: "first",
            1: "second"
          };
          inputRef.current.focus({
            position: indexMap[activeIndex]
          });
          return setPopupVisible(true);
        }

        setPopupVisible(visible);
      }
    });

    React.useEffect(function () {
      if (!value) {
        setInputValue([]);
        return;
      }

      if (!isValidDate(value, valueType)) return;
      setInputValue(formatDate(value, {
        format: format,
        targetFormat: format
      }));
    }, [value]);
    React.useEffect(function () {
      if (!isMountedRef.current) {
        isMountedRef.current = true;
        return;
      }

      var indexMap = {
        0: "first",
        1: "second"
      };
      inputRef.current.focus({
        position: indexMap[activeIndex]
      });
    }, [activeIndex]);
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      inputValue: inputValue,
      popupVisible: popupVisible,
      rangeInputProps: rangeInputProps,
      popupProps: popupProps,
      isHoverCell: isHoverCell,
      onChange: onChange,
      setYear: setYear,
      setMonth: setMonth,
      setTime: setTime,
      setIsHoverCell: setIsHoverCell,
      setInputValue: setInputValue,
      setPopupVisible: setPopupVisible,
      activeIndex: activeIndex,
      setActiveIndex: setActiveIndex,
      isFirstValueSelected: isFirstValueSelected,
      setIsFirstValueSelected: setIsFirstValueSelected,
      cacheValue: cacheValue,
      setCacheValue: setCacheValue
    };
  }

  var datePickerDefaultProps = {
    allowInput: false,
    clearable: false,
    enableTimePicker: false,
    format: void 0,
    mode: "date",
    placeholder: void 0,
    presetsPlacement: "bottom",
    defaultValue: ""
  };
  var dateRangePickerDefaultProps = {
    allowInput: false,
    clearable: false,
    enableTimePicker: false,
    mode: "date",
    panelPreselection: true,
    presetsPlacement: "bottom",
    defaultValue: []
  };

  function ownKeys$F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$F(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DateRangePicker$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix,
        globalDatePickerConfig = _useConfig.datePicker;

    var className = props.className,
        style = props.style,
        disabled = props.disabled,
        mode = props.mode,
        enableTimePicker = props.enableTimePicker,
        disableDate = props.disableDate,
        _props$firstDayOfWeek = props.firstDayOfWeek,
        firstDayOfWeek = _props$firstDayOfWeek === void 0 ? globalDatePickerConfig.firstDayOfWeek : _props$firstDayOfWeek,
        presets = props.presets,
        timePickerProps = props.timePickerProps,
        presetsPlacement = props.presetsPlacement,
        panelPreselection = props.panelPreselection,
        onPick = props.onPick;

    var _useRange = useRange(props),
        inputValue = _useRange.inputValue,
        popupVisible = _useRange.popupVisible,
        rangeInputProps = _useRange.rangeInputProps,
        popupProps = _useRange.popupProps,
        value = _useRange.value,
        year = _useRange.year,
        month = _useRange.month,
        time = _useRange.time,
        activeIndex = _useRange.activeIndex,
        isHoverCell = _useRange.isHoverCell,
        setActiveIndex = _useRange.setActiveIndex,
        onChange = _useRange.onChange,
        setIsHoverCell = _useRange.setIsHoverCell,
        setInputValue = _useRange.setInputValue,
        setPopupVisible = _useRange.setPopupVisible,
        setTime = _useRange.setTime,
        setYear = _useRange.setYear,
        setMonth = _useRange.setMonth,
        isFirstValueSelected = _useRange.isFirstValueSelected,
        setIsFirstValueSelected = _useRange.setIsFirstValueSelected,
        cacheValue = _useRange.cacheValue,
        setCacheValue = _useRange.setCacheValue;

    var _getDefaultFormat = getDefaultFormat({
      mode: mode,
      enableTimePicker: enableTimePicker,
      format: props.format,
      valueType: props.valueType
    }),
        format = _getDefaultFormat.format,
        valueType = _getDefaultFormat.valueType,
        timeFormat = _getDefaultFormat.timeFormat;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isSelected = _useState2[0],
        setIsSelected = _useState2[1];

    React.useEffect(function () {
      if (popupVisible) {
        setIsSelected(false);
        setCacheValue(formatDate(value || [], {
          format: format,
          targetFormat: format
        }));
        setTime(formatTime(value || [dayjs().format(timeFormat), dayjs().format(timeFormat)], timeFormat));

        if (!value.length) {
          setYear(initYearMonthTime({
            value: value,
            mode: mode,
            format: format
          }).year);
          setMonth(initYearMonthTime({
            value: value,
            mode: mode,
            format: format,
            enableTimePicker: enableTimePicker
          }).month);
        } else if (value.length === 2 && !enableTimePicker) {
          var nextMonth = value.map(function (v) {
            return parseToDayjs(v || new Date(), format).month();
          });

          if (year[0] === year[1] && nextMonth[0] === nextMonth[1]) {
            nextMonth[0] === 11 ? nextMonth[0] -= 1 : nextMonth[1] += 1;
          }

          setMonth(nextMonth);
        } else {
          setYear(value.map(function (v) {
            return parseToDayjs(v || new Date(), format).year();
          }));
          setMonth(value.map(function (v) {
            return parseToDayjs(v || new Date(), format).month();
          }));
        }
      } else {
        setIsHoverCell(false);
        setIsFirstValueSelected(false);
        setInputValue(formatDate(value || [], {
          format: format,
          targetFormat: format
        }));
      }
    }, [popupVisible]);

    function onCellMouseEnter(date) {
      setIsHoverCell(true);

      var nextValue = _toConsumableArray(inputValue);

      nextValue[activeIndex] = formatDate(date, {
        format: format,
        targetFormat: format
      });
      setInputValue(nextValue);
    }

    function onCellMouseLeave() {
      setIsHoverCell(false);
      setInputValue(cacheValue);
    }

    function onCellClick(date, _ref) {
      var e = _ref.e,
          partial = _ref.partial;
      onPick === null || onPick === void 0 ? void 0 : onPick(date, {
        e: e,
        partial: activeIndex ? "end" : "start"
      });
      setIsHoverCell(false);
      setIsSelected(true);

      var nextValue = _toConsumableArray(inputValue);

      nextValue[activeIndex] = formatDate(date, {
        format: format,
        targetFormat: format
      });
      setCacheValue(nextValue);
      setInputValue(nextValue);

      if (mode === "date") {
        var partialIndex = partial === "start" ? 0 : 1;
        var isAdditional = dayjs(date).month() !== month[partialIndex];

        if (isAdditional) {
          if (activeIndex === 0) setMonth([dayjs(date).month(), Math.min(dayjs(date).month() + 1, 11)]);
          if (activeIndex === 1) setMonth([Math.max(dayjs(date).month() - 1, 0), dayjs(date).month()]);
        }
      }

      if (enableTimePicker) return;
      var notValidIndex = nextValue.findIndex(function (v) {
        return !v || !isValidDate(v, format);
      });

      if (notValidIndex === -1 && nextValue.length === 2) {
        onChange(formatDate(nextValue, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: nextValue.map(function (v) {
            return dayjs(v);
          }),
          trigger: "pick"
        });
      }

      if (!isFirstValueSelected) {
        var nextIndex = notValidIndex;
        if (nextIndex === -1) nextIndex = activeIndex ? 0 : 1;
        setActiveIndex(nextIndex);
        setIsFirstValueSelected(true);
      } else {
        setPopupVisible(false);
      }
    }

    function onJumperClick(_ref2) {
      var trigger = _ref2.trigger,
          partial = _ref2.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[mode] || 0;
      var current = new Date(year[partialIndex], month[partialIndex]);
      var next = null;

      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }

      var nextYear = _toConsumableArray(year);

      nextYear[partialIndex] = next.getFullYear();

      var nextMonth = _toConsumableArray(month);

      nextMonth[partialIndex] = next.getMonth();

      if (partialIndex === 0) {
        nextYear[1] = Math.max(nextYear[0], nextYear[1]);

        if (nextYear[0] === nextYear[1]) {
          nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
        }
      }

      if (partialIndex === 1) {
        nextYear[0] = Math.min(nextYear[0], nextYear[1]);

        if (nextYear[0] === nextYear[1]) {
          nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
        }
      }

      setYear(nextYear);
      setMonth(nextMonth);
    }

    function onTimePickerChange(val) {
      var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;

      var nextInputValue = _toConsumableArray(inputValue);

      var changedInputValue = inputValue[activeIndex];
      var currentDate = !dayjs(changedInputValue, format).isValid() ? dayjs().year(year[activeIndex]).month(month[activeIndex]) : dayjs(changedInputValue, format);
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      nextInputValue[activeIndex] = nextDate;

      var nextTime = _toConsumableArray(time);

      nextTime[activeIndex] = val;
      setTime(nextTime);
      setIsSelected(true);
      setInputValue(formatDate(nextInputValue, {
        format: format,
        targetFormat: format
      }));
      setCacheValue(formatDate(nextInputValue, {
        format: format,
        targetFormat: format
      }));
    }

    function onConfirmClick() {
      var nextValue = _toConsumableArray(inputValue);

      var notValidIndex = nextValue.findIndex(function (v) {
        return !v || !isValidDate(v, format);
      });

      if (notValidIndex === -1 && nextValue.length === 2) {
        onChange(formatDate(nextValue, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: nextValue.map(function (v) {
            return dayjs(v);
          }),
          trigger: "confirm"
        });
        setYear(nextValue.map(function (v) {
          return dayjs(v, format).year();
        }));
        setMonth(nextValue.map(function (v) {
          return dayjs(v, format).month();
        }));
      }

      if (!isFirstValueSelected) {
        var nextIndex = notValidIndex;
        if (nextIndex === -1) nextIndex = activeIndex ? 0 : 1;
        setActiveIndex(nextIndex);
        setIsFirstValueSelected(true);
      } else {
        setPopupVisible(false);
      }
    }

    function onPresetClick(preset) {
      var presetValue = preset;

      if (typeof preset === "function") {
        presetValue = preset();
      }

      if (!Array.isArray(presetValue)) {
        log.error("DateRangePicker", "preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
      } else {
        onChange(formatDate(presetValue, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: presetValue.map(function (p) {
            return dayjs(p);
          }),
          trigger: "preset"
        });
        setPopupVisible(false);
      }
    }

    function onYearChange(nextVal, _ref3) {
      var partial = _ref3.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (enableTimePicker) partialIndex = activeIndex;

      var nextYear = _toConsumableArray(year);

      nextYear[partialIndex] = nextVal;
      if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
      if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
      setYear(nextYear);
    }

    function onMonthChange(nextVal, _ref4) {
      var partial = _ref4.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (enableTimePicker) partialIndex = activeIndex;

      var nextMonth = _toConsumableArray(month);

      nextMonth[partialIndex] = nextVal;

      if (year[0] === year[1]) {
        if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
        if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
      }

      setMonth(nextMonth);
    }

    var panelProps = {
      hoverValue: isHoverCell ? inputValue : [],
      value: isSelected ? cacheValue : value,
      isFirstValueSelected: isFirstValueSelected,
      panelPreselection: panelPreselection,
      year: year,
      month: month,
      mode: mode,
      format: format,
      presets: presets,
      time: time,
      disableDate: disableDate,
      firstDayOfWeek: firstDayOfWeek,
      timePickerProps: timePickerProps,
      enableTimePicker: enableTimePicker,
      presetsPlacement: presetsPlacement,
      activeIndex: activeIndex,
      popupVisible: popupVisible,
      onCellClick: onCellClick,
      onCellMouseEnter: onCellMouseEnter,
      onCellMouseLeave: onCellMouseLeave,
      onJumperClick: onJumperClick,
      onConfirmClick: onConfirmClick,
      onPresetClick: onPresetClick,
      onYearChange: onYearChange,
      onMonthChange: onMonthChange,
      onTimePickerChange: onTimePickerChange
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-date-range-picker"), className),
      style: style,
      ref: ref
    }, /* @__PURE__ */React__default["default"].createElement(RangeInputPopup, {
      disabled: disabled,
      status: props.status,
      tips: props.tips,
      inputValue: inputValue,
      popupProps: popupProps,
      rangeInputProps: rangeInputProps,
      popupVisible: popupVisible,
      panel: /* @__PURE__ */React__default["default"].createElement(RangePanel, _objectSpread$F({}, panelProps))
    }));
  });
  DateRangePicker$1.displayName = "DateRangePicker";
  DateRangePicker$1.defaultProps = dateRangePickerDefaultProps;

  var ctrlKeyMap = /* @__PURE__ */new Map();
  ctrlKeyMap.set(Checkbox$1, "checked");
  ctrlKeyMap.set(CheckTag, "checked");
  ctrlKeyMap.set(Upload$1, "files");
  var initialDataMap = /* @__PURE__ */new Map();
  [Tree$1, Upload$1, Transfer$1, Cascader$1, TagInput$1, RangeInput$1, CheckboxGroup$2, DateRangePicker$1, TimeRangePicker$1].forEach(function (component) {
    initialDataMap.set(component, []);
  });
  function getDefaultInitialData(_ref) {
    var name = _ref.name,
        formListName = _ref.formListName,
        children = _ref.children,
        initialData = _ref.initialData,
        initialDataFromContext = _ref.initialDataFromContext;
    var defaultInitialData;

    if (initialDataFromContext) {
      if (typeof name === "string") defaultInitialData = initialDataFromContext[name];

      if (Array.isArray(name)) {
        var nameList = formListName ? [formListName].concat(_toConsumableArray(name)) : name;
        var symbol = Symbol("initialData");
        var fieldValue = null;

        for (var i = 0; i < nameList.length; i++) {
          var item = nameList[i];

          if (Reflect.has(fieldValue || initialDataFromContext, item)) {
            fieldValue = Reflect.get(fieldValue || initialDataFromContext, item);
          } else {
            fieldValue = symbol;
            break;
          }
        }

        if (fieldValue !== symbol) {
          defaultInitialData = fieldValue;
        }
      }
    }

    if (typeof initialData !== "undefined") defaultInitialData = initialData;
    React__default["default"].Children.forEach(children, function (child) {
      if (child && /*#__PURE__*/React__default["default"].isValidElement(child) && typeof defaultInitialData === "undefined") {
        defaultInitialData = initialDataMap.get(child.type);
      }
    });
    return defaultInitialData;
  }

  function ownKeys$E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$E(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var FormItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix,
        globalFormConfig = _useConfig.form;

    var _useGlobalIcon = useGlobalIcon({
      CheckCircleFilledIcon: CheckCircleFilledIcon,
      CloseCircleFilledIcon: CloseCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon
    }),
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
        CloseCircleFilledIcon$1 = _useGlobalIcon.CloseCircleFilledIcon,
        ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon;

    var _useFormContext = useFormContext(),
        colon = _useFormContext.colon,
        layout = _useFormContext.layout,
        initialDataFromContext = _useFormContext.initialData,
        requiredMarkFromContext = _useFormContext.requiredMark,
        labelAlignFromContext = _useFormContext.labelAlign,
        labelWidthFromContext = _useFormContext.labelWidth,
        showErrorMessageFromContext = _useFormContext.showErrorMessage,
        disabledFromContext = _useFormContext.disabled,
        resetTypeFromContext = _useFormContext.resetType,
        rulesFromContext = _useFormContext.rules,
        statusIconFromContext = _useFormContext.statusIcon,
        errorMessage = _useFormContext.errorMessage,
        formMapRef = _useFormContext.formMapRef,
        onFormItemValueChange = _useFormContext.onFormItemValueChange;

    var _useFormListContext = useFormListContext(),
        formListName = _useFormListContext.name,
        formListRules = _useFormListContext.rules,
        formListMapRef = _useFormListContext.formListMapRef;

    var children = props.children,
        style = props.style,
        label = props.label,
        name = props.name,
        status = props.status,
        tips = props.tips,
        help = props.help,
        initialData = props.initialData,
        className = props.className,
        successBorder = props.successBorder,
        _props$statusIcon = props.statusIcon,
        statusIcon = _props$statusIcon === void 0 ? statusIconFromContext : _props$statusIcon,
        _props$rules = props.rules,
        innerRules = _props$rules === void 0 ? getInnerRules(name, rulesFromContext, formListName, formListRules) : _props$rules,
        _props$labelWidth = props.labelWidth,
        labelWidth = _props$labelWidth === void 0 ? labelWidthFromContext : _props$labelWidth,
        _props$labelAlign = props.labelAlign,
        labelAlign = _props$labelAlign === void 0 ? labelAlignFromContext : _props$labelAlign,
        _props$requiredMark = props.requiredMark,
        requiredMark = _props$requiredMark === void 0 ? requiredMarkFromContext : _props$requiredMark;

    var _useState = React.useState(void 0),
        _useState2 = _slicedToArray(_useState, 2),
        freeShowErrorMessage = _useState2[0],
        setFreeShowErrorMessage = _useState2[1];

    var _useState3 = React.useState([]),
        _useState4 = _slicedToArray(_useState3, 2),
        errorList = _useState4[0],
        setErrorList = _useState4[1];

    var _useState5 = React.useState([]),
        _useState6 = _slicedToArray(_useState5, 2),
        successList = _useState6[0],
        setSuccessList = _useState6[1];

    var _useState7 = React.useState("validating"),
        _useState8 = _slicedToArray(_useState7, 2),
        verifyStatus = _useState8[0],
        setVerifyStatus = _useState8[1];

    var _useState9 = React.useState(false),
        _useState10 = _slicedToArray(_useState9, 2),
        resetValidating = _useState10[0],
        setResetValidating = _useState10[1];

    var _useState11 = React.useState(false),
        _useState12 = _slicedToArray(_useState11, 2),
        needResetField = _useState12[0],
        setNeedResetField = _useState12[1];

    var _useState13 = React.useState(getDefaultInitialData({
      name: name,
      formListName: formListName,
      children: children,
      initialData: initialData,
      initialDataFromContext: initialDataFromContext
    })),
        _useState14 = _slicedToArray(_useState13, 2),
        formValue = _useState14[0],
        setFormValue = _useState14[1];

    var currentFormItemRef = React.useRef();
    var innerFormItemsRef = React.useRef([]);
    var shouldValidate = React.useRef(false);
    var valueRef = React.useRef(formValue);
    var errorMessages = React.useMemo(function () {
      return errorMessage !== null && errorMessage !== void 0 ? errorMessage : globalFormConfig.errorMessage;
    }, [errorMessage, globalFormConfig]);
    var showErrorMessage = React.useMemo(function () {
      if (typeof freeShowErrorMessage === "boolean") return freeShowErrorMessage;
      if (typeof props.showErrorMessage === "boolean") return props.showErrorMessage;
      return showErrorMessageFromContext;
    }, [freeShowErrorMessage, props.showErrorMessage, showErrorMessageFromContext]);

    var _useFormItemStyle = useFormItemStyle({
      className: className,
      help: help,
      tips: tips,
      name: name,
      status: status,
      successBorder: successBorder,
      errorList: errorList,
      successList: successList,
      layout: layout,
      verifyStatus: verifyStatus,
      colon: colon,
      label: label,
      labelWidth: labelWidth,
      labelAlign: labelAlign,
      requiredMark: requiredMark,
      showErrorMessage: showErrorMessage,
      innerRules: innerRules
    }),
        formItemClass = _useFormItemStyle.formItemClass,
        formItemLabelClass = _useFormItemStyle.formItemLabelClass,
        contentClass = _useFormItemStyle.contentClass,
        labelStyle = _useFormItemStyle.labelStyle,
        contentStyle = _useFormItemStyle.contentStyle,
        helpNode = _useFormItemStyle.helpNode,
        extraNode = _useFormItemStyle.extraNode;

    var updateFormValue = function updateFormValue(newVal) {
      var validate2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      shouldValidate.current = validate2;
      valueRef.current = newVal;
      setFormValue(newVal);
    };

    function getInnerRules(name2, formRules, formListName2, formListRules2) {
      if (Array.isArray(name2)) {
        var _formRules$formListNa;

        var _name = _slicedToArray(name2, 2),
            itemKey = _name[1];

        return (formRules === null || formRules === void 0 ? void 0 : (_formRules$formListNa = formRules[formListName2]) === null || _formRules$formListNa === void 0 ? void 0 : _formRules$formListNa[itemKey]) || (formListRules2 === null || formListRules2 === void 0 ? void 0 : formListRules2[itemKey]) || [];
      }

      return (formRules === null || formRules === void 0 ? void 0 : formRules[name2]) || formListRules2 || [];
    }

    var renderSuffixIcon = function renderSuffixIcon() {
      if (statusIcon === false) return null;

      var resultIcon = function resultIcon(iconSlot) {
        return /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(classPrefix, "-form__status")
        }, iconSlot);
      };

      var getDefaultIcon = function getDefaultIcon() {
        var iconMap = {
          success: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon$1, {
            size: "25px"
          }),
          error: /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon$1, {
            size: "25px"
          }),
          warning: /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon$1, {
            size: "25px"
          })
        };

        if (verifyStatus === ValidateStatus.SUCCESS) {
          return resultIcon(iconMap[verifyStatus]);
        }

        if (errorList && errorList[0]) {
          var type = errorList[0].type || "error";
          return resultIcon(iconMap[type]);
        }

        return null;
      };

      if ( /*#__PURE__*/React__default["default"].isValidElement(statusIcon)) {
        return resultIcon( /*#__PURE__*/React__default["default"].cloneElement(statusIcon, _objectSpread$E({
          style: {
            color: "unset"
          }
        }, statusIcon.props)));
      }

      if (statusIcon === true) {
        return getDefaultIcon();
      }

      return null;
    };

    function analysisValidateResult(_x) {
      return _analysisValidateResult.apply(this, arguments);
    }

    function _analysisValidateResult() {
      _analysisValidateResult = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(trigger) {
        var _result$rules;

        var result;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                result = {
                  successList: [],
                  errorList: [],
                  rules: [],
                  resultList: [],
                  allowSetValue: false
                };
                result.rules = trigger === "all" ? innerRules : innerRules.filter(function (item) {
                  return (item.trigger || "change") === trigger;
                });

                if ((_result$rules = result.rules) !== null && _result$rules !== void 0 && _result$rules.length) {
                  _context.next = 5;
                  break;
                }

                setResetValidating(false);
                return _context.abrupt("return", result);

              case 5:
                result.allowSetValue = true;
                _context.next = 8;
                return validate(formValue, result.rules);

              case 8:
                result.resultList = _context.sent;
                result.errorList = result.resultList.filter(function (item) {
                  return item.result !== true;
                }).map(function (item) {
                  Object.keys(item).forEach(function (key) {
                    if (!item.message && errorMessages[key]) {
                      var compiled = template_1(errorMessages[key]);
                      item.message = compiled({
                        name: isString_1(label) ? label : name,
                        validate: item[key]
                      });
                    }
                  });
                  return item;
                });
                result.successList = result.resultList.filter(function (item) {
                  return item.result === true && item.message && item.type === "success";
                });
                return _context.abrupt("return", result);

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _analysisValidateResult.apply(this, arguments);
    }

    function validate$1() {
      return _validate.apply(this, arguments);
    }

    function _validate() {
      _validate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
        var trigger,
            showErrorMessage2,
            _yield$analysisValida,
            innerSuccessList,
            innerErrorList,
            validateRules,
            resultList,
            allowSetValue,
            status2,
            _innerErrorList$,
            _args2 = arguments;

        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                trigger = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : "all";
                showErrorMessage2 = _args2.length > 1 ? _args2[1] : undefined;

                if (!innerFormItemsRef.current.length) {
                  _context2.next = 4;
                  break;
                }

                return _context2.abrupt("return", innerFormItemsRef.current.map(function (innerFormItem) {
                  return innerFormItem === null || innerFormItem === void 0 ? void 0 : innerFormItem.validate(trigger, showErrorMessage2);
                }));

              case 4:
                setResetValidating(true);
                setFreeShowErrorMessage(showErrorMessage2);
                _context2.next = 8;
                return analysisValidateResult(trigger);

              case 8:
                _yield$analysisValida = _context2.sent;
                innerSuccessList = _yield$analysisValida.successList;
                innerErrorList = _yield$analysisValida.errorList;
                validateRules = _yield$analysisValida.rules;
                resultList = _yield$analysisValida.resultList;
                allowSetValue = _yield$analysisValida.allowSetValue;

                if (allowSetValue) {
                  setSuccessList(innerSuccessList);
                  setErrorList(innerErrorList);
                }

                if (validateRules.length) {
                  status2 = ValidateStatus.SUCCESS;

                  if (innerErrorList.length) {
                    status2 = (innerErrorList === null || innerErrorList === void 0 ? void 0 : (_innerErrorList$ = innerErrorList[0]) === null || _innerErrorList$ === void 0 ? void 0 : _innerErrorList$.type) || ValidateStatus.ERROR;
                  }

                  setVerifyStatus(status2);
                } else {
                  setVerifyStatus(ValidateStatus.VALIDATING);
                }

                if (needResetField) {
                  resetHandler();
                }

                setResetValidating(false);
                return _context2.abrupt("return", _defineProperty$3({}, String(name), innerErrorList.length === 0 ? true : resultList));

              case 19:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return _validate.apply(this, arguments);
    }

    function validateOnly() {
      return _validateOnly.apply(this, arguments);
    }

    function _validateOnly() {
      _validateOnly = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        var trigger,
            _yield$analysisValida2,
            innerErrorList,
            resultList,
            _args3 = arguments;

        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                trigger = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : "all";
                _context3.next = 3;
                return analysisValidateResult(trigger);

              case 3:
                _yield$analysisValida2 = _context3.sent;
                innerErrorList = _yield$analysisValida2.errorList;
                resultList = _yield$analysisValida2.resultList;
                return _context3.abrupt("return", _defineProperty$3({}, String(name), innerErrorList.length === 0 ? true : resultList));

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      return _validateOnly.apply(this, arguments);
    }

    function handleItemBlur() {
      var filterRules = innerRules.filter(function (item) {
        return item.trigger === "blur";
      });
      filterRules.length && validate$1("blur");
    }

    function getResetValue(resetType) {
      if (resetType === "initial") {
        return getDefaultInitialData({
          name: name,
          formListName: formListName,
          children: children,
          initialData: initialData,
          initialDataFromContext: initialDataFromContext
        });
      }

      var emptyValue = "";

      if (Array.isArray(formValue)) {
        emptyValue = [];
      } else if (isObject_1(formValue)) {
        emptyValue = {};
      }

      return emptyValue;
    }

    function resetField(type) {
      if (typeof name === "undefined") return;
      var resetType = type || resetTypeFromContext;
      var resetValue = getResetValue(resetType);
      updateFormValue(resetValue, false);

      if (resetValidating) {
        setNeedResetField(true);
      } else {
        resetHandler();
      }
    }

    function resetHandler() {
      setNeedResetField(false);
      setErrorList([]);
      setSuccessList([]);
      setVerifyStatus(ValidateStatus.VALIDATING);
    }

    function setField(field) {
      var value = field.value,
          status2 = field.status,
          validateMessage = field.validateMessage;

      if (typeof status2 !== "undefined") {
        setErrorList(validateMessage ? [validateMessage] : []);
        setSuccessList(validateMessage ? [validateMessage] : []);
        setNeedResetField(false);
        setVerifyStatus(status2);
      }

      if (typeof value !== "undefined") {
        updateFormValue(value, typeof status2 === "undefined" ? true : false);
      }
    }

    function setValidateMessage(validateMessage) {
      var _validateMessage$;

      if (!validateMessage || !Array.isArray(validateMessage)) return;

      if (validateMessage.length === 0) {
        setErrorList([]);
        setVerifyStatus(ValidateStatus.SUCCESS);
        return;
      }

      setErrorList(validateMessage);
      var status2 = (validateMessage === null || validateMessage === void 0 ? void 0 : (_validateMessage$ = validateMessage[0]) === null || _validateMessage$ === void 0 ? void 0 : _validateMessage$.type) || ValidateStatus.ERROR;
      setVerifyStatus(status2);
    }

    React.useEffect(function () {
      if (!shouldValidate.current) return;

      if (typeof name !== "undefined") {
        if (formListName) {
          var formListValue = [];

          if (Array.isArray(name)) {
            var _name2 = _slicedToArray(name, 2),
                index = _name2[0],
                itemKey = _name2[1];

            formListValue[index] = _defineProperty$3({}, itemKey, formValue);
          } else {
            formListValue[name] = formValue;
          }

          onFormItemValueChange === null || onFormItemValueChange === void 0 ? void 0 : onFormItemValueChange(_defineProperty$3({}, formListName, formListValue));
        } else if (Array.isArray(name)) {
          var fieldValue = name.reduceRight(function (prev, curr) {
            return _defineProperty$3({}, curr, prev);
          }, formValue);
          onFormItemValueChange === null || onFormItemValueChange === void 0 ? void 0 : onFormItemValueChange(_objectSpread$E({}, fieldValue));
        } else {
          onFormItemValueChange === null || onFormItemValueChange === void 0 ? void 0 : onFormItemValueChange(_defineProperty$3({}, name, formValue));
        }
      }

      var filterRules = innerRules.filter(function (item) {
        return (item.trigger || "change") === "change";
      });
      filterRules.length && validate$1("change");
    }, [formValue]);
    React.useEffect(function () {
      if (typeof name === "undefined") return;

      if (formListName) {
        formListMapRef.current.set(name, currentFormItemRef);
        return function () {
          formListMapRef.current["delete"](name);
        };
      }

      if (!formMapRef) return;
      formMapRef.current.set(name, currentFormItemRef);
      return function () {
        formMapRef.current["delete"](name);
      };
    }, [name, formListName]);
    var instance = {
      name: name,
      value: formValue,
      getValue: function getValue() {
        return valueRef.current;
      },
      setValue: function setValue(newVal) {
        return updateFormValue(newVal);
      },
      setField: setField,
      validate: validate$1,
      validateOnly: validateOnly,
      resetField: resetField,
      setValidateMessage: setValidateMessage,
      resetValidate: resetHandler
    };
    React.useImperativeHandle(ref, function () {
      return instance;
    });
    React.useImperativeHandle(currentFormItemRef, function () {
      return instance;
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: formItemClass,
      style: style
    }, label && /* @__PURE__ */React__default["default"].createElement("div", {
      className: formItemLabelClass,
      style: labelStyle
    }, /* @__PURE__ */React__default["default"].createElement("label", {
      htmlFor: props === null || props === void 0 ? void 0 : props["for"]
    }, label)), /* @__PURE__ */React__default["default"].createElement("div", {
      className: contentClass(),
      style: contentStyle
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-form__controls-content")
    }, React__default["default"].Children.map(children, function (child, index) {
      if (!child) return null;
      var ctrlKey = "value";

      if ( /*#__PURE__*/React__default["default"].isValidElement(child)) {
        var _objectSpread2;

        if (child.type === FormItem) {
          return /*#__PURE__*/React__default["default"].cloneElement(child, {
            ref: function ref(el) {
              if (!el) return;
              innerFormItemsRef.current[index] = el;
            }
          });
        }

        if (_typeof$1(child.type) === "object") {
          ctrlKey = ctrlKeyMap.get(child.type) || "value";
        }

        return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$E(_objectSpread$E({
          disabled: disabledFromContext
        }, child.props), {}, (_objectSpread2 = {}, _defineProperty$3(_objectSpread2, ctrlKey, formValue), _defineProperty$3(_objectSpread2, "onChange", function onChange(value) {
          var _child$props$onChange, _child$props$onChange2;

          updateFormValue(value);

          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          (_child$props$onChange = child.props.onChange) === null || _child$props$onChange === void 0 ? void 0 : (_child$props$onChange2 = _child$props$onChange.call) === null || _child$props$onChange2 === void 0 ? void 0 : _child$props$onChange2.call.apply(_child$props$onChange2, [_child$props$onChange, null, value].concat(args));
        }), _defineProperty$3(_objectSpread2, "onBlur", function onBlur(value) {
          var _child$props$onBlur, _child$props$onBlur$c;

          handleItemBlur();

          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          (_child$props$onBlur = child.props.onBlur) === null || _child$props$onBlur === void 0 ? void 0 : (_child$props$onBlur$c = _child$props$onBlur.call) === null || _child$props$onBlur$c === void 0 ? void 0 : _child$props$onBlur$c.call.apply(_child$props$onBlur$c, [_child$props$onBlur, null, value].concat(args));
        }), _objectSpread2)));
      }

      return child;
    }), renderSuffixIcon()), helpNode, extraNode));
  });
  FormItem.displayName = "FormItem";
  FormItem.defaultProps = formItemDefaultProps;

  function ownKeys$D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$D(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var key = 0;

  var FormList = function FormList(props) {
    var _useFormContext = useFormContext(),
        formMapRef = _useFormContext.formMapRef;

    var name = props.name,
        _props$initialData = props.initialData,
        initialData = _props$initialData === void 0 ? [] : _props$initialData,
        rules = props.rules,
        children = props.children;

    var _useState = React.useState(initialData),
        _useState2 = _slicedToArray(_useState, 2),
        initialValue = _useState2[0],
        setInitialValue = _useState2[1];

    var _useState3 = React.useState(initialData.map(function (data, index) {
      return _objectSpread$D({
        key: key += 1,
        name: index,
        isListField: true
      }, data);
    })),
        _useState4 = _slicedToArray(_useState3, 2),
        fields = _useState4[0],
        setFields = _useState4[1];

    var formListMapRef = React.useRef( /* @__PURE__ */new Map());
    var formListRef = React.useRef();
    var operation = {
      add: function add(defaultValue, insertIndex) {
        var cloneFields = _toConsumableArray(fields);

        var index = insertIndex !== null && insertIndex !== void 0 ? insertIndex : cloneFields.length;
        cloneFields.splice(index, 0, {
          key: key += 1,
          name: index,
          isListField: true
        });
        cloneFields.forEach(function (field, index2) {
          return Object.assign(field, {
            name: index2
          });
        });
        setFields(cloneFields);

        if (typeof defaultValue !== "undefined") {
          var nextInitialValue = _toConsumableArray(initialValue);

          nextInitialValue[index] = defaultValue;
          setInitialValue(nextInitialValue);
        }
      },
      remove: function remove(index) {
        var nextFields = fields.filter(function (_, i) {
          if (Array.isArray(index)) return !index.includes(i);
          return i !== index;
        }).map(function (field, index2) {
          return Object.assign(field, {
            name: index2
          });
        });
        setInitialValue(initialValue.filter(function (_, idx) {
          return idx !== index;
        }));
        setFields(nextFields);
      },
      move: function move(from, to) {
        var cloneFields = _toConsumableArray(fields);

        var fromItem = _objectSpread$D({}, cloneFields[from]);

        var toItem = _objectSpread$D({}, cloneFields[to]);

        cloneFields[to] = fromItem;
        cloneFields[from] = toItem;
        setFields(cloneFields);
      }
    };

    function setListFields(fieldData, callback) {
      setFields(fieldData.map(function (_, index) {
        return {
          key: key += 1,
          name: index,
          isListField: true
        };
      }));
      Promise.resolve().then(function () {
        _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
          var name2 = formItemRef.current.name;
          var data;

          if (Array.isArray(name2)) {
            var _fieldData$index;

            var _name = _slicedToArray(name2, 2),
                index = _name[0],
                itemKey = _name[1];

            data = fieldData === null || fieldData === void 0 ? void 0 : (_fieldData$index = fieldData[index]) === null || _fieldData$index === void 0 ? void 0 : _fieldData$index[itemKey];
          } else {
            data = fieldData === null || fieldData === void 0 ? void 0 : fieldData[name2];
          }

          callback(formItemRef, data);
        });
      });
    }

    React.useEffect(function () {
      _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
        var _formItemRef$current = formItemRef.current,
            name2 = _formItemRef$current.name,
            value = _formItemRef$current.value;
        if (value) return;
        var data;

        if (Array.isArray(name2)) {
          var _initialValue$index;

          var _name2 = _slicedToArray(name2, 2),
              index = _name2[0],
              itemKey = _name2[1];

          data = initialValue === null || initialValue === void 0 ? void 0 : (_initialValue$index = initialValue[index]) === null || _initialValue$index === void 0 ? void 0 : _initialValue$index[itemKey];
        } else {
          data = initialValue === null || initialValue === void 0 ? void 0 : initialValue[name2];
        }

        formItemRef.current.setField({
          value: data,
          status: "not"
        });
      });
    }, [fields, initialValue]);
    React.useEffect(function () {
      if (!name || !formMapRef) return;
      formMapRef.current.set(name, formListRef);
      return function () {
        formMapRef.current["delete"](name);
      };
    }, [name]);
    React.useImperativeHandle(formListRef, function () {
      return {
        name: name,
        getValue: function getValue() {
          var formListValue = [];

          _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
            var _formItemRef$current2 = formItemRef.current,
                name2 = _formItemRef$current2.name,
                getValue = _formItemRef$current2.getValue;

            if (Array.isArray(name2)) {
              var _name3 = _slicedToArray(name2, 2),
                  index = _name3[0],
                  itemKey = _name3[1];

              if (!formListValue[index]) {
                formListValue[index] = _defineProperty$3({}, itemKey, getValue());
              } else {
                formListValue[index][itemKey] = getValue();
              }
            } else {
              formListValue[name2] = getValue();
            }
          });

          return formListValue;
        },
        validate: function validate() {
          var trigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "all";
          var resultList = [];

          var validates = _toConsumableArray(formListMapRef.current.values()).map(function (formItemRef) {
            return formItemRef.current.validate(trigger);
          });

          return new Promise(function (resolve) {
            Promise.all(validates).then(function (validateResult) {
              validateResult.forEach(function (result) {
                var errorKey = Object.keys(result)[0];
                var errorValue = Object.values(result)[0];

                var _errorKey$split = errorKey.split(","),
                    _errorKey$split2 = _slicedToArray(_errorKey$split, 2),
                    index = _errorKey$split2[0],
                    itemKey = _errorKey$split2[1];

                if (itemKey) {
                  resultList[index] = _defineProperty$3({}, itemKey, errorValue);
                } else {
                  resultList[index] = errorValue;
                }
              });
              var errorItems = validateResult.filter(function (item) {
                return Object.values(item)[0] !== true;
              });

              if (errorItems.length) {
                resolve(_defineProperty$3({}, name, resultList));
              } else {
                resolve(_defineProperty$3({}, name, true));
              }
            });
          });
        },
        setValue: function setValue(fieldData) {
          setListFields(fieldData, function (formItemRef, data) {
            var _formItemRef$current3;

            formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current3 = formItemRef.current) === null || _formItemRef$current3 === void 0 ? void 0 : _formItemRef$current3.setValue(data);
          });
        },
        setField: function setField(fieldData) {
          var value = fieldData.value,
              status = fieldData.status;
          setListFields(value, function (formItemRef, data) {
            var _formItemRef$current4;

            formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current4 = formItemRef.current) === null || _formItemRef$current4 === void 0 ? void 0 : _formItemRef$current4.setField({
              value: data,
              status: status
            });
          });
        },
        resetField: function resetField() {
          _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
            formItemRef.current.resetField();
          });

          setInitialValue([]);
        },
        setValidateMessage: function setValidateMessage(fieldData) {
          _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
            var name2 = formItemRef.current.name;
            var data;

            if (Array.isArray(name2)) {
              var _fieldData$index2;

              var _name4 = _slicedToArray(name2, 2),
                  index = _name4[0],
                  itemKey = _name4[1];

              data = fieldData === null || fieldData === void 0 ? void 0 : (_fieldData$index2 = fieldData[index]) === null || _fieldData$index2 === void 0 ? void 0 : _fieldData$index2[itemKey];
            } else {
              data = fieldData === null || fieldData === void 0 ? void 0 : fieldData[name2];
            }

            formItemRef.current.setValidateMessage(data);
          });
        },
        resetValidate: function resetValidate() {
          _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
            formItemRef.current.resetValidate();
          });
        }
      };
    });

    if (typeof children !== "function") {
      log.error("Form", "FormList's children must be a function!");
      return null;
    }

    return /* @__PURE__ */React__default["default"].createElement(FormListContext.Provider, {
      value: {
        name: name,
        rules: rules,
        formListMapRef: formListMapRef
      }
    }, children(fields, operation));
  };

  FormList.displayName = "FormList";

  function ownKeys$C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$C(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Form$1 = forwardRefWithStatics(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix,
        globalFormConfig = _useConfig.form;

    var style = props.style,
        className = props.className,
        form = props.form,
        labelWidth = props.labelWidth,
        statusIcon = props.statusIcon,
        labelAlign = props.labelAlign,
        layout = props.layout,
        colon = props.colon,
        initialData = props.initialData,
        _props$requiredMark = props.requiredMark,
        requiredMark = _props$requiredMark === void 0 ? globalFormConfig.requiredMark : _props$requiredMark,
        scrollToFirstError = props.scrollToFirstError,
        showErrorMessage = props.showErrorMessage,
        resetType = props.resetType,
        rules = props.rules,
        _props$errorMessage = props.errorMessage,
        errorMessage = _props$errorMessage === void 0 ? globalFormConfig.errorMessage : _props$errorMessage,
        preventSubmitDefault = props.preventSubmitDefault,
        disabled = props.disabled,
        children = props.children,
        onReset = props.onReset,
        _props$onValuesChange = props.onValuesChange,
        onValuesChange = _props$onValuesChange === void 0 ? noop$1 : _props$onValuesChange;
    var formClass = classNames$1("".concat(classPrefix, "-form"), className, _defineProperty$3({}, "".concat(classPrefix, "-form-inline"), layout === "inline"));
    var formRef = React.useRef();
    var formMapRef = React.useRef( /* @__PURE__ */new Map());
    var formInstance = useInstance(props, formRef, formMapRef);
    React.useImperativeHandle(ref, function () {
      return formInstance;
    });
    form && Object.assign(form, _objectSpread$C({}, formInstance));

    function onResetHandler(e) {
      _toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
        formItemRef === null || formItemRef === void 0 ? void 0 : formItemRef.current.resetField();
      });

      onReset === null || onReset === void 0 ? void 0 : onReset({
        e: e
      });
    }

    function onFormItemValueChange(changedValue) {
      var allFields = formInstance.getFieldsValue(true);
      onValuesChange(changedValue, allFields);
    }

    function onKeyDownHandler(e) {
      if (e.target.tagName.toLowerCase() !== "input") return;

      if (preventSubmitDefault && e.key === "Enter") {
        var _e$preventDefault, _e$stopPropagation;

        (_e$preventDefault = e.preventDefault) === null || _e$preventDefault === void 0 ? void 0 : _e$preventDefault.call(e);
        (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 ? void 0 : _e$stopPropagation.call(e);
      }
    }

    return /* @__PURE__ */React__default["default"].createElement(FormContext.Provider, {
      value: {
        labelWidth: labelWidth,
        statusIcon: statusIcon,
        labelAlign: labelAlign,
        layout: layout,
        colon: colon,
        initialData: initialData,
        requiredMark: requiredMark,
        errorMessage: errorMessage,
        showErrorMessage: showErrorMessage,
        scrollToFirstError: scrollToFirstError,
        resetType: resetType,
        rules: rules,
        disabled: disabled,
        formMapRef: formMapRef,
        onFormItemValueChange: onFormItemValueChange
      }
    }, /* @__PURE__ */React__default["default"].createElement("form", {
      ref: formRef,
      style: style,
      className: formClass,
      onSubmit: formInstance.submit,
      onReset: onResetHandler,
      onKeyDown: onKeyDownHandler
    }, children));
  }, {
    useForm: useForm,
    FormItem: FormItem,
    FormList: FormList
  });
  Form$1.displayName = "Form";
  Form$1.defaultProps = formDefaultProps;

  var Form = Form$1;

  function getScrollbarWidth() {
    var scrollDiv = document.createElement("div");
    scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  }

  function hasScrollbar() {
    return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);
  }

  var DrawerWrapper = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
        attach = props.attach;
    var portalRef = React.useRef(null);
    var portal = null;
    React.useImperativeHandle(ref, function () {
      if (attach === "") {
        return portalRef.current.parentElement;
      }

      return getAttach(attach);
    });

    if (attach === "") {
      portal = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: portalRef
      }, /*#__PURE__*/React.cloneElement(children));
    } else {
      portal = /* @__PURE__ */React__default["default"].createElement(Portal, {
        attach: attach,
        ref: portalRef
      }, children);
    }

    return portal;
  });
  DrawerWrapper.displayName = "DrawerWrapper";

  var drawerDefaultProps = {
    closeBtn: true,
    destroyOnClose: false,
    footer: true,
    header: true,
    mode: "overlay",
    placement: "right",
    preventScrollThrough: true,
    showInAttachedElement: false,
    showOverlay: true,
    sizeDraggable: false,
    visible: false
  };

  var useDrag$1 = function useDrag(placement, sizeDraggable) {
    var _useState = React.useState(null),
        _useState2 = _slicedToArray(_useState, 2),
        dragSizeValue = _useState2[0],
        changeDragSizeValue = _useState2[1];

    var handleMousemove = function handleMousemove(e) {
      var x = e.x,
          y = e.y;

      if (sizeDraggable) {
        if (placement === "right") {
          changeDragSizeValue("".concat(document.documentElement.clientWidth - x + 8, "px"));
        }

        if (placement === "left") {
          changeDragSizeValue("".concat(x + 8, "px"));
        }

        if (placement === "top") {
          changeDragSizeValue("".concat(y + 8, "px"));
        }

        if (placement === "bottom") {
          changeDragSizeValue("".concat(document.documentElement.clientHeight - y + 8, "px"));
        }
      }
    };

    var handleMouseup = function handleMouseup() {
      document.removeEventListener("mouseup", handleMouseup, true);
      document.removeEventListener("mousemove", handleMousemove, true);
    };

    var draggableLineStyles = React.useMemo(function () {
      var _ref;

      var isHorizontal = ["right", "left"].includes(placement);
      var oppositeMap = {
        left: "right",
        right: "left",
        top: "bottom",
        bottom: "top"
      };
      return _ref = {
        zIndex: 1,
        position: "absolute",
        background: "transparent"
      }, _defineProperty$3(_ref, oppositeMap[placement], 0), _defineProperty$3(_ref, "width", isHorizontal ? "16px" : "100%"), _defineProperty$3(_ref, "height", isHorizontal ? "100%" : "16px"), _defineProperty$3(_ref, "cursor", isHorizontal ? "col-resize" : "row-resize"), _ref;
    }, [placement]);

    var enableDrag = function enableDrag() {
      document.addEventListener("mouseup", handleMouseup, true);
      document.addEventListener("mousemove", handleMousemove, true);
    };

    return {
      dragSizeValue: dragSizeValue,
      enableDrag: enableDrag,
      draggableLineStyles: draggableLineStyles
    };
  };

  function ownKeys$B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$B(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var CloseTriggerType = {
    CLICK_OVERLAY: "overlay",
    CLICK_CLOSE_BTN: "close-btn",
    CLICK_CANCEL_BTN: "cancel",
    KEYDOWN_ESC: "esc"
  };
  var Drawer$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classnames;

    var className = props.className,
        style = props.style,
        visible = props.visible,
        _props$attach = props.attach,
        attach = _props$attach === void 0 ? "" : _props$attach,
        showOverlay = props.showOverlay,
        propsSize = props.size,
        placement = props.placement,
        onCancel = props.onCancel,
        onConfirm = props.onConfirm,
        onClose = props.onClose,
        onCloseBtnClick = props.onCloseBtnClick,
        onOverlayClick = props.onOverlayClick,
        onEscKeydown = props.onEscKeydown,
        showInAttachedElement = props.showInAttachedElement,
        closeOnOverlayClick = props.closeOnOverlayClick,
        closeOnEscKeydown = props.closeOnEscKeydown,
        children = props.children,
        header = props.header,
        body = props.body,
        footer = props.footer,
        closeBtn = props.closeBtn,
        cancelBtn = props.cancelBtn,
        confirmBtn = props.confirmBtn,
        zIndex = props.zIndex,
        destroyOnClose = props.destroyOnClose,
        mode = props.mode,
        _props$preventScrollT = props.preventScrollThrough,
        preventScrollThrough = _props$preventScrollT === void 0 ? true : _props$preventScrollT,
        sizeDraggable = props.sizeDraggable;

    var _useLocaleReceiver = useLocaleReceiver("drawer"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon;

    var size = propsSize !== null && propsSize !== void 0 ? propsSize : local.size;
    var confirmText = t(local.confirm);
    var cancelText = t(local.cancel);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var containerRef = React.useRef();
    var contentWrapperRef = React.useRef();
    var drawerWrapperRef = React.useRef();
    var prefixCls = "".concat(classPrefix, "-drawer");
    var lockCls = "".concat(prefixCls, "--lock");
    var transform = visible ? "translate(0px)" : "";
    var closeIcon = /*#__PURE__*/React__default["default"].isValidElement(closeBtn) ? closeBtn : /* @__PURE__ */React__default["default"].createElement(CloseIcon$1, null);

    var _useDrag = useDrag$1(placement, sizeDraggable),
        dragSizeValue = _useDrag.dragSizeValue,
        enableDrag = _useDrag.enableDrag,
        draggableLineStyles = _useDrag.draggableLineStyles;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isDestroyOnClose = _useState2[0],
        setIsDestroyOnClose = _useState2[1];

    React.useImperativeHandle(ref, function () {
      return containerRef.current;
    });
    React.useEffect(function () {
      if (preventScrollThrough) {
        if (visible && !showInAttachedElement) {
          addClass$1(document.body, lockCls);
        } else {
          removeClass$2(document.body, lockCls);
        }
      }
    }, [visible, showInAttachedElement, lockCls, preventScrollThrough]);
    React.useEffect(function () {
      if (!destroyOnClose || !visible) return;
      setIsDestroyOnClose(false);
    }, [visible, destroyOnClose]);
    var getSizeValue = React.useCallback(function (size2) {
      if (dragSizeValue) return dragSizeValue;
      var defaultSize = isNaN(Number(size2)) ? size2 : "".concat(size2, "px");
      return {
        small: "300px",
        medium: "500px",
        large: "760px"
      }[size2] || defaultSize;
    }, [dragSizeValue]);
    React.useEffect(function () {
      var documentBodyCssText = "";

      if (visible) {
        if (attach !== "" && hasScrollbar()) {
          var scrollbarWidth = getScrollbarWidth();
          documentBodyCssText = "overflow: hidden; width: calc(100% - ".concat(scrollbarWidth, "px);");

          if (mode !== "push") {
            document.body.style.cssText = documentBodyCssText;
          }
        }
      }

      if (mode === "push") {
        drawerWrapperRef.current.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s";
        var marginStr = {
          left: "margin: 0 0 0 ".concat(getSizeValue(size)),
          right: "margin: 0 0 0 -".concat(getSizeValue(size)),
          top: "margin: ".concat(getSizeValue(size), " 0 0 0"),
          bottom: "margin: -".concat(getSizeValue(size), " 0 0 0")
        }[placement];

        if (visible) {
          drawerWrapperRef.current.style.cssText += marginStr;
        } else {
          drawerWrapperRef.current.style.cssText = drawerWrapperRef.current.style.cssText.replace(/margin:.+;/, "");
        }
      }

      if (contentWrapperRef.current) {
        containerRef.current.focus();
        contentWrapperRef.current.style.transform = transform;
      }
    }, [attach, mode, transform, visible, placement, size, getSizeValue]);

    function onMaskClick(e) {
      onOverlayClick === null || onOverlayClick === void 0 ? void 0 : onOverlayClick({
        e: e
      });
      (closeOnOverlayClick !== null && closeOnOverlayClick !== void 0 ? closeOnOverlayClick : local.closeOnOverlayClick) && (onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e,
        trigger: CloseTriggerType.CLICK_OVERLAY
      }));
    }

    function onClickCloseBtn(e) {
      onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
        e: e
      });
      onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e,
        trigger: CloseTriggerType.CLICK_CLOSE_BTN
      });
    }

    function onKeyDownEsc(e) {
      if (e.key !== "Escape") return;
      onEscKeydown === null || onEscKeydown === void 0 ? void 0 : onEscKeydown({
        e: e
      });
      (closeOnEscKeydown !== null && closeOnEscKeydown !== void 0 ? closeOnEscKeydown : local.closeOnEscKeydown) && (onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e,
        trigger: CloseTriggerType.KEYDOWN_ESC
      }));
    }

    function onCancelClick(e) {
      onCancel === null || onCancel === void 0 ? void 0 : onCancel({
        e: e
      });
      onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e,
        trigger: CloseTriggerType.CLICK_CANCEL_BTN
      });
    }

    function onConfirmClick(e) {
      onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm({
        e: e
      });
    }

    function onTransitionEnd() {
      if (!visible) {
        document.body.style.display = "none";
        document.body.style.overflow = "";
        document.body.style.width = "";
        document.body.style.margin = "";
        document.body.style.display = "block";
        destroyOnClose && setIsDestroyOnClose(true);
      }
    }

    var drawerClass = classNames$1(prefixCls, className, "".concat(prefixCls, "--").concat(placement), (_classnames = {}, _defineProperty$3(_classnames, "".concat(prefixCls, "--open"), visible), _defineProperty$3(_classnames, "".concat(prefixCls, "--attach"), showInAttachedElement), _defineProperty$3(_classnames, "".concat(prefixCls, "--without-mask"), !showOverlay), _classnames));
    var contentWrapperClass = classNames$1("".concat(prefixCls, "__content-wrapper"), "".concat(prefixCls, "__content-wrapper--").concat(placement));
    var getContentWrapperStyle = React.useCallback(function () {
      return {
        transform: visible ? "translateX(0)" : void 0,
        width: ["left", "right"].includes(placement) ? getSizeValue(size) : "",
        height: ["top", "bottom"].includes(placement) ? getSizeValue(size) : ""
      };
    }, [visible, placement, size, getSizeValue]);

    var _useState3 = React.useState(getContentWrapperStyle()),
        _useState4 = _slicedToArray(_useState3, 2),
        contentWrapperStyle = _useState4[0],
        setContentWrapperStyle = _useState4[1];

    React.useEffect(function () {
      setContentWrapperStyle(getContentWrapperStyle());
    }, [getContentWrapperStyle]);

    function getFooter() {
      if (footer !== true) return footer;
      var defaultCancelBtn = /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "default",
        onClick: onCancelClick,
        className: "".concat(prefixCls, "__cancel")
      }, cancelBtn && typeof cancelBtn === "string" ? cancelBtn : cancelText);
      var defaultConfirmBtn = /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        onClick: onConfirmClick,
        className: "".concat(prefixCls, "__confirm")
      }, confirmBtn && typeof confirmBtn === "string" ? confirmBtn : confirmText);
      var renderCancelBtn = cancelBtn && /*#__PURE__*/React__default["default"].isValidElement(cancelBtn) ? cancelBtn : defaultCancelBtn;
      var renderConfirmBtn = confirmBtn && /*#__PURE__*/React__default["default"].isValidElement(confirmBtn) ? confirmBtn : defaultConfirmBtn;
      var footerStyle = {
        display: "flex",
        justifyContent: placement === "right" ? "flex-start" : "flex-end"
      };
      return /* @__PURE__ */React__default["default"].createElement("div", {
        style: footerStyle
      }, placement === "right" && renderConfirmBtn, renderCancelBtn, placement !== "right" && renderConfirmBtn);
    }

    var renderOverlay = showOverlay && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__mask"),
      onClick: onMaskClick
    });
    var renderCloseBtn = closeBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      onClick: onClickCloseBtn,
      className: "".concat(prefixCls, "__close-btn")
    }, closeIcon);
    var renderHeader = header && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__header")
    }, header);
    var renderBody = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__body")
    }, body || children);
    var renderFooter = footer && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__footer")
    }, getFooter());
    if (isDestroyOnClose && !visible) return null;
    return /* @__PURE__ */React__default["default"].createElement(DrawerWrapper, {
      attach: attach,
      ref: drawerWrapperRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: containerRef,
      className: drawerClass,
      style: _objectSpread$B({
        zIndex: zIndex
      }, style),
      tabIndex: -1,
      onKeyDown: onKeyDownEsc,
      onTransitionEnd: onTransitionEnd
    }, renderOverlay, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: contentWrapperRef,
      className: contentWrapperClass,
      style: contentWrapperStyle
    }, renderCloseBtn, renderHeader, renderBody, renderFooter, sizeDraggable && /* @__PURE__ */React__default["default"].createElement("div", {
      style: draggableLineStyles,
      onMouseDown: enableDrag
    }))));
  });
  Drawer$1.displayName = "Drawer";
  Drawer$1.defaultProps = drawerDefaultProps;

  var Drawer = Drawer$1;

  var _excluded$9 = ["from", "to", "direction"];

  var getBackgroundColor = function getBackgroundColor(color) {
    if (typeof color === "string") {
      return color;
    }

    if (Array.isArray(color)) {
      if (color[0] && color[0][0] === "#") {
        color.unshift("90deg");
      }

      return "linear-gradient( ".concat(color.join(","), " )");
    }

    var from = color.from,
        to = color.to,
        _color$direction = color.direction,
        direction = _color$direction === void 0 ? "to right" : _color$direction,
        rest = _objectWithoutProperties$2(color, _excluded$9);

    var keys = Object.keys(rest);

    if (keys.length) {
      keys = keys.sort(function (a, b) {
        return parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1));
      });
      var tempArr = keys.map(function (key) {
        return "".concat(rest[key], " ").concat(key);
      });
      return "linear-gradient(".concat(direction, ", ").concat(tempArr.join(","), ")");
    }

    return "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")");
  };

  var progressDefaultProps = {
    label: true,
    percentage: 0,
    size: "medium",
    theme: "line"
  };

  var Progress$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      CheckCircleIcon: CheckCircleIcon,
      CloseCircleIcon: CloseCircleIcon,
      ErrorCircleIcon: ErrorCircleIcon,
      CheckCircleFilledIcon: CheckCircleFilledIcon,
      CloseCircleFilledIcon: CloseCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon
    }),
        CheckCircleIcon$1 = _useGlobalIcon.CheckCircleIcon,
        CloseCircleIcon$1 = _useGlobalIcon.CloseCircleIcon,
        ErrorCircleIcon$1 = _useGlobalIcon.ErrorCircleIcon,
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
        CloseCircleFilledIcon$1 = _useGlobalIcon.CloseCircleFilledIcon,
        ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon;

    var theme = props.theme,
        percentage = props.percentage,
        label = props.label,
        _props$color = props.color,
        color = _props$color === void 0 ? "" : _props$color,
        trackColor = props.trackColor,
        strokeWidth = props.strokeWidth,
        size = props.size,
        className = props.className;
    var status = props.status;

    if (!status && percentage >= 100) {
      status = "success";
    }

    var iconMap = {
      success: CheckCircleFilledIcon$1,
      error: CloseCircleFilledIcon$1,
      warning: ErrorCircleFilledIcon$1
    };

    var getInfoContent = function getInfoContent() {
      if (!label) {
        return "";
      }

      var info;

      if (typeof label === "boolean") {
        info = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-progress__info")
        }, "".concat(percentage, "%"));

        if (["success", "error", "warning"].includes(status)) {
          var Icon = iconMap[status];
          info = /* @__PURE__ */React__default["default"].createElement("div", {
            className: "".concat(classPrefix, "-progress__info")
          }, /* @__PURE__ */React__default["default"].createElement(Icon, {
            className: "".concat(classPrefix, "-progress__icon")
          }));
        }
      } else {
        info = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-progress__info")
        }, label);
      }

      return info;
    };

    var statusClassName = "".concat(classPrefix, "-progress--status--").concat(status);
    var progressDom;

    if (theme === "circle") {
      iconMap = {
        success: CheckCircleIcon$1,
        error: CloseCircleIcon$1,
        warning: ErrorCircleIcon$1
      };

      var getDiameter = function getDiameter() {
        var diameter2 = 112;

        if (!size) {
          return diameter2;
        }

        switch (size) {
          default:
            diameter2 = Number(size);
            break;

          case "small":
            diameter2 = 72;
            break;

          case "medium":
            diameter2 = 112;
            break;

          case "large":
            diameter2 = 160;
            break;
        }

        return diameter2;
      };

      var getCircleStokeWidth = function getCircleStokeWidth() {
        if (!strokeWidth) {
          if (size === "small") {
            return 4;
          }
        }

        if (typeof strokeWidth !== "number" || Number.isNaN(strokeWidth)) {
          return 6;
        }

        return strokeWidth;
      };

      var circleStokeWidth = getCircleStokeWidth();
      var diameter = getDiameter();
      var radius = diameter / 2;
      var innerRadius = radius - circleStokeWidth;
      var perimeter = Math.PI * 2 * radius;
      var percent = percentage / 100;
      var strokeDasharray = "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
      var fontSizeRatio = innerRadius * 0.27;
      var circleBoxStyle = {
        width: diameter,
        height: diameter,
        fontSize: 4 + fontSizeRatio
      };
      var circlePathStyle = {
        stroke: color,
        strokeLinecap: circleStokeWidth < 30 ? "round" : "buff"
      };
      var circleCenterInViewBox = radius + circleStokeWidth / 2;
      progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: ref,
        className: classNames$1("".concat(classPrefix, "-progress--circle"), _defineProperty$3({}, "".concat(statusClassName), status)),
        style: circleBoxStyle
      }, getInfoContent(), /* @__PURE__ */React__default["default"].createElement("svg", {
        width: diameter,
        height: diameter,
        viewBox: "0 0 ".concat(diameter + circleStokeWidth, " ").concat(diameter + circleStokeWidth)
      }, /* @__PURE__ */React__default["default"].createElement("circle", {
        cx: circleCenterInViewBox,
        cy: circleCenterInViewBox,
        r: radius,
        strokeWidth: circleStokeWidth,
        stroke: trackColor || "var(--td-bg-color-component)",
        fill: "none"
      }), percentage > 0 && /* @__PURE__ */React__default["default"].createElement("circle", {
        cx: circleCenterInViewBox,
        cy: circleCenterInViewBox,
        r: radius,
        strokeWidth: circleStokeWidth,
        fill: "none",
        transform: "matrix(0,-1,1,0,0,".concat(diameter + circleStokeWidth, ")"),
        strokeDasharray: strokeDasharray,
        className: "".concat(classPrefix, "-progress__circle-inner"),
        style: circlePathStyle
      })));
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: className
      }, progressDom);
    }

    var getHeight = function getHeight() {
      if (strokeWidth) {
        return typeof strokeWidth === "string" ? strokeWidth : "".concat(strokeWidth, "px");
      }
    };

    var trackStyle = {
      height: getHeight(),
      backgroundColor: trackColor,
      borderRadius: getHeight()
    };
    var barStyle = {
      width: "".concat(percentage, "%"),
      background: getBackgroundColor(color),
      borderRadius: getHeight()
    };

    if (theme === "plump") {
      var _classNames2;

      var PLUMP_SEPARATE = 10;
      progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: ref,
        className: classNames$1("".concat(classPrefix, "-progress__bar"), "".concat(classPrefix, "-progress--plump"), (_classNames2 = {}, _defineProperty$3(_classNames2, "".concat(statusClassName), status), _defineProperty$3(_classNames2, "".concat(classPrefix, "-progress--over-ten"), percentage > PLUMP_SEPARATE), _defineProperty$3(_classNames2, "".concat(classPrefix, "-progress--under-ten"), percentage <= PLUMP_SEPARATE), _classNames2)),
        style: trackStyle
      }, percentage > PLUMP_SEPARATE ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__inner"),
        style: barStyle
      }, label && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__info"),
        style: {
          color: "#fff"
        }
      }, "".concat(percentage, "%"))) : /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__inner"),
        style: barStyle
      }), label && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__info")
      }, "".concat(percentage, "%"))));
    } else {
      progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: ref,
        className: classNames$1("".concat(classPrefix, "-progress--thin"), _defineProperty$3({}, "".concat(statusClassName), status))
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__bar"),
        style: trackStyle
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__inner"),
        style: barStyle
      })), getInfoContent());
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: className,
      style: props.style
    }, progressDom);
  });
  Progress$1.displayName = "Progress";
  Progress$1.defaultProps = progressDefaultProps;

  var Progress = Progress$1;

  function ownKeys$A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$A(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Popcontent = function Popcontent(props) {
    var content = props.content,
        cancelBtn = props.cancelBtn,
        confirmBtn = props.confirmBtn,
        icon = props.icon,
        theme = props.theme,
        _props$onCancel = props.onCancel,
        onCancel = _props$onCancel === void 0 ? noop$1 : _props$onCancel,
        _props$onConfirm = props.onConfirm,
        onConfirm = _props$onConfirm === void 0 ? noop$1 : _props$onConfirm,
        _props$onClose = props.onClose,
        onClose = _props$onClose === void 0 ? noop$1 : _props$onClose;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      InfoCircleFilledIcon: InfoCircleFilledIcon
    }),
        InfoCircleFilledIcon$1 = _useGlobalIcon.InfoCircleFilledIcon;

    var hideCancel = cancelBtn === null || cancelBtn === void 0;
    var hideConfirm = confirmBtn === null || confirmBtn === void 0;

    function renderIcon() {
      var color = "#0052D9";
      var defaultIcon = /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon$1, null);

      switch (theme) {
        case "warning":
          color = "#FFAA00";
          break;

        case "danger":
          color = "#FF3E00";
          break;
      }

      var iconComponent = null;

      if ( /*#__PURE__*/React__default["default"].isValidElement(icon)) {
        iconComponent = /*#__PURE__*/React__default["default"].cloneElement(icon, _objectSpread$A({
          style: {
            color: color
          }
        }, icon.props));
      } else if (typeof icon === "function") {
        iconComponent = icon();
      } else if (defaultIcon) {
        iconComponent = /*#__PURE__*/React__default["default"].cloneElement(defaultIcon, {
          style: {
            color: color
          }
        });
      }

      return iconComponent;
    }

    function renderCancel() {
      if ( /*#__PURE__*/React__default["default"].isValidElement(cancelBtn)) {
        return /*#__PURE__*/React__default["default"].cloneElement(cancelBtn, {
          onClick: function onClick(e) {
            var _cancelBtn$props, _cancelBtn$props$onCl;

            onClose({
              e: e,
              trigger: "cancel"
            });
            (_cancelBtn$props = cancelBtn.props) === null || _cancelBtn$props === void 0 ? void 0 : (_cancelBtn$props$onCl = _cancelBtn$props.onClick) === null || _cancelBtn$props$onCl === void 0 ? void 0 : _cancelBtn$props$onCl.call(_cancelBtn$props, e);
          }
        });
      }

      if (hideCancel) {
        return null;
      }

      return /* @__PURE__ */React__default["default"].createElement(Button, {
        size: "small",
        theme: "default",
        variant: "base",
        onClick: function onClick(e) {
          onClose({
            e: e,
            trigger: "cancel"
          });
          onCancel({
            e: e
          });
        }
      }, isString_1(cancelBtn) && cancelBtn);
    }

    function renderConfirm() {
      if ( /*#__PURE__*/React__default["default"].isValidElement(confirmBtn)) {
        return /*#__PURE__*/React__default["default"].cloneElement(confirmBtn, {
          onClick: function onClick(e) {
            var _confirmBtn$props, _confirmBtn$props$onC;

            onClose({
              e: e,
              trigger: "confirm"
            });
            (_confirmBtn$props = confirmBtn.props) === null || _confirmBtn$props === void 0 ? void 0 : (_confirmBtn$props$onC = _confirmBtn$props.onClick) === null || _confirmBtn$props$onC === void 0 ? void 0 : _confirmBtn$props$onC.call(_confirmBtn$props, e);
          }
        });
      }

      if (hideConfirm) {
        return null;
      }

      return /* @__PURE__ */React__default["default"].createElement(Button, {
        size: "small",
        theme: "primary",
        onClick: function onClick(e) {
          onClose({
            e: e,
            trigger: "confirm"
          });
          onConfirm({
            e: e
          });
        }
      }, isString_1(confirmBtn) && confirmBtn);
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__content")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__body")
    }, renderIcon(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__inner")
    }, content)), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__buttons")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1("".concat(classPrefix, "-popconfirm__cancel"))
    }, renderCancel()), /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1("".concat(classPrefix, "-popconfirm__confirm"))
    }, renderConfirm())));
  };

  Popcontent.displayName = "Popcontent";

  var popconfirmDefaultProps = {
    destroyOnClose: true,
    placement: "top",
    showArrow: true,
    theme: "default"
  };

  function ownKeys$z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Popconfirm$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useLocaleReceiver = useLocaleReceiver("popconfirm"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var cancelContent = typeof local.cancel === "string" ? local.cancel : local.cancel.content;
    var confirmContent = typeof local.confirm === "string" ? local.confirm : local.confirm.content;
    var _props$cancelBtn = props.cancelBtn,
        cancelBtn = _props$cancelBtn === void 0 ? t(cancelContent) : _props$cancelBtn,
        _props$confirmBtn = props.confirmBtn,
        confirmBtn = _props$confirmBtn === void 0 ? t(confirmContent) : _props$confirmBtn;

    var _useControlled = useControlled(props, "visible", props.onVisibleChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        visible = _useControlled2[0],
        setVisible = _useControlled2[1];

    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$z(_objectSpread$z({
      ref: ref
    }, props), {}, {
      visible: visible,
      trigger: "click",
      onVisibleChange: function onVisibleChange(visible2) {
        return setVisible(visible2);
      },
      overlayClassName: classNames$1("".concat(classPrefix, "-popconfirm")),
      content: /* @__PURE__ */React__default["default"].createElement(Popcontent, _objectSpread$z(_objectSpread$z({
        cancelBtn: cancelBtn,
        confirmBtn: confirmBtn
      }, props), {}, {
        onClose: function onClose(context) {
          return setVisible(false, context);
        }
      }))
    }, props.popupProps));
  });
  Popconfirm$1.displayName = "Popconfirm";
  Popconfirm$1.defaultProps = popconfirmDefaultProps;

  var Popconfirm = Popconfirm$1;

  var TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
  var hiddenTextarea;

  function calcTextareaHeight(targetElement) {
    var _hiddenTextarea, _hiddenTextarea$paren;

    var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      document.body.appendChild(hiddenTextarea);
    }

    var _calculateNodeSize = calculateNodeSize(targetElement),
        paddingSize = _calculateNodeSize.paddingSize,
        borderSize = _calculateNodeSize.borderSize,
        boxSizing = _calculateNodeSize.boxSizing,
        sizingStyle = _calculateNodeSize.sizingStyle;

    hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(TEXTAREA_STYLE));
    hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
    var height = hiddenTextarea.scrollHeight;
    var result = {};
    var isBorderbox = boxSizing === "border-box";
    var isContentbox = boxSizing === "content-box";

    if (isBorderbox) {
      height += borderSize;
    } else if (isContentbox) {
      height -= paddingSize;
    }

    hiddenTextarea.value = "";
    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
    (_hiddenTextarea = hiddenTextarea) === null || _hiddenTextarea === void 0 ? void 0 : (_hiddenTextarea$paren = _hiddenTextarea.parentNode) === null || _hiddenTextarea$paren === void 0 ? void 0 : _hiddenTextarea$paren.removeChild(hiddenTextarea);
    hiddenTextarea = null;

    var calcHeight = function calcHeight(rows) {
      var rowsHeight = singleRowHeight * rows;

      if (isBorderbox) {
        rowsHeight = rowsHeight + paddingSize + borderSize;
      }

      return rowsHeight;
    };

    if (minRows !== null) {
      var minHeight = calcHeight(minRows);
      height = Math.max(minHeight, height);
      result.minHeight = "".concat(minHeight, "px");
    }

    if (maxRows !== null) {
      height = Math.min(calcHeight(maxRows), height);
    }

    result.height = "".concat(height, "px");
    return result;
  }

  var textareaDefaultProps = {
    allowInputOverMax: false,
    autofocus: false,
    autosize: false,
    placeholder: void 0,
    readonly: false
  };

  var _excluded$8 = ["disabled", "maxlength", "maxcharacter", "className", "readonly", "autofocus", "style", "onKeydown", "onKeypress", "onKeyup", "autosize", "status", "tips", "allowInputOverMax"];

  function ownKeys$y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Textarea$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames, _classNames2;

    var disabled = props.disabled,
        maxlength = props.maxlength,
        maxcharacter = props.maxcharacter,
        className = props.className,
        readonly = props.readonly,
        autofocus = props.autofocus,
        style = props.style,
        _props$onKeydown = props.onKeydown,
        onKeydown = _props$onKeydown === void 0 ? noop$1 : _props$onKeydown,
        _props$onKeypress = props.onKeypress,
        onKeypress = _props$onKeypress === void 0 ? noop$1 : _props$onKeypress,
        _props$onKeyup = props.onKeyup,
        onKeyup = _props$onKeyup === void 0 ? noop$1 : _props$onKeyup,
        autosize = props.autosize,
        status = props.status,
        tips = props.tips,
        allowInputOverMax = props.allowInputOverMax,
        otherProps = _objectWithoutProperties$2(props, _excluded$8);

    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        _useControlled2$ = _useControlled2[0],
        value = _useControlled2$ === void 0 ? "" : _useControlled2$,
        setValue = _useControlled2[1];

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isFocused = _useState2[0],
        setIsFocused = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isOvermax = _useState4[0],
        setIsOvermax = _useState4[1];

    var _useState5 = React.useState({}),
        _useState6 = _slicedToArray(_useState5, 2),
        textareaStyle = _useState6[0],
        setTextareaStyle = _useState6[1];

    var composingRef = React.useRef(false);
    var hasMaxcharacter = typeof maxcharacter !== "undefined";
    var textareaRef = React.useRef();
    var wrapperRef = React.useRef();
    var currentLength = React.useMemo(function () {
      return getUnicodeLength(value);
    }, [value]);
    var characterLength = React.useMemo(function () {
      var characterInfo = getCharacterLength(String(value), allowInputOverMax ? Infinity : maxcharacter);
      if (_typeof$1(characterInfo) === "object") return characterInfo.length;
      return characterInfo;
    }, [value, allowInputOverMax, maxcharacter]);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var textareaPropsNames = Object.keys(otherProps).filter(function (key) {
      return !/^on[A-Z]/.test(key);
    });
    var textareaProps = textareaPropsNames.reduce(function (textareaProps2, key) {
      return Object.assign(textareaProps2, _defineProperty$3({}, key, props[key]));
    }, {});
    var eventPropsNames = Object.keys(otherProps).filter(function (key) {
      return /^on[A-Z]/.test(key);
    });
    var eventProps = eventPropsNames.reduce(function (eventProps2, key) {
      Object.assign(eventProps2, _defineProperty$3({}, key, function (e) {
        if (disabled) return;
        if (key === "onFocus") setIsFocused(true);
        if (key === "onBlur") setIsFocused(false);
        props[key](e.currentTarget.value, {
          e: e
        });
      }));
      return eventProps2;
    }, {});
    var textareaClassNames = classNames$1("".concat(classPrefix, "-textarea__inner"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-").concat(status), status), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-is-focused"), isFocused), _defineProperty$3(_classNames, "".concat(classPrefix, "-resize-none"), _typeof$1(autosize) === "object"), _classNames));
    var adjustTextareaHeight = React.useCallback(function () {
      if (autosize === true) {
        setTextareaStyle(calcTextareaHeight(textareaRef.current));
      } else if (_typeof$1(autosize) === "object") {
        setTextareaStyle(calcTextareaHeight(textareaRef.current, autosize === null || autosize === void 0 ? void 0 : autosize.minRows, autosize === null || autosize === void 0 ? void 0 : autosize.maxRows));
      }
    }, [autosize]);
    React.useEffect(function () {
      adjustTextareaHeight();
    }, [textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current]);

    function inputValueChangeHandle(e) {
      var target = e.target;
      var val = target.value;

      if (!allowInputOverMax && !composingRef.current) {
        val = limitUnicodeMaxLength(val, maxlength);

        if (maxcharacter && maxcharacter >= 0) {
          var stringInfo = getCharacterLength(val, maxcharacter);
          val = _typeof$1(stringInfo) === "object" && stringInfo.characters;
        }
      }

      setValue(val, {
        e: e
      });
    }

    function handleCompositionStart() {
      composingRef.current = true;
    }

    function handleCompositionEnd(e) {
      if (composingRef.current) {
        composingRef.current = false;
        inputValueChangeHandle(e);
      }
    }

    var renderLimitText = function renderLimitText(current, max) {
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-textarea__limit")
      }, isOvermax && allowInputOverMax ? /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-textarea__tips--warning")
      }, " ", current) : "".concat(current), "/".concat(max));
    };

    React.useEffect(function () {
      if (autosize === false) {
        setTextareaStyle({
          height: "auto",
          minHeight: "auto"
        });
      }
    }, [adjustTextareaHeight, autosize]);
    React.useEffect(function () {
      adjustTextareaHeight();
    }, [adjustTextareaHeight, value]);
    React.useEffect(function () {
      if (allowInputOverMax) {
        setIsOvermax(!!(maxlength && currentLength > maxlength) || !!(maxcharacter && characterLength > maxcharacter));
      }
    }, [allowInputOverMax, characterLength, currentLength, maxcharacter, maxlength]);
    React.useImperativeHandle(ref, function () {
      return {
        currentElement: wrapperRef.current,
        textareaElement: textareaRef.current
      };
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: style,
      ref: wrapperRef,
      className: classNames$1("".concat(classPrefix, "-textarea"), className)
    }, /* @__PURE__ */React__default["default"].createElement("textarea", _objectSpread$y(_objectSpread$y(_objectSpread$y({}, textareaProps), eventProps), {}, {
      value: value,
      style: textareaStyle,
      className: textareaClassNames,
      readOnly: readonly,
      autoFocus: autofocus,
      disabled: disabled,
      onChange: inputValueChangeHandle,
      onKeyDown: function onKeyDown(e) {
        return onKeydown(e.currentTarget.value, {
          e: e
        });
      },
      onKeyPress: function onKeyPress(e) {
        return onKeypress(e.currentTarget.value, {
          e: e
        });
      },
      onKeyUp: function onKeyUp(e) {
        return onKeyup(e.currentTarget.value, {
          e: e
        });
      },
      onCompositionStart: handleCompositionStart,
      onCompositionEnd: handleCompositionEnd,
      ref: textareaRef
    })), hasMaxcharacter && renderLimitText(characterLength, maxcharacter), !hasMaxcharacter && maxlength && renderLimitText(currentLength, maxlength), tips ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-textarea__tips"), (_classNames2 = {}, _defineProperty$3(_classNames2, "".concat(classPrefix, "-textarea__tips--normal"), !status), _defineProperty$3(_classNames2, "".concat(classPrefix, "-textarea__tips--").concat(status), status), _classNames2))
    }, tips) : null);
  });
  Textarea$1.displayName = "Textarea";
  Textarea$1.defaultProps = textareaDefaultProps;

  var Textarea = Textarea$1;

  var BreadcrumbContext = /*#__PURE__*/React.createContext({
    maxItemWidthInContext: "",
    separator: null
  });

  var breadcrumbDefaultProps = {
    maxItemWidth: void 0
  };
  var breadcrumbItemDefaultProps = {
    maxWidth: void 0,
    replace: false,
    target: "_self"
  };

  var _excluded$7 = ["children", "separator", "disabled", "maxItemWidth", "maxWidth", "href", "to", "target", "router", "replace", "className"];

  function ownKeys$x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$x(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var BreadcrumbItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var commonClassNames = useCommonClassName$1();

    var _useGlobalIcon = useGlobalIcon({
      ChevronRightIcon: ChevronRightIcon
    }),
        ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;

    var children = props.children,
        separator = props.separator,
        disabled = props.disabled,
        maxItemWidth = props.maxItemWidth,
        maxWidth = props.maxWidth,
        href = props.href,
        to = props.to,
        target = props.target,
        router = props.router,
        replace = props.replace,
        className = props.className,
        restProps = _objectWithoutProperties$2(props, _excluded$7);

    var _useContext = React.useContext(BreadcrumbContext),
        maxItemWidthInContext = _useContext.maxItemWidthInContext,
        separatorInContext = _useContext.separator;

    var breadcrumbItemClassNames = classNames$1("".concat(classPrefix, "-breadcrumb__item"));
    var textWrapperClassName = "".concat(classPrefix, "-breadcrumb__inner");
    var textClassNames = classNames$1("".concat(classPrefix, "-breadcrumb--text-overflow"), _defineProperty$3({}, commonClassNames.STATUS.disabled, disabled));
    var separatorClassName = "".concat(classPrefix, "-breadcrumb__separator");
    var linkClassName = "".concat(classPrefix, "-link");
    var maxWidthForItem = React.useMemo(function () {
      return {
        maxWidth: maxWidth || maxItemWidth || maxItemWidthInContext || "120px"
      };
    }, [maxItemWidth, maxWidth, maxItemWidthInContext]);
    var textContent = /* @__PURE__ */React__default["default"].createElement("span", {
      className: textWrapperClassName,
      style: maxWidthForItem
    }, children);
    var itemContent = /* @__PURE__ */React__default["default"].createElement("span", {
      className: textClassNames
    }, textContent);

    if ((href || to) && !disabled) {
      var handleRouting = function handleRouting() {
        if (href || !router) return;
        replace ? router.replace(to) : router.push(to);
      };

      itemContent = /* @__PURE__ */React__default["default"].createElement("a", {
        className: classNames$1(textClassNames, linkClassName),
        href: href,
        target: target,
        onClick: handleRouting
      }, textContent);
    }

    var separatorInProps = typeof separator === "function" ? separator() : separator;
    var separatorContent = separatorInProps || separatorInContext || /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon$1, {
      style: {
        color: "rgba(0,0,0,.3)"
      }
    });
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$x({
      className: classNames$1(breadcrumbItemClassNames, className),
      ref: ref
    }, restProps), itemContent, /* @__PURE__ */React__default["default"].createElement("span", {
      className: separatorClassName
    }, separatorContent));
  });
  BreadcrumbItem.displayName = "BreadcrumbItem";
  BreadcrumbItem.defaultProps = breadcrumbItemDefaultProps;

  var _excluded$6 = ["children", "options", "separator", "maxItemWidth", "className"];

  function ownKeys$w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$w(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Breadcrumb$1 = forwardRefWithStatics(function (props, ref) {
    var children = props.children,
        options = props.options,
        separator = props.separator,
        maxItemWidth = props.maxItemWidth,
        className = props.className,
        restProps = _objectWithoutProperties$2(props, _excluded$6);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var content = children;

    if (options && options.length) {
      content = options.map(function (option, index) {
        return /* @__PURE__ */React__default["default"].createElement(BreadcrumbItem, {
          key: index,
          maxWidth: option.maxWidth,
          disabled: option.disabled,
          href: option.href,
          target: option.target,
          to: option.to,
          router: option.router,
          replace: option.replace,
          separator: separator,
          maxItemWidth: maxItemWidth
        }, option.content || option.children);
      });
    }

    return /* @__PURE__ */React__default["default"].createElement(BreadcrumbContext.Provider, {
      value: {
        maxItemWidthInContext: maxItemWidth,
        separator: separator
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$w({
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-breadcrumb"), className)
    }, restProps), content));
  }, {
    BreadcrumbItem: BreadcrumbItem
  });
  Breadcrumb$1.displayName = "Breadcrumb";
  Breadcrumb$1.defaultProps = breadcrumbDefaultProps;

  var Breadcrumb = Breadcrumb$1;

  var dropdownDefaultProps = {
    direction: "right",
    hideAfterItemClick: true,
    maxColumnWidth: 100,
    maxHeight: 300,
    minColumnWidth: 10,
    placement: "bottom-left",
    trigger: "hover"
  };
  var dropdownItemDefaultProps = {
    active: false,
    disabled: false,
    divider: false,
    theme: "default"
  };

  function ownKeys$v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$v(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DropdownItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var children = props.children,
        className = props.className,
        active = props.active,
        disabled = props.disabled,
        value = props.value,
        theme = props.theme,
        prefixIcon = props.prefixIcon,
        maxColumnWidth = props.maxColumnWidth,
        minColumnWidth = props.minColumnWidth,
        onClick = props.onClick,
        style = props.style,
        isSubmenu = props.isSubmenu;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var dropdownItemRef = React.useRef(null);
    useRipple(isSubmenu ? null : ref || dropdownItemRef);

    var handleItemClick = function handleItemClick(e) {
      onClick === null || onClick === void 0 ? void 0 : onClick(value, e);
    };

    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1(className, "".concat(classPrefix, "-dropdown__item--theme-").concat(theme), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-dropdown__item--active"), active), _defineProperty$3(_classNames, "".concat(classPrefix, "-dropdown__item--disabled"), disabled), _classNames)),
      onClick: handleItemClick,
      style: _objectSpread$v({
        maxWidth: pxCompat(maxColumnWidth),
        minWidth: pxCompat(minColumnWidth)
      }, style),
      ref: ref || dropdownItemRef
    }, prefixIcon ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-dropdown__item-icon")
    }, prefixIcon) : null, children));
  });
  DropdownItem.displayName = "DropdownItem";
  DropdownItem.defaultProps = dropdownItemDefaultProps;

  function ownKeys$u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$u(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var DropdownMenu = function DropdownMenu(props) {
    var _props$options = props.options,
        options = _props$options === void 0 ? [] : _props$options,
        _props$maxHeight = props.maxHeight,
        maxHeight = _props$maxHeight === void 0 ? 300 : _props$maxHeight,
        _props$minColumnWidth = props.minColumnWidth,
        minColumnWidth = _props$minColumnWidth === void 0 ? 10 : _props$minColumnWidth,
        _props$maxColumnWidth = props.maxColumnWidth,
        maxColumnWidth = _props$maxColumnWidth === void 0 ? 160 : _props$maxColumnWidth,
        direction = props.direction;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var dropdownClass = "".concat(classPrefix, "-dropdown");
    var dropdownMenuClass = "".concat(dropdownClass, "__menu");

    var _useGlobalIcon = useGlobalIcon({
      ChevronRightIcon: ChevronRightIcon,
      ChevronLeftIcon: ChevronLeftIcon
    }),
        ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon,
        ChevronLeftIcon$1 = _useGlobalIcon.ChevronLeftIcon;

    var handleItemClick = function handleItemClick(options2) {
      var _data$onClick, _props$onClick;

      var data = options2.data,
          context = options2.context;
      data === null || data === void 0 ? void 0 : (_data$onClick = data.onClick) === null || _data$onClick === void 0 ? void 0 : _data$onClick.call(data, data, context);
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, data, context);
    };

    var renderOptions = function renderOptions(data) {
      var _data$forEach;

      var arr = [];
      var renderContent;
      (_data$forEach = data.forEach) === null || _data$forEach === void 0 ? void 0 : _data$forEach.call(data, function (menu, idx) {
        var optionItem = _objectSpread$u({}, menu);

        if (optionItem.children) {
          var _classNames;

          optionItem.children = renderOptions(optionItem.children);
          renderContent = /* @__PURE__ */React__default["default"].createElement("div", {
            key: idx
          }, /* @__PURE__ */React__default["default"].createElement(DropdownItem, {
            className: classNames$1("".concat(dropdownClass, "__item"), "".concat(dropdownClass, "__item--suffix")),
            value: optionItem.value,
            theme: optionItem.theme,
            active: optionItem.active,
            prefixIcon: optionItem.prefixIcon,
            disabled: optionItem.disabled,
            minColumnWidth: minColumnWidth,
            maxColumnWidth: maxColumnWidth,
            isSubmenu: true
          }, /* @__PURE__ */React__default["default"].createElement("div", {
            className: "".concat(dropdownClass, "__item-content")
          }, direction === "right" ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(dropdownClass, "__item-text")
          }, optionItem.content), /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon$1, {
            className: "".concat(dropdownClass, "__item-direction"),
            size: "16"
          })) : /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon$1, {
            className: "".concat(dropdownClass, "__item-direction"),
            size: "16"
          }), /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(dropdownClass, "__item-text")
          }, optionItem.content))), /* @__PURE__ */React__default["default"].createElement("div", {
            className: classNames$1("".concat(dropdownClass, "__submenu"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(dropdownClass, "__submenu--disabled"), optionItem.disabled), _defineProperty$3(_classNames, "".concat(dropdownClass, "__submenu--").concat(direction), direction), _classNames)),
            style: {
              top: "".concat(idx * 30, "px")
            }
          }, /* @__PURE__ */React__default["default"].createElement("ul", null, optionItem.children))), optionItem.divider ? /* @__PURE__ */React__default["default"].createElement(Divider, null) : null);
        } else {
          renderContent = /* @__PURE__ */React__default["default"].createElement("div", {
            key: idx
          }, /* @__PURE__ */React__default["default"].createElement(DropdownItem, {
            className: "".concat(dropdownClass, "__item"),
            value: optionItem.value,
            theme: optionItem.theme,
            active: optionItem.active,
            prefixIcon: optionItem.prefixIcon,
            disabled: optionItem.disabled,
            minColumnWidth: minColumnWidth,
            maxColumnWidth: maxColumnWidth,
            onClick: optionItem.disabled || optionItem.children ? function () {
              return null;
            } : function (value, context) {
              return handleItemClick({
                data: optionItem,
                context: context
              });
            }
          }, /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(dropdownClass, "-text")
          }, optionItem.content)), optionItem.divider ? /* @__PURE__ */React__default["default"].createElement(Divider, null) : null);
        }

        arr.push(renderContent);
      });
      return arr;
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(dropdownMenuClass, "".concat(dropdownMenuClass, "--").concat(direction)),
      style: {
        maxHeight: "".concat(maxHeight, "px")
      }
    }, renderOptions(options));
  };

  DropdownMenu.displayName = "DropdownMenu";

  function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$t(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var getOptionsFromChildren = function getOptionsFromChildren(children) {
    if (!children) return [];

    if (children.type === DropdownMenu) {
      var groupChildren = children.props.children;

      if (Array.isArray(groupChildren)) {
        return getOptionsFromChildren(groupChildren);
      }
    }

    if (Array.isArray(children)) {
      return children.map(function (item) {
        var groupChildren = item.props.children;

        if (Array.isArray(groupChildren)) {
          var contentIdx = groupChildren.findIndex(function (v) {
            return typeof v === "string";
          });
          return _objectSpread$t(_objectSpread$t({}, item.props), {}, {
            content: groupChildren[contentIdx],
            children: getOptionsFromChildren(groupChildren[1])
          });
        }

        return _objectSpread$t(_objectSpread$t({}, item.props), {}, {
          content: item.props.children || item.props.content,
          children: null
        });
      });
    }

    return [];
  };
  function useDropdownOptions(children, options) {
    if (options) return options;
    var dropdownMenuChild;
    React__default["default"].Children.forEach(children, function (child) {
      if (! /*#__PURE__*/React__default["default"].isValidElement(child)) return;

      if (child.type === DropdownMenu && child.props.children) {
        dropdownMenuChild = child.props.children;
      }
    });
    return getOptionsFromChildren(dropdownMenuChild);
  }

  function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$s(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Dropdown$1 = function Dropdown(props) {
    var _props$popupProps = props.popupProps,
        popupProps = _props$popupProps === void 0 ? {} : _props$popupProps,
        disabled = props.disabled,
        placement = props.placement,
        trigger = props.trigger,
        className = props.className,
        children = props.children,
        hideAfterItemClick = props.hideAfterItemClick,
        propsOptions = props.options,
        style = props.style;
    var arrayChildren = React__default["default"].Children.toArray(children);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isPopupVisible = _useState2[0],
        togglePopupVisible = _useState2[1];

    var dropdownClass = "".concat(classPrefix, "-dropdown");
    var options = useDropdownOptions(arrayChildren, propsOptions);

    var handleMenuClick = function handleMenuClick(data, context) {
      var _props$onClick;

      if (hideAfterItemClick) togglePopupVisible(false);
      props === null || props === void 0 ? void 0 : (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, data, context);
    };

    var handleVisibleChange = function handleVisibleChange(visible, context) {
      var _popupProps$onVisible;

      togglePopupVisible(visible);
      popupProps === null || popupProps === void 0 ? void 0 : (_popupProps$onVisible = popupProps.onVisibleChange) === null || _popupProps$onVisible === void 0 ? void 0 : _popupProps$onVisible.call(popupProps, visible, context);
    };

    var renderContent = /* @__PURE__ */React__default["default"].createElement(DropdownMenu, _objectSpread$s(_objectSpread$s({}, props), {}, {
      options: options,
      onClick: handleMenuClick
    }));

    var popupParams = _objectSpread$s(_objectSpread$s({
      disabled: disabled,
      placement: placement,
      trigger: trigger,
      showArrow: false,
      content: renderContent
    }, omit_1(popupProps, "onVisibleChange")), {}, {
      overlayInnerClassName: classNames$1(dropdownClass, className, popupProps === null || popupProps === void 0 ? void 0 : popupProps.overlayInnerClassName),
      overlayInnerStyle: style
    });

    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$s({
      expandAnimation: true,
      destroyOnClose: true,
      visible: isPopupVisible,
      onVisibleChange: handleVisibleChange
    }, popupParams), arrayChildren === null || arrayChildren === void 0 ? void 0 : arrayChildren[0]);
  };

  Dropdown$1.DropdownItem = DropdownItem;
  Dropdown$1.DropdownMenu = DropdownMenu;
  Dropdown$1.displayName = "Dropdown";
  Dropdown$1.defaultProps = dropdownDefaultProps;

  var Dropdown = Dropdown$1;

  var numberToPercent = function numberToPercent(number) {
    return "".concat(number * 100, "%");
  };

  function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$r(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var SliderHandleButton = function SliderHandleButton(_ref) {
    var onChange = _ref.onChange,
        style = _ref.style,
        classPrefix = _ref.classPrefix,
        toolTipProps = _ref.toolTipProps,
        hideTips = _ref.hideTips;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        popupVisible = _useState2[0],
        setPopupVisible = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isDragging = _useState4[0],
        toggleIsDragging = _useState4[1];

    var onSliderDragging = function onSliderDragging(e) {
      toggleIsDragging(true);
      onChange(e);
    };

    var onSliderDraggingEnd = function onSliderDraggingEnd() {
      toggleIsDragging(false);
      window.removeEventListener("mousemove", onSliderDragging);
      window.removeEventListener("mouseup", onSliderDraggingEnd);
      window.removeEventListener("touchmove", onSliderDragging);
      window.removeEventListener("touchend", onSliderDraggingEnd);
    };

    var handleSliderMouseDown = function handleSliderMouseDown(e) {
      e.stopPropagation();
      setPopupVisible(true);
      window.addEventListener("mousemove", onSliderDragging);
      window.addEventListener("mouseup", onSliderDraggingEnd);
      window.addEventListener("touchmove", onSliderDragging);
      window.addEventListener("touchend", onSliderDraggingEnd);
    };

    var handleSliderEnter = function handleSliderEnter(event) {
      event.stopPropagation();
      setPopupVisible(true);
    };

    var handleSliderLeave = function handleSliderLeave(event) {
      event.stopPropagation();
      setPopupVisible(false);
    };

    var handleNode = /* @__PURE__ */React__default["default"].createElement("div", {
      style: style,
      className: "".concat(classPrefix, "-slider__button-wrapper"),
      onMouseDown: function onMouseDown(e) {
        return handleSliderMouseDown(e);
      },
      onMouseEnter: function onMouseEnter(e) {
        return handleSliderEnter(e);
      },
      onMouseLeave: function onMouseLeave(e) {
        return handleSliderLeave(e);
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__button"), _defineProperty$3({}, "".concat(classPrefix, "-slider__button--dragging"), isDragging))
    }));
    return hideTips ? handleNode : /* @__PURE__ */React__default["default"].createElement(Tooltip$1, _objectSpread$r({
      visible: popupVisible,
      placement: "top"
    }, toolTipProps), handleNode);
  };

  function accAdd(num1, num2) {
    var isFloat = function isFloat(n) {
      return typeof n === "number" && !Number.isInteger(n);
    };

    if (isFloat(num1) && isFloat(num2)) {
      var _String$split = String(num1).split("."),
          _String$split2 = _slicedToArray(_String$split, 2),
          integer1 = _String$split2[0],
          precision1 = _String$split2[1];

      var _String$split3 = String(num2).split("."),
          _String$split4 = _slicedToArray(_String$split3, 2),
          integer2 = _String$split4[0],
          precision2 = _String$split4[1];

      var maxPrecisionLen = Math.max(precision1.length, precision2.length);
      var wholePrecision1 = Number(precision1.padEnd(maxPrecisionLen, "0"));
      var wholePrecision2 = Number(precision2.padEnd(maxPrecisionLen, "0"));
      var precisionVal = (wholePrecision1 + wholePrecision2) / Math.pow(10, maxPrecisionLen);
      var integerVal = Number(integer1) + Number(integer2);
      return integerVal + precisionVal;
    }

    return num1 + num2;
  }

  var sliderDefaultProps = {
    inputNumberProps: false,
    label: true,
    layout: "horizontal",
    max: 100,
    min: 0,
    range: false,
    step: 1
  };

  function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var LEFT_NODE = 0;
  var RIGHT_NODE = 1;
  var Slider$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames, _style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var disabled = props.disabled,
        inputNumberProps = props.inputNumberProps,
        label = props.label,
        layout = props.layout,
        marks = props.marks,
        max = props.max,
        min = props.min,
        range = props.range,
        step = props.step,
        tooltipProps = props.tooltipProps,
        className = props.className,
        style = props.style;
    var sliderRef = React.useRef();

    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onChange = _useControlled2[1];

    var isVertical = layout === "vertical";
    var renderValue = Array.isArray(value) ? value : [min, value];
    var start = (renderValue[LEFT_NODE] - min) / (max - min);
    var width = (renderValue[RIGHT_NODE] - renderValue[LEFT_NODE]) / (max - min);
    var end = start + width;
    var dots = React.useMemo(function () {
      if (Array.isArray(marks)) {
        if (marks.some(function (mark) {
          return typeof mark !== "number";
        })) {
          console.warn('The props "marks" only support number!');
          return [];
        }

        return marks.map(function (mark) {
          return {
            value: mark,
            position: (mark - min) / (max - min),
            label: mark
          };
        });
      }

      if (marks && _typeof$1(marks) === "object") {
        var result = [];
        Object.keys(marks).forEach(function (key) {
          var numberKey = Number(key);

          if (typeof numberKey !== "number") {
            console.warn('The props "marks" key only support number!');
          } else {
            result.push({
              value: numberKey,
              label: marks[numberKey],
              position: (numberKey - min) / max
            });
          }
        });
        return result;
      }

      return [];
    }, [max, min, marks]);
    var allDots = React.useMemo(function () {
      var result = [];

      for (var i = min; i <= max; i = accAdd(i, step)) {
        result.push({
          value: i,
          position: (i - min) / (max - min)
        });
      }

      return result;
    }, [max, min, step]);
    var startDirection = isVertical ? "bottom" : "left";
    var stepDirection = isVertical ? "top" : "left";
    var sizeKey = isVertical ? "height" : "width";
    var renderDots = isVertical ? dots.map(function (item) {
      return _objectSpread$q(_objectSpread$q({}, item), {}, {
        position: 1 - item.position
      });
    }) : dots;

    var handleInputChange = function handleInputChange(newValue, nodeIndex) {
      var safeValue = Number(newValue.toFixed(32));
      var resultValue = Math.max(Math.min(max, safeValue), min);
      if (nodeIndex === LEFT_NODE && value && safeValue > value[RIGHT_NODE]) resultValue = value[RIGHT_NODE];
      if (nodeIndex === RIGHT_NODE && value && safeValue < value[LEFT_NODE]) resultValue = value[LEFT_NODE];

      if (Array.isArray(value)) {
        var arrValue = value.slice();
        arrValue[nodeIndex] = resultValue;
        onChange(arrValue);
      } else {
        onChange(resultValue);
      }
    };

    var createInput = function createInput(nodeIndex) {
      var inputProps = _typeof$1(inputNumberProps) === "object" ? inputNumberProps : {};
      var currentValue = renderValue[nodeIndex];
      return /* @__PURE__ */React__default["default"].createElement(InputNumber$1, _objectSpread$q(_objectSpread$q({
        value: currentValue,
        onChange: function onChange(v) {
          if (typeof v !== "undefined") {
            handleInputChange(Number(v), nodeIndex);
          }
        },
        className: classNames$1("".concat(classPrefix, "-slider-input"), {
          "is-vertical": isVertical
        }),
        disabled: disabled
      }, inputProps), {}, {
        theme: "column"
      }));
    };

    var nearbyValueChange = function nearbyValueChange(value2) {
      var buttonBias = Math.abs(value2 - renderValue[LEFT_NODE]) > Math.abs(value2 - renderValue[RIGHT_NODE]) ? RIGHT_NODE : LEFT_NODE;
      handleInputChange(value2, buttonBias);
    };

    var setPosition = function setPosition(position, nodeIndex) {
      var index = 0;
      var minDistance = 1;

      for (var i = 0; i < allDots.length; i++) {
        var diff = Math.abs(allDots[i].position - position);

        if (minDistance > diff) {
          index = i;
          minDistance = diff;
        }
      }

      var value2 = allDots[index].value;

      if (nodeIndex === void 0 && range) {
        nearbyValueChange(value2);
      } else {
        handleInputChange(value2, nodeIndex);
      }
    };

    var onSliderChange = function onSliderChange(event, nodeIndex) {
      if (disabled) return;
      var clientKey = isVertical ? "clientY" : "clientX";
      var sliderPositionInfo = sliderRef.current.getBoundingClientRect();
      var sliderOffset = sliderPositionInfo[startDirection];
      var position = (event[clientKey] - sliderOffset) / sliderPositionInfo[sizeKey] * (isVertical ? -1 : 1);
      setPosition(position, nodeIndex);
    };

    var handleClickMarks = function handleClickMarks(event, value2) {
      event.stopPropagation();
      nearbyValueChange(value2);
    };

    var createHandleButton = function createHandleButton(nodeIndex, style2) {
      var currentValue = renderValue[nodeIndex];
      var tipLabel = currentValue;
      if (isFunction_1(label)) tipLabel = label({
        value: currentValue,
        position: nodeIndex === LEFT_NODE ? "start" : "end"
      });
      if (isString_1(label)) tipLabel = label.replace(/\$\{value\}/g, currentValue.toString());
      return /* @__PURE__ */React__default["default"].createElement(SliderHandleButton, {
        toolTipProps: _objectSpread$q({
          content: tipLabel
        }, tooltipProps),
        hideTips: label === false,
        classPrefix: classPrefix,
        style: style2,
        onChange: function onChange(e) {
          return onSliderChange(e, nodeIndex);
        }
      });
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: _objectSpread$q({}, style),
      className: classNames$1("".concat(classPrefix, "-slider__container"), {
        "is-vertical": isVertical
      }),
      ref: ref
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: sliderRef,
      className: classNames$1("".concat(classPrefix, "-slider"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$3(_classNames, "".concat(classPrefix, "-slider--vertical"), isVertical), _defineProperty$3(_classNames, "".concat(classPrefix, "-slider--with-input"), inputNumberProps), _classNames)),
      onClick: onSliderChange
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__rail"))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      style: (_style = {}, _defineProperty$3(_style, startDirection, numberToPercent(start)), _defineProperty$3(_style, sizeKey, numberToPercent(width)), _style),
      className: classNames$1("".concat(classPrefix, "-slider__track"))
    }), range ? createHandleButton(LEFT_NODE, _defineProperty$3({}, startDirection, numberToPercent(start))) : null, createHandleButton(RIGHT_NODE, _defineProperty$3({}, startDirection, numberToPercent(end))), /* @__PURE__ */React__default["default"].createElement("div", null, renderDots.map(function (_ref) {
      var position = _ref.position,
          value2 = _ref.value;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: value2,
        style: _defineProperty$3({}, stepDirection, numberToPercent(position)),
        className: classNames$1("".concat(classPrefix, "-slider__stop"))
      });
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__mark"))
    }, renderDots.map(function (_ref2) {
      var position = _ref2.position,
          value2 = _ref2.value,
          label2 = _ref2.label;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: value2,
        onClick: function onClick(event) {
          return handleClickMarks(event, value2);
        },
        style: _defineProperty$3({}, stepDirection, numberToPercent(position)),
        className: classNames$1("".concat(classPrefix, "-slider__mark-text"))
      }, label2);
    })))), inputNumberProps ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__input-container"), {
        "is-vertical": isVertical
      })
    }, range && createInput(LEFT_NODE), range && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-slider__center-line")
    }), createInput(RIGHT_NODE)) : null);
  });
  Slider$1.displayName = "Slider";
  Slider$1.defaultProps = sliderDefaultProps;

  var Slider = Slider$1;

  function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$p(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var CascaderPanel$1 = function CascaderPanel(props) {
    var _useCascaderContext = useCascaderContext(props),
        cascaderContext = _useCascaderContext.cascaderContext;

    return /* @__PURE__ */React__default["default"].createElement(Panel$1, _objectSpread$p({
      className: classNames$1(props.className),
      style: props.style,
      cascaderContext: cascaderContext
    }, pick_1(props, ["trigger", "onChange", "empty"])));
  };

  CascaderPanel$1.displayName = "CascaderPanel";
  CascaderPanel$1.defaultProps = cascaderDefaultProps;

  var Cascader = Cascader$1;
  var CascaderPanel = CascaderPanel$1;

  function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$o(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var SinglePanel = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix,
        globalDatePickerConfig = _useConfig.datePicker;

    var panelName = "".concat(classPrefix, "-date-picker__panel");
    var value = props.value,
        mode = props.mode,
        presetsPlacement = props.presetsPlacement,
        _props$firstDayOfWeek = props.firstDayOfWeek,
        firstDayOfWeek = _props$firstDayOfWeek === void 0 ? globalDatePickerConfig.firstDayOfWeek : _props$firstDayOfWeek,
        style = props.style,
        className = props.className,
        year = props.year,
        month = props.month,
        onPanelClick = props.onPanelClick;

    var _getDefaultFormat = getDefaultFormat({
      mode: props.mode,
      format: props.format,
      enableTimePicker: props.enableTimePicker
    }),
        format = _getDefaultFormat.format;

    var disableDateOptions = useDisableDate({
      disableDate: props.disableDate,
      mode: props.mode,
      format: format
    });
    var tableData = useTableData(_objectSpread$o({
      year: year,
      month: month,
      mode: mode,
      start: value ? parseToDayjs(value, format).toDate() : void 0,
      firstDayOfWeek: firstDayOfWeek
    }, disableDateOptions));
    var panelContentProps = {
      mode: mode,
      value: value,
      year: year,
      month: month,
      format: format,
      firstDayOfWeek: firstDayOfWeek,
      tableData: tableData,
      popupVisible: props.popupVisible,
      time: props.time,
      timePickerProps: props.timePickerProps,
      enableTimePicker: props.enableTimePicker,
      onMonthChange: props.onMonthChange,
      onYearChange: props.onYearChange,
      onJumperClick: props.onJumperClick,
      onCellClick: props.onCellClick,
      onCellMouseEnter: props.onCellMouseEnter,
      onCellMouseLeave: props.onCellMouseLeave,
      onTimePickerChange: props.onTimePickerChange
    };
    var extraProps = {
      presets: props.presets,
      enableTimePicker: props.enableTimePicker,
      presetsPlacement: props.presetsPlacement,
      onPresetClick: props.onPresetClick,
      onConfirmClick: props.onConfirmClick,
      selectedValue: props.value
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1(panelName, className, _defineProperty$3({}, "".concat(panelName, "--direction-row"), ["left", "right"].includes(presetsPlacement))),
      onClick: function onClick(e) {
        return onPanelClick === null || onPanelClick === void 0 ? void 0 : onPanelClick({
          e: e
        });
      }
    }, ["top", "left"].includes(presetsPlacement) ? /* @__PURE__ */React__default["default"].createElement(ExtraContent, _objectSpread$o({}, extraProps)) : null, /* @__PURE__ */React__default["default"].createElement(PanelContent, _objectSpread$o({}, panelContentProps)), ["bottom", "right"].includes(presetsPlacement) ? /* @__PURE__ */React__default["default"].createElement(ExtraContent, _objectSpread$o({}, extraProps)) : null);
  });
  SinglePanel.displayName = "SinglePanel";
  SinglePanel.defaultProps = {
    mode: "date",
    enableTimePicker: false,
    presetsPlacement: "bottom"
  };

  function useSingleValue(props) {
    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        onChange = _useControlled2[1];

    var _getDefaultFormat = getDefaultFormat({
      mode: props.mode,
      format: props.format,
      valueType: props.valueType,
      enableTimePicker: props.enableTimePicker
    }),
        format = _getDefaultFormat.format,
        valueType = _getDefaultFormat.valueType,
        timeFormat = _getDefaultFormat.timeFormat;

    if (props.enableTimePicker) {
      if (!extractTimeFormat(format)) log.error("DatePicker", "format: ".concat(format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
      if (!extractTimeFormat(valueType) && valueType !== "time-stamp") log.error("DatePicker", "valueType: ".concat(valueType, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
    }

    var _useState = React.useState(formatTime(value, timeFormat)),
        _useState2 = _slicedToArray(_useState, 2),
        time = _useState2[0],
        setTime = _useState2[1];

    var _useState3 = React.useState(dayjs(value).month() || new Date().getMonth()),
        _useState4 = _slicedToArray(_useState3, 2),
        month = _useState4[0],
        setMonth = _useState4[1];

    var _useState5 = React.useState(dayjs(value).year() || new Date().getFullYear()),
        _useState6 = _slicedToArray(_useState5, 2),
        year = _useState6[0],
        setYear = _useState6[1];

    var _useState7 = React.useState(formatDate(value, {
      format: format,
      targetFormat: format
    })),
        _useState8 = _slicedToArray(_useState7, 2),
        cacheValue = _useState8[0],
        setCacheValue = _useState8[1];

    React.useEffect(function () {
      if (!value) {
        setCacheValue("");
        return;
      }

      if (!isValidDate(value, valueType)) return;
      setCacheValue(formatDate(value, {
        format: format,
        targetFormat: format
      }));
      setTime(formatTime(value, timeFormat));
    }, [value]);
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      cacheValue: cacheValue,
      onChange: onChange,
      setYear: setYear,
      setMonth: setMonth,
      setTime: setTime,
      setCacheValue: setCacheValue
    };
  }

  function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$n(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useSingleInput(props) {
    var _props$placeholder, _props$suffixIcon, _props$popupProps$ove, _props$popupProps, _props$popupProps2;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix,
        globalDatePickerConfig = _useConfig.datePicker;

    var _useGlobalIcon = useGlobalIcon({
      CalendarIcon: CalendarIcon
    }),
        CalendarIcon$1 = _useGlobalIcon.CalendarIcon;

    var name = "".concat(classPrefix, "-date-picker");

    var _getDefaultFormat = getDefaultFormat({
      mode: props.mode,
      format: props.format,
      valueType: props.valueType,
      enableTimePicker: props.enableTimePicker
    }),
        format = _getDefaultFormat.format,
        valueType = _getDefaultFormat.valueType,
        timeFormat = _getDefaultFormat.timeFormat;

    var inputRef = React.useRef();

    var _useSingleValue = useSingleValue(props),
        value = _useSingleValue.value,
        onChange = _useSingleValue.onChange,
        time = _useSingleValue.time,
        setTime = _useSingleValue.setTime,
        month = _useSingleValue.month,
        setMonth = _useSingleValue.setMonth,
        year = _useSingleValue.year,
        setYear = _useSingleValue.setYear,
        cacheValue = _useSingleValue.cacheValue,
        setCacheValue = _useSingleValue.setCacheValue;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        popupVisible = _useState2[0],
        setPopupVisible = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isHoverCell = _useState4[0],
        setIsHoverCell = _useState4[1];

    var _useState5 = React.useState(formatDate(value, {
      format: format,
      targetFormat: format
    })),
        _useState6 = _slicedToArray(_useState5, 2),
        inputValue = _useState6[0],
        setInputValue = _useState6[1];

    var inputProps = _objectSpread$n(_objectSpread$n({}, props.inputProps), {}, {
      ref: inputRef,
      clearable: props.clearable,
      prefixIcon: props.prefixIcon,
      readonly: !props.allowInput,
      placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : globalDatePickerConfig.placeholder[props.mode],
      suffixIcon: (_props$suffixIcon = props.suffixIcon) !== null && _props$suffixIcon !== void 0 ? _props$suffixIcon : /* @__PURE__ */React__default["default"].createElement(CalendarIcon$1, null),
      className: classNames$1(_defineProperty$3({}, "".concat(name, "__input--placeholder"), isHoverCell)),
      onClear: function onClear(_ref) {
        var e = _ref.e;
        e.stopPropagation();
        setPopupVisible(false);
        onChange("", {
          dayjsValue: dayjs(""),
          trigger: "clear"
        });
      },
      onBlur: function onBlur(val, _ref2) {
        var _props$onBlur;

        var e = _ref2.e;
        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
          value: val,
          e: e
        });
      },
      onFocus: function onFocus(_, _ref3) {
        var _props$onFocus;

        var e = _ref3.e;
        (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
          value: value,
          e: e
        });
      },
      onChange: function onChange(val) {
        setInputValue(val);
        if (!isValidDate(val, format)) return;
        var newMonth = dayjs(val).month();
        var newYear = dayjs(val).year();
        var newTime = formatTime(val, timeFormat);
        !Number.isNaN(newYear) && setYear(newYear);
        !Number.isNaN(newMonth) && setMonth(newMonth);
        !Number.isNaN(newTime) && setTime(newTime);
      },
      onEnter: function onEnter(val) {
        if (!isValidDate(val, format) && !isValidDate(value, format)) return;
        setPopupVisible(false);

        if (isValidDate(val, format)) {
          onChange(formatDate(val, {
            format: format,
            targetFormat: valueType
          }), {
            dayjsValue: dayjs(val),
            trigger: "enter"
          });
        } else if (isValidDate(value, format)) {
          setInputValue(formatDate(value, {
            format: format,
            targetFormat: format
          }));
        } else {
          setInputValue("");
        }
      }
    });

    var popupProps = _objectSpread$n(_objectSpread$n({
      expandAnimation: true
    }, props.popupProps), {}, {
      overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
        width: "auto"
      },
      overlayClassName: classNames$1((_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(name, "__panel-container")),
      onVisibleChange: function onVisibleChange(visible, context) {
        if (context.trigger === "trigger-element-click") {
          return setPopupVisible(true);
        }

        if (!visible) {
          setIsHoverCell(false);
        }

        setPopupVisible(visible);
      }
    });

    React.useEffect(function () {
      if (!value) {
        setInputValue("");
        return;
      }

      if (!isValidDate(value, valueType)) return;
      setInputValue(formatDate(value, {
        format: format,
        targetFormat: format
      }));
    }, [value]);
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      inputValue: inputValue,
      popupVisible: popupVisible,
      inputProps: inputProps,
      popupProps: popupProps,
      inputRef: inputRef,
      cacheValue: cacheValue,
      onChange: onChange,
      setYear: setYear,
      setMonth: setMonth,
      setTime: setTime,
      setIsHoverCell: setIsHoverCell,
      setInputValue: setInputValue,
      setPopupVisible: setPopupVisible,
      setCacheValue: setCacheValue
    };
  }

  function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$m(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DatePicker$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var className = props.className,
        style = props.style,
        disabled = props.disabled,
        mode = props.mode,
        enableTimePicker = props.enableTimePicker,
        disableDate = props.disableDate,
        firstDayOfWeek = props.firstDayOfWeek,
        presets = props.presets,
        timePickerProps = props.timePickerProps,
        presetsPlacement = props.presetsPlacement,
        onPick = props.onPick;

    var _useSingle = useSingleInput(props),
        inputValue = _useSingle.inputValue,
        popupVisible = _useSingle.popupVisible,
        inputProps = _useSingle.inputProps,
        popupProps = _useSingle.popupProps,
        value = _useSingle.value,
        year = _useSingle.year,
        month = _useSingle.month,
        time = _useSingle.time,
        inputRef = _useSingle.inputRef,
        onChange = _useSingle.onChange,
        setIsHoverCell = _useSingle.setIsHoverCell,
        setInputValue = _useSingle.setInputValue,
        setPopupVisible = _useSingle.setPopupVisible,
        setTime = _useSingle.setTime,
        setYear = _useSingle.setYear,
        setMonth = _useSingle.setMonth,
        cacheValue = _useSingle.cacheValue,
        setCacheValue = _useSingle.setCacheValue;

    var _getDefaultFormat = getDefaultFormat({
      mode: props.mode,
      format: props.format,
      valueType: props.valueType,
      enableTimePicker: props.enableTimePicker
    }),
        format = _getDefaultFormat.format,
        valueType = _getDefaultFormat.valueType,
        timeFormat = _getDefaultFormat.timeFormat;

    React.useEffect(function () {
      if (popupVisible) {
        setYear(parseToDayjs(value, format).year());
        setMonth(parseToDayjs(value, format).month());
        setTime(formatTime(value, timeFormat));
        value && setCacheValue(formatDate(value, {
          format: format,
          targetFormat: format
        }));
      }
    }, [popupVisible]);

    function onCellMouseEnter(date) {
      setIsHoverCell(true);
      setInputValue(formatDate(date, {
        format: format,
        targetFormat: format
      }));
    }

    function onCellMouseLeave() {
      setIsHoverCell(false);
      setInputValue(formatDate(cacheValue, {
        format: format,
        targetFormat: format
      }));
    }

    function onCellClick(date) {
      onPick === null || onPick === void 0 ? void 0 : onPick(date);
      setIsHoverCell(false);

      if (mode === "date") {
        setYear(date.getFullYear());
        setMonth(date.getMonth());
      }

      if (enableTimePicker) {
        setCacheValue(formatDate(date, {
          format: format,
          targetFormat: format
        }));
      } else {
        onChange(formatDate(date, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: dayjs(date, format),
          trigger: "pick"
        });
        setPopupVisible(false);
      }
    }

    function onJumperClick(_ref) {
      var trigger = _ref.trigger;
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[mode] || 0;
      var current = new Date(year, month);
      var next = null;

      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }

      var nextYear = next.getFullYear();
      var nextMonth = next.getMonth();
      setYear(nextYear);
      setMonth(nextMonth);
    }

    function onTimePickerChange(val) {
      setTime(val);

      var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;

      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var currentDate = !dayjs(inputValue, format).isValid() ? dayjs() : dayjs(inputValue, format);
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      setInputValue(formatDate(nextDate, {
        format: format,
        targetFormat: format
      }));
      onPick === null || onPick === void 0 ? void 0 : onPick(nextDate);
    }

    function onConfirmClick() {
      var nextValue = formatDate(inputValue, {
        format: format,
        targetFormat: format
      });

      if (nextValue) {
        onChange(formatDate(inputValue, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: dayjs(inputValue),
          trigger: "confirm"
        });
      } else {
        setInputValue(formatDate(value, {
          format: format,
          targetFormat: format
        }));
      }

      setPopupVisible(false);
    }

    function onPresetClick(preset) {
      var presetValue = preset;

      if (typeof preset === "function") {
        presetValue = preset();
      }

      onChange(formatDate(presetValue, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: dayjs(presetValue),
        trigger: "preset"
      });
      setPopupVisible(false);
    }

    function onYearChange(year2) {
      setYear(year2);
    }

    function onMonthChange(month2) {
      setMonth(month2);
    }

    var panelProps = {
      value: cacheValue,
      year: year,
      month: month,
      mode: mode,
      format: format,
      presets: presets,
      time: time,
      disableDate: disableDate,
      firstDayOfWeek: firstDayOfWeek,
      timePickerProps: timePickerProps,
      enableTimePicker: enableTimePicker,
      presetsPlacement: presetsPlacement,
      popupVisible: popupVisible,
      onCellClick: onCellClick,
      onCellMouseEnter: onCellMouseEnter,
      onCellMouseLeave: onCellMouseLeave,
      onJumperClick: onJumperClick,
      onConfirmClick: onConfirmClick,
      onPresetClick: onPresetClick,
      onYearChange: onYearChange,
      onMonthChange: onMonthChange,
      onTimePickerChange: onTimePickerChange,
      onPanelClick: function onPanelClick() {
        var _inputRef$current, _inputRef$current$foc;

        return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : (_inputRef$current$foc = _inputRef$current.focus) === null || _inputRef$current$foc === void 0 ? void 0 : _inputRef$current$foc.call(_inputRef$current);
      }
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-date-picker"), className),
      style: style,
      ref: ref
    }, /* @__PURE__ */React__default["default"].createElement(SelectInput, {
      disabled: disabled,
      value: inputValue,
      status: props.status,
      tips: props.tips,
      popupProps: popupProps,
      inputProps: inputProps,
      popupVisible: popupVisible,
      panel: /* @__PURE__ */React__default["default"].createElement(SinglePanel, _objectSpread$m({}, panelProps))
    }));
  });
  DatePicker$1.displayName = "DatePicker";
  DatePicker$1.defaultProps = datePickerDefaultProps;

  function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$l(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DatePickerPanel$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useSingleValue = useSingleValue(props),
        value = _useSingleValue.value,
        onChange = _useSingleValue.onChange,
        time = _useSingleValue.time,
        setTime = _useSingleValue.setTime,
        month = _useSingleValue.month,
        setMonth = _useSingleValue.setMonth,
        year = _useSingleValue.year,
        setYear = _useSingleValue.setYear,
        cacheValue = _useSingleValue.cacheValue,
        setCacheValue = _useSingleValue.setCacheValue;

    var className = props.className,
        style = props.style,
        mode = props.mode,
        enableTimePicker = props.enableTimePicker,
        disableDate = props.disableDate,
        firstDayOfWeek = props.firstDayOfWeek,
        presets = props.presets,
        timePickerProps = props.timePickerProps,
        presetsPlacement = props.presetsPlacement,
        onPanelClick = props.onPanelClick;

    var _getDefaultFormat = getDefaultFormat({
      mode: props.mode,
      format: props.format,
      valueType: props.valueType,
      enableTimePicker: props.enableTimePicker
    }),
        format = _getDefaultFormat.format,
        valueType = _getDefaultFormat.valueType;

    function onCellClick(date, _ref) {
      var _props$onCellClick;

      var e = _ref.e;
      (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, {
        date: date,
        e: e
      });

      if (mode === "date") {
        setYear(date.getFullYear());
        setMonth(date.getMonth());
      }

      if (enableTimePicker) {
        setCacheValue(formatDate(date, {
          format: format,
          targetFormat: format
        }));
      } else {
        onChange(formatDate(date, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: dayjs(date),
          trigger: "pick"
        });
      }
    }

    function onJumperClick(_ref2) {
      var trigger = _ref2.trigger;
      var triggerMap = {
        prev: "arrow-previous",
        next: "arrow-next"
      };
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[mode] || 0;
      var current = new Date(year, month);
      var next = null;

      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }

      var nextYear = next.getFullYear();
      var nextMonth = next.getMonth();

      if (year !== nextYear) {
        var _props$onYearChange;

        (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, {
          year: nextYear,
          date: dayjs(value).toDate(),
          trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
        });
      }

      if (month !== nextMonth) {
        var _props$onMonthChange;

        (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, {
          month: nextMonth,
          date: dayjs(value).toDate(),
          trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
        });
      }

      setYear(nextYear);
      setMonth(nextMonth);
    }

    function onTimePickerChange(val) {
      var _props$onTimeChange;

      setTime(val);

      var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;

      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var currentDate = !dayjs(cacheValue, format).isValid() ? dayjs() : dayjs(cacheValue, format);
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      setCacheValue(formatDate(nextDate, {
        format: format,
        targetFormat: format
      }));
      (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 ? void 0 : _props$onTimeChange.call(props, {
        time: val,
        date: dayjs(value).toDate(),
        trigger: "time-hour"
      });
    }

    function onConfirmClick(_ref3) {
      var _props$onConfirm;

      var e = _ref3.e;
      onChange(formatDate(cacheValue, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: dayjs(cacheValue),
        trigger: "confirm"
      });
      (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
        date: dayjs(value).toDate(),
        e: e
      });
    }

    function onPresetClick(presetValue, _ref4) {
      var _props$onPresetClick;

      var e = _ref4.e,
          preset = _ref4.preset;
      var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
      onChange(formatDate(presetVal, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: dayjs(presetVal),
        trigger: "preset"
      });
      (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 ? void 0 : _props$onPresetClick.call(props, {
        e: e,
        preset: preset
      });
    }

    function onYearChange(year2) {
      var _props$onYearChange2;

      setYear(year2);
      (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 ? void 0 : _props$onYearChange2.call(props, {
        year: year2,
        date: dayjs(value).toDate(),
        trigger: "year-select"
      });
    }

    function onMonthChange(month2) {
      var _props$onMonthChange2;

      setMonth(month2);
      (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 ? void 0 : _props$onMonthChange2.call(props, {
        month: month2,
        date: dayjs(value).toDate(),
        trigger: "month-select"
      });
    }

    var panelProps = {
      value: cacheValue,
      year: year,
      month: month,
      mode: mode,
      format: format,
      presets: presets,
      time: time,
      disableDate: disableDate,
      firstDayOfWeek: firstDayOfWeek,
      timePickerProps: timePickerProps,
      enableTimePicker: enableTimePicker,
      presetsPlacement: presetsPlacement,
      onCellClick: onCellClick,
      onJumperClick: onJumperClick,
      onConfirmClick: onConfirmClick,
      onPresetClick: onPresetClick,
      onYearChange: onYearChange,
      onMonthChange: onMonthChange,
      onTimePickerChange: onTimePickerChange,
      onPanelClick: onPanelClick
    };
    return /* @__PURE__ */React__default["default"].createElement(SinglePanel, _objectSpread$l({
      ref: ref,
      className: className,
      style: style
    }, panelProps));
  });
  DatePickerPanel$1.displayName = "DatePickerPanel";
  DatePickerPanel$1.defaultProps = {
    mode: "date",
    defaultValue: ""
  };

  function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$k(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DateRangePickerPanel$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var className = props.className,
        style = props.style,
        mode = props.mode,
        enableTimePicker = props.enableTimePicker,
        disableDate = props.disableDate,
        firstDayOfWeek = props.firstDayOfWeek,
        presets = props.presets,
        timePickerProps = props.timePickerProps,
        presetsPlacement = props.presetsPlacement,
        panelPreselection = props.panelPreselection,
        onPanelClick = props.onPanelClick;

    var _useRangeValue = useRange$1(props),
        value = _useRangeValue.value,
        year = _useRangeValue.year,
        month = _useRangeValue.month,
        time = _useRangeValue.time,
        onChange = _useRangeValue.onChange,
        setTime = _useRangeValue.setTime,
        setYear = _useRangeValue.setYear,
        setMonth = _useRangeValue.setMonth,
        isFirstValueSelected = _useRangeValue.isFirstValueSelected,
        setIsFirstValueSelected = _useRangeValue.setIsFirstValueSelected,
        cacheValue = _useRangeValue.cacheValue,
        setCacheValue = _useRangeValue.setCacheValue;

    var _getDefaultFormat = getDefaultFormat({
      mode: mode,
      enableTimePicker: enableTimePicker,
      format: props.format,
      valueType: props.valueType
    }),
        format = _getDefaultFormat.format,
        valueType = _getDefaultFormat.valueType;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isSelected = _useState2[0],
        setIsSelected = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isHoverCell = _useState4[0],
        setIsHoverCell = _useState4[1];

    var _useState5 = React.useState([]),
        _useState6 = _slicedToArray(_useState5, 2),
        hoverValue = _useState6[0],
        setHoverValue = _useState6[1];

    var activeIndex = React.useMemo(function () {
      return isFirstValueSelected ? 1 : 0;
    }, [isFirstValueSelected]);

    function onCellMouseEnter(date) {
      setIsHoverCell(true);

      var nextValue = _toConsumableArray(hoverValue);

      nextValue[activeIndex] = formatDate(date, {
        format: format,
        targetFormat: format
      });
      setHoverValue(nextValue);
    }

    function onCellMouseLeave() {
      setIsHoverCell(false);
      setHoverValue(cacheValue);
    }

    function onCellClick(date, _ref) {
      var _props$onCellClick;

      var e = _ref.e,
          partial = _ref.partial;
      setIsSelected(true);

      var nextValue = _toConsumableArray(cacheValue);

      nextValue[activeIndex] = formatDate(date, {
        format: format,
        targetFormat: format
      });
      setCacheValue(nextValue);
      (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, {
        date: nextValue.map(function (v) {
          return dayjs(v).toDate();
        }),
        e: e,
        partial: activeIndex ? "end" : "start"
      });

      if (mode === "date") {
        var partialIndex = partial === "start" ? 0 : 1;
        var isAdditional = dayjs(date).month() !== month[partialIndex];

        if (isAdditional) {
          if (activeIndex === 0) setMonth([dayjs(date).month(), Math.min(dayjs(date).month() + 1, 11)]);
          if (activeIndex === 1) setMonth([Math.max(dayjs(date).month() - 1, 0), dayjs(date).month()]);
        }
      }

      if (enableTimePicker) return;

      if (nextValue.length === 2 && isFirstValueSelected) {
        onChange(formatDate(nextValue, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: nextValue.map(function (v) {
            return dayjs(v);
          }),
          trigger: "pick"
        });
        setIsFirstValueSelected(false);
      } else {
        setIsFirstValueSelected(true);
      }
    }

    function onJumperClick(_ref2) {
      var trigger = _ref2.trigger,
          partial = _ref2.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      var triggerMap = {
        "-1": "arrow-previous",
        1: "arrow-next"
      };
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[mode] || 0;
      var current = new Date(year[partialIndex], month[partialIndex]);
      var next = null;

      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }

      var nextYear = _toConsumableArray(year);

      nextYear[partialIndex] = next.getFullYear();

      var nextMonth = _toConsumableArray(month);

      nextMonth[partialIndex] = next.getMonth();

      if (partialIndex === 0) {
        nextYear[1] = Math.max(nextYear[0], nextYear[1]);

        if (nextYear[0] === nextYear[1]) {
          nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
        }
      }

      if (partialIndex === 1) {
        nextYear[0] = Math.min(nextYear[0], nextYear[1]);

        if (nextYear[0] === nextYear[1]) {
          nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
        }
      }

      if (year.some(function (y) {
        return !nextYear.includes(y);
      })) {
        var _props$onYearChange;

        (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, {
          partial: partial,
          year: nextYear[partialIndex],
          date: value.map(function (v) {
            return dayjs(v).toDate();
          }),
          trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
        });
      }

      if (month.some(function (m) {
        return !nextMonth.includes(m);
      })) {
        var _props$onMonthChange;

        (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, {
          partial: partial,
          month: nextMonth[partialIndex],
          date: value.map(function (v) {
            return dayjs(v).toDate();
          }),
          trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
        });
      }

      setYear(nextYear);
      setMonth(nextMonth);
    }

    function onTimePickerChange(val) {
      var _props$onTimeChange;

      var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;

      var nextInputValue = _toConsumableArray(cacheValue);

      var changedInputValue = cacheValue[activeIndex];
      var currentDate = !dayjs(changedInputValue, format).isValid() ? dayjs().year(year[activeIndex]).month(month[activeIndex]) : dayjs(changedInputValue, format);
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      nextInputValue[activeIndex] = nextDate;

      var nextTime = _toConsumableArray(time);

      nextTime[activeIndex] = val;
      setTime(nextTime);
      setIsSelected(true);
      setCacheValue(formatDate(nextInputValue, {
        format: format,
        targetFormat: format
      }));
      (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 ? void 0 : _props$onTimeChange.call(props, {
        time: val,
        partial: activeIndex ? "end" : "start",
        date: value.map(function (v) {
          return dayjs(v).toDate();
        }),
        trigger: "time-hour"
      });
    }

    function onConfirmClick(_ref3) {
      var _props$onConfirm;

      var e = _ref3.e;

      var nextValue = _toConsumableArray(cacheValue);

      if (nextValue.length === 2 && isFirstValueSelected) {
        onChange(formatDate(nextValue, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: nextValue.map(function (v) {
            return dayjs(v);
          }),
          trigger: "confirm"
        });
        setYear(nextValue.map(function (v) {
          return dayjs(v, format).year();
        }));
        setMonth(nextValue.map(function (v) {
          return dayjs(v, format).month();
        }));
        setIsFirstValueSelected(false);
      } else {
        setIsFirstValueSelected(true);
      }

      (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
        date: value.map(function (v) {
          return dayjs(v).toDate();
        }),
        e: e
      });
    }

    function onPresetClick(presetValue, _ref4) {
      var _props$onPresetClick;

      var e = _ref4.e,
          preset = _ref4.preset;
      var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;

      if (!Array.isArray(presetVal)) {
        log.error("DateRangePickerPanel", "preset: ".concat(presetValue, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
      } else {
        onChange(formatDate(presetVal, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: presetVal.map(function (p) {
            return dayjs(p);
          }),
          trigger: "preset"
        });
      }

      (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 ? void 0 : _props$onPresetClick.call(props, {
        e: e,
        preset: preset
      });
    }

    function onYearChange(nextVal, _ref5) {
      var partial = _ref5.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (enableTimePicker) partialIndex = activeIndex;

      var nextYear = _toConsumableArray(year);

      nextYear[partialIndex] = nextVal;
      if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
      if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
      setYear(nextYear);
      props.onYearChange({
        partial: partial,
        year: nextYear[partialIndex],
        date: value.map(function (v) {
          return dayjs(v).toDate();
        }),
        trigger: "year-select"
      });
    }

    function onMonthChange(nextVal, _ref6) {
      var partial = _ref6.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (enableTimePicker) partialIndex = activeIndex;

      var nextMonth = _toConsumableArray(month);

      nextMonth[partialIndex] = nextVal;

      if (year[0] === year[1]) {
        if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
        if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
      }

      setMonth(nextMonth);
      props.onMonthChange({
        partial: partial,
        month: nextMonth[partialIndex],
        date: value.map(function (v) {
          return dayjs(v).toDate();
        }),
        trigger: "month-select"
      });
    }

    var panelProps = {
      hoverValue: isHoverCell ? hoverValue : [],
      value: isSelected ? cacheValue : value,
      year: year,
      month: month,
      mode: mode,
      format: format,
      presets: presets,
      time: time,
      disableDate: disableDate,
      firstDayOfWeek: firstDayOfWeek,
      timePickerProps: timePickerProps,
      enableTimePicker: enableTimePicker,
      presetsPlacement: presetsPlacement,
      activeIndex: activeIndex,
      panelPreselection: panelPreselection,
      onCellMouseEnter: onCellMouseEnter,
      onCellMouseLeave: onCellMouseLeave,
      onCellClick: onCellClick,
      onJumperClick: onJumperClick,
      onConfirmClick: onConfirmClick,
      onPresetClick: onPresetClick,
      onYearChange: onYearChange,
      onMonthChange: onMonthChange,
      onTimePickerChange: onTimePickerChange,
      onPanelClick: onPanelClick
    };
    return /* @__PURE__ */React__default["default"].createElement(RangePanel, _objectSpread$k({
      ref: ref,
      className: className,
      style: style
    }, panelProps));
  });
  DateRangePickerPanel$1.displayName = "DateRangePickerPanel";
  DateRangePickerPanel$1.defaultProps = {
    mode: "date",
    defaultValue: [],
    panelPreselection: true
  };

  var DatePicker = DatePicker$1;
  var DateRangePicker = DateRangePicker$1;
  var DatePickerPanel = DatePickerPanel$1;
  var DateRangePickerPanel = DateRangePickerPanel$1;

  var Upload = Upload$1;

  var swiperDefaultProps = {
    animation: "slide",
    autoplay: true,
    defaultCurrent: 0,
    direction: "horizontal",
    duration: 300,
    interval: 5e3,
    loop: true,
    stopOnHover: true,
    theme: "light",
    trigger: "hover",
    type: "default"
  };

  var CARD_SCALE = 210 / 332;
  var itemWidth = 0.415;

  var disposeIndex = function disposeIndex(index, currentIndex, childrenLength) {
    if (currentIndex === 0 && index === childrenLength - 1) {
      return -1;
    }

    if (currentIndex === childrenLength - 1 && index === 0) {
      return childrenLength;
    }

    if (index < currentIndex - 1 && currentIndex - index >= childrenLength / 2) {
      return childrenLength + 1;
    }

    if (index > currentIndex + 1 && index - currentIndex >= childrenLength / 2) {
      return -2;
    }

    return index;
  };

  var calculateTranslate = function calculateTranslate(index, currentIndex, parentWidth, inStage) {
    if (inStage) {
      return parentWidth * ((index - currentIndex) * (1 - itemWidth * CARD_SCALE) - itemWidth + 1) / 2;
    }

    if (index < currentIndex) {
      return -itemWidth * (1 + CARD_SCALE) * parentWidth / 2;
    }

    return (2 + itemWidth * (CARD_SCALE - 1)) * parentWidth / 2;
  };

  var getZindex = function getZindex(isActivity, inStage) {
    if (isActivity) {
      return 2;
    }

    if (inStage) {
      return 1;
    }

    return 0;
  };

  var SwiperItem = function SwiperItem(props) {
    var _classnames;

    var children = props.children,
        currentIndex = props.currentIndex,
        index = props.index,
        animation = props.animation,
        _props$duration = props.duration,
        duration = _props$duration === void 0 ? 300 : _props$duration,
        needAnimation = props.needAnimation,
        _props$type = props.type,
        type = _props$type === void 0 ? "default" : _props$type,
        childrenLength = props.childrenLength,
        getWrapAttribute = props.getWrapAttribute;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var getSwiperItemStyle = function getSwiperItemStyle() {
      if (animation === "fade") {
        return {
          opacity: currentIndex === index ? 1 : 0,
          transition: needAnimation ? "opacity ".concat(duration / 1e3, "s") : ""
        };
      }

      if (type === "card") {
        var wrapWidth = getWrapAttribute("offsetWidth");
        var translateIndex = index !== currentIndex && childrenLength > 2 ? disposeIndex(index, currentIndex, childrenLength) : index;
        var inStage = Math.round(Math.abs(translateIndex - currentIndex)) <= 1;
        var translate = calculateTranslate(translateIndex, currentIndex, wrapWidth, inStage).toFixed(2);
        var isActivity = translateIndex === currentIndex;
        var zIndex = getZindex(isActivity, inStage);
        return {
          msTransform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
          WebkitTransform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
          transform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
          transition: "transform ".concat(duration / 1e3, "s ease"),
          zIndex: zIndex
        };
      }

      return {};
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-swiper__container__item"), (_classnames = {}, _defineProperty$3(_classnames, "".concat(classPrefix, "-swiper__card"), type === "card"), _defineProperty$3(_classnames, "".concat(classPrefix, "-is-active"), type === "card" && index === currentIndex), _defineProperty$3(_classnames, "".concat(classPrefix, "-swiper__fade"), animation === "fade"), _classnames)),
      style: getSwiperItemStyle()
    }, children);
  };

  SwiperItem.displayName = "SwiperItem";

  function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$j(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var defaultNavigation = {
    placement: "inside",
    showSlideBtn: "always",
    size: "medium",
    type: "bars"
  };

  var Swiper$1 = function Swiper(props) {
    var _classnames4, _classnames5;

    var animation = props.animation,
        autoplay = props.autoplay,
        current = props.current,
        defaultCurrent = props.defaultCurrent,
        direction = props.direction,
        duration = props.duration,
        interval = props.interval,
        trigger = props.trigger,
        height = props.height,
        loop = props.loop,
        stopOnHover = props.stopOnHover,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop$1 : _props$onChange,
        className = props.className,
        children = props.children,
        navigation = props.navigation,
        type = props.type;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      ChevronLeftIcon: ChevronLeftIcon,
      ChevronRightIcon: ChevronRightIcon
    }),
        ChevronLeftIcon$1 = _useGlobalIcon.ChevronLeftIcon,
        ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;

    var navigationConfig = defaultNavigation;
    var navigationNode = null;

    if ( /*#__PURE__*/React.isValidElement(navigation)) {
      navigationNode = navigation;
    } else {
      navigationConfig = _objectSpread$j(_objectSpread$j({}, defaultNavigation), navigation);
    }

    var _useState = React.useState(defaultCurrent),
        _useState2 = _slicedToArray(_useState, 2),
        currentIndex = _useState2[0],
        setCurrentIndex = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        needAnimation = _useState4[0],
        setNeedAnimation = _useState4[1];

    var _useState5 = React.useState(navigationConfig.showSlideBtn === "always"),
        _useState6 = _slicedToArray(_useState5, 2),
        arrowShow = _useState6[0],
        setArrowShow = _useState6[1];

    var swiperTimer = React.useRef(null);
    var swiperAnimationTimer = React.useRef(null);
    var isHovering = React.useRef(false);
    var swiperWrap = React.useRef(null);

    var getWrapAttribute = function getWrapAttribute(attr) {
      var _swiperWrap$current, _swiperWrap$current$p;

      return (_swiperWrap$current = swiperWrap.current) === null || _swiperWrap$current === void 0 ? void 0 : (_swiperWrap$current$p = _swiperWrap$current.parentNode) === null || _swiperWrap$current$p === void 0 ? void 0 : _swiperWrap$current$p[attr];
    };

    var childrenList = React.useMemo(function () {
      return React__default["default"].Children.toArray(children).filter(function (child) {
        return child.type.displayName === SwiperItem.displayName;
      });
    }, [children]);
    var childrenLength = childrenList.length;
    var swiperItemList = childrenList.map(function (child, index) {
      return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$j(_objectSpread$j({
        key: index,
        index: index,
        currentIndex: currentIndex,
        needAnimation: needAnimation,
        childrenLength: childrenLength,
        getWrapAttribute: getWrapAttribute
      }, props), child.props));
    });

    if (childrenLength > 0 && type === "default") {
      var firstEle = swiperItemList[0];
      swiperItemList.push( /*#__PURE__*/React__default["default"].cloneElement(firstEle, _objectSpread$j(_objectSpread$j({}, firstEle.props), {}, {
        key: childrenLength,
        index: childrenLength
      })));
    }

    var swiperItemLength = swiperItemList.length;
    var swiperTo = React.useCallback(function (index, context) {
      onChange(index % childrenLength, context);
      setNeedAnimation(true);
      setCurrentIndex(index);
    }, [childrenLength, onChange]);
    var setTimer = React.useCallback(function () {
      if (autoplay && interval > 0) {
        swiperTimer.current = setTimeout(function () {
          swiperTo(currentIndex + 1, {
            source: "autoplay"
          });
        }, currentIndex === 0 ? interval - (duration + 50) : interval);
      }
    }, [autoplay, currentIndex, duration, interval, swiperTo]);
    var clearTimer = React.useCallback(function () {
      if (swiperTimer.current) {
        clearTimeout(swiperTimer.current);
        swiperTimer.current = null;
      }
    }, []);
    var isEnd = React.useCallback(function () {
      if (type === "card") {
        return !loop && currentIndex + 1 >= swiperItemLength;
      }

      return !loop && currentIndex + 2 >= swiperItemLength;
    }, [loop, currentIndex, swiperItemLength, type]);
    React.useEffect(function () {
      if (current !== void 0) {
        swiperTo(current % childrenLength, {
          source: "autoplay"
        });
      }
    }, [current, childrenLength, swiperTo]);
    React.useEffect(function () {
      if (currentIndex + 1 > swiperItemLength && type === "card") {
        return setCurrentIndex(0);
      }

      if (swiperAnimationTimer.current) {
        clearTimeout(swiperAnimationTimer.current);
        swiperAnimationTimer.current = null;
      }

      swiperAnimationTimer.current = setTimeout(function () {
        setNeedAnimation(false);

        if (isEnd()) {
          clearTimer();
        }

        if (currentIndex + 1 >= swiperItemLength && type !== "card") {
          setCurrentIndex(0);
        }
      }, duration + 50);
    }, [currentIndex, swiperItemLength, duration, type, clearTimer, isEnd]);
    React.useEffect(function () {
      if (!isHovering.current || !stopOnHover) {
        clearTimer();
        setTimer();
      }
    }, [setTimer, clearTimer, stopOnHover]);

    var onMouseEnter = function onMouseEnter() {
      isHovering.current = true;

      if (stopOnHover) {
        clearTimer();
      }

      if (navigationConfig.showSlideBtn === "hover") {
        setArrowShow(true);
      }
    };

    var onMouseLeave = function onMouseLeave() {
      isHovering.current = false;

      if (!isEnd()) {
        setTimer();
      }

      if (navigationConfig.showSlideBtn === "hover") {
        setArrowShow(false);
      }
    };

    var navMouseAction = function navMouseAction(action, index) {
      if (action === "enter"
      /* Enter */
      && trigger === "hover") {
        swiperTo(index, {
          source: "hover"
        });
      }

      if (action === "click"
      /* Click */
      && trigger === "click") {
        swiperTo(index, {
          source: "click"
        });
      }
    };

    var arrowClick = function arrowClick(direction2) {
      if (needAnimation) {
        return false;
      }

      if (direction2 === "right"
      /* Right */
      ) {
        if (type === "card") {
          return swiperTo(currentIndex + 1 >= swiperItemLength ? 0 : currentIndex + 1, {
            source: "click"
          });
        }

        return swiperTo(currentIndex + 1, {
          source: "click"
        });
      }

      if (direction2 === "left"
      /* Left */
      ) {
        if (currentIndex - 1 < 0) {
          return swiperTo(childrenLength - 1, {
            source: "click"
          });
        }

        return swiperTo(currentIndex - 1, {
          source: "click"
        });
      }
    };

    var createArrow = function createArrow(type2) {
      if (!arrowShow) {
        return "";
      }

      if (navigationConfig.type === "fraction" && type2 === "default"
      /* Default */
      ) {
        return "";
      }

      var fractionIndex = currentIndex + 1 > childrenLength ? 1 : currentIndex + 1;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(classPrefix, "-swiper__arrow"), _defineProperty$3({}, "".concat(classPrefix, "-swiper__arrow--default"), type2 === "default"))
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-swiper__arrow-left"),
        onClick: function onClick() {
          return arrowClick("left"
          /* Left */
          );
        }
      }, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon$1, null)), type2 === "fraction"
      /* Fraction */
      ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-swiper__navigation-text-fraction")
      }, fractionIndex, "/", childrenLength) : "", /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-swiper__arrow-right"),
        onClick: function onClick() {
          return arrowClick("right"
          /* Right */
          );
        }
      }, /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon$1, null)));
    };

    var createNavigation = function createNavigation() {
      if (navigationConfig.type === "fraction") {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: classNames$1("".concat(classPrefix, "-swiper__navigation"), "".concat(classPrefix, "-swiper__navigation--fraction"))
        }, createArrow("fraction"
        /* Fraction */
        ));
      }

      return navigationNode ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, navigationNode) : /* @__PURE__ */React__default["default"].createElement("ul", {
        className: classNames$1("".concat(classPrefix, "-swiper__navigation"), _defineProperty$3({}, "".concat(classPrefix, "-swiper__navigation-bars"), navigationConfig.type === "bars"))
      }, childrenList.map(function (_, i) {
        return /* @__PURE__ */React__default["default"].createElement("li", {
          key: i,
          className: classNames$1("".concat(classPrefix, "-swiper__navigation-item"), _defineProperty$3({}, "".concat(classPrefix, "-is-active"), i === currentIndex % childrenLength)),
          onClick: function onClick() {
            return navMouseAction("click"
            /* Click */
            , i);
          },
          onMouseEnter: function onMouseEnter() {
            return navMouseAction("enter"
            /* Enter */
            , i);
          },
          onMouseLeave: function onMouseLeave() {
            return navMouseAction("leave"
            /* Leave */
            , i);
          }
        }, /* @__PURE__ */React__default["default"].createElement("span", null));
      }));
    };

    var getWrapperStyle = function getWrapperStyle() {
      var offsetHeight = height ? "".concat(height, "px") : "".concat(getWrapAttribute("offsetHeight"), "px");

      if (type === "card" || animation === "fade") {
        return {
          height: offsetHeight
        };
      }

      if (animation === "slide") {
        if (direction === "vertical") {
          return {
            height: offsetHeight,
            msTransform: "translate3d(0, -".concat(currentIndex * 100, "%, 0px)"),
            WebkitTransform: "translate3d(0, -".concat(currentIndex * 100, "%, 0px)"),
            transform: "translate3d(0, -".concat(currentIndex * 100, "%, 0px)"),
            transition: needAnimation ? "transform ".concat(duration / 1e3, "s ease") : ""
          };
        }

        return {
          msTransform: "translate3d(-".concat(currentIndex * 100, "%, 0px, 0px)"),
          WebkitTransform: "translate3d(-".concat(currentIndex * 100, "%, 0px, 0px)"),
          transform: "translate3d(-".concat(currentIndex * 100, "%, 0px, 0px)"),
          transition: needAnimation ? "transform ".concat(duration / 1e3, "s ease") : ""
        };
      }
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-swiper"), className),
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      ref: swiperWrap
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-swiper__wrap"), (_classnames4 = {}, _defineProperty$3(_classnames4, "".concat(classPrefix, "-swiper--inside"), navigationConfig.placement === "inside"), _defineProperty$3(_classnames4, "".concat(classPrefix, "-swiper--outside"), navigationConfig.placement === "outside"), _defineProperty$3(_classnames4, "".concat(classPrefix, "-swiper--vertical"), direction === "vertical"), _defineProperty$3(_classnames4, "".concat(classPrefix, "-swiper--large"), navigationConfig.size === "large"), _defineProperty$3(_classnames4, "".concat(classPrefix, "-swiper--small"), navigationConfig.size === "small"), _classnames4))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-swiper__content"), (_classnames5 = {}, _defineProperty$3(_classnames5, "".concat(classPrefix, "-swiper-fade"), animation === "fade"), _defineProperty$3(_classnames5, "".concat(classPrefix, "-swiper-card"), type === "card"), _classnames5)),
      style: {
        height: ""
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-swiper__container"),
      style: getWrapperStyle()
    }, swiperItemList)), createNavigation(), createArrow("default"
    /* Default */
    )));
  };

  Swiper$1.SwiperItem = SwiperItem;
  Swiper$1.displayName = "Swiper";
  Swiper$1.defaultProps = swiperDefaultProps;

  var Swiper = Swiper$1;

  var commentDefaultProps = {};

  var Comment$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var actions = props.actions,
        author = props.author,
        avatar = props.avatar,
        content = props.content,
        datetime = props.datetime,
        reply = props.reply,
        quote = props.quote,
        className = props.className,
        style = props.style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var avatarElement = avatar ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__avatar")
    }, typeof avatar === "string" ? /* @__PURE__ */React__default["default"].createElement("img", {
      src: avatar,
      alt: "",
      className: "".concat(classPrefix, "-comment__avatar-image")
    }) : avatar) : null;
    var authorDatetimeContent = (author || datetime) && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__author")
    }, author && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-comment__name")
    }, author), datetime && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-comment__time")
    }, datetime));
    var quoteElement = quote ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__quote")
    }, quote) : null;
    var actionsElement = actions && actions.length ? /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-comment__actions")
    }, actions.map(function (action, index) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: "action-".concat(index)
      }, action);
    })) : null;
    var contentElement = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__content")
    }, authorDatetimeContent, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__detail")
    }, content), quoteElement, actionsElement);
    var replyElement = reply ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-comment__reply"))
    }, reply) : null;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1("".concat(classPrefix, "-comment"), className)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__inner")
    }, avatarElement, contentElement), replyElement);
  });
  Comment$1.displayName = "Comment";
  Comment$1.defaultProps = commentDefaultProps;

  var Comment = Comment$1;

  var Transfer = Transfer$1;

  // refs to such extent, but then composing hooks and components could not opt out of unnecessary renders.

  function useResolvedElement(subscriber, refOrElement) {
    var lastReportRef = React.useRef(null);
    var refOrElementRef = React.useRef(null);
    refOrElementRef.current = refOrElement;
    var cbElementRef = React.useRef(null); // Calling re-evaluation after each render without using a dep array,
    // as the ref object's current value could've changed since the last render.

    React.useEffect(function () {
      evaluateSubscription();
    });
    var evaluateSubscription = React.useCallback(function () {
      var cbElement = cbElementRef.current;
      var refOrElement = refOrElementRef.current; // Ugly ternary. But smaller than an if-else block.

      var element = cbElement ? cbElement : refOrElement ? refOrElement instanceof Element ? refOrElement : refOrElement.current : null;

      if (lastReportRef.current && lastReportRef.current.element === element && lastReportRef.current.subscriber === subscriber) {
        return;
      }

      if (lastReportRef.current && lastReportRef.current.cleanup) {
        lastReportRef.current.cleanup();
      }

      lastReportRef.current = {
        element: element,
        subscriber: subscriber,
        // Only calling the subscriber, if there's an actual element to report.
        // Setting cleanup to undefined unless a subscriber returns one, as an existing cleanup function would've been just called.
        cleanup: element ? subscriber(element) : undefined
      };
    }, [subscriber]); // making sure we call the cleanup function on unmount

    React.useEffect(function () {
      return function () {
        if (lastReportRef.current && lastReportRef.current.cleanup) {
          lastReportRef.current.cleanup();
          lastReportRef.current = null;
        }
      };
    }, []);
    return React.useCallback(function (element) {
      cbElementRef.current = element;
      evaluateSubscription();
    }, [evaluateSubscription]);
  } // We're only using the first element of the size sequences, until future versions of the spec solidify on how
  // exactly it'll be used for fragments in multi-column scenarios:
  // From the spec:
  // > The box size properties are exposed as FrozenArray in order to support elements that have multiple fragments,
  // > which occur in multi-column scenarios. However the current definitions of content rect and border box do not
  // > mention how those boxes are affected by multi-column layout. In this spec, there will only be a single
  // > ResizeObserverSize returned in the FrozenArray, which will correspond to the dimensions of the first column.
  // > A future version of this spec will extend the returned FrozenArray to contain the per-fragment size information.
  // (https://drafts.csswg.org/resize-observer/#resize-observer-entry-interface)
  //
  // Also, testing these new box options revealed that in both Chrome and FF everything is returned in the callback,
  // regardless of the "box" option.
  // The spec states the following on this:
  // > This does not have any impact on which box dimensions are returned to the defined callback when the event
  // > is fired, it solely defines which box the author wishes to observe layout changes on.
  // (https://drafts.csswg.org/resize-observer/#resize-observer-interface)
  // I'm not exactly clear on what this means, especially when you consider a later section stating the following:
  // > This section is non-normative. An author may desire to observe more than one CSS box.
  // > In this case, author will need to use multiple ResizeObservers.
  // (https://drafts.csswg.org/resize-observer/#resize-observer-interface)
  // Which is clearly not how current browser implementations behave, and seems to contradict the previous quote.
  // For this reason I decided to only return the requested size,
  // even though it seems we have access to results for all box types.
  // This also means that we get to keep the current api, being able to return a simple { width, height } pair,
  // regardless of box option.


  function extractSize(entry, boxProp, sizeType) {
    if (!entry[boxProp]) {
      if (boxProp === "contentBoxSize") {
        // The dimensions in `contentBoxSize` and `contentRect` are equivalent according to the spec.
        // See the 6th step in the description for the RO algorithm:
        // https://drafts.csswg.org/resize-observer/#create-and-populate-resizeobserverentry-h
        // > Set this.contentRect to logical this.contentBoxSize given target and observedBox of "content-box".
        // In real browser implementations of course these objects differ, but the width/height values should be equivalent.
        return entry.contentRect[sizeType === "inlineSize" ? "width" : "height"];
      }

      return undefined;
    } // A couple bytes smaller than calling Array.isArray() and just as effective here.


    return entry[boxProp][0] ? entry[boxProp][0][sizeType] : // TS complains about this, because the RO entry type follows the spec and does not reflect Firefox's current
    // behaviour of returning objects instead of arrays for `borderBoxSize` and `contentBoxSize`.
    // @ts-ignore
    entry[boxProp][sizeType];
  }

  function useResizeObserver(opts) {
    if (opts === void 0) {
      opts = {};
    } // Saving the callback as a ref. With this, I don't need to put onResize in the
    // effect dep array, and just passing in an anonymous function without memoising
    // will not reinstantiate the hook's ResizeObserver.


    var onResize = opts.onResize;
    var onResizeRef = React.useRef(undefined);
    onResizeRef.current = onResize;
    var round = opts.round || Math.round; // Using a single instance throughout the hook's lifetime

    var resizeObserverRef = React.useRef();

    var _useState = React.useState({
      width: undefined,
      height: undefined
    }),
        size = _useState[0],
        setSize = _useState[1]; // In certain edge cases the RO might want to report a size change just after
    // the component unmounted.


    var didUnmount = React.useRef(false);
    React.useEffect(function () {
      didUnmount.current = false;
      return function () {
        didUnmount.current = true;
      };
    }, []); // Using a ref to track the previous width / height to avoid unnecessary renders.

    var previous = React.useRef({
      width: undefined,
      height: undefined
    }); // This block is kinda like a useEffect, only it's called whenever a new
    // element could be resolved based on the ref option. It also has a cleanup
    // function.

    var refCallback = useResolvedElement(React.useCallback(function (element) {
      // We only use a single Resize Observer instance, and we're instantiating it on demand, only once there's something to observe.
      // This instance is also recreated when the `box` option changes, so that a new observation is fired if there was a previously observed element with a different box option.
      if (!resizeObserverRef.current || resizeObserverRef.current.box !== opts.box || resizeObserverRef.current.round !== round) {
        resizeObserverRef.current = {
          box: opts.box,
          round: round,
          instance: new ResizeObserver(function (entries) {
            var entry = entries[0];
            var boxProp = opts.box === "border-box" ? "borderBoxSize" : opts.box === "device-pixel-content-box" ? "devicePixelContentBoxSize" : "contentBoxSize";
            var reportedWidth = extractSize(entry, boxProp, "inlineSize");
            var reportedHeight = extractSize(entry, boxProp, "blockSize");
            var newWidth = reportedWidth ? round(reportedWidth) : undefined;
            var newHeight = reportedHeight ? round(reportedHeight) : undefined;

            if (previous.current.width !== newWidth || previous.current.height !== newHeight) {
              var newSize = {
                width: newWidth,
                height: newHeight
              };
              previous.current.width = newWidth;
              previous.current.height = newHeight;

              if (onResizeRef.current) {
                onResizeRef.current(newSize);
              } else {
                if (!didUnmount.current) {
                  setSize(newSize);
                }
              }
            }
          })
        };
      }

      resizeObserverRef.current.instance.observe(element, {
        box: opts.box
      });
      return function () {
        if (resizeObserverRef.current) {
          resizeObserverRef.current.instance.unobserve(element);
        }
      };
    }, [opts.box, round]), opts.ref);
    return React.useMemo(function () {
      return {
        ref: refCallback,
        width: size.width,
        height: size.height
      };
    }, [refCallback, size.width, size.height]);
  }

  var AvatarContext = /*#__PURE__*/React__default["default"].createContext("default");
  var AvatarContextProvider = function AvatarContextProvider(_ref) {
    var children = _ref.children,
        size = _ref.size;
    return /* @__PURE__ */React__default["default"].createElement(AvatarContext.Consumer, null, function (inputSize) {
      return /* @__PURE__ */React__default["default"].createElement(AvatarContext.Provider, {
        value: size || inputSize
      }, children);
    });
  };

  var avatarDefaultProps = {
    hideOnLoadFailed: false,
    shape: "circle"
  };
  var avatarGroupDefaultProps = {
    cascading: "right-up",
    size: "medium"
  };

  var _excluded$5 = ["className", "cascading", "collapseAvatar", "max", "placement", "popupProps", "size", "children"];

  function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var AvatarGroup = function AvatarGroup(props) {
    var _classNames;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var preClass = "".concat(classPrefix, "-avatar");

    var className = props.className,
        cascading = props.cascading,
        collapseAvatar = props.collapseAvatar,
        max = props.max,
        placement = props.placement,
        popupProps = props.popupProps,
        size = props.size,
        children = props.children,
        avatarGroupProps = _objectWithoutProperties$2(props, _excluded$5);

    var childrenList = React__default["default"].Children.toArray(children);
    var allChildrenList;

    if (childrenList.length > 0) {
      allChildrenList = childrenList.map(function (child, index) {
        return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$i({
          key: "avatar-group-item-".concat(index)
        }, child.props));
      });
    }

    var groupClass = classNames$1("".concat(preClass, "-group"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(preClass, "--offset-right"), cascading === "right-up"), _defineProperty$3(_classNames, "".concat(preClass, "--offset-left"), cascading === "left-up"), _classNames));
    var childrenCount = childrenList.length;

    if (max && childrenCount > max) {
      var showList = allChildrenList.slice(0, max);
      var hiddenList = allChildrenList.slice(max, childrenCount);
      var popupNum = "+".concat(childrenCount - max);

      var popupMergeProps = _objectSpread$i(_objectSpread$i({}, popupProps), {}, {
        placement: placement
      });

      var popupNodes = popupProps ? /* @__PURE__ */React__default["default"].createElement(Popup$1, _objectSpread$i({}, popupMergeProps), collapseAvatar ? /* @__PURE__ */React__default["default"].createElement(Avatar$1, {
        size: size
      }, collapseAvatar) : /* @__PURE__ */React__default["default"].createElement(Avatar$1, {
        size: size
      }, popupNum)) : /* @__PURE__ */React__default["default"].createElement(Popup$1, {
        key: "avatar-popup-key",
        placement: placement,
        content: hiddenList,
        trigger: "hover",
        showArrow: true
      }, collapseAvatar ? /* @__PURE__ */React__default["default"].createElement(Avatar$1, {
        size: size
      }, collapseAvatar) : /* @__PURE__ */React__default["default"].createElement(Avatar$1, {
        size: size
      }, popupNum));
      showList.push(popupNodes);
      return /* @__PURE__ */React__default["default"].createElement(AvatarContextProvider, {
        size: size
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: groupClass
      }, showList));
    }

    return /* @__PURE__ */React__default["default"].createElement(AvatarContextProvider, {
      size: size
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$i({
      className: groupClass
    }, avatarGroupProps), allChildrenList));
  };

  AvatarGroup.displayName = "AvatarGroup";
  AvatarGroup.defaultProps = avatarGroupDefaultProps;

  var _excluded$4 = ["alt", "hideOnLoadFailed", "icon", "image", "shape", "size", "onError", "children", "style", "className"];

  function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$h(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Avatar$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var alt = props.alt,
        hideOnLoadFailed = props.hideOnLoadFailed,
        icon = props.icon,
        image = props.image,
        shape = props.shape,
        avatarSize = props.size,
        onError = props.onError,
        children = props.children,
        style = props.style,
        className = props.className,
        avatarProps = _objectWithoutProperties$2(props, _excluded$4);

    var groupSize = React.useContext(AvatarContext);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(1),
        _useState2 = _slicedToArray(_useState, 2),
        scale = _useState2[0],
        setScale = _useState2[1];

    var _useState3 = React.useState(true),
        _useState4 = _slicedToArray(_useState3, 2),
        isImgExist = _useState4[0],
        setIsImgExist = _useState4[1];

    var avatarRef = React.useRef(null);
    var avatarChildrenRef = React.useRef(null);
    var size = avatarSize === "default" ? groupSize : avatarSize;
    var gap = 4;

    var handleScale = function handleScale() {
      if (!avatarChildrenRef.current || !avatarRef.current) {
        return;
      }

      var childrenWidth = avatarChildrenRef.current.offsetWidth;
      var avatarWidth = avatarRef.current.offsetWidth;

      if (childrenWidth !== 0 && avatarWidth !== 0) {
        if (gap * 2 < avatarWidth) {
          setScale(avatarWidth - gap * 2 < childrenWidth ? (avatarWidth - gap * 2) / childrenWidth : 1);
        }
      }
    };

    var _useResizeObserver = useResizeObserver({
      onResize: handleScale
    }),
        observerRef = _useResizeObserver.ref;

    var handleImgLoadError = function handleImgLoadError() {
      onError && onError();
      !hideOnLoadFailed && setIsImgExist(false);
    };

    React.useEffect(function () {
      setIsImgExist(true);
      setScale(1);
    }, [props.image]);
    React.useEffect(function () {
      handleScale();
    }, []);

    var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;

    var numSizeStyle = size && !SIZE[size] ? {
      width: size,
      height: size,
      fontSize: "".concat(Number.parseInt(size, 10) / 2, "px")
    } : {};
    var imageStyle = size && !SIZE[size] ? {
      width: size,
      height: size
    } : {};
    var preClass = "".concat(classPrefix, "-avatar");
    var avatarClass = classNames$1(preClass, className, (_classNames = {}, _defineProperty$3(_classNames, SIZE[size], !!SIZE[size]), _defineProperty$3(_classNames, "".concat(preClass, "--").concat(shape), !!shape), _defineProperty$3(_classNames, "".concat(preClass, "-icon"), !!icon), _classNames));
    var content;

    if (image && isImgExist) {
      content = /* @__PURE__ */React__default["default"].createElement("img", {
        src: image,
        alt: alt,
        style: imageStyle,
        onError: handleImgLoadError
      });
    } else if (icon) {
      content = icon;
    } else {
      var childrenStyle = {
        transform: "scale(".concat(scale, ")")
      };
      content = /* @__PURE__ */React__default["default"].createElement("span", {
        ref: composeRefs(ref, avatarChildrenRef, observerRef),
        style: childrenStyle
      }, children);
    }

    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$h({
      ref: composeRefs(ref, avatarRef),
      className: avatarClass,
      style: _objectSpread$h(_objectSpread$h({}, numSizeStyle), style)
    }, avatarProps), content);
  }, {
    Group: AvatarGroup
  });
  Avatar$1.displayName = "Avatar";
  Avatar$1.defaultProps = avatarDefaultProps;

  var Avatar = Avatar$1;

  var skeletonDefaultProps = {
    animation: "none",
    delay: 0,
    loading: true,
    theme: "text"
  };

  var ThemeMap = {
    text: [1],
    avatar: [{
      type: "circle",
      size: "56px"
    }],
    paragraph: [1, 1, {
      width: "70%"
    }],
    "avatar-text": [[{
      type: "circle"
    }, {
      type: "text",
      height: "32px"
    }]],
    tab: [{
      height: "30px"
    }, {
      height: "200px"
    }],
    article: [{
      type: "rect",
      height: "30px",
      width: "100%"
    }, {
      type: "rect",
      height: "200px",
      width: "100%"
    }].concat(_toConsumableArray([3, 2, 2, 2].map(function (value) {
      return Array(value).fill({
        type: "text",
        height: "30px"
      });
    })))
  };

  var Skeleton$1 = function Skeleton(props) {
    var animation = props.animation,
        loading = props.loading,
        rowCol = props.rowCol,
        theme = props.theme,
        className = props.className,
        style = props.style,
        _props$delay = props.delay,
        delay = _props$delay === void 0 ? 0 : _props$delay,
        children = props.children;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-skeleton");

    var renderCols = function renderCols(_cols) {
      var getColItemClass = function getColItemClass(obj) {
        return classNames$1("".concat(name, "__col"), "".concat(name, "--type-").concat(obj.type || "text"), _defineProperty$3({}, "".concat(name, "--animation-").concat(animation), animation));
      };

      var getColItemStyle = function getColItemStyle(obj) {
        var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
        var style2 = {};
        styleName.forEach(function (name2) {
          if (name2 in obj) {
            var px = pxCompat(obj[name2]);

            if (name2 === "size") {
              var _ref = [px, px];
              style2.width = _ref[0];
              style2.height = _ref[1];
            } else {
              style2[name2] = px;
            }
          }
        });
        return style2;
      };

      var cols = [];

      if (Array.isArray(_cols)) {
        cols = _cols;
      } else if (isNumber_1(_cols)) {
        cols = new Array(_cols).fill({
          type: "text"
        });
      } else {
        cols = [_cols];
      }

      return cols.map(function (item, index) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          key: index,
          className: getColItemClass(item),
          style: getColItemStyle(item)
        }, typeof item.content === "function" ? item.content(React__default["default"].createElement) : item.content);
      });
    };

    var renderRowCol = function renderRowCol(_rowCol) {
      var renderedRowCol = _rowCol || rowCol;
      return renderedRowCol.map(function (item, index) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          key: index,
          className: "".concat(name, "__row")
        }, renderCols(item));
      });
    };

    var _useState = React.useState(loading),
        _useState2 = _slicedToArray(_useState, 2),
        ctrlLoading = _useState2[0],
        setCtrlLoading = _useState2[1];

    React.useEffect(function () {
      if (delay > 0 && !loading) {
        var timeout = setTimeout(function () {
          setCtrlLoading(loading);
        }, delay);
        return function () {
          return clearTimeout(timeout);
        };
      }

      setCtrlLoading(loading);
    }, [delay, loading]);

    if (!ctrlLoading) {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, children);
    }

    var childrenContent = [];

    if (theme) {
      childrenContent.push(renderRowCol(ThemeMap[theme]));
    }

    if (rowCol) {
      childrenContent.push(renderRowCol(rowCol));
    }

    if (!theme && !rowCol) {
      childrenContent.push(renderRowCol([1, 1, 1, {
        width: "70%"
      }]));
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: className,
      style: style
    }, childrenContent);
  };

  Skeleton$1.displayName = "Skeleton";
  Skeleton$1.defaultProps = skeletonDefaultProps;

  var Skeleton = Skeleton$1;

  var tinycolor = {exports: {}};

  (function (module) {
    // TinyColor v1.4.2
    // https://github.com/bgrins/TinyColor
    // Brian Grinstead, MIT License
    (function (Math) {
      var trimLeft = /^\s+/,
          trimRight = /\s+$/,
          tinyCounter = 0,
          mathRound = Math.round,
          mathMin = Math.min,
          mathMax = Math.max,
          mathRandom = Math.random;

      function tinycolor(color, opts) {
        color = color ? color : '';
        opts = opts || {}; // If input is already a tinycolor, return itself

        if (color instanceof tinycolor) {
          return color;
        } // If we are called as a function, call using new instead


        if (!(this instanceof tinycolor)) {
          return new tinycolor(color, opts);
        }

        var rgb = inputToRGB(color);
        this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
        this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].
        // Potentially lose a little bit of precision here, but will fix issues where
        // .5 gets interpreted as half of the total, instead of half of 1
        // If it was supposed to be 128, this was already taken care of by `inputToRgb`

        if (this._r < 1) {
          this._r = mathRound(this._r);
        }

        if (this._g < 1) {
          this._g = mathRound(this._g);
        }

        if (this._b < 1) {
          this._b = mathRound(this._b);
        }

        this._ok = rgb.ok;
        this._tc_id = tinyCounter++;
      }

      tinycolor.prototype = {
        isDark: function isDark() {
          return this.getBrightness() < 128;
        },
        isLight: function isLight() {
          return !this.isDark();
        },
        isValid: function isValid() {
          return this._ok;
        },
        getOriginalInput: function getOriginalInput() {
          return this._originalInput;
        },
        getFormat: function getFormat() {
          return this._format;
        },
        getAlpha: function getAlpha() {
          return this._a;
        },
        getBrightness: function getBrightness() {
          //http://www.w3.org/TR/AERT#color-contrast
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        },
        getLuminance: function getLuminance() {
          //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
          var rgb = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R, G, B;
          RsRGB = rgb.r / 255;
          GsRGB = rgb.g / 255;
          BsRGB = rgb.b / 255;

          if (RsRGB <= 0.03928) {
            R = RsRGB / 12.92;
          } else {
            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
          }

          if (GsRGB <= 0.03928) {
            G = GsRGB / 12.92;
          } else {
            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
          }

          if (BsRGB <= 0.03928) {
            B = BsRGB / 12.92;
          } else {
            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
          }

          return 0.2126 * R + 0.7152 * G + 0.0722 * B;
        },
        setAlpha: function setAlpha(value) {
          this._a = boundAlpha(value);
          this._roundA = mathRound(100 * this._a) / 100;
          return this;
        },
        toHsv: function toHsv() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return {
            h: hsv.h * 360,
            s: hsv.s,
            v: hsv.v,
            a: this._a
          };
        },
        toHsvString: function toHsvString() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = mathRound(hsv.h * 360),
              s = mathRound(hsv.s * 100),
              v = mathRound(hsv.v * 100);
          return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
        },
        toHsl: function toHsl() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          return {
            h: hsl.h * 360,
            s: hsl.s,
            l: hsl.l,
            a: this._a
          };
        },
        toHslString: function toHslString() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          var h = mathRound(hsl.h * 360),
              s = mathRound(hsl.s * 100),
              l = mathRound(hsl.l * 100);
          return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        },
        toHex: function toHex(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function toHexString(allow3Char) {
          return '#' + this.toHex(allow3Char);
        },
        toHex8: function toHex8(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function toHex8String(allow4Char) {
          return '#' + this.toHex8(allow4Char);
        },
        toRgb: function toRgb() {
          return {
            r: mathRound(this._r),
            g: mathRound(this._g),
            b: mathRound(this._b),
            a: this._a
          };
        },
        toRgbString: function toRgbString() {
          return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
        },
        toPercentageRgb: function toPercentageRgb() {
          return {
            r: mathRound(bound01(this._r, 255) * 100) + "%",
            g: mathRound(bound01(this._g, 255) * 100) + "%",
            b: mathRound(bound01(this._b, 255) * 100) + "%",
            a: this._a
          };
        },
        toPercentageRgbString: function toPercentageRgbString() {
          return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        },
        toName: function toName() {
          if (this._a === 0) {
            return "transparent";
          }

          if (this._a < 1) {
            return false;
          }

          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function toFilter(secondColor) {
          var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";

          if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }

          return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        },
        toString: function toString(format) {
          var formatSet = !!format;
          format = format || this._format;
          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

          if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
              return this.toName();
            }

            return this.toRgbString();
          }

          if (format === "rgb") {
            formattedString = this.toRgbString();
          }

          if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
          }

          if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
          }

          if (format === "hex3") {
            formattedString = this.toHexString(true);
          }

          if (format === "hex4") {
            formattedString = this.toHex8String(true);
          }

          if (format === "hex8") {
            formattedString = this.toHex8String();
          }

          if (format === "name") {
            formattedString = this.toName();
          }

          if (format === "hsl") {
            formattedString = this.toHslString();
          }

          if (format === "hsv") {
            formattedString = this.toHsvString();
          }

          return formattedString || this.toHexString();
        },
        clone: function clone() {
          return tinycolor(this.toString());
        },
        _applyModification: function _applyModification(fn, args) {
          var color = fn.apply(null, [this].concat([].slice.call(args)));
          this._r = color._r;
          this._g = color._g;
          this._b = color._b;
          this.setAlpha(color._a);
          return this;
        },
        lighten: function lighten() {
          return this._applyModification(_lighten, arguments);
        },
        brighten: function brighten() {
          return this._applyModification(_brighten, arguments);
        },
        darken: function darken() {
          return this._applyModification(_darken, arguments);
        },
        desaturate: function desaturate() {
          return this._applyModification(_desaturate, arguments);
        },
        saturate: function saturate() {
          return this._applyModification(_saturate, arguments);
        },
        greyscale: function greyscale() {
          return this._applyModification(_greyscale, arguments);
        },
        spin: function spin() {
          return this._applyModification(_spin, arguments);
        },
        _applyCombination: function _applyCombination(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
        },
        analogous: function analogous() {
          return this._applyCombination(_analogous, arguments);
        },
        complement: function complement() {
          return this._applyCombination(_complement, arguments);
        },
        monochromatic: function monochromatic() {
          return this._applyCombination(_monochromatic, arguments);
        },
        splitcomplement: function splitcomplement() {
          return this._applyCombination(_splitcomplement, arguments);
        },
        triad: function triad() {
          return this._applyCombination(_triad, arguments);
        },
        tetrad: function tetrad() {
          return this._applyCombination(_tetrad, arguments);
        }
      }; // If input is an object, force 1 into "1.0" to handle ratios properly
      // String input requires "1.0" as input, so 1 will be treated as 1

      tinycolor.fromRatio = function (color, opts) {
        if (_typeof$1(color) == "object") {
          var newColor = {};

          for (var i in color) {
            if (color.hasOwnProperty(i)) {
              if (i === "a") {
                newColor[i] = color[i];
              } else {
                newColor[i] = convertToPercentage(color[i]);
              }
            }
          }

          color = newColor;
        }

        return tinycolor(color, opts);
      }; // Given a string or object, convert that input to RGB
      // Possible string inputs:
      //
      //     "red"
      //     "#f00" or "f00"
      //     "#ff0000" or "ff0000"
      //     "#ff000000" or "ff000000"
      //     "rgb 255 0 0" or "rgb (255, 0, 0)"
      //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
      //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
      //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
      //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
      //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
      //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
      //


      function inputToRGB(color) {
        var rgb = {
          r: 0,
          g: 0,
          b: 0
        };
        var a = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        var format = false;

        if (typeof color == "string") {
          color = stringInputToObject(color);
        }

        if (_typeof$1(color) == "object") {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
          }

          if (color.hasOwnProperty("a")) {
            a = color.a;
          }
        }

        a = boundAlpha(a);
        return {
          ok: ok,
          format: color.format || format,
          r: mathMin(255, mathMax(rgb.r, 0)),
          g: mathMin(255, mathMax(rgb.g, 0)),
          b: mathMin(255, mathMax(rgb.b, 0)),
          a: a
        };
      } // Conversion Functions
      // --------------------
      // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
      // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
      // `rgbToRgb`
      // Handle bounds / percentage checking to conform to CSS color spec
      // <http://www.w3.org/TR/css3-color/>
      // *Assumes:* r, g, b in [0, 255] or [0, 1]
      // *Returns:* { r, g, b } in [0, 255]


      function rgbToRgb(r, g, b) {
        return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255
        };
      } // `rgbToHsl`
      // Converts an RGB color value to HSL.
      // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
      // *Returns:* { h, s, l } in [0,1]


      function rgbToHsl(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b),
            min = mathMin(r, g, b);
        var h,
            s,
            l = (max + min) / 2;

        if (max == min) {
          h = s = 0; // achromatic
        } else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;

            case g:
              h = (b - r) / d + 2;
              break;

            case b:
              h = (r - g) / d + 4;
              break;
          }

          h /= 6;
        }

        return {
          h: h,
          s: s,
          l: l
        };
      } // `hslToRgb`
      // Converts an HSL color value to RGB.
      // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
      // *Returns:* { r, g, b } in the set [0, 255]


      function hslToRgb(h, s, l) {
        var r, g, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);

        function hue2rgb(p, q, t) {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1 / 6) return p + (q - p) * 6 * t;
          if (t < 1 / 2) return q;
          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
          return p;
        }

        if (s === 0) {
          r = g = b = l; // achromatic
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1 / 3);
        }

        return {
          r: r * 255,
          g: g * 255,
          b: b * 255
        };
      } // `rgbToHsv`
      // Converts an RGB color value to HSV
      // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
      // *Returns:* { h, s, v } in [0,1]


      function rgbToHsv(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b),
            min = mathMin(r, g, b);
        var h,
            s,
            v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;

        if (max == min) {
          h = 0; // achromatic
        } else {
          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;

            case g:
              h = (b - r) / d + 2;
              break;

            case b:
              h = (r - g) / d + 4;
              break;
          }

          h /= 6;
        }

        return {
          h: h,
          s: s,
          v: v
        };
      } // `hsvToRgb`
      // Converts an HSV color value to RGB.
      // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
      // *Returns:* { r, g, b } in the set [0, 255]


      function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math.floor(h),
            f = h - i,
            p = v * (1 - s),
            q = v * (1 - f * s),
            t = v * (1 - (1 - f) * s),
            mod = i % 6,
            r = [v, q, p, p, t, v][mod],
            g = [t, v, v, q, p, p][mod],
            b = [p, p, t, v, v, q][mod];
        return {
          r: r * 255,
          g: g * 255,
          b: b * 255
        };
      } // `rgbToHex`
      // Converts an RGB color to hex
      // Assumes r, g, and b are contained in the set [0, 255]
      // Returns a 3 or 6 character hex


      function rgbToHex(r, g, b, allow3Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible

        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }

        return hex.join("");
      } // `rgbaToHex`
      // Converts an RGBA color plus alpha transparency to hex
      // Assumes r, g, b are contained in the set [0, 255] and
      // a in [0, 1]. Returns a 4 or 8 character rgba hex


      function rgbaToHex(r, g, b, a, allow4Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible

        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        }

        return hex.join("");
      } // `rgbaToArgbHex`
      // Converts an RGBA color to an ARGB Hex8 string
      // Rarely used, but required for "toFilter()"


      function rgbaToArgbHex(r, g, b, a) {
        var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
        return hex.join("");
      } // `equals`
      // Can be called with any tinycolor input


      tinycolor.equals = function (color1, color2) {
        if (!color1 || !color2) {
          return false;
        }

        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
      };

      tinycolor.random = function () {
        return tinycolor.fromRatio({
          r: mathRandom(),
          g: mathRandom(),
          b: mathRandom()
        });
      }; // Modification Functions
      // ----------------------
      // Thanks to less.js for some of the basics here
      // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>


      function _desaturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }

      function _saturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }

      function _greyscale(color) {
        return tinycolor(color).desaturate(100);
      }

      function _lighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }

      function _brighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var rgb = tinycolor(color).toRgb();
        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
        return tinycolor(rgb);
      }

      function _darken(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
      // Values outside of this range will be wrapped into this range.


      function _spin(color, amount) {
        var hsl = tinycolor(color).toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return tinycolor(hsl);
      } // Combination Functions
      // ---------------------
      // Thanks to jQuery xColor for some of the ideas behind these
      // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>


      function _complement(color) {
        var hsl = tinycolor(color).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
      }

      function _triad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 120) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 240) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }

      function _tetrad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 90) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 180) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 270) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }

      function _splitcomplement(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 72) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 216) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }

      function _analogous(color, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color)];

        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(tinycolor(hsl));
        }

        return ret;
      }

      function _monochromatic(color, results) {
        results = results || 6;
        var hsv = tinycolor(color).toHsv();
        var h = hsv.h,
            s = hsv.s,
            v = hsv.v;
        var ret = [];
        var modification = 1 / results;

        while (results--) {
          ret.push(tinycolor({
            h: h,
            s: s,
            v: v
          }));
          v = (v + modification) % 1;
        }

        return ret;
      } // Utility Functions
      // ---------------------


      tinycolor.mix = function (color1, color2, amount) {
        amount = amount === 0 ? 0 : amount || 50;
        var rgb1 = tinycolor(color1).toRgb();
        var rgb2 = tinycolor(color2).toRgb();
        var p = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p + rgb1.r,
          g: (rgb2.g - rgb1.g) * p + rgb1.g,
          b: (rgb2.b - rgb1.b) * p + rgb1.b,
          a: (rgb2.a - rgb1.a) * p + rgb1.a
        };
        return tinycolor(rgba);
      }; // Readability Functions
      // ---------------------
      // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
      // `contrast`
      // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)


      tinycolor.readability = function (color1, color2) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color2);
        return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
      }; // `isReadable`
      // Ensure that foreground and background color combinations meet WCAG2 guidelines.
      // The third argument is an optional Object.
      //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
      //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
      // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
      // *Example*
      //    tinycolor.isReadable("#000", "#111") => false
      //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false


      tinycolor.isReadable = function (color1, color2, wcag2) {
        var readability = tinycolor.readability(color1, color2);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);

        switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
            out = readability >= 4.5;
            break;

          case "AAlarge":
            out = readability >= 3;
            break;

          case "AAAsmall":
            out = readability >= 7;
            break;
        }

        return out;
      }; // `mostReadable`
      // Given a base color and a list of possible foreground or background
      // colors for that base, returns the most readable color.
      // Optionally returns Black or White if the most readable color is unreadable.
      // *Example*
      //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
      //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
      //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
      //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"


      tinycolor.mostReadable = function (baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size;
        args = args || {};
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size = args.size;

        for (var i = 0; i < colorList.length; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);

          if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
          }
        }

        if (tinycolor.isReadable(baseColor, bestColor, {
          "level": level,
          "size": size
        }) || !includeFallbackColors) {
          return bestColor;
        } else {
          args.includeFallbackColors = false;
          return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
        }
      }; // Big List of Colors
      // ------------------
      // <http://www.w3.org/TR/css3-color/#svg-color>


      var names = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
      }; // Make it easy to access colors via `hexNames[hex]`

      var hexNames = tinycolor.hexNames = flip(names); // Utilities
      // ---------
      // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`

      function flip(o) {
        var flipped = {};

        for (var i in o) {
          if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
          }
        }

        return flipped;
      } // Return a valid alpha value [0,1] with all invalid values being set to 1


      function boundAlpha(a) {
        a = parseFloat(a);

        if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
        }

        return a;
      } // Take input from [0, n] and return it as [0, 1]


      function bound01(n, max) {
        if (isOnePointZero(n)) {
          n = "100%";
        }

        var processPercent = isPercentage(n);
        n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number

        if (processPercent) {
          n = parseInt(n * max, 10) / 100;
        } // Handle floating point rounding errors


        if (Math.abs(n - max) < 0.000001) {
          return 1;
        } // Convert into [0, 1] range if it isn't already


        return n % max / parseFloat(max);
      } // Force a number between 0 and 1


      function clamp01(val) {
        return mathMin(1, mathMax(0, val));
      } // Parse a base-16 hex value into a base-10 integer


      function parseIntFromHex(val) {
        return parseInt(val, 16);
      } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
      // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>


      function isOnePointZero(n) {
        return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
      } // Check to see if string passed in is a percentage


      function isPercentage(n) {
        return typeof n === "string" && n.indexOf('%') != -1;
      } // Force a hex value to have 2 characters


      function pad2(c) {
        return c.length == 1 ? '0' + c : '' + c;
      } // Replace a decimal with it's percentage value


      function convertToPercentage(n) {
        if (n <= 1) {
          n = n * 100 + "%";
        }

        return n;
      } // Converts a decimal to a hex value


      function convertDecimalToHex(d) {
        return Math.round(parseFloat(d) * 255).toString(16);
      } // Converts a hex value to a decimal


      function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
      }

      var matchers = function () {
        // <http://www.w3.org/TR/css3-values/#integers>
        var CSS_INTEGER = "[-\\+]?\\d+%?"; // <http://www.w3.org/TR/css3-values/#number-value>

        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?"; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.

        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")"; // Actual matching.
        // Parentheses and commas are optional, but not required.
        // Whitespace can take the place of commas or opening paren

        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
      }(); // `isValidCSSUnit`
      // Take in a single string / number and check to see if it looks like a CSS unit
      // (see `matchers` above for definition).


      function isValidCSSUnit(color) {
        return !!matchers.CSS_UNIT.exec(color);
      } // `stringInputToObject`
      // Permissive string parsing.  Take in a number of formats, and output an object
      // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`


      function stringInputToObject(color) {
        color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
        var named = false;

        if (names[color]) {
          color = names[color];
          named = true;
        } else if (color == 'transparent') {
          return {
            r: 0,
            g: 0,
            b: 0,
            a: 0,
            format: "name"
          };
        } // Try to match string input using regular expressions.
        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
        // Just return an object and let the conversion functions handle that.
        // This way the result will be the same whether the tinycolor is initialized with string or object.


        var match;

        if (match = matchers.rgb.exec(color)) {
          return {
            r: match[1],
            g: match[2],
            b: match[3]
          };
        }

        if (match = matchers.rgba.exec(color)) {
          return {
            r: match[1],
            g: match[2],
            b: match[3],
            a: match[4]
          };
        }

        if (match = matchers.hsl.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            l: match[3]
          };
        }

        if (match = matchers.hsla.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            l: match[3],
            a: match[4]
          };
        }

        if (match = matchers.hsv.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            v: match[3]
          };
        }

        if (match = matchers.hsva.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            v: match[3],
            a: match[4]
          };
        }

        if (match = matchers.hex8.exec(color)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
          };
        }

        if (match = matchers.hex6.exec(color)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
          };
        }

        if (match = matchers.hex4.exec(color)) {
          return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
          };
        }

        if (match = matchers.hex3.exec(color)) {
          return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
          };
        }

        return false;
      }

      function validateWCAG2Parms(parms) {
        // return valid WCAG2 parms for isReadable.
        // If input parms are invalid, return {"level":"AA", "size":"small"}
        var level, size;
        parms = parms || {
          "level": "AA",
          "size": "small"
        };
        level = (parms.level || "AA").toUpperCase();
        size = (parms.size || "small").toLowerCase();

        if (level !== "AA" && level !== "AAA") {
          level = "AA";
        }

        if (size !== "small" && size !== "large") {
          size = "small";
        }

        return {
          "level": level,
          "size": size
        };
      } // Node: Export function


      if (module.exports) {
        module.exports = tinycolor;
      } // AMD/requirejs: Define the module
      else {
        window.tinycolor = tinycolor;
      }
    })(Math);
  })(tinycolor);

  var tinyColor = tinycolor.exports;

  var useClassNames = function useClassNames() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var baseClassName = "".concat(classPrefix, "-color-picker");
    return baseClassName;
  };

  var TD_COLOR_USED_COLORS_MAX_SIZE = 100;
  var COLOR_MODES = {
    monochrome: "\u5355\u8272",
    "linear-gradient": "\u6E10\u53D8"
  };
  var FORMATS = ["HEX", "RGB", "HSL", "HSV", "CMYK", "CSS"];
  var DEFAULT_COLOR = "#001F97";
  var DEFAULT_LINEAR_GRADIENT = "linear-gradient(90deg, rgba(241,29,0,1) 0%, rgba(73,106,220,1) 100%);";
  var DEFAULT_SYSTEM_SWATCH_COLORS = ["#ECF2FE", "#D4E3FC", "#BBD3FB", "#96BBF8", "#699EF5", "#4787F0", "#266FE8", "#0052D9", "#0034B5", "#001F97", "#FDECEE", "#F9D7D9", "#F8B9BE", "#F78D94", "#F36D78", "#E34D59", "#C9353F", "#B11F26", "#951114", "#680506", "#FEF3E6", "#F9E0C7", "#F7C797", "#F2995F", "#ED7B2F", "#D35A21", "#BA431B", "#9E3610", "#842B0B", "#5A1907", "#E8F8F2", "#BCEBDC", "#85DBBE", "#48C79C", "#00A870", "#078D5C", "#067945", "#056334", "#044F2A", "#033017"];
  var SATURATION_PANEL_DEFAULT_WIDTH = 230;
  var SATURATION_PANEL_DEFAULT_HEIGHT = 168;
  var SLIDER_DEFAULT_WIDTH = 168;
  var GRADIENT_SLIDER_DEFAULT_WIDTH = 158;

  var Header = function Header(props) {
    var baseClassName = props.baseClassName,
        _props$mode = props.mode,
        mode = _props$mode === void 0 ? "monochrome" : _props$mode,
        colorModes = props.colorModes,
        onModeChange = props.onModeChange;
    var isSingleMode = (colorModes === null || colorModes === void 0 ? void 0 : colorModes.length) === 1;

    if (isSingleMode) {
      return null;
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__head")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__mode")
    }, (colorModes === null || colorModes === void 0 ? void 0 : colorModes.length) === 1 ? COLOR_MODES[colorModes[0]] : /* @__PURE__ */React__default["default"].createElement(Radio.Group, {
      variant: "default-filled",
      size: "small",
      value: mode,
      onChange: onModeChange
    }, Object.keys(COLOR_MODES).map(function (key) {
      return /* @__PURE__ */React__default["default"].createElement(Radio.Button, {
        key: key,
        value: key
      }, COLOR_MODES[key]);
    }))));
  };

  var PanelHeader = /*#__PURE__*/React__default["default"].memo(Header);

  var rgb2cmyk = function rgb2cmyk(red, green, blue) {
    var computedC = 0;
    var computedM = 0;
    var computedY = 0;
    var computedK = 0;
    var r = parseInt("".concat(red).replace(/\s/g, ""), 10);
    var g = parseInt("".concat(green).replace(/\s/g, ""), 10);
    var b = parseInt("".concat(blue).replace(/\s/g, ""), 10);

    if (r === 0 && g === 0 && b === 0) {
      computedK = 1;
      return [0, 0, 0, 1];
    }

    computedC = 1 - r / 255;
    computedM = 1 - g / 255;
    computedY = 1 - b / 255;
    var minCMY = Math.min(computedC, Math.min(computedM, computedY));
    computedC = (computedC - minCMY) / (1 - minCMY);
    computedM = (computedM - minCMY) / (1 - minCMY);
    computedY = (computedY - minCMY) / (1 - minCMY);
    computedK = minCMY;
    return [computedC, computedM, computedY, computedK];
  };
  var cmyk2rgb = function cmyk2rgb(cyan, magenta, yellow, black) {
    var c = cyan / 100;
    var m = magenta / 100;
    var y = yellow / 100;
    var k = black / 100;
    c = c * (1 - k) + k;
    m = m * (1 - k) + k;
    y = y * (1 - k) + k;
    var r = 1 - c;
    var g = 1 - m;
    var b = 1 - y;
    r = Math.round(255 * r);
    g = Math.round(255 * g);
    b = Math.round(255 * b);
    return {
      r: r,
      g: g,
      b: b
    };
  };
  var REG_CMYK_STRING = /cmyk\((\d+%?),(\d+%?),(\d+%?),(\d+%?)\)/;

  var toNumber = function toNumber(str) {
    return Math.max(0, Math.min(255, parseInt(str, 10)));
  };

  var cmykInputToColor = function cmykInputToColor(input) {
    if (/cmyk/i.test(input)) {
      var str = input.replace(/\s/g, "");
      var match = str.match(REG_CMYK_STRING);
      var c = toNumber(match[1]);
      var m = toNumber(match[2]);
      var y = toNumber(match[3]);
      var k = toNumber(match[4]);

      var _cmyk2rgb = cmyk2rgb(c, m, y, k),
          r = _cmyk2rgb.r,
          g = _cmyk2rgb.g,
          b = _cmyk2rgb.b;

      return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
    }

    return input;
  };

  var combineRegExp = function combineRegExp(regexpList, flags) {
    var source = "";

    for (var i = 0; i < regexpList.length; i++) {
      if (typeof regexpList[i] === "string") {
        source += regexpList[i];
      } else {
        source += regexpList[i].source;
      }
    }

    return new RegExp(source, flags);
  };

  var generateRegExp = function generateRegExp() {
    var searchFlags = "gi";
    var rAngle = /(?:[+-]?\d*\.?\d+)(?:deg|grad|rad|turn)/;
    var rSideCornerCapture = /to\s+((?:(?:left|right|top|bottom)(?:\s+(?:top|bottom|left|right))?))/;
    var rComma = /\s*,\s*/;
    var rColorHex = /#(?:[a-f0-9]{6}|[a-f0-9]{3})/;
    var rDigits3 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*\)/;
    var rDigits4 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*,\s*\d*\.?\d+\)/;
    var rValue = /(?:[+-]?\d*\.?\d+)(?:%|[a-z]+)?/;
    var rKeyword = /[_a-z-][_a-z0-9-]*/;
    var rColor = combineRegExp(["(?:", rColorHex, "|", "(?:rgb|hsl)", rDigits3, "|", "(?:rgba|hsla)", rDigits4, "|", rKeyword, ")"], "");
    var rColorStop = combineRegExp([rColor, "(?:\\s+", rValue, "(?:\\s+", rValue, ")?)?"], "");
    var rColorStopList = combineRegExp(["(?:", rColorStop, rComma, ")*", rColorStop], "");
    var rLineCapture = combineRegExp(["(?:(", rAngle, ")|", rSideCornerCapture, ")"], "");
    var rGradientSearch = combineRegExp(["(?:(", rLineCapture, ")", rComma, ")?(", rColorStopList, ")"], searchFlags);
    var rColorStopSearch = combineRegExp(["\\s*(", rColor, ")", "(?:\\s+", "(", rValue, "))?", "(?:", rComma, "\\s*)?"], searchFlags);
    return {
      gradientSearch: rGradientSearch,
      colorStopSearch: rColorStopSearch
    };
  };

  var parseGradient = function parseGradient(regExpLib, input) {
    var result;
    var matchColorStop;
    var stopResult;
    regExpLib.gradientSearch.lastIndex = 0;
    var matchGradient = regExpLib.gradientSearch.exec(input);

    if (matchGradient !== null) {
      result = {
        original: matchGradient[0],
        colorStopList: []
      };

      if (matchGradient[1]) {
        result.line = matchGradient[1];
      }

      if (matchGradient[2]) {
        result.angle = matchGradient[2];
      }

      if (matchGradient[3]) {
        result.sideCorner = matchGradient[3];
      }

      regExpLib.colorStopSearch.lastIndex = 0;
      matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);

      while (matchColorStop !== null) {
        stopResult = {
          color: matchColorStop[1]
        };

        if (matchColorStop[2]) {
          stopResult.position = matchColorStop[2];
        }

        result.colorStopList.push(stopResult);
        matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
      }
    }

    return result;
  };

  var REGEXP_LIB = generateRegExp();
  var REG_GRADIENT = /.*gradient\s*\(((?:\([^)]*\)|[^)(]*)*)\)/gim;
  var isGradientColor = function isGradientColor(input) {
    REG_GRADIENT.lastIndex = 0;
    return REG_GRADIENT.exec(input);
  };
  var sideCornerDegreeMap = {
    top: 0,
    right: 90,
    bottom: 180,
    left: 270,
    "top left": 225,
    "left top": 225,
    "top right": 135,
    "right top": 135,
    "bottom left": 315,
    "left bottom": 315,
    "bottom right": 45,
    "right bottom": 45
  };
  var parseGradientString = function parseGradientString(input) {
    var match = isGradientColor(input);

    if (!match) {
      return false;
    }

    var gradientColors = {
      points: [],
      degree: 0
    };
    var result = parseGradient(REGEXP_LIB, match[1]);

    if (result.original.trim() !== match[1].trim()) {
      return false;
    }

    var points = result.colorStopList.map(function (_ref) {
      var color = _ref.color,
          position = _ref.position;
      var point = /* @__PURE__ */Object.create(null);
      point.color = tinyColor(color).toRgbString();
      point.left = parseFloat(position);
      return point;
    });
    gradientColors.points = points;
    var degree = parseInt(result.angle, 10);

    if (Number.isNaN(degree)) {
      degree = sideCornerDegreeMap[result.sideCorner] || 90;
    }

    gradientColors.degree = degree;
    return gradientColors;
  };

  function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var mathRound$1 = Math.round;

  var hsv2rgba = function hsv2rgba(states) {
    return tinyColor(states).toRgb();
  };

  var hsv2hsva = function hsv2hsva(states) {
    return tinyColor(states).toHsv();
  };

  var hsv2hsla = function hsv2hsla(states) {
    return tinyColor(states).toHsl();
  };

  var gradientColors2string = function gradientColors2string(object) {
    var points = object.points,
        degree = object.degree;
    var colorsStop = points.sort(function (pA, pB) {
      return pA.left - pB.left;
    }).map(function (p) {
      return "".concat(p.color, " ").concat(Math.round(p.left * 100) / 100, "%");
    });
    return "linear-gradient(".concat(degree, "deg,").concat(colorsStop.join(","), ")");
  };
  var genId = function genId() {
    return (1 + Math.random() * 4294967295).toString(16);
  };
  var genGradientPoint = function genGradientPoint(left, color) {
    return {
      id: genId(),
      left: left,
      color: color
    };
  };
  var Color = /*#__PURE__*/function () {
    function Color(input) {
      _classCallCheck(this, Color);

      _defineProperty$3(this, "states", {
        s: 100,
        v: 100,
        h: 100,
        a: 1
      });

      _defineProperty$3(this, "gradientStates", {
        colors: [],
        degree: 0,
        selectedId: null,
        css: ""
      });

      this.update(input);
    }

    _createClass(Color, [{
      key: "update",
      value: function update(input) {
        if (input === this.originColor) {
          return;
        }

        this.originColor = input;
        this.isGradient = false;
        var gradientColors = parseGradientString(input);
        var colorInput = input;

        if (gradientColors) {
          var _points$, _this$gradientSelecte;

          this.isGradient = true;
          var object = gradientColors;
          var points = object.points.map(function (c) {
            return genGradientPoint(c.left, c.color);
          });
          this.gradientStates = {
            colors: points,
            degree: object.degree,
            selectedId: ((_points$ = points[0]) === null || _points$ === void 0 ? void 0 : _points$.id) || null
          };
          this.gradientStates.css = this.linearGradient;
          colorInput = (_this$gradientSelecte = this.gradientSelectedPoint) === null || _this$gradientSelecte === void 0 ? void 0 : _this$gradientSelecte.color;
        }

        this.updateStates(colorInput);
      }
    }, {
      key: "saturation",
      get: function get() {
        return this.states.s;
      },
      set: function set(value) {
        this.states.s = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "value",
      get: function get() {
        return this.states.v;
      },
      set: function set(value) {
        this.states.v = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "hue",
      get: function get() {
        return this.states.h;
      },
      set: function set(value) {
        this.states.h = Math.max(0, Math.min(360, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "alpha",
      get: function get() {
        return this.states.a;
      },
      set: function set(value) {
        this.states.a = Math.max(0, Math.min(1, Math.round(value * 100) / 100));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "rgb",
      get: function get() {
        var _hsv2rgba = hsv2rgba(this.states),
            r = _hsv2rgba.r,
            g = _hsv2rgba.g,
            b = _hsv2rgba.b;

        return "rgb(".concat(mathRound$1(r), ", ").concat(mathRound$1(g), ", ").concat(mathRound$1(b), ")");
      }
    }, {
      key: "rgba",
      get: function get() {
        var _hsv2rgba2 = hsv2rgba(this.states),
            r = _hsv2rgba2.r,
            g = _hsv2rgba2.g,
            b = _hsv2rgba2.b,
            a = _hsv2rgba2.a;

        return "rgba(".concat(mathRound$1(r), ", ").concat(mathRound$1(g), ", ").concat(mathRound$1(b), ", ").concat(a, ")");
      }
    }, {
      key: "hsv",
      get: function get() {
        var _this$getHsva = this.getHsva(),
            h = _this$getHsva.h,
            s = _this$getHsva.s,
            v = _this$getHsva.v;

        return "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)");
      }
    }, {
      key: "hsva",
      get: function get() {
        var _this$getHsva2 = this.getHsva(),
            h = _this$getHsva2.h,
            s = _this$getHsva2.s,
            v = _this$getHsva2.v,
            a = _this$getHsva2.a;

        return "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(a, ")");
      }
    }, {
      key: "hsl",
      get: function get() {
        var _this$getHsla = this.getHsla(),
            h = _this$getHsla.h,
            s = _this$getHsla.s,
            l = _this$getHsla.l;

        return "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
      }
    }, {
      key: "hsla",
      get: function get() {
        var _this$getHsla2 = this.getHsla(),
            h = _this$getHsla2.h,
            s = _this$getHsla2.s,
            l = _this$getHsla2.l,
            a = _this$getHsla2.a;

        return "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(a, ")");
      }
    }, {
      key: "hex",
      get: function get() {
        return tinyColor(this.states).toHexString();
      }
    }, {
      key: "hex8",
      get: function get() {
        return tinyColor(this.states).toHex8String();
      }
    }, {
      key: "cmyk",
      get: function get() {
        var _this$getCmyk = this.getCmyk(),
            c = _this$getCmyk.c,
            m = _this$getCmyk.m,
            y = _this$getCmyk.y,
            k = _this$getCmyk.k;

        return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
      }
    }, {
      key: "css",
      get: function get() {
        if (this.isGradient) {
          return this.linearGradient;
        }

        return this.rgba;
      }
    }, {
      key: "linearGradient",
      get: function get() {
        var gradientColors = this.gradientColors,
            gradientDegree = this.gradientDegree;
        return gradientColors2string({
          points: gradientColors,
          degree: gradientDegree
        });
      }
    }, {
      key: "gradientColors",
      get: function get() {
        return this.gradientStates.colors;
      },
      set: function set(colors) {
        this.gradientStates.colors = colors;
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedId",
      get: function get() {
        return this.gradientStates.selectedId;
      },
      set: function set(id) {
        var _this$gradientSelecte2;

        if (id === this.gradientSelectedId) {
          return;
        }

        this.gradientStates.selectedId = id;
        this.updateStates((_this$gradientSelecte2 = this.gradientSelectedPoint) === null || _this$gradientSelecte2 === void 0 ? void 0 : _this$gradientSelecte2.color);
      }
    }, {
      key: "gradientDegree",
      get: function get() {
        return this.gradientStates.degree;
      },
      set: function set(degree) {
        this.gradientStates.degree = Math.max(0, Math.min(360, degree));
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedPoint",
      get: function get() {
        var gradientColors = this.gradientColors,
            gradientSelectedId = this.gradientSelectedId;
        return gradientColors.find(function (color) {
          return color.id === gradientSelectedId;
        });
      }
    }, {
      key: "getFormatsColorMap",
      value: function getFormatsColorMap() {
        return {
          HEX: this.hex,
          CMYK: this.cmyk,
          RGB: this.rgb,
          RGBA: this.rgba,
          HSL: this.hsl,
          HSLA: this.hsla,
          HSV: this.hsv,
          HSVA: this.hsva,
          CSS: this.css
        };
      }
    }, {
      key: "updateCurrentGradientColor",
      value: function updateCurrentGradientColor() {
        var isGradient = this.isGradient,
            gradientColors = this.gradientColors,
            gradientSelectedId = this.gradientSelectedId;
        var length = gradientColors.length;
        var current = this.gradientSelectedPoint;

        if (!isGradient || length === 0 || !current) {
          return false;
        }

        var index = gradientColors.findIndex(function (color) {
          return color.id === gradientSelectedId;
        });

        var newColor = _objectSpread$g(_objectSpread$g({}, current), {}, {
          color: this.rgba
        });

        gradientColors.splice(index, 1, newColor);
        this.gradientColors = gradientColors;
        return this;
      }
    }, {
      key: "updateStates",
      value: function updateStates(input) {
        var color = tinyColor(cmykInputToColor(input));
        var hsva = color.toHsv();
        this.states = hsva;
      }
    }, {
      key: "getRgba",
      value: function getRgba() {
        var _hsv2rgba3 = hsv2rgba(this.states),
            r = _hsv2rgba3.r,
            g = _hsv2rgba3.g,
            b = _hsv2rgba3.b,
            a = _hsv2rgba3.a;

        return {
          r: mathRound$1(r),
          g: mathRound$1(g),
          b: mathRound$1(b),
          a: a
        };
      }
    }, {
      key: "getCmyk",
      value: function getCmyk() {
        var _this$getRgba = this.getRgba(),
            r = _this$getRgba.r,
            g = _this$getRgba.g,
            b = _this$getRgba.b;

        var _rgb2cmyk = rgb2cmyk(r, g, b),
            _rgb2cmyk2 = _slicedToArray(_rgb2cmyk, 4),
            c = _rgb2cmyk2[0],
            m = _rgb2cmyk2[1],
            y = _rgb2cmyk2[2],
            k = _rgb2cmyk2[3];

        return {
          c: mathRound$1(c * 100),
          m: mathRound$1(m * 100),
          y: mathRound$1(y * 100),
          k: mathRound$1(k * 100)
        };
      }
    }, {
      key: "getHsva",
      value: function getHsva() {
        var _hsv2hsva = hsv2hsva(this.states),
            h = _hsv2hsva.h,
            s = _hsv2hsva.s,
            v = _hsv2hsva.v,
            a = _hsv2hsva.a;

        h = mathRound$1(h);
        s = mathRound$1(s * 100);
        v = mathRound$1(v * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          v: v,
          a: a
        };
      }
    }, {
      key: "getHsla",
      value: function getHsla() {
        var _hsv2hsla = hsv2hsla(this.states),
            h = _hsv2hsla.h,
            s = _hsv2hsla.s,
            l = _hsv2hsla.l,
            a = _hsv2hsla.a;

        h = mathRound$1(h);
        s = mathRound$1(s * 100);
        l = mathRound$1(l * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          l: l,
          a: a
        };
      }
    }, {
      key: "equals",
      value: function equals(color) {
        return tinyColor.equals(this.rgba, color);
      }
    }], [{
      key: "isValid",
      value: function isValid(color) {
        if (parseGradientString(color)) {
          return true;
        }

        return tinyColor(color).isValid();
      }
    }, {
      key: "hsva2color",
      value: function hsva2color(h, s, v, a) {
        return tinyColor({
          h: h,
          s: s,
          v: v,
          a: a
        }).toHsvString();
      }
    }, {
      key: "hsla2color",
      value: function hsla2color(h, s, l, a) {
        return tinyColor({
          h: h,
          s: s,
          l: l,
          a: a
        }).toHslString();
      }
    }, {
      key: "rgba2color",
      value: function rgba2color(r, g, b, a) {
        return tinyColor({
          r: r,
          g: g,
          b: b,
          a: a
        }).toHsvString();
      }
    }, {
      key: "hex2color",
      value: function hex2color(hex, a) {
        var color = tinyColor(hex);
        color.setAlpha(a);
        return color.toHexString();
      }
    }, {
      key: "object2color",
      value: function object2color(object, format) {
        if (format === "CMYK") {
          var c = object.c,
              m = object.m,
              y = object.y,
              k = object.k;
          return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
        }

        var color = tinyColor(object, {
          format: format
        });
        return color.toRgbString();
      }
    }]);

    return Color;
  }();

  _defineProperty$3(Color, "isGradientColor", function (input) {
    return !!isGradientColor(input);
  });

  _defineProperty$3(Color, "compare", function (color1, color2) {
    var isGradientColor1 = Color.isGradientColor(color1);
    var isGradientColor2 = Color.isGradientColor(color2);

    if (isGradientColor1 && isGradientColor2) {
      var gradientColor1 = gradientColors2string(parseGradientString(color1));
      var gradientColor2 = gradientColors2string(parseGradientString(color2));
      return gradientColor1 === gradientColor2;
    }

    if (!isGradientColor1 && !isGradientColor2) {
      return tinyColor.equals(color1, color2);
    }

    return false;
  });

  var COLOR_OBJECT_OUTPUT_KEYS = ["alpha", "css", "hex", "hex8", "hsl", "hsla", "hsv", "hsva", "rgb", "rgba", "saturation", "value", "isGradient"];
  var getColorObject = function getColorObject(color) {
    if (!color) {
      return null;
    }

    var colorObject = /* @__PURE__ */Object.create(null);
    COLOR_OBJECT_OUTPUT_KEYS.forEach(function (key) {
      return colorObject[key] = color[key];
    });

    if (color.isGradient) {
      colorObject.linearGradient = color.linearGradient;
    }

    return colorObject;
  };

  var colorPickerDefaultProps = {
    closeBtn: true,
    colorModes: ["monochrome", "linear-gradient"],
    enableAlpha: false,
    format: "RGB",
    multiple: false,
    defaultRecentColors: []
  };

  var DELETE_KEYS = ["delete", "backspace"];

  var LinearGradient = function LinearGradient(props) {
    var _allGradientColors$, _allGradientColors;

    var onChange = props.onChange,
        color = props.color,
        disabled = props.disabled;
    var baseClassName = useClassNames();

    var _useCommonClassName = useCommonClassName$1(),
        statusClassNames = _useCommonClassName.STATUS;

    var refSlider = React.useRef(null);
    var sliderRectRef = React.useRef({
      left: 0,
      width: GRADIENT_SLIDER_DEFAULT_WIDTH
    });
    var isDragging = React.useRef(false);
    var isMoved = React.useRef(false);
    var degree = React.useRef(props.color.gradientDegree);

    var _useState = React.useState(props.color.gradientSelectedId),
        _useState2 = _slicedToArray(_useState, 2),
        selectedId = _useState2[0],
        setSelectedId = _useState2[1];

    var selectedRef = React.useRef(props.color.gradientSelectedId);
    var colors = React.useRef(cloneDeep_1(color.gradientColors));
    React.useEffect(function () {
      degree.current = color === null || color === void 0 ? void 0 : color.gradientDegree;
      setSelectedId(color.gradientSelectedId);
      selectedRef.current = color.gradientSelectedId;
      colors.current = cloneDeep_1(color.gradientColors);
    }, [color]);

    var updateSliderRect = function updateSliderRect() {
      var rect = refSlider.current.getBoundingClientRect();
      sliderRectRef.current = {
        left: rect.left,
        width: rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH
      };
    };

    var handleChange = React.useCallback(function (key, payload, addUsedColor) {
      if (disabled) {
        return;
      }

      onChange({
        key: key,
        payload: payload,
        addUsedColor: addUsedColor
      });
    }, [onChange, disabled]);

    var handleDegreeChange = function handleDegreeChange(value) {
      if (props.disabled || value === props.color.gradientDegree) {
        return;
      }

      degree.current = value;
      handleChange("degree", value, true);
    };

    var handleSelectedIdChange = function handleSelectedIdChange(value) {
      if (props.disabled) {
        return;
      }

      setSelectedId(value);
      selectedRef.current = value;
      handleChange("selectedId", value);
    };

    var handleColorsChange = React.useCallback(function (value, isEnded) {
      if (props.disabled) {
        return;
      }

      colors.current = value;
      handleChange("colors", value, isEnded);
    }, [props.disabled, handleChange]);
    var updateActiveThumbLeft = React.useCallback(function (left) {
      var index = colors.current.findIndex(function (c) {
        return c.id === selectedRef.current;
      });

      if (index === -1) {
        return;
      }

      var point = colors.current[index];
      var formatLeft = Math.max(0, Math.min(sliderRectRef.current.width, left));
      var percentLeft = formatLeft / sliderRectRef.current.width * 100;
      var newColors = colors.current.map(function (item, i) {
        return index !== i ? item : {
          color: point.color,
          left: percentLeft,
          id: point.id
        };
      });
      handleColorsChange(newColors);
    }, [handleColorsChange]);

    var handleStart = function handleStart(id, e) {
      if (isDragging.current || props.disabled) {
        return;
      }

      selectedRef.current = id;
      setSelectedId(id);
      isMoved.current = false;
      isDragging.current = true;
      e.preventDefault();
      e.stopPropagation();
      refSlider.current.focus();
    };

    var handleMove = React.useCallback(function (e) {
      if (!isDragging.current || disabled) {
        return;
      }

      var rect = refSlider.current.getBoundingClientRect();
      var left = e.clientX - rect.x;
      isMoved.current = true;
      updateActiveThumbLeft(left);
    }, [disabled, updateActiveThumbLeft]);
    var handleEnd = React.useCallback(function () {
      if (!isDragging.current) {
        return;
      }

      setTimeout(function () {
        isDragging.current = false;
      }, 0);

      if (isMoved.current) {
        handleColorsChange(colors.current, true);
        isMoved.current = false;
      }
    }, [handleColorsChange]);

    var handleKeyup = function handleKeyup(e) {
      if (props.disabled) {
        return;
      }

      var points = _toConsumableArray(colors.current);

      var pos = points.findIndex(function (c) {
        return c.id === selectedRef.current;
      });
      var length = points.length;

      if (DELETE_KEYS.includes(e.key.toLocaleLowerCase()) && length > 2 && pos >= 0 && pos <= length - 1) {
        points.splice(pos, 1);

        if (!points[pos]) {
          pos = points[pos + 1] ? pos + 1 : points[pos - 1] ? pos - 1 : 0;
        }

        var current = points[pos];
        handleColorsChange(points, true);
        handleSelectedIdChange(current === null || current === void 0 ? void 0 : current.id);
      }
    };

    var handleThumbBarClick = function handleThumbBarClick(e) {
      if (props.disabled) {
        return;
      }

      updateSliderRect();
      var left = e.clientX - sliderRectRef.current.left;
      left = Math.max(0, Math.min(sliderRectRef.current.width, left));
      var percentLeft = left / sliderRectRef.current.width * 100;
      var newPoint = genGradientPoint(percentLeft, props.color.rgba);

      var newColors = _toConsumableArray(colors.current);

      newColors.push(newPoint);
      handleColorsChange(newColors, true);
      handleSelectedIdChange(newPoint.id);
    };

    React.useEffect(function () {
      updateSliderRect();
      window.addEventListener("mousemove", handleMove, false);
      window.addEventListener("mouseup", handleEnd, false);
      window.addEventListener("contextmenu", handleEnd, false);
      return function () {
        window.removeEventListener("mousemove", handleMove, false);
        window.removeEventListener("mouseup", handleEnd, false);
        window.removeEventListener("contextmenu", handleEnd, false);
      };
    }, []);
    var gradientColors = props.color.gradientColors;
    var thumbBackground = gradientColors2string({
      points: gradientColors,
      degree: 90
    });

    var handleClickThumb = function handleClickThumb(e, t) {
      handleSelectedIdChange(t.id);
      e.stopPropagation();
    };

    var allGradientColors = _toConsumableArray(colors.current);

    var _genGradientPoint = genGradientPoint(0, (_allGradientColors$ = allGradientColors[0]) === null || _allGradientColors$ === void 0 ? void 0 : _allGradientColors$.color),
        leftColor = _genGradientPoint.color;

    var _genGradientPoint2 = genGradientPoint(100, (_allGradientColors = allGradientColors[allGradientColors.length - 1]) === null || _allGradientColors === void 0 ? void 0 : _allGradientColors.color),
        rightColor = _genGradientPoint2.color;

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__gradient")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__gradient-slider"),
      style: {
        background: "linear-gradient(90deg, ".concat(leftColor, " 0%, ").concat(leftColor, " 50%, ").concat(rightColor, " 50%, ").concat(rightColor, " 100%)")
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(baseClassName, "__slider"), "".concat(baseClassName, "--bg-alpha")),
      onKeyUp: handleKeyup,
      tabIndex: 0,
      ref: refSlider
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "gradient-thumbs",
      onClick: handleThumbBarClick,
      style: {
        background: thumbBackground
      }
    }, colors.current.map(function (t) {
      var left = "".concat(Math.round(t.left * 100) / 100, "%");
      return /* @__PURE__ */React__default["default"].createElement("li", {
        className: classNames$1(["".concat(baseClassName, "__thumb"), "gradient-thumbs__item", selectedId === t.id ? statusClassNames.active : ""]),
        key: t.id,
        title: "".concat(t.color, " ").concat(left),
        style: {
          color: t.color,
          left: left
        },
        onClick: function onClick(e) {
          return handleClickThumb(e, t);
        },
        onMouseDown: function onMouseDown(e) {
          return handleStart(t.id, e);
        }
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: classNames$1(["gradient-thumbs__item-inner", "".concat(baseClassName, "--bg-alpha")])
      }));
    })))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__gradient-degree"),
      title: "".concat(degree, "deg")
    }, /* @__PURE__ */React__default["default"].createElement(InputNumber, {
      theme: "normal",
      min: 0,
      max: 360,
      step: 1,
      size: "small",
      format: function format(value) {
        return "".concat(value, "\xB0");
      },
      value: degree.current,
      onBlur: handleDegreeChange,
      onEnter: handleDegreeChange,
      disabled: props.disabled
    })));
  };

  var LinearGradient$1 = /*#__PURE__*/React__default["default"].memo(LinearGradient);

  var useDrag = function useDrag(ref, options) {
    var start = options.start,
        end = options.end,
        drag = options.drag;
    var isDraggingRef = React.useRef(false);

    var getCoordinate = function getCoordinate(event) {
      try {
        var _ref$current;

        var rect = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getBoundingClientRect();
        var left = event.clientX - rect.left;
        var top = event.clientY - rect.top;
        return {
          y: Math.min(Math.max(0, top), rect.height),
          x: Math.min(Math.max(0, left), rect.width)
        };
      } catch (error) {
        return {
          y: null,
          x: null
        };
      }
    };

    var handlePointerMove = function handlePointerMove(e) {
      if (isDraggingRef.current) drag(getCoordinate(e), e);
    };

    var handlePointerUp = function handlePointerUp(e) {
      isDraggingRef.current = false;
      end(getCoordinate(e), e);
      window.removeEventListener("mouseup", handlePointerUp);
      window.removeEventListener("mousemove", handlePointerMove);
    };

    var handlePointerDown = function handlePointerDown(e) {
      isDraggingRef.current = true;
      start(getCoordinate(e), e);
      window.addEventListener("mouseup", handlePointerUp);
      window.addEventListener("mousemove", handlePointerMove);
    };

    React.useEffect(function () {
      var element = ref.current;

      if (element) {
        element.addEventListener("mousedown", handlePointerDown);
      }

      return function () {
        if (element) {
          element.removeEventListener("mousedown", handlePointerDown);
        }

        window.removeEventListener("mouseup", handlePointerUp);
        window.removeEventListener("mousemove", handlePointerMove);
      };
    }, []);
    return {
      isDragging: isDraggingRef.current
    };
  };

  function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$f(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Saturation = function Saturation(props) {
    var color = props.color,
        disabled = props.disabled,
        onChange = props.onChange,
        baseClassName = props.baseClassName;
    var panelRef = React.useRef(null);
    var thumbRef = React.useRef(null);
    var panelRectRef = React.useRef({
      width: SATURATION_PANEL_DEFAULT_WIDTH,
      height: SATURATION_PANEL_DEFAULT_HEIGHT
    });

    var styles = function styles() {
      var saturation = color.saturation,
          value = color.value,
          rgb = color.rgb;
      var _panelRectRef$current = panelRectRef.current,
          width = _panelRectRef$current.width,
          height = _panelRectRef$current.height;
      var top = Math.round((1 - value) * height);
      var left = Math.round(saturation * width);
      return {
        color: rgb,
        left: "".concat(left, "px"),
        top: "".concat(top, "px")
      };
    };

    var getSaturationAndValueByCoordinate = function getSaturationAndValueByCoordinate(coordinate) {
      var _panelRectRef$current2 = panelRectRef.current,
          width = _panelRectRef$current2.width,
          height = _panelRectRef$current2.height;
      var x = coordinate.x,
          y = coordinate.y;
      var saturation = Math.round(x / width * 100);
      var value = Math.round((1 - y / height) * 100);
      return {
        saturation: saturation,
        value: value
      };
    };

    var isDragging = React.useRef(false);
    var handleDrag = React.useCallback(function (_ref, isEnd) {
      var x = _ref.x,
          y = _ref.y;

      if (disabled) {
        return;
      }

      isDragging.current = true;

      var _getSaturationAndValu = getSaturationAndValueByCoordinate({
        x: x,
        y: y
      }),
          saturation = _getSaturationAndValu.saturation,
          value = _getSaturationAndValu.value;

      onChange({
        saturation: saturation / 100,
        value: value / 100,
        addUsedColor: isEnd
      });
    }, [disabled, onChange]);
    var handleDragEnd = React.useCallback(function (coordinate) {
      if (disabled) {
        return;
      }

      isDragging.current = false;
      handleDrag(coordinate, true);
    }, []);
    useDrag(panelRef, {
      start: function start() {
        panelRectRef.current.width = panelRef.current.offsetWidth;
        panelRectRef.current.height = panelRef.current.offsetHeight;
      },
      end: function end(coordinate) {
        handleDragEnd(coordinate);
      },
      drag: function drag(coordinate) {
        handleDrag(coordinate);
      }
    });
    React.useEffect(function () {
      panelRectRef.current.width = panelRef.current.offsetWidth || SATURATION_PANEL_DEFAULT_WIDTH;
      panelRectRef.current.height = panelRef.current.offsetHeight || SATURATION_PANEL_DEFAULT_HEIGHT;
    }, [handleDrag, handleDragEnd]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__saturation"),
      ref: panelRef,
      style: {
        background: "hsl(".concat(color.hue, ", 100%, 50%)")
      }
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(baseClassName, "__thumb"),
      role: "slider",
      tabIndex: 0,
      ref: thumbRef,
      style: _objectSpread$f({}, styles())
    }));
  };

  var SaturationPanel = /*#__PURE__*/React__default["default"].memo(Saturation);

  function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var ColorSlider = function ColorSlider(props) {
    var color = props.color,
        _props$className = props.className,
        className = _props$className === void 0 ? "" : _props$className,
        _props$value = props.value,
        value = _props$value === void 0 ? 0 : _props$value,
        _props$railStyle = props.railStyle,
        railStyle = _props$railStyle === void 0 ? {} : _props$railStyle,
        _props$maxValue = props.maxValue,
        maxValue = _props$maxValue === void 0 ? 360 : _props$maxValue,
        baseClassName = props.baseClassName,
        disabled = props.disabled,
        onChange = props.onChange,
        type = props.type;
    var panelRef = React.useRef(null);
    var thumbRef = React.useRef(null);
    var isMovedRef = React.useRef(false);
    var panelRectRef = React.useRef({
      width: SLIDER_DEFAULT_WIDTH
    });

    var styles = function styles() {
      var width = panelRectRef.current.width;

      if (!width) {
        return;
      }

      var left = Math.round(Number(value) / Number(maxValue) * width);
      return {
        left: "".concat(left, "px"),
        color: color.rgb
      };
    };

    var handleDrag = function handleDrag(coordinate, isEnded) {
      if (disabled) {
        return;
      }

      var width = panelRectRef.current.width;
      var x = coordinate.x;
      var value2 = Math.round(x / width * Number(maxValue) * 100) / 100;
      isMovedRef.current = true;
      onChange(value2, isEnded);
    };

    var handleDragEnd = function handleDragEnd(coordinate) {
      if (disabled || !isMovedRef.current) {
        return;
      }

      handleDrag(coordinate, true);
      isMovedRef.current = false;
    };

    useDrag(panelRef, {
      start: function start(coordinate) {
        panelRectRef.current.width = panelRef.current.offsetWidth;
        isMovedRef.current = false;
        handleDrag(coordinate);
      },
      end: function end(coordinate) {
        handleDragEnd(coordinate);
      },
      drag: function drag(coordinate) {
        handleDrag(coordinate);
      }
    });
    React.useEffect(function () {
      panelRectRef.current.width = panelRef.current.offsetWidth || SLIDER_DEFAULT_WIDTH;
    }, []);
    var paddingStyle = {
      background: "linear-gradient(90deg, rgba(0,0,0,.0) 0%, rgba(0,0,0,.0) 93%, ".concat(props.color.rgb, " 93%, ").concat(props.color.rgb, " 100%)")
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(baseClassName, "__slider-wrapper"), "".concat(baseClassName, "__slider-wrapper--").concat(type, "-type"))
    }, type === "alpha" && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__slider-padding"),
      style: paddingStyle
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(baseClassName, "__slider"), className),
      ref: panelRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__rail"),
      style: railStyle
    }), /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(baseClassName, "__thumb"),
      role: "slider",
      tabIndex: 0,
      ref: thumbRef,
      style: _objectSpread$e({}, styles())
    })));
  };

  var ColorSlider$1 = /*#__PURE__*/React__default["default"].memo(ColorSlider);

  var HUESlider = function HUESlider(props) {
    var color = props.color,
        baseClassName = props.baseClassName,
        disabled = props.disabled,
        onChange = props.onChange;
    return /* @__PURE__ */React__default["default"].createElement(ColorSlider$1, {
      disabled: disabled,
      baseClassName: baseClassName,
      className: "".concat(baseClassName, "__hue"),
      color: color,
      value: color.hue,
      type: "hue",
      onChange: onChange
    });
  };

  var HUESlider$1 = /*#__PURE__*/React__default["default"].memo(HUESlider);

  var _excluded$3 = ["color", "baseClassName", "onChange"];

  function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Alpha = function Alpha(props) {
    var color = props.color,
        baseClassName = props.baseClassName,
        onChange = props.onChange,
        rest = _objectWithoutProperties$2(props, _excluded$3);

    var handleChange = function handleChange(v, isDragEnd) {
      onChange(v / 100, isDragEnd);
    };

    var railStyle = {
      background: "linear-gradient(to right, rgba(0, 0, 0, 0), ".concat(props.color.rgb, ")")
    };
    return /* @__PURE__ */React__default["default"].createElement(ColorSlider$1, _objectSpread$d({
      baseClassName: baseClassName,
      className: classNames$1(["".concat(baseClassName, "__alpha"), "".concat(baseClassName, "--bg-alpha")]),
      color: color,
      value: color.alpha * 100,
      onChange: handleChange,
      railStyle: railStyle,
      type: "alpha",
      maxValue: 100
    }, rest));
  };

  var AlphaSlider = /*#__PURE__*/React__default["default"].memo(Alpha);

  var FORMAT_INPUT_CONFIG = {
    RGB: [{
      key: "r",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "g",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "b",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    HSV: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "v",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    HSL: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "l",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    CMYK: [{
      key: "c",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "m",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "y",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "k",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    CSS: [{
      key: "css",
      type: "input",
      flex: 3
    }],
    HEX: [{
      key: "hex",
      type: "input",
      flex: 3
    }]
  };

  function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var FormatInputs = function FormatInputs(props) {
    var format = props.format,
        enableAlpha = props.enableAlpha,
        inputProps = props.inputProps,
        disabled = props.disabled,
        onInputChange = props.onInputChange,
        color = props.color;
    var formatValue = React.useRef({});
    var lastModelValue = React.useRef({});

    var object2color = function object2color(f) {
      return Color.object2color(formatValue.current, f);
    };

    var getFormatColorMap = function getFormatColorMap(type) {
      if (type === "encode") {
        return {
          HSV: color.getHsva(),
          HSL: color.getHsla(),
          RGB: color.getRgba(),
          CMYK: color.getCmyk(),
          CSS: {
            css: color.css
          },
          HEX: {
            hex: color.hex
          }
        };
      }

      return {
        HSV: object2color("HSV"),
        HSL: object2color("HSL"),
        RGB: object2color("RGB"),
        CMYK: object2color("CMYK"),
        CSS: formatValue.current.css,
        HEX: formatValue.current.hex
      };
    };

    var updateModelValue = function updateModelValue() {
      var values = getFormatColorMap("encode")[format];
      values.a = Math.round(color.alpha * 100);
      Object.keys(values).forEach(function (key) {
        formatValue.current[key] = values[key];
        lastModelValue.current[key] = values[key];
      });
    };

    updateModelValue();
    var throttleUpdate = lodash.exports.throttle(updateModelValue, 100);

    var inputConfigs = function inputConfigs() {
      var configs = _toConsumableArray(FORMAT_INPUT_CONFIG[format]);

      if (enableAlpha) {
        configs.push({
          type: "inputNumber",
          key: "a",
          min: 0,
          max: 100,
          format: function format(value) {
            return "".concat(value, "%");
          },
          flex: 1.15
        });
      }

      return configs;
    };

    var handleInputChange = function handleInputChange(key, v) {
      if (v === lastModelValue[key]) {
        return;
      }

      formatValue.current[key] = v;
      lastModelValue.current[key] = v;
      var value = getFormatColorMap("decode")[format];
      onInputChange(value, formatValue.current.a / 100, key, v);
    };

    React.useEffect(function () {
      throttleUpdate();
    }, [color.saturation, color.hue, color.value, color.alpha, format, throttleUpdate]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "input-group"
    }, inputConfigs().map(function (config) {
      var commonProps = _objectSpread$c(_objectSpread$c({}, inputProps), {}, {
        title: formatValue.current[config.key],
        value: formatValue.current[config.key],
        align: "center",
        disabled: disabled,
        size: "small",
        onBlur: function onBlur(v) {
          return handleInputChange(config.key, v);
        },
        onEnter: function onEnter(v) {
          return handleInputChange(config.key, v);
        }
      });

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "input-group__item",
        key: config.key,
        style: {
          flex: config.flex || 1
        }
      }, config.type === "input" ? /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$c(_objectSpread$c({}, commonProps), {}, {
        maxlength: format === "HEX" ? 9 : void 0
      })) : /* @__PURE__ */React__default["default"].createElement(InputNumber, _objectSpread$c(_objectSpread$c({}, commonProps), {}, {
        min: config.min,
        max: config.max,
        step: 1,
        format: config.format,
        theme: "normal"
      })));
    }));
  };

  var FormatInput = /*#__PURE__*/React__default["default"].memo(FormatInputs);

  function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var FormatPanel = function FormatPanel(props) {
    var baseClassName = props.baseClassName,
        format = props.format,
        onModeChange = props.onModeChange;

    var _useState = React.useState(format),
        _useState2 = _slicedToArray(_useState, 2),
        formatMode = _useState2[0],
        setFormatMode = _useState2[1];

    var handleModeChange = function handleModeChange(v) {
      setFormatMode(v);
      onModeChange(v);
    };

    var formats = _toConsumableArray(FORMATS);

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__format")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__format--item")
    }, /* @__PURE__ */React__default["default"].createElement(Select, {
      size: "small",
      className: "".concat(baseClassName, "__format-mode-select"),
      popupProps: {
        overlayClassName: "".concat(baseClassName, "__select-options")
      },
      autoWidth: true,
      value: formatMode,
      onChange: handleModeChange
    }, formats.map(function (item) {
      return /* @__PURE__ */React__default["default"].createElement(Select.Option, {
        key: item,
        value: item,
        label: lodash.exports.upperCase(item),
        style: {
          fontSize: "12px"
        }
      });
    }))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__format--item")
    }, /* @__PURE__ */React__default["default"].createElement(FormatInput, _objectSpread$b(_objectSpread$b({}, props), {}, {
      format: formatMode
    }))));
  };

  var FormatPanel$1 = /*#__PURE__*/React__default["default"].memo(FormatPanel);

  var Swatches = function Swatches(props) {
    var baseClassName = props.baseClassName,
        _props$colors = props.colors,
        colors = _props$colors === void 0 ? [] : _props$colors,
        _props$title = props.title,
        title = _props$title === void 0 ? "\u7CFB\u7EDF\u8272\u5F69" : _props$title,
        _props$editable = props.editable,
        editable = _props$editable === void 0 ? false : _props$editable,
        onChange = props.onChange,
        disabled = props.disabled,
        onSetColor = props.onSetColor,
        handleAddColor = props.handleAddColor;

    var _useGlobalIcon = useGlobalIcon({
      DeleteIcon: DeleteIcon,
      AddIcon: AddIcon
    }),
        DeleteIcon$1 = _useGlobalIcon.DeleteIcon,
        AddIcon$1 = _useGlobalIcon.AddIcon;

    var swatchesClass = "".concat(baseClassName, "__swatches");

    var _useCommonClassName = useCommonClassName$1(),
        statusClassNames = _useCommonClassName.STATUS;

    var isEqualCurrentColor = function isEqualCurrentColor(color) {
      return Color.compare(color, props.color.css);
    };

    var selectedColorIndex = function selectedColorIndex() {
      return colors.findIndex(function (color) {
        return isEqualCurrentColor(color);
      });
    };

    var handleRemoveColor = function handleRemoveColor() {
      var selectedIndex = selectedColorIndex();

      if (selectedIndex > -1) {
        var newColors = colors.filter(function (item, index) {
          return index !== selectedIndex;
        });
        onChange(newColors);
      }
    };

    var handleClick = function handleClick(color) {
      return onSetColor(color);
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: swatchesClass
    }, /* @__PURE__ */React__default["default"].createElement("h3", {
      className: "".concat(swatchesClass, "--title")
    }, /* @__PURE__ */React__default["default"].createElement("span", null, title), editable && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(swatchesClass, "--actions")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      role: "button",
      className: "".concat(baseClassName, "__icon"),
      onClick: function onClick() {
        return handleAddColor();
      }
    }, /* @__PURE__ */React__default["default"].createElement(AddIcon$1, null)), colors.length > 0 ? /* @__PURE__ */React__default["default"].createElement("span", {
      role: "button",
      className: "".concat(baseClassName, "__icon"),
      onClick: function onClick() {
        return handleRemoveColor();
      }
    }, /* @__PURE__ */React__default["default"].createElement(DeleteIcon$1, null)) : null)), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(swatchesClass, "--items"), "narrow-scrollbar")
    }, colors.map(function (color) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        className: classNames$1("".concat(swatchesClass, "--item"), isEqualCurrentColor(color) && editable ? statusClassNames.active : ""),
        key: color,
        onClick: function onClick() {
          if (disabled) {
            return;
          }

          handleClick(color);
        }
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(swatchesClass, "--item__color"), "".concat(baseClassName, "--bg-alpha"))
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(swatchesClass, "--item__inner"),
        style: {
          background: color
        }
      })));
    })));
  };

  var SwatchesPanel = /*#__PURE__*/React__default["default"].memo(Swatches);

  function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var mathRound = Math.round;
  var Panel = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var baseClassName = useClassNames();

    var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;

    var _useLocaleReceiver = useLocaleReceiver("colorPicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var value = props.value,
        disabled = props.disabled,
        onChange = props.onChange,
        _props$enableAlpha = props.enableAlpha,
        enableAlpha = _props$enableAlpha === void 0 ? false : _props$enableAlpha,
        format = props.format,
        onPaletteBarChange = props.onPaletteBarChange,
        swatchColors = props.swatchColors,
        className = props.className,
        _props$style = props.style,
        style = _props$style === void 0 ? {} : _props$style,
        togglePopup = props.togglePopup,
        closeBtn = props.closeBtn,
        _props$colorModes = props.colorModes,
        colorModes = _props$colorModes === void 0 ? ["linear-gradient", "monochrome"] : _props$colorModes;

    var _useControlled = useControlled(props, "value", onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        innerValue = _useControlled2[0],
        setInnerValue = _useControlled2[1];

    var colorInstanceRef = React.useRef(new Color(innerValue || DEFAULT_COLOR));
    var getmodeByColor = colorInstanceRef.current.isGradient ? "linear-gradient" : "monochrome";

    var _useState = React.useState((colorModes === null || colorModes === void 0 ? void 0 : colorModes.length) === 1 ? colorModes[0] : getmodeByColor),
        _useState2 = _slicedToArray(_useState, 2),
        mode = _useState2[0],
        setMode = _useState2[1];

    var _useState3 = React.useState(0),
        _useState4 = _slicedToArray(_useState3, 2),
        updateId = _useState4[0],
        setUpdateId = _useState4[1];

    var update = React.useCallback(function (value2) {
      colorInstanceRef.current.update(value2);
      setUpdateId(updateId + 1);
    }, [updateId]);
    var formatValue = React.useCallback(function () {
      if (mode === "linear-gradient") {
        return colorInstanceRef.current.linearGradient;
      }

      return colorInstanceRef.current.getFormatsColorMap()[format] || colorInstanceRef.current.css;
    }, [format, mode]);
    var emitColorChange = React.useCallback(function (trigger) {
      setInnerValue(formatValue(), {
        color: getColorObject(colorInstanceRef.current),
        trigger: trigger || "palette-saturation-brightness"
      });
    }, [formatValue, setInnerValue]);
    React.useEffect(function () {
      if (typeof value === "undefined" || mode === "linear-gradient") {
        return;
      }

      var newUniqColor = tinyColor(value).toRgb();
      var r = newUniqColor.r,
          g = newUniqColor.g,
          b = newUniqColor.b,
          a = newUniqColor.a;
      var newUniqRgbaColor = "rgba(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ", ").concat(a, ")");
      var newColor = new Color(value);
      var formattedColor = newUniqRgbaColor || DEFAULT_COLOR;
      var currentColor = colorInstanceRef.current.rgba;
      var isInRightMode = mode === "monochrome" && !newColor.isGradient;

      if (formattedColor !== currentColor && isInRightMode) {
        update(value);
        setMode(newColor.isGradient ? "linear-gradient" : "monochrome");
      }
    }, [value, formatValue, setInnerValue, mode, update]);
    React.useEffect(function () {
      if (colorModes.length === 1) {
        setMode(colorModes[0]);
      } else {
        setMode(getmodeByColor);
      }
    }, [colorModes, getmodeByColor]);
    var formatRef = React.useRef(colorInstanceRef.current.isGradient ? "CSS" : "RGB");
    var onRecentColorsChange = props.onRecentColorsChange;

    var _useControlled3 = useControlled(props, "recentColors", onRecentColorsChange, {
      defaultRecentColors: colorPickerDefaultProps.recentColors
    }),
        _useControlled4 = _slicedToArray(_useControlled3, 2),
        recentlyUsedColors = _useControlled4[0],
        setRecentlyUsedColors = _useControlled4[1];

    var baseProps = {
      color: colorInstanceRef.current,
      disabled: disabled,
      baseClassName: baseClassName
    };

    var handleModeChange = function handleModeChange(value2) {
      setMode(value2);
      var _colorInstanceRef$cur = colorInstanceRef.current,
          rgba = _colorInstanceRef$cur.rgba,
          gradientColors = _colorInstanceRef$cur.gradientColors,
          linearGradient = _colorInstanceRef$cur.linearGradient;

      if (value2 === "linear-gradient") {
        colorInstanceRef.current = new Color(gradientColors.length > 0 ? linearGradient : DEFAULT_LINEAR_GRADIENT);
        return;
      }

      colorInstanceRef.current = new Color(rgba);
    };

    var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange(colors) {
      setRecentlyUsedColors(colors);
    };

    var addRecentlyUsedColor = function addRecentlyUsedColor() {
      var colors = _toConsumableArray(recentlyUsedColors || []);

      var _colorInstanceRef$cur2 = colorInstanceRef.current,
          isGradient2 = _colorInstanceRef$cur2.isGradient,
          linearGradient = _colorInstanceRef$cur2.linearGradient,
          rgba = _colorInstanceRef$cur2.rgba;
      var currentColor = isGradient2 ? linearGradient : rgba;
      var index = colors.indexOf(currentColor);

      if (index > -1) {
        colors.splice(index, 1);
      }

      colors.unshift(currentColor);

      if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
        colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
      }

      handleRecentlyUsedColorsChange(colors);
    };

    var handleSaturationChange = function handleSaturationChange(_ref) {
      var saturation = _ref.saturation,
          value2 = _ref.value;
      var _colorInstanceRef$cur3 = colorInstanceRef.current,
          sat = _colorInstanceRef$cur3.saturation,
          val = _colorInstanceRef$cur3.value;
      var changeTrigger = "palette-saturation-brightness";

      if (value2 !== val && saturation !== sat) {
        changeTrigger = "palette-saturation-brightness";
        colorInstanceRef.current.saturation = saturation;
        colorInstanceRef.current.value = value2;
      } else if (saturation !== sat) {
        changeTrigger = "palette-saturation";
        colorInstanceRef.current.saturation = saturation;
      } else if (value2 !== val) {
        changeTrigger = "palette-brightness";
        colorInstanceRef.current.value = value2;
      } else {
        return;
      }

      emitColorChange(changeTrigger);
    };

    var handleHUEChange = function handleHUEChange(hue) {
      colorInstanceRef.current.hue = hue;
      emitColorChange("palette-hue-bar");
      onPaletteBarChange === null || onPaletteBarChange === void 0 ? void 0 : onPaletteBarChange({
        color: getColorObject(colorInstanceRef.current)
      });
    };

    var handleAlphaChange = function handleAlphaChange(alpha) {
      colorInstanceRef.current.alpha = alpha;
      emitColorChange("palette-alpha-bar");
      onPaletteBarChange === null || onPaletteBarChange === void 0 ? void 0 : onPaletteBarChange({
        color: getColorObject(colorInstanceRef.current)
      });
    };

    var handleGradientChange = function handleGradientChange(_ref2) {
      var key = _ref2.key,
          payload = _ref2.payload;
      var trigger = "palette-saturation-brightness";

      switch (key) {
        case "degree":
          colorInstanceRef.current.gradientDegree = payload;
          trigger = "input";
          break;

        case "selectedId":
          colorInstanceRef.current.gradientSelectedId = payload;
          setUpdateId(function (prevId) {
            return prevId + 1;
          });
          break;

        case "colors":
          colorInstanceRef.current.gradientColors = payload;
          break;
      }

      emitColorChange(trigger);
    };

    var handleFormatModeChange = function handleFormatModeChange(format2) {
      return formatRef.current = format2;
    };

    var handleInputChange = function handleInputChange(input, alpha) {
      update(input);
      colorInstanceRef.current.alpha = alpha;
      emitColorChange("input");
    };

    var SwatchesArea = /*#__PURE__*/React__default["default"].memo(function () {
      var _systemColors;

      var showUsedColors = recentlyUsedColors !== null && recentlyUsedColors !== false;
      var systemColors = swatchColors;

      if (systemColors === void 0) {
        systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
      }

      var showSystemColors = ((_systemColors = systemColors) === null || _systemColors === void 0 ? void 0 : _systemColors.length) > 0;

      if (!showSystemColors && !showUsedColors) {
        return null;
      }

      var handleSetColor = function handleSetColor(value2) {
        var isGradientValue = Color.isGradientColor(value2);
        var color = colorInstanceRef.current;

        if (isGradientValue) {
          if (colorModes.includes("linear-gradient")) {
            setMode("linear-gradient");
            color.update(value2);
            color.updateCurrentGradientColor();
          } else {
            console.warn("\u8BE5\u6A21\u5F0F\u4E0D\u652F\u6301\u6E10\u53D8\u8272");
          }
        } else if (mode === "linear-gradient") {
          color.updateStates(value2);
          color.updateCurrentGradientColor();
        } else {
          color.update(value2);
        }

        emitColorChange();
      };

      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(baseClassName, "__swatches-wrap")
      }, showUsedColors && /* @__PURE__ */React__default["default"].createElement(SwatchesPanel, _objectSpread$a(_objectSpread$a({}, baseProps), {}, {
        title: t(local.recentColorTitle),
        editable: true,
        handleAddColor: addRecentlyUsedColor,
        colors: recentlyUsedColors,
        onSetColor: function onSetColor(color) {
          return handleSetColor(color);
        },
        onChange: handleRecentlyUsedColorsChange
      })), showSystemColors && /* @__PURE__ */React__default["default"].createElement(SwatchesPanel, _objectSpread$a(_objectSpread$a({}, baseProps), {}, {
        title: t(local.swatchColorTitle),
        colors: systemColors,
        onSetColor: function onSetColor(color) {
          return handleSetColor(color);
        }
      }))));
    });
    var isGradient = mode === "linear-gradient";
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(baseClassName, "__panel"), disabled ? STATUS.disabled : false, className),
      onClick: function onClick(e) {
        return e.stopPropagation();
      },
      style: _objectSpread$a({}, style),
      ref: ref
    }, /* @__PURE__ */React__default["default"].createElement(PanelHeader, {
      baseClassName: baseClassName,
      mode: mode,
      colorModes: colorModes,
      closeBtn: closeBtn,
      togglePopup: togglePopup,
      onModeChange: handleModeChange
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__body")
    }, isGradient && /* @__PURE__ */React__default["default"].createElement(LinearGradient$1, _objectSpread$a(_objectSpread$a({}, baseProps), {}, {
      onChange: handleGradientChange
    })), /* @__PURE__ */React__default["default"].createElement(SaturationPanel, _objectSpread$a(_objectSpread$a({}, baseProps), {}, {
      onChange: handleSaturationChange
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__sliders-wrapper")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__sliders")
    }, /* @__PURE__ */React__default["default"].createElement(HUESlider$1, _objectSpread$a(_objectSpread$a({}, baseProps), {}, {
      onChange: handleHUEChange
    })), enableAlpha && /* @__PURE__ */React__default["default"].createElement(AlphaSlider, _objectSpread$a(_objectSpread$a({}, baseProps), {}, {
      onChange: handleAlphaChange
    }))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(["".concat(baseClassName, "__sliders-preview"), "".concat(baseClassName, "--bg-alpha")])
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(baseClassName, "__sliders-preview-inner"),
      style: {
        background: isGradient ? colorInstanceRef.current.linearGradient : colorInstanceRef.current.rgba
      }
    }))), /* @__PURE__ */React__default["default"].createElement(FormatPanel$1, _objectSpread$a(_objectSpread$a(_objectSpread$a({}, props), baseProps), {}, {
      format: formatRef.current,
      onModeChange: handleFormatModeChange,
      onInputChange: handleInputChange
    })), /* @__PURE__ */React__default["default"].createElement(SwatchesArea, null)));
  });
  var ColorPanel = /*#__PURE__*/React__default["default"].memo(Panel);

  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var ColorPickerPanel$1 = function ColorPickerPanel(props) {
    return /* @__PURE__ */React__default["default"].createElement(ColorPanel, _objectSpread$9(_objectSpread$9({}, props), {}, {
      popupProps: null,
      closeBtn: false
    }));
  };

  ColorPickerPanel$1.displayName = "ColorPickerPanel";
  var _ColorPickerPanel = /*#__PURE__*/React__default["default"].memo(ColorPickerPanel$1);

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var ColorPickerTrigger = function ColorPickerTrigger(props) {
    var baseClassName = useClassNames();
    var _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        _props$inputProps = props.inputProps,
        inputProps = _props$inputProps === void 0 ? {
      autoWidth: true
    } : _props$inputProps;

    var _useControlled = useControlled(props, "value", props.onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        value = _useControlled2[0],
        setValue = _useControlled2[1];

    var handleChange = function handleChange(input, ctx) {
      if (Color.isValid(input)) {
        setValue(input, ctx);
      }
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__trigger--default")
    }, /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$8(_objectSpread$8({}, inputProps), {}, {
      value: value,
      disabled: disabled,
      label: /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(baseClassName, "__trigger--default__color"), "".concat(baseClassName, "--bg-alpha"))
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "color-inner",
        style: {
          background: value
        }
      })),
      onBlur: handleChange,
      onChange: function onChange(v) {
        return setValue(v);
      }
    })));
  };

  var ColorTrigger = /*#__PURE__*/React__default["default"].memo(ColorPickerTrigger);

  function useClickOutside(refs, handler, includePopup) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var POPUP_SELECTOR = ".".concat(classPrefix, "-popup");
    React.useEffect(function () {
      var listener = function listener(event) {
        if (!Array.isArray(refs)) {
          return;
        }

        var elements = [];

        if (includePopup) {
          document.querySelectorAll(POPUP_SELECTOR).forEach(function (ele) {
            elements.push(ele);
          });
        }

        elements = Array.from(new Set(elements));

        if (refs.find(function (ref) {
          var _ref$current;

          return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.contains(event.target);
        }) || elements.find(function (el) {
          return el === null || el === void 0 ? void 0 : el.contains(event.target);
        })) {
          return;
        }

        handler(event);
      };

      document.addEventListener("mousedown", listener);
      document.addEventListener("touchstart", listener);
      return function () {
        document.removeEventListener("mousedown", listener);
        document.removeEventListener("touchstart", listener);
      };
    }, [refs, handler, includePopup]);
  }

  var _excluded$2 = ["popupProps", "disabled", "inputProps", "onChange", "colorModes"],
      _excluded2 = ["overlayClassName", "overlayInnerStyle"];

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var ColorPicker$1 = function ColorPicker(props) {
    var baseClassName = useClassNames();

    var popupProps = props.popupProps,
        disabled = props.disabled,
        inputProps = props.inputProps,
        onChange = props.onChange,
        colorModes = props.colorModes,
        rest = _objectWithoutProperties$2(props, _excluded$2);

    var _ref = popupProps || {},
        overlayClassName = _ref.overlayClassName,
        _ref$overlayInnerStyl = _ref.overlayInnerStyle,
        overlayInnerStyle = _ref$overlayInnerStyl === void 0 ? {} : _ref$overlayInnerStyl,
        restPopupProps = _objectWithoutProperties$2(_ref, _excluded2);

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        visible = _useState2[0],
        setVisible = _useState2[1];

    var _useControlled = useControlled(props, "value", onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        innerValue = _useControlled2[0],
        setInnerValue = _useControlled2[1];

    var triggerRef = React.useRef();
    var colorPanelRef = React.useRef();

    var popProps = _objectSpread$7(_objectSpread$7({
      placement: "bottom-left",
      expandAnimation: true,
      trigger: "click",
      visible: visible
    }, restPopupProps), {}, {
      overlayClassName: [baseClassName, overlayClassName],
      overlayInnerStyle: _objectSpread$7({
        padding: 0
      }, overlayInnerStyle)
    });

    useClickOutside([triggerRef, colorPanelRef], function () {
      setVisible(false);
    }, true);
    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$7(_objectSpread$7({}, popProps), {}, {
      onVisibleChange: function onVisibleChange(v) {
        return setVisible(v);
      },
      content: !disabled && /* @__PURE__ */React__default["default"].createElement(ColorPanel, _objectSpread$7(_objectSpread$7({}, rest), {}, {
        disabled: disabled,
        value: innerValue,
        colorModes: colorModes,
        togglePopup: setVisible,
        onChange: function onChange(value, context) {
          return setInnerValue(value, context);
        },
        ref: colorPanelRef
      }))
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__trigger"),
      ref: triggerRef
    }, /* @__PURE__ */React__default["default"].createElement(ColorTrigger, {
      disabled: disabled,
      inputProps: inputProps,
      value: innerValue,
      onChange: setInnerValue
    })));
  };

  ColorPicker$1.displayName = "ColorPicker";
  ColorPicker$1.defaultProps = colorPickerDefaultProps;
  var _ColorPicker = /*#__PURE__*/React__default["default"].memo(ColorPicker$1);

  var ColorPickerPanel = _ColorPickerPanel;
  var ColorPicker = _ColorPicker;

  var cardDefaultProps = {
    bordered: true,
    headerBordered: false,
    hoverShadow: false,
    loading: false,
    shadow: false,
    size: "medium",
    theme: "normal"
  };

  var Card$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames, _classNames2;

    var actions = props.actions,
        avatar = props.avatar,
        bordered = props.bordered,
        children = props.children,
        className = props.className,
        cover = props.cover,
        description = props.description,
        footer = props.footer,
        header = props.header,
        headerBordered = props.headerBordered,
        hoverShadow = props.hoverShadow,
        loading = props.loading,
        shadow = props.shadow,
        size = props.size,
        style = props.style,
        subtitle = props.subtitle,
        title = props.title,
        theme = props.theme,
        status = props.status;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var commonClassNames = useCommonClassName$1();
    var isPoster2 = theme === "poster2";
    var cardClass = classNames$1("".concat(classPrefix, "-card"), className, (_classNames = {}, _defineProperty$3(_classNames, commonClassNames.SIZE.small, size === "small"), _defineProperty$3(_classNames, "".concat(classPrefix, "-card--bordered"), bordered), _defineProperty$3(_classNames, "".concat(classPrefix, "--shadow"), shadow), _defineProperty$3(_classNames, "".concat(classPrefix, "-card--shadow-hover"), hoverShadow), _classNames));
    var showHeader = header || title || subtitle || description || avatar || actions && !isPoster2 || status && isPoster2;
    var headerClass = classNames$1((_classNames2 = {}, _defineProperty$3(_classNames2, "".concat(classPrefix, "-card__header"), showHeader), _defineProperty$3(_classNames2, "".concat(classPrefix, "-card__title--bordered"), headerBordered), _classNames2));
    var titleClass = classNames$1(_defineProperty$3({}, "".concat(classPrefix, "-card__title"), title));
    var subtitleClass = classNames$1(_defineProperty$3({}, "".concat(classPrefix, "-card__subtitle"), subtitle));
    var actionClass = classNames$1(_defineProperty$3({}, "".concat(classPrefix, "-card__actions"), actions));
    var footerClass = classNames$1(_defineProperty$3({}, "".concat(classPrefix, "-card__footer"), footer));
    var coverClass = classNames$1(_defineProperty$3({}, "".concat(classPrefix, "-card__cover"), cover));
    var avatarClass = classNames$1(_defineProperty$3({}, "".concat(classPrefix, "-card__avatar"), avatar));
    var bodyClass = classNames$1(_defineProperty$3({}, "".concat(classPrefix, "-card__body"), children));
    var descriptionClass = classNames$1(_defineProperty$3({}, "".concat(classPrefix, "-card__description"), description));
    var renderTitle = title ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: titleClass
    }, title) : null;
    var renderSubtitle = subtitle ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: subtitleClass
    }, subtitle) : null;
    var renderDescription = description ? /* @__PURE__ */React__default["default"].createElement("p", {
      className: descriptionClass
    }, description) : null;
    var renderAvatar = avatar && /* @__PURE__ */React__default["default"].createElement("div", {
      className: avatarClass
    }, avatar);
    var renderHeaderActions = actions && !isPoster2 && /* @__PURE__ */React__default["default"].createElement("div", {
      className: actionClass
    }, actions);
    var renderFooterActions = actions && isPoster2 && /* @__PURE__ */React__default["default"].createElement("div", {
      className: actionClass
    }, actions);
    var renderStatus = status && isPoster2 && /* @__PURE__ */React__default["default"].createElement("div", {
      className: actionClass
    }, status);

    var renderHeader = function renderHeader() {
      if (header) return /* @__PURE__ */React__default["default"].createElement("div", {
        className: headerClass
      }, header);
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: headerClass
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-card__header-wrapper")
      }, renderAvatar, /* @__PURE__ */React__default["default"].createElement("div", null, renderTitle, renderSubtitle, renderDescription)), renderHeaderActions, renderStatus);
    };

    var renderCover = cover ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: coverClass
    }, typeof cover === "string" ? /* @__PURE__ */React__default["default"].createElement("img", {
      src: cover,
      alt: ""
    }) : cover) : null;
    var renderChildren = children && /* @__PURE__ */React__default["default"].createElement("div", {
      className: bodyClass
    }, children);
    var renderFooter = footer && /* @__PURE__ */React__default["default"].createElement("div", {
      className: footerClass
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-card__footer-wrapper")
    }, footer), renderFooterActions);

    if (loading) {
      return /* @__PURE__ */React__default["default"].createElement(Loading, null, /* @__PURE__ */React__default["default"].createElement("div", {
        className: cardClass
      }));
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: cardClass,
      style: style
    }, showHeader ? renderHeader() : null, renderCover, renderChildren, renderFooter);
  });
  Card$1.displayName = "Card";
  Card$1.defaultProps = cardDefaultProps;

  var Card = Card$1;

  var CollapseContext = /*#__PURE__*/React__default["default"].createContext({
    defaultExpandAll: false,
    disabled: false,
    expandIconPlacement: "left",
    expandOnRowClick: true,
    expandIcon: true
  });
  var useCollapseContext = function useCollapseContext() {
    return React__default["default"].useContext(CollapseContext);
  };

  var collapseDefaultProps = {
    borderless: false,
    defaultExpandAll: false,
    expandIcon: true,
    expandIconPlacement: "left",
    expandMutex: false,
    expandOnRowClick: true
  };
  var collapsePanelDefaultProps = {
    destroyOnCollapse: false,
    disabled: void 0,
    expandIcon: void 0
  };

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var CollapsePanel = function CollapsePanel(props) {
    var value = props.value,
        disabled = props.disabled,
        destroyOnCollapse = props.destroyOnCollapse,
        expandIcon = props.expandIcon,
        className = props.className,
        style = props.style,
        header = props.header,
        headerRightContent = props.headerRightContent,
        children = props.children,
        index = props.index;

    var _useCollapseContext = useCollapseContext(),
        disableAll = _useCollapseContext.disabled,
        defaultExpandAll = _useCollapseContext.defaultExpandAll,
        expandIconPlacement = _useCollapseContext.expandIconPlacement,
        expandOnRowClick = _useCollapseContext.expandOnRowClick,
        expandIconAll = _useCollapseContext.expandIcon,
        updateCollapseValue = _useCollapseContext.updateCollapseValue,
        collapseValue = _useCollapseContext.collapseValue;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var componentName = "".concat(classPrefix, "-collapse-panel");
    var innerValue = value || index;
    var showExpandIcon = expandIcon === void 0 ? expandIconAll : expandIcon;
    var headRef = React.useRef();
    var contentRef = React.useRef();
    var bodyRef = React.useRef();
    var isDisabled = disabled || disableAll;
    React.useEffect(function () {
      if (defaultExpandAll) {
        updateCollapseValue(innerValue);
      }
    }, []);
    var isActive = Array.isArray(collapseValue) ? collapseValue.includes(innerValue) : collapseValue === innerValue;
    var classes = classNames$1(componentName, _defineProperty$3({}, "".concat(classPrefix, "-is-disabled"), isDisabled), className);

    var handleClick = function handleClick(e) {
      var canExpand = expandOnRowClick && e.target === headRef.current || ["svg", "path"].includes(e.target.tagName);

      if (canExpand && !isDisabled) {
        updateCollapseValue(innerValue);
      }
    };

    var renderIcon = function renderIcon(direction) {
      return /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
        style: {
          transform: isActive ? "rotate(180deg)" : "rotate(-90deg)"
        },
        isActive: isActive,
        overlayClassName: classNames$1("".concat(componentName, "__icon"), "".concat(componentName, "__icon--").concat(direction))
      });
    };

    var renderHeader = function renderHeader() {
      var cls = ["".concat(componentName, "__header"), _defineProperty$3({}, "".concat(classPrefix, "-is-clickable"), expandOnRowClick && !isDisabled)];
      return /* @__PURE__ */React__default["default"].createElement("div", {
        ref: headRef,
        className: classNames$1(cls),
        onClick: handleClick
      }, showExpandIcon && expandIconPlacement === "left" ? renderIcon(expandIconPlacement) : null, header && header, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(componentName, "__header--blank")
      }), headerRightContent && headerRightContent, showExpandIcon && expandIconPlacement === "right" ? renderIcon(expandIconPlacement) : null);
    };

    var renderBody = function renderBody() {
      var transitionCallbacks = {
        onEnter: function onEnter() {
          bodyRef.current.style.height = "".concat(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current.clientHeight, "px");
        },
        onEntered: function onEntered() {
          bodyRef.current.style.height = "auto";
        },
        onExit: function onExit() {
          bodyRef.current.style.height = "".concat(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current.clientHeight, "px");
        },
        onExiting: function onExiting() {
          bodyRef.current.style.height = "0px";
        }
      };
      return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, _objectSpread$6({
        "in": isActive,
        appear: true,
        timeout: 300,
        nodeRef: bodyRef,
        unmountOnExit: destroyOnCollapse
      }, transitionCallbacks), /* @__PURE__ */React__default["default"].createElement("div", {
        style: {
          height: 0
        },
        className: classNames$1("".concat(componentName, "__body"), "".concat(classPrefix, "-slide-down-enter-active"), _defineProperty$3({}, "".concat(componentName, "__body--collapsed"), !isActive)),
        ref: bodyRef
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(componentName, "__content"),
        ref: contentRef
      }, children)));
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classes,
      style: _objectSpread$6({}, style)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(componentName, "__wrapper")
    }, renderHeader(), renderBody()));
  };

  CollapsePanel.displayName = "CollapsePanel";
  CollapsePanel.defaultProps = collapsePanelDefaultProps;

  var _excluded$1 = ["defaultExpandAll", "disabled", "expandIconPlacement", "expandOnRowClick", "expandIcon"];

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Collapse$1 = forwardRefWithStatics(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var componentName = "".concat(classPrefix, "-collapse");
    var borderlessClass = "".concat(classPrefix, "--border-less");

    var defaultExpandAll = props.defaultExpandAll,
        disabled = props.disabled,
        expandIconPlacement = props.expandIconPlacement,
        expandOnRowClick = props.expandOnRowClick,
        expandIcon = props.expandIcon,
        rest = _objectWithoutProperties$2(props, _excluded$1);

    var children = rest.children,
        className = rest.className,
        style = rest.style,
        expandMutex = rest.expandMutex,
        borderless = rest.borderless,
        onChange = rest.onChange;

    var _useControlled = useControlled(props, "value", onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        collapseValue = _useControlled2[0],
        setCollapseValue = _useControlled2[1];

    var updateCollapseValue = function updateCollapseValue(value) {
      var newValue = [].concat(collapseValue || []);
      var index = newValue.indexOf(value);

      if (index >= 0) {
        newValue.splice(index, 1);
      } else if (expandMutex) {
        newValue = [value];
      } else {
        newValue.push(value);
      }

      setCollapseValue(newValue);
    };

    var classes = [componentName, _defineProperty$3({}, borderlessClass, !!borderless), className];
    var childrenList = React__default["default"].Children.toArray(children).filter(function (child) {
      return child.type.displayName === CollapsePanel.displayName;
    });

    var collapsePanelList = function collapsePanelList() {
      return childrenList.map(function (child, index) {
        var key = child.key || String(index);

        var childProps = _objectSpread$5({
          key: key,
          index: index + 1
        }, child.props);

        return /*#__PURE__*/React__default["default"].cloneElement(child, childProps);
      });
    };

    return /* @__PURE__ */React__default["default"].createElement(CollapseContext.Provider, {
      value: {
        defaultExpandAll: defaultExpandAll,
        disabled: disabled,
        expandIconPlacement: expandIconPlacement,
        expandOnRowClick: expandOnRowClick,
        expandIcon: expandIcon,
        updateCollapseValue: updateCollapseValue,
        collapseValue: collapseValue
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(classes),
      style: style,
      ref: ref
    }, collapsePanelList()));
  }, {
    Panel: CollapsePanel
  });
  Collapse$1.displayName = "Collapse";
  Collapse$1.defaultProps = collapseDefaultProps;

  var Collapse = Collapse$1;

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function generateBase64Url(_ref, onFinish) {
    var width = _ref.width,
        height = _ref.height,
        gapX = _ref.gapX,
        gapY = _ref.gapY,
        offsetLeft = _ref.offsetLeft,
        offsetTop = _ref.offsetTop,
        rotate = _ref.rotate,
        alpha = _ref.alpha,
        watermarkContent = _ref.watermarkContent,
        lineSpace = _ref.lineSpace;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");

    if (!ctx) {
      console.warn("\u5F53\u524D\u73AF\u5883\u4E0D\u652F\u6301Canvas, \u65E0\u6CD5\u7ED8\u5236\u6C34\u5370");
      onFinish("");
      return;
    }

    var ratio = window.devicePixelRatio || 1;
    var canvasWidth = (gapX + width) * ratio;
    var canvasHeight = (gapY + height) * ratio;
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = "".concat(gapX + width, "px");
    canvas.style.height = "".concat(gapY + height, "px");
    ctx.translate(offsetLeft * ratio, offsetTop * ratio);
    ctx.rotate(Math.PI / 180 * Number(rotate));
    ctx.globalAlpha = alpha;
    var markWidth = width * ratio;
    var markHeight = height * ratio;
    ctx.fillStyle = "transparent";
    ctx.fillRect(0, 0, markWidth, markHeight);
    var contents = Array.isArray(watermarkContent) ? watermarkContent : [_objectSpread$4({}, watermarkContent)];
    var top = 0;
    contents.forEach(function (item) {
      if (item.url) {
        var url = item.url,
            _item$isGrayscale = item.isGrayscale,
            isGrayscale = _item$isGrayscale === void 0 ? false : _item$isGrayscale;
        item.top = top;
        top += height;
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.referrerPolicy = "no-referrer";
        img.src = url;

        img.onload = function () {
          ctx.drawImage(img, 0, item.top * ratio, width * ratio, height * ratio);

          if (isGrayscale) {
            var imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
            var pixels = imgData.data;

            for (var i = 0; i < pixels.length; i += 4) {
              var lightness = (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3;
              pixels[i] = lightness;
              pixels[i + 1] = lightness;
              pixels[i + 2] = lightness;
            }

            ctx.putImageData(imgData, 0, 0);
          }

          onFinish(canvas.toDataURL());
        };
      } else if (item.text) {
        var text = item.text,
            _item$fontColor = item.fontColor,
            fontColor = _item$fontColor === void 0 ? "rgba(0, 0, 0, 0.1)" : _item$fontColor,
            _item$fontSize = item.fontSize,
            fontSize = _item$fontSize === void 0 ? 16 : _item$fontSize,
            _item$fontWeight = item.fontWeight,
            fontWeight = _item$fontWeight === void 0 ? "normal" : _item$fontWeight;
        item.top = top;
        top += lineSpace;
        var markSize = Number(fontSize) * ratio;
        ctx.font = "normal normal ".concat(fontWeight, " ").concat(markSize, "px/").concat(markHeight, "px undefined");
        ctx.textAlign = "start";
        ctx.textBaseline = "top";
        ctx.fillStyle = fontColor;
        ctx.fillText(text, 0, item.top * ratio);
      }
    });
    onFinish(canvas.toDataURL());
  }

  function randomMovingStyle() {
    var align = Math.floor(Math.random() * 4);
    var p1 = Math.floor(Math.random() * 70) + 30;
    var leftTopLimit = 0;
    var bottomLimit = 95;
    var rightLimit = 90;
    var keyframesStyle = "\n  @keyframes watermark {\n    0%   {left: ".concat(align === 1 ? rightLimit : align === 3 ? leftTopLimit : p1, "%; top: ").concat(align === 0 ? leftTopLimit : align === 2 ? bottomLimit : p1, "%;}\n    25% {left: ").concat(align === 0 ? rightLimit : align === 2 ? leftTopLimit : 100 - p1, "%; top: ").concat(align === 1 ? bottomLimit : align === 3 ? leftTopLimit : p1, "%;}\n    50% {left: ").concat(align === 1 ? leftTopLimit : align === 3 ? rightLimit : 100 - p1, "%; top: ").concat(align === 0 ? bottomLimit : align === 2 ? leftTopLimit : 100 - p1, "%;}\n    75% {left: ").concat(align === 0 ? leftTopLimit : align === 2 ? rightLimit : p1, "%; top: ").concat(align === 1 ? leftTopLimit : align === 3 ? bottomLimit : 100 - p1, "%;}\n    100% {left: ").concat(align === 1 ? rightLimit : align === 3 ? leftTopLimit : p1, "%; top: ").concat(align === 0 ? leftTopLimit : align === 2 ? bottomLimit : p1, "%;}\n  }\n  ");
    return keyframesStyle;
  }

  var injectStyle = function injectStyle(style) {
    var styleElement = document.createElement("style");
    var styleSheet = null;
    document.head.appendChild(styleElement);
    styleSheet = styleElement.sheet;
    styleSheet.insertRule(style, styleSheet.cssRules.length);
  };

  var watermarkDefaultProps = {
    alpha: 1,
    isRepeat: true,
    lineSpace: 16,
    movable: false,
    moveInterval: 3e3,
    removable: true,
    rotate: -22
  };

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Watermark$1 = function Watermark(_ref) {
    var _ref$alpha = _ref.alpha,
        alpha = _ref$alpha === void 0 ? watermarkDefaultProps.alpha : _ref$alpha,
        _ref$x = _ref.x,
        x = _ref$x === void 0 ? 200 : _ref$x,
        _ref$y = _ref.y,
        y = _ref$y === void 0 ? 210 : _ref$y,
        _ref$width = _ref.width,
        width = _ref$width === void 0 ? 120 : _ref$width,
        _ref$height = _ref.height,
        height = _ref$height === void 0 ? 60 : _ref$height,
        _ref$rotate = _ref.rotate,
        tempRotate = _ref$rotate === void 0 ? watermarkDefaultProps.rotate : _ref$rotate,
        _ref$zIndex = _ref.zIndex,
        zIndex = _ref$zIndex === void 0 ? 10 : _ref$zIndex,
        _ref$lineSpace = _ref.lineSpace,
        lineSpace = _ref$lineSpace === void 0 ? watermarkDefaultProps.lineSpace : _ref$lineSpace,
        _ref$isRepeat = _ref.isRepeat,
        isRepeat = _ref$isRepeat === void 0 ? watermarkDefaultProps.isRepeat : _ref$isRepeat,
        _ref$removable = _ref.removable,
        removable = _ref$removable === void 0 ? watermarkDefaultProps.removable : _ref$removable,
        _ref$movable = _ref.movable,
        movable = _ref$movable === void 0 ? watermarkDefaultProps.movable : _ref$movable,
        _ref$moveInterval = _ref.moveInterval,
        moveInterval = _ref$moveInterval === void 0 ? watermarkDefaultProps.moveInterval : _ref$moveInterval,
        _ref$offset = _ref.offset,
        offset = _ref$offset === void 0 ? [] : _ref$offset,
        content = _ref.content,
        children = _ref.children,
        watermarkContent = _ref.watermarkContent,
        className = _ref.className,
        _ref$style = _ref.style,
        style = _ref$style === void 0 ? {} : _ref$style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var gapX = x;
    var gapY = y;
    var rotate = tempRotate;

    if (movable) {
      gapX = 0;
      gapY = 0;
      rotate = 0;
    }

    var clsName = "".concat(classPrefix, "-watermark");

    var _useState = React.useState(""),
        _useState2 = _slicedToArray(_useState, 2),
        base64Url = _useState2[0],
        setBase64Url = _useState2[1];

    var watermarkRef = React.useRef();
    var offsetLeft = offset[0] || gapX / 2;
    var offsetTop = offset[1] || gapY / 2;
    React.useEffect(function () {
      generateBase64Url({
        width: width,
        height: height,
        rotate: rotate,
        lineSpace: lineSpace,
        alpha: alpha,
        gapX: gapX,
        gapY: gapY,
        watermarkContent: watermarkContent,
        offsetLeft: offsetLeft,
        offsetTop: offsetTop
      }, function (url) {
        setBase64Url(url);
      });
    }, [width, height, rotate, zIndex, lineSpace, alpha, offsetLeft, offsetTop, gapX, gapY, watermarkContent]);
    useMutationObservable(watermarkRef.current, function (mutations) {
      if (removable) return;
      mutations.forEach(function (mutation) {
        if (mutation.type === "childList") {
          var removeNodes = mutation.removedNodes;
          removeNodes.forEach(function (node) {
            watermarkRef.current.appendChild(node);
          });
        }
      });
    });
    var parent = React.useRef();
    React.useEffect(function () {
      parent.current = watermarkRef.current.parentElement;
      var keyframesStyle = randomMovingStyle();
      injectStyle(keyframesStyle);
    }, []);
    useMutationObservable(document.body, function (mutations) {
      if (removable) return;
      mutations.forEach(function (mutation) {
        if (mutation.type === "childList") {
          var removeNodes = mutation.removedNodes;
          removeNodes.forEach(function (node) {
            var element = node;

            if (element === watermarkRef.current) {
              parent.current.appendChild(element);
            }
          });
        }
      });
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: {
        position: "relative",
        overflow: "hidden"
      },
      className: clsName,
      ref: watermarkRef
    }, children || content, /* @__PURE__ */React__default["default"].createElement("div", {
      className: className,
      style: _objectSpread$3({
        zIndex: zIndex,
        position: "absolute",
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
        width: "100%",
        height: "100%",
        backgroundSize: "".concat(gapX + width, "px"),
        pointerEvents: "none",
        backgroundRepeat: movable ? "no-repeat" : isRepeat ? "repeat" : "no-repeat",
        backgroundImage: "url('".concat(base64Url, "')"),
        animation: movable ? "watermark infinite ".concat(moveInterval * 4 / 60, "s") : "none"
      }, style)
    }));
  };

  var Watermark = Watermark$1;

  var spaceDefaultProps = {
    breakLine: false,
    direction: "horizontal",
    size: "medium"
  };

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var SizeMap = {
    small: "8px",
    medium: "16px",
    large: "24px"
  };

  var toArray = function toArray(children) {
    var ret = [];
    React__default["default"].Children.forEach(children, function (child) {
      if (child === void 0 || child === null) {
        return;
      }

      if (Array.isArray(child)) {
        ret = ret.concat(toArray(child));
      } else if (reactIs$2.exports.isFragment(child) && child.props) {
        ret = ret.concat(toArray(child.props.children));
      } else {
        ret.push(child);
      }
    });
    return ret;
  };

  var Space$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var className = props.className,
        style = props.style,
        align = props.align,
        direction = props.direction,
        size = props.size,
        breakLine = props.breakLine,
        separator = props.separator;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var renderStyle = React.useMemo(function () {
      var renderGap = "";

      if (Array.isArray(size)) {
        renderGap = size.map(function (s) {
          if (typeof s === "number") return "".concat(s, "px");
          if (typeof s === "string") return SizeMap[s] || s;
          return s;
        }).join(" ");
      } else if (typeof size === "string") {
        renderGap = SizeMap[size] || size;
      } else if (typeof size === "number") {
        renderGap = "".concat(size, "px");
      }

      return _objectSpread$2(_objectSpread$2({
        gap: renderGap
      }, breakLine ? {
        flexWrap: "wrap"
      } : {}), style);
    }, [style, size, breakLine]);

    function renderChildren() {
      var children = toArray(props.children);
      var childCount = React__default["default"].Children.count(children);
      return React__default["default"].Children.map(children, function (child, index) {
        var showSeparator = index + 1 !== childCount && separator;
        return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-space-item")
        }, child), showSeparator && /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-space-item-separator")
        }, separator));
      });
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: renderStyle,
      className: classNames$1("".concat(classPrefix, "-space"), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-space-align-").concat(align), align), _defineProperty$3(_classNames, "".concat(classPrefix, "-space-").concat(direction), direction), _classNames))
    }, renderChildren());
  });
  Space$1.displayName = "Space";
  Space$1.defaultProps = spaceDefaultProps;

  var Space = Space$1;

  var StepsContext = /*#__PURE__*/React__default["default"].createContext({
    theme: "default",
    reverse: false,
    itemsStatus: [],
    layout: "vertical",
    mode: "alternate"
  });

  var DefaultAlign = {
    vertical: ["left", "right"],
    horizontal: ["top", "bottom"]
  };
  var useAlign = function useAlign(align) {
    var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "vertical";
    return React.useMemo(function () {
      var renderAlign = layout === "vertical" ? "left" : "top";

      if (layout === "vertical" && align) {
        var index = DefaultAlign.horizontal.indexOf(align);
        var isError = index !== -1;
        isError && log.warn("Timeline", 'If layout is vertical, align should be "left","alternate" or "right" ');
        renderAlign = isError ? DefaultAlign.vertical[index] : align;
      }

      if (layout === "horizontal" && align) {
        var _index = DefaultAlign.vertical.indexOf(align);

        var _isError = _index !== -1;

        _isError && log.warn("Timeline", 'If layout is horizontal, align should be "top","alternate" or "bottom" ');
        renderAlign = _isError ? DefaultAlign.horizontal[_index] : align;
      }

      return renderAlign;
    }, [align, layout]);
  };

  var DefaultTheme = ["default", "primary", "success", "warning", "error"];

  var TimelineItem = function TimelineItem(props) {
    var _classNames, _classNames2, _classNames3;

    var className = props.className,
        _props$style = props.style,
        style = _props$style === void 0 ? {} : _props$style,
        dot = props.dot,
        _props$dotColor = props.dotColor,
        dotColor = _props$dotColor === void 0 ? "primary" : _props$dotColor,
        labelAlign = props.labelAlign,
        children = props.children,
        index = props.index,
        content = props.content,
        label = props.label,
        _props$loading = props.loading,
        loading = _props$loading === void 0 ? false : _props$loading;

    var _useContext = React.useContext(StepsContext),
        theme = _useContext.theme,
        reverse = _useContext.reverse,
        itemsStatus = _useContext.itemsStatus,
        layout = _useContext.layout,
        globalAlign = _useContext.globalAlign,
        mode = _useContext.mode;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var renderAlign = useAlign(globalAlign, layout);

    var getPositionClassName = function getPositionClassName(index2) {
      var left = layout === "horizontal" ? "top" : "left";
      var right = layout === "horizontal" ? "bottom" : "right";

      if (renderAlign === "alternate") {
        return labelAlign || index2 % 2 === 0 ? "".concat(classPrefix, "-timeline-item-").concat(left) : "".concat(classPrefix, "-timeline-item-").concat(right);
      }

      if (renderAlign === "left" || renderAlign === "top") {
        return "".concat(classPrefix, "-timeline-item-").concat(left);
      }

      if (renderAlign === "right" || renderAlign === "bottom") {
        return "".concat(classPrefix, "-timeline-item-").concat(right);
      }

      return "";
    };

    var dotElement = React.useMemo(function () {
      var _ele$props;

      var ele = renderTNode(dot);
      return ele && /*#__PURE__*/React__default["default"].cloneElement(ele, {
        className: classNames$1(ele === null || ele === void 0 ? void 0 : (_ele$props = ele.props) === null || _ele$props === void 0 ? void 0 : _ele$props.className, "".concat(classPrefix, "-timeline-item__dot-content"))
      });
    }, [dot, classPrefix]);
    var itemClassName = classNames$1((_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-timeline-item"), true), _defineProperty$3(_classNames, "".concat(getPositionClassName(index)), true), _classNames), className);
    var tailClassName = classNames$1((_classNames2 = {}, _defineProperty$3(_classNames2, "".concat(classPrefix, "-timeline-item__tail"), true), _defineProperty$3(_classNames2, "".concat(classPrefix, "-timeline-item__tail--theme-").concat(theme), true), _defineProperty$3(_classNames2, "".concat(classPrefix, "-timeline-item__tail--status-").concat(itemsStatus[index]), reverse), _classNames2));
    var dotClassName = classNames$1((_classNames3 = {}, _defineProperty$3(_classNames3, "".concat(classPrefix, "-timeline-item__dot"), true), _defineProperty$3(_classNames3, "".concat(classPrefix, "-timeline-item__dot--custom"), !!dotElement || !dotElement && loading), _defineProperty$3(_classNames3, "".concat(classPrefix, "-timeline-item__dot--").concat(dotColor), DefaultTheme.includes(dotColor)), _classNames3));
    var labelClassName = classNames$1("".concat(classPrefix, "-timeline-item__label"), _defineProperty$3({}, "".concat(classPrefix, "-timeline-item__label--").concat(mode), true));
    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: itemClassName,
      style: style
    }, mode === "alternate" && label && /* @__PURE__ */React__default["default"].createElement("div", {
      className: labelClassName
    }, label), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-timeline-item__wrapper")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: dotClassName,
      style: {
        borderColor: !DefaultTheme.includes(dotColor) && dotColor
      }
    }, !dotElement && loading && /* @__PURE__ */React__default["default"].createElement(Loading, {
      size: "12px",
      className: "".concat(classPrefix, "-timeline-item__dot-content")
    }), dotElement), /* @__PURE__ */React__default["default"].createElement("div", {
      className: tailClassName
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-timeline-item__content")
    }, content || children, mode === "same" && label && /* @__PURE__ */React__default["default"].createElement("div", {
      className: labelClassName
    }, label)));
  };

  TimelineItem.displayName = "TimelineItem";

  var Timeline$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var _props$theme = props.theme,
        theme = _props$theme === void 0 ? "default" : _props$theme,
        labelAlign = props.labelAlign,
        children = props.children,
        className = props.className,
        style = props.style,
        _props$reverse = props.reverse,
        reverse = _props$reverse === void 0 ? false : _props$reverse,
        _props$layout = props.layout,
        layout = _props$layout === void 0 ? "vertical" : _props$layout,
        _props$mode = props.mode,
        mode = _props$mode === void 0 ? "alternate" : _props$mode;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var renderAlign = useAlign(labelAlign, layout);
    var timelineItems = React__default["default"].Children.toArray(children).filter(function (child) {
      return child.type.displayName === TimelineItem.displayName;
    });
    var itemsStatus = React__default["default"].Children.map(timelineItems, function (child) {
      var _child$props;

      return ((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.dotColor) || "primary";
    });
    var hasLabelItem = timelineItems.some(function (item) {
      var _item$props;

      return !!(item !== null && item !== void 0 && (_item$props = item.props) !== null && _item$props !== void 0 && _item$props.label);
    });

    if (reverse) {
      timelineItems.reverse();
    }

    var itemsCounts = React__default["default"].Children.count(timelineItems);
    var timelineClassName = classNames$1("".concat(classPrefix, "-timeline"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(classPrefix, "-timeline-").concat(renderAlign), true), _defineProperty$3(_classNames, "".concat(classPrefix, "-timeline-reverse"), reverse), _defineProperty$3(_classNames, "".concat(classPrefix, "-timeline-").concat(layout), true), _defineProperty$3(_classNames, "".concat(classPrefix, "-timeline-label"), hasLabelItem), _defineProperty$3(_classNames, "".concat(classPrefix, "-timeline-label--").concat(mode), true), _classNames), className);
    return /* @__PURE__ */React__default["default"].createElement(StepsContext.Provider, {
      value: {
        theme: theme,
        reverse: reverse,
        itemsStatus: itemsStatus,
        layout: layout,
        globalAlign: labelAlign,
        mode: mode
      }
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: timelineClassName,
      style: style,
      ref: ref
    }, React__default["default"].Children.map(timelineItems, function (ele, index) {
      var _ele$props;

      return /*#__PURE__*/React__default["default"].cloneElement(ele, {
        index: index,
        className: classNames$1([ele === null || ele === void 0 ? void 0 : (_ele$props = ele.props) === null || _ele$props === void 0 ? void 0 : _ele$props.className], _defineProperty$3({}, "".concat(classPrefix, "-timeline-item--last"), index === itemsCounts - 1))
      });
    })));
  }, {
    Item: TimelineItem
  });
  Timeline$1.displayName = "Timeline";

  var Timeline = Timeline$1;

  var imageDefaultProps = {
    fit: "fill",
    gallery: false,
    lazy: false,
    overlayTrigger: "always",
    position: "center",
    shape: "square"
  };

  var _excluded = ["className", "src", "style", "alt", "fit", "position", "shape", "placeholder", "loading", "error", "overlayTrigger", "overlayContent", "lazy", "gallery", "onLoad", "onError"];

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Image$2 = function Image(props) {
    var className = props.className,
        src = props.src,
        style = props.style,
        alt = props.alt,
        fit = props.fit,
        position = props.position,
        shape = props.shape,
        placeholder = props.placeholder,
        loading = props.loading,
        error = props.error,
        overlayTrigger = props.overlayTrigger,
        overlayContent = props.overlayContent,
        lazy = props.lazy,
        gallery = props.gallery,
        onLoad = props.onLoad,
        onError = props.onError,
        rest = _objectWithoutProperties$2(props, _excluded);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var imageRef = React.useRef(null);

    var _useGlobalIcon = useGlobalIcon({
      ImageErrorIcon: ImageErrorIcon,
      ImageIcon: ImageIcon
    }),
        ImageErrorIcon$1 = _useGlobalIcon.ImageErrorIcon,
        ImageIcon$1 = _useGlobalIcon.ImageIcon;

    var _useState = React.useState(!lazy),
        _useState2 = _slicedToArray(_useState, 2),
        shouldLoad = _useState2[0],
        setShouldLoad = _useState2[1];

    var handleLoadImage = function handleLoadImage() {
      setShouldLoad(true);
    };

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isLoaded = _useState4[0],
        setIsLoaded = _useState4[1];

    var handleLoad = function handleLoad() {
      setIsLoaded(true);
      onLoad === null || onLoad === void 0 ? void 0 : onLoad();
    };

    React.useEffect(function () {
      if (!lazy || !(imageRef !== null && imageRef !== void 0 && imageRef.current)) return;
      var observerRefValue = null;
      var io = observe(imageRef.current, null, handleLoadImage, 0);
      observerRefValue = imageRef.current;
      return function () {
        observerRefValue && io && io.unobserve(observerRefValue);
      };
    }, [lazy, imageRef]);

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        hasError = _useState6[0],
        setHasError = _useState6[1];

    var handleError = function handleError() {
      setHasError(true);
      onError === null || onError === void 0 ? void 0 : onError();
    };

    var hasMouseEvent = overlayTrigger === "hover";

    var _useState7 = React.useState(!hasMouseEvent),
        _useState8 = _slicedToArray(_useState7, 2),
        shouldShowOverlay = _useState8[0],
        setShouldShowOverlay = _useState8[1];

    var handleToggleOverlay = function handleToggleOverlay(overlay) {
      setShouldShowOverlay(overlay);
    };

    var renderOverlay = function renderOverlay() {
      if (!overlayContent) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(classPrefix, "-image__overlay-content"), !shouldShowOverlay && "".concat(classPrefix, "-image__overlay-content--hidden"))
      }, overlayContent);
    };

    var renderPlaceholder = function renderPlaceholder() {
      if (!placeholder) {
        return null;
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-image__placeholder")
      }, placeholder);
    };

    var renderGalleryShadow = function renderGalleryShadow() {
      if (!gallery) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-image__gallery-shadow")
      });
    };

    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1(_objectSpread$1({
      ref: imageRef,
      className: classNames$1("".concat(classPrefix, "-image__wrapper"), "".concat(classPrefix, "-image__wrapper--shape-").concat(shape), gallery && "".concat(classPrefix, "-image__wrapper--gallery"), hasMouseEvent && "".concat(classPrefix, "-image__wrapper--need-hover"), className),
      style: style
    }, hasMouseEvent ? {
      onMouseEnter: function onMouseEnter() {
        return handleToggleOverlay(true);
      },
      onMouseLeave: function onMouseLeave() {
        return handleToggleOverlay(false);
      }
    } : null), rest), renderPlaceholder(), renderGalleryShadow(), hasError || !shouldLoad ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image")
    }) : /* @__PURE__ */React__default["default"].createElement(React.Fragment, null, /* @__PURE__ */React__default["default"].createElement("img", {
      src: src,
      onError: handleError,
      onLoad: handleLoad,
      className: classNames$1("".concat(classPrefix, "-image"), "".concat(classPrefix, "-image--fit-").concat(fit), "".concat(classPrefix, "-image--position-").concat(position)),
      alt: alt
    }), !isLoaded && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image__loading")
    }, loading || /* @__PURE__ */React__default["default"].createElement(Space, {
      direction: "vertical",
      size: 8,
      align: "center"
    }, /* @__PURE__ */React__default["default"].createElement(ImageIcon$1, {
      size: 24
    }), "\u56FE\u7247\u52A0\u8F7D\u4E2D"))), hasError && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image__error")
    }, error || /* @__PURE__ */React__default["default"].createElement(Space, {
      direction: "vertical",
      size: 8,
      align: "center"
    }, /* @__PURE__ */React__default["default"].createElement(ImageErrorIcon$1, {
      size: 24
    }), "\u56FE\u7247\u65E0\u6CD5\u663E\u793A")), renderOverlay());
  };

  Image$2.displayName = "Image";
  Image$2.defaultProps = imageDefaultProps;

  var Image$1 = Image$2;

  var rateDefaultProps = {
    defaultValue: 0,
    allowHalf: false,
    color: "#ED7B2F",
    size: "24px",
    count: 5,
    gap: 4,
    showText: false,
    texts: ["\u6781\u5DEE", "\u5931\u671B", "\u4E00\u822C", "\u6EE1\u610F", "\u60CA\u559C"]
  };

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Rate$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var allowHalf = props.allowHalf,
        color = props.color,
        count = props.count,
        disabled = props.disabled,
        gap = props.gap,
        showText = props.showText,
        size = props.size,
        texts = props.texts,
        icon = props.icon,
        className = props.className,
        style = props.style,
        onChange = props.onChange;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useGlobalIcon = useGlobalIcon({
      StarFilledIcon: StarFilledIcon
    }),
        StarFilledIcon$1 = _useGlobalIcon.StarFilledIcon;

    var _useControlled = useControlled(props, "value", onChange),
        _useControlled2 = _slicedToArray(_useControlled, 2),
        _useControlled2$ = _useControlled2[0],
        starValue = _useControlled2$ === void 0 ? 0 : _useControlled2$,
        setStarValue = _useControlled2[1];

    var _useState = React.useState(void 0),
        _useState2 = _slicedToArray(_useState, 2),
        _useState2$ = _useState2[0],
        hoverValue = _useState2$ === void 0 ? void 0 : _useState2$,
        setHoverValue = _useState2[1];

    var displayValue = hoverValue || starValue;
    var rootRef = React__default["default"].useRef(null);
    var activeColor = Array.isArray(color) ? color[0] : color;
    var defaultColor = Array.isArray(color) ? color[1] : "var(--td-bg-color-component)";

    var RateIcon = function RateIcon(props2) {
      if ( /*#__PURE__*/React__default["default"].isValidElement(icon)) {
        return /*#__PURE__*/React__default["default"].cloneElement(icon, props2);
      }

      return /* @__PURE__ */React__default["default"].createElement(StarFilledIcon$1, _objectSpread({}, props2));
    };

    var getStarValue = function getStarValue(event, index) {
      if (allowHalf) {
        var rootNode = rootRef.current;

        var _rootNode$getBounding = rootNode.getBoundingClientRect(),
            left = _rootNode$getBounding.left;

        var firstStar = rootNode.firstChild;

        var _firstStar$getBoundin = firstStar.getBoundingClientRect(),
            width = _firstStar$getBoundin.width;

        var clientX = event.clientX;
        var starMiddle = width * (index - 0.5) + gap * (index - 1);
        if (clientX - left >= starMiddle) return index;
        if (clientX - left < starMiddle) return index - 0.5;
      }

      return index;
    };

    var mouseEnterHandler = function mouseEnterHandler(event, index) {
      if (disabled) return;
      setHoverValue(getStarValue(event, index));
    };

    var mouseLeaveHandler = function mouseLeaveHandler() {
      if (disabled) return;
      setHoverValue(void 0);
    };

    var clickHandler = function clickHandler(event, index) {
      if (disabled) return;
      setStarValue(getStarValue(event, index));
    };

    var getStarCls = function getStarCls(index) {
      if (allowHalf && index + 0.5 === displayValue) return "".concat(classPrefix, "-rate__item--half");
      if (index >= displayValue) return "";
      if (index < displayValue) return "".concat(classPrefix, "-rate__item--full");
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1("".concat(classPrefix, "-rate"), className),
      onMouseLeave: mouseLeaveHandler
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-rate__list"),
      style: {
        gap: gap
      },
      ref: rootRef
    }, _toConsumableArray(Array(count)).map(function (_, index) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: index,
        className: classNames$1("".concat(classPrefix, "-rate__item"), getStarCls(index)),
        onClick: function onClick(event) {
          return clickHandler(event, index + 1);
        },
        onMouseMove: function onMouseMove(event) {
          return mouseEnterHandler(event, index + 1);
        }
      }, showText ? /* @__PURE__ */React__default["default"].createElement(Tooltip, {
        key: index,
        content: texts[displayValue - 1]
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-rate__star-top")
      }, /* @__PURE__ */React__default["default"].createElement(RateIcon, {
        size: size,
        color: activeColor
      })), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-rate__star-bottom")
      }, /* @__PURE__ */React__default["default"].createElement(RateIcon, {
        size: size,
        color: defaultColor
      }))) : /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-rate__star-top")
      }, /* @__PURE__ */React__default["default"].createElement(RateIcon, {
        size: size,
        color: activeColor
      })), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-rate__star-bottom")
      }, /* @__PURE__ */React__default["default"].createElement(RateIcon, {
        size: size,
        color: defaultColor
      }))));
    })), showText && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-rate__text")
    }, texts[displayValue - 1]));
  });
  Rate$1.displayName = "Rate";
  Rate$1.defaultProps = rateDefaultProps;

  var Rate = Rate$1;

  if (typeof console !== "undefined" && console.warn && typeof window !== "undefined") {
    console.warn("You are using a whole package of TDesign!");
  }

  exports.Affix = Affix;
  exports.Alert = Alert;
  exports.Anchor = Anchor;
  exports.Avatar = Avatar;
  exports.Badge = Badge;
  exports.BaseTable = BaseTable;
  exports.Breadcrumb = Breadcrumb;
  exports.Button = Button;
  exports.Calendar = Calendar;
  exports.Card = Card;
  exports.Cascader = Cascader;
  exports.CascaderPanel = CascaderPanel;
  exports.Checkbox = Checkbox;
  exports.Col = Col;
  exports.Collapse = Collapse;
  exports.ColorPicker = ColorPicker;
  exports.ColorPickerPanel = ColorPickerPanel;
  exports.Comment = Comment;
  exports.ConfigContext = ConfigContext$1;
  exports.ConfigProvider = ConfigProvider;
  exports.DatePicker = DatePicker;
  exports.DatePickerPanel = DatePickerPanel;
  exports.DateRangePicker = DateRangePicker;
  exports.DateRangePickerPanel = DateRangePickerPanel;
  exports.Dialog = Dialog;
  exports.DialogPlugin = DialogPlugin;
  exports.Divider = Divider;
  exports.Drawer = Drawer;
  exports.Dropdown = Dropdown;
  exports.EnhancedTable = EnhancedTable;
  exports.Form = Form;
  exports.Image = Image$1;
  exports.ImageViewer = ImageViewer;
  exports.Input = Input;
  exports.InputAdornment = InputAdornment;
  exports.InputNumber = InputNumber;
  exports.Jumper = Jumper;
  exports.Layout = Layout;
  exports.Link = Link;
  exports.List = List;
  exports.Loading = Loading;
  exports.LoadingPlugin = LoadingPlugin;
  exports.Menu = Menu;
  exports.Message = Message;
  exports.MessagePlugin = MessagePlugin;
  exports.Notification = Notification;
  exports.NotificationPlugin = NotificationPlugin;
  exports.Pagination = Pagination;
  exports.Popconfirm = Popconfirm;
  exports.Popup = Popup;
  exports.PrimaryTable = PrimaryTable;
  exports.Progress = Progress;
  exports.Radio = Radio;
  exports.RangeInput = RangeInput;
  exports.RangeInputPopup = RangeInputPopup;
  exports.Rate = Rate;
  exports.Row = Row;
  exports.Select = Select;
  exports.SelectInput = SelectInput;
  exports.SimpleTable = SimpleTable;
  exports.Skeleton = Skeleton;
  exports.Slider = Slider;
  exports.Space = Space;
  exports.Steps = Steps;
  exports.Swiper = Swiper;
  exports.Switch = Switch;
  exports.Table = Table;
  exports.Tabs = Tabs;
  exports.Tag = Tag;
  exports.TagInput = TagInput;
  exports.Textarea = Textarea;
  exports.TimePicker = TimePicker;
  exports.TimePickerPanel = TimePickerPanel;
  exports.TimeRangePicker = TimeRangePicker;
  exports.Timeline = Timeline;
  exports.Tooltip = Tooltip;
  exports.Transfer = Transfer;
  exports.Tree = Tree;
  exports.TreeSelect = TreeSelect;
  exports.Upload = Upload;
  exports.Watermark = Watermark;
  exports.dialog = dialog;
  exports.loading = loading;
  exports.merge = merge$1;
  exports.message = message;
  exports.notification = notification;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tdesign.js.map
