/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-4eb93341.js');
var objectWithoutProperties = require('../../_chunks/dep-1a0462cc.js');
var slicedToArray = require('../../_chunks/dep-9c5d4f93.js');
var React = require('react');
var classNames = require('classnames');
var isFunction = require('../../_chunks/dep-53ba6729.js');
var get = require('../../_chunks/dep-65cb34d8.js');
var hooks_useControlled = require('../../hooks/useControlled.js');
var locale_LocalReceiver = require('../../locale/LocalReceiver.js');
var hooks_useConfig = require('../../hooks/useConfig.js');
var _util_forwardRefWithStatics = require('../../_util/forwardRefWithStatics.js');
var select_util_helper = require('../util/helper.js');
var _util_noop = require('../../_util/noop.js');
var common_FakeArrow = require('../../common/FakeArrow.js');
var loading_index = require('../../loading/index.js');
var selectInput_index = require('../../select-input/index.js');
var select_base_Option = require('./Option.js');
var select_base_OptionGroup = require('./OptionGroup.js');
var select_base_PopupContent = require('./PopupContent.js');
var tag_index = require('../../tag/index.js');
var select_defaultProps = require('../defaultProps.js');
require('../../_chunks/dep-2205decf.js');
require('../../_chunks/dep-61a8a7b0.js');
require('../../_chunks/dep-2a90f794.js');
require('../../_chunks/dep-aab723b3.js');
require('../../_chunks/dep-8329ea23.js');
require('../../_chunks/dep-8f18a7c4.js');
require('../../_chunks/dep-09805e35.js');
require('../../_chunks/dep-1fff9729.js');
require('../../_chunks/dep-46cf36fd.js');
require('../../_chunks/dep-f5e18a2f.js');
require('../../_chunks/dep-384b291c.js');
require('../../_chunks/dep-afce8659.js');
require('../../_chunks/dep-c76c2a08.js');
require('../../_chunks/dep-dc6c808e.js');
require('../../_chunks/dep-76deafcc.js');
require('../../_chunks/dep-4344eec8.js');
require('../../_chunks/dep-fe984d70.js');
require('../../_chunks/dep-a0b5d8f6.js');
require('../../_chunks/dep-12656997.js');
require('../../_chunks/dep-bb60493d.js');
require('../../_chunks/dep-72020528.js');
require('../../_chunks/dep-ad854ba5.js');
require('../../_chunks/dep-eebdbd74.js');
require('../../_chunks/dep-9cd0fde8.js');
require('../../_chunks/dep-d3ad6e52.js');
require('../../_chunks/dep-aafeb50a.js');
require('../../_chunks/dep-6fa7a9e9.js');
require('../../_chunks/dep-994ec160.js');
require('../../_chunks/dep-9429a38a.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_common/js/global-config/default-config.js');
require('hoist-non-react-statics');
require('../../_chunks/dep-8052f095.js');
require('../../_chunks/dep-606cfe2a.js');
require('../../loading/Loading.js');
require('../../_util/dom.js');
require('raf');
require('../../_chunks/dep-9a2dbbb1.js');
require('../../_util/easing.js');
require('../../common/Portal.js');
require('react-dom');
require('../../loading/gradient.js');
require('../../_common/js/loading/circle-adapter.js');
require('../../_common/js/utils/set-style.js');
require('../../_common/js/utils/helper.js');
require('../../loading/defaultProps.js');
require('../../loading/plugin.js');
require('../../select-input/SelectInput.js');
require('../../popup/index.js');
require('../../popup/Popup.js');
require('react-transition-group');
require('react-popper');
require('../../_util/useAnimation.js');
require('../../popup/hooks/useTrigger.js');
require('react-is');
require('../../popup/utils/ref.js');
require('../../_util/composeRefs.js');
require('../../popup/utils/transition.js');
require('../../_util/useMutationObserver.js');
require('../../_chunks/dep-db2b3323.js');
require('../../_chunks/dep-52c5813c.js');
require('../../_util/useWindowSize.js');
require('../../popup/defaultProps.js');
require('../../select-input/useSingle.js');
require('../../_chunks/dep-b5af0182.js');
require('../../_chunks/dep-55c5ba71.js');
require('../../_chunks/dep-1e8de681.js');
require('../../_chunks/dep-07e5d807.js');
require('../../input/index.js');
require('../../input/Input.js');
require('tdesign-icons-react');
require('../../hooks/useGlobalIcon.js');
require('../../input/InputGroup.js');
require('../../input/defaultProps.js');
require('../../select-input/useMultiple.js');
require('../../tag-input/index.js');
require('../../tag-input/TagInput.js');
require('../../_util/useDragSorter.js');
require('../../tag-input/useTagScroll.js');
require('../../tag-input/useTagList.js');
require('lodash');
require('../../tag-input/useHover.js');
require('../../tag-input/defaultProps.js');
require('../../tag/Tag.js');
require('../../tag/CheckTag.js');
require('../../tag/defaultProps.js');
require('../../select-input/useOverlayInnerStyle.js');
require('../../select-input/defaultProps.js');
require('../../_chunks/dep-364d4c00.js');
require('../../_util/useRipple.js');
require('../../_util/setStyle.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var _excluded = ["overlayClassName"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Select = _util_forwardRefWithStatics["default"](function (props, ref) {
  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("select"),
      _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var emptyText = t(local.loadingText);
  var readonly = props.readonly,
      bordered = props.bordered,
      borderless = props.borderless,
      autoWidth = props.autoWidth,
      creatable = props.creatable,
      filter = props.filter,
      _props$loadingText = props.loadingText,
      loadingText = _props$loadingText === void 0 ? emptyText : _props$loadingText,
      max = props.max,
      popupProps = props.popupProps,
      reserveKeyword = props.reserveKeyword,
      className = props.className,
      style = props.style,
      disabled = props.disabled,
      size = props.size,
      multiple = props.multiple,
      placeholder = props.placeholder,
      clearable = props.clearable,
      prefixIcon = props.prefixIcon,
      options = props.options,
      filterable = props.filterable,
      loading = props.loading,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      _props$onClear = props.onClear,
      onClear = _props$onClear === void 0 ? _util_noop["default"] : _props$onClear,
      onCreate = props.onCreate,
      onRemove = props.onRemove,
      onSearch = props.onSearch,
      empty = props.empty,
      valueType = props.valueType,
      keys = props.keys,
      children = props.children,
      collapsedItems = props.collapsedItems,
      minCollapsedNum = props.minCollapsedNum,
      valueDisplay = props.valueDisplay,
      onEnter = props.onEnter,
      onVisibleChange = props.onVisibleChange,
      showArrow = props.showArrow,
      inputProps = props.inputProps,
      panelBottomContent = props.panelBottomContent,
      panelTopContent = props.panelTopContent,
      selectInputProps = props.selectInputProps,
      tagInputProps = props.tagInputProps,
      tagProps = props.tagProps;
  var selectPopupRef = React.useRef();

  var _useControlled = hooks_useControlled["default"](props, "value", props.onChange),
      _useControlled2 = slicedToArray._slicedToArray(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];

  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var _ref = popupProps || {},
      overlayClassName = _ref.overlayClassName,
      restPopupProps = objectWithoutProperties._objectWithoutProperties(_ref, _excluded);

  var name = "".concat(classPrefix, "-select");

  var _useControlled3 = hooks_useControlled["default"](props, "popupVisible", props.onPopupVisibleChange),
      _useControlled4 = slicedToArray._slicedToArray(_useControlled3, 2),
      showPopup = _useControlled4[0],
      setShowPopup = _useControlled4[1];

  var _useControlled5 = hooks_useControlled["default"](props, "inputValue", props.onInputChange),
      _useControlled6 = slicedToArray._slicedToArray(_useControlled5, 2),
      inputValue = _useControlled6[0],
      onInputChange = _useControlled6[1];

  var _useState = React.useState([]),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      currentOptions = _useState2[0],
      setCurrentOptions = _useState2[1];

  var _useState3 = React.useState([]),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      tmpPropOptions = _useState4[0],
      setTmpPropOptions = _useState4[1];

  var _useState5 = React.useState({}),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      valueToOption = _useState6[0],
      setValueToOption = _useState6[1];

  var _useState7 = React.useState([]),
      _useState8 = slicedToArray._slicedToArray(_useState7, 2),
      selectedOptions = _useState8[0],
      setSelectedOptions = _useState8[1];

  React.useEffect(function () {
    if (keys) {
      var transformedOptions = options === null || options === void 0 ? void 0 : options.map(function (option) {
        return _objectSpread(_objectSpread({}, option), {}, {
          value: get.get_1(option, (keys === null || keys === void 0 ? void 0 : keys.value) || "value"),
          label: get.get_1(option, (keys === null || keys === void 0 ? void 0 : keys.label) || "label")
        });
      });
      setCurrentOptions(transformedOptions);
      setTmpPropOptions(transformedOptions);
    } else {
      setCurrentOptions(options);
      setTmpPropOptions(options);
    }

    setValueToOption(select_util_helper.getValueToOption(children, options, keys) || {});
  }, [options, keys, children]);
  React.useEffect(function () {
    setSelectedOptions(function (oldSelectedOptions) {
      var valueKey = (keys === null || keys === void 0 ? void 0 : keys.value) || "value";
      var labelKey = (keys === null || keys === void 0 ? void 0 : keys.label) || "label";

      if (Array.isArray(value)) {
        return value.map(function (item) {
          if (valueType === "value") {
            var _ref2;

            return valueToOption[item] || oldSelectedOptions.find(function (option) {
              return get.get_1(option, valueKey) === item;
            }) || (_ref2 = {}, defineProperty._defineProperty(_ref2, valueKey, item), defineProperty._defineProperty(_ref2, labelKey, item), _ref2);
          }

          return item;
        }).filter(Boolean);
      }

      if (value !== void 0 && value !== null) {
        if (valueType === "value") {
          var _ref3;

          return [valueToOption[value] || oldSelectedOptions.find(function (option) {
            return get.get_1(option, valueKey) === value;
          }) || (_ref3 = {}, defineProperty._defineProperty(_ref3, valueKey, value), defineProperty._defineProperty(_ref3, labelKey, value), _ref3)].filter(Boolean);
        }

        return [value];
      }

      return [];
    });
  }, [value, keys, valueType, valueToOption]);
  var selectedLabel = React.useMemo(function () {
    if (multiple) {
      return selectedOptions.map(function (selectedOption) {
        return get.get_1(selectedOption || {}, (keys === null || keys === void 0 ? void 0 : keys.label) || "label") || "";
      });
    }

    return get.get_1(selectedOptions[0] || {}, (keys === null || keys === void 0 ? void 0 : keys.label) || "label") || void 0;
  }, [selectedOptions, keys, multiple]);

  var handleShowPopup = function handleShowPopup(visible, ctx) {
    if (disabled) return;
    setShowPopup(visible, ctx);
    onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(visible);
    visible && onInputChange("");
  };

  var onTagChange = function onTagChange(_currentTags, context) {
    var trigger = context.trigger,
        index = context.index,
        item = context.item,
        e = context.e;

    if (trigger === "backspace") {
      e.stopPropagation();
      var closest = -1;
      var len = index;

      while (len >= 0) {
        var _selectedOptions$len;

        if (!((_selectedOptions$len = selectedOptions[len]) !== null && _selectedOptions$len !== void 0 && _selectedOptions$len.disabled)) {
          closest = len;
          break;
        }

        len -= 1;
      }

      if (closest < 0) {
        return;
      }

      var values = select_util_helper.getSelectValueArr(value, value[closest], true, valueType, keys);
      onChange(values, {
        e: e,
        trigger: trigger,
        selectedOptions: []
      });
      return;
    }

    if (trigger === "clear") {
      e.stopPropagation();
      onChange([], {
        e: e,
        trigger: trigger,
        selectedOptions: []
      });
      return;
    }

    if (trigger === "tag-remove") {
      e.stopPropagation();

      var _values = select_util_helper.getSelectValueArr(value, value[index], true, valueType, keys);

      onChange(_values, {
        e: e,
        trigger: trigger,
        selectedOptions: []
      });

      if (isFunction.isFunction_1(onRemove)) {
        onRemove({
          value: value[index],
          data: {
            label: item,
            value: value[index]
          },
          e: e
        });
      }
    }
  };

  var handleChange = function handleChange(value2, context) {
    if (multiple) {
      !reserveKeyword && onInputChange("", {
        trigger: "clear"
      });
    }

    if (creatable && isFunction.isFunction_1(onCreate)) {
      if (options.filter(function (option) {
        return option.value === value2;
      }).length === 0) {
        onCreate(value2);
      }
    }

    onChange === null || onChange === void 0 ? void 0 : onChange(value2, _objectSpread(_objectSpread({}, context), {}, {
      selectedOptions: []
    }));
  };

  var handleFilter = function handleFilter(value2) {
    var filteredOptions = [];

    if (!value2) {
      setCurrentOptions(tmpPropOptions);
      return;
    }

    if (filter && isFunction.isFunction_1(filter)) {
      if (Array.isArray(tmpPropOptions)) {
        filteredOptions = tmpPropOptions.filter(function (option) {
          return filter(value2, option);
        });
      }
    } else if (Array.isArray(tmpPropOptions)) {
      var upperValue = value2.toUpperCase();
      filteredOptions = tmpPropOptions.filter(function (option) {
        return ((option === null || option === void 0 ? void 0 : option.label) || "").toUpperCase().includes(upperValue);
      });
    }

    if (creatable) {
      filteredOptions = filteredOptions.concat([{
        label: value2,
        value: value2
      }]);
    }

    setCurrentOptions(filteredOptions);
  };

  var handleInputChange = function handleInputChange(value2) {
    onInputChange(value2);
    if (value2 === void 0) return;

    if (isFunction.isFunction_1(onSearch)) {
      onSearch(value2);
      return;
    }
  };

  var onClearValue = function onClearValue(context) {
    context.e.stopPropagation();

    if (Array.isArray(value)) {
      onChange([], context);
    } else {
      onChange(null, context);
    }

    onInputChange(void 0);
    onClear(context);
  };

  React.useEffect(function () {
    if (typeof inputValue !== "undefined") {
      handleFilter(String(inputValue));
    }
  }, [inputValue]);

  var renderSuffixIcon = function renderSuffixIcon() {
    if (loading) {
      return /* @__PURE__ */React__default["default"].createElement(loading_index.Loading, {
        className: classNames__default["default"]("".concat(name, "__right-icon"), "".concat(name, "__active-icon")),
        loading: true,
        size: "small"
      });
    }

    return showArrow && /* @__PURE__ */React__default["default"].createElement(common_FakeArrow["default"], {
      overlayClassName: "".concat(name, "__right-icon"),
      isActive: showPopup,
      disabled: disabled
    });
  };

  var renderContent = function renderContent() {
    var popupContentProps = {
      onChange: handleChange,
      value: value,
      className: className,
      size: size,
      multiple: multiple,
      showPopup: showPopup,
      setShowPopup: function setShowPopup(show) {
        return handleShowPopup(show, {});
      },
      options: currentOptions,
      empty: empty,
      max: max,
      loadingText: loadingText,
      loading: loading,
      valueType: valueType,
      keys: keys,
      panelBottomContent: panelBottomContent,
      panelTopContent: panelTopContent
    };
    return /* @__PURE__ */React__default["default"].createElement(select_base_PopupContent["default"], _objectSpread(_objectSpread({}, popupContentProps), {}, {
      ref: selectPopupRef
    }), children);
  };

  var renderValueDisplay = function renderValueDisplay() {
    if (!valueDisplay) {
      if (!multiple) {
        if (typeof selectedLabel !== "string") {
          return selectedLabel;
        }

        return "";
      }

      return function (_ref4) {
        var val = _ref4.value;
        return val.slice(0, minCollapsedNum ? minCollapsedNum : val.length).map(function (v, key) {
          var filterOption = options === null || options === void 0 ? void 0 : options.find(function (option) {
            return option.label === v;
          });
          return /* @__PURE__ */React__default["default"].createElement(tag_index.Tag, {
            key: key,
            onClose: function onClose(_ref5) {
              var e = _ref5.e;
              e.stopPropagation();
              var values = select_util_helper.getSelectValueArr(value, value[key], true, valueType, keys);
              onChange(values, null);
              return;
            },
            closable: !(filterOption !== null && filterOption !== void 0 && filterOption.disabled)
          }, v);
        });
      };
    }

    if (typeof valueDisplay === "string") {
      return valueDisplay;
    }

    if (multiple) {
      return function (_ref6) {
        var onClose = _ref6.onClose;
        return valueDisplay({
          value: selectedLabel,
          onClose: onClose
        });
      };
    }

    return selectedLabel.length ? valueDisplay({
      value: selectedLabel[0],
      onClose: _util_noop["default"]
    }) : "";
  };

  var renderCollapsedItems = React.useMemo(function () {
    return collapsedItems ? function () {
      return collapsedItems({
        value: selectedLabel,
        collapsedSelectedItems: selectedLabel.slice(minCollapsedNum, selectedLabel.length),
        count: selectedLabel.length - minCollapsedNum
      });
    } : null;
  }, [selectedLabel, collapsedItems, minCollapsedNum]);
  var updateScrollTop = React.useCallback(function (content) {
    if (!(selectPopupRef !== null && selectPopupRef !== void 0 && selectPopupRef.current)) {
      return;
    }

    var firstSelectedNode = (selectPopupRef === null || selectPopupRef === void 0 ? void 0 : selectPopupRef.current).querySelector(".".concat(classPrefix, "-is-selected"));

    if (firstSelectedNode && content) {
      var _getComputedStyle = getComputedStyle(firstSelectedNode),
          paddingBottom = _getComputedStyle.paddingBottom;

      var _getComputedStyle2 = getComputedStyle(content),
          marginBottom = _getComputedStyle2.marginBottom;

      var elementBottomHeight = parseInt(paddingBottom, 10) + parseInt(marginBottom, 10);
      var updateValue = firstSelectedNode.offsetTop - content.offsetTop - (content.clientHeight - firstSelectedNode.clientHeight) + elementBottomHeight;
      content.scrollTop = updateValue;
    }
  }, [classPrefix]);
  var onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave;
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"]("".concat(name, "__wrap"), className),
    style: style,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, /* @__PURE__ */React__default["default"].createElement(selectInput_index.SelectInput, _objectSpread({
    autoWidth: !(style !== null && style !== void 0 && style.width) && autoWidth,
    ref: ref,
    className: name,
    readonly: readonly,
    allowInput: (filterable !== null && filterable !== void 0 ? filterable : local.filterable) || isFunction.isFunction_1(filter),
    multiple: multiple,
    value: selectedLabel,
    valueDisplay: renderValueDisplay(),
    clearable: clearable,
    disabled: disabled,
    status: props.status,
    tips: props.tips,
    borderless: borderless || !bordered,
    label: prefixIcon,
    suffixIcon: renderSuffixIcon(),
    panel: renderContent(),
    placeholder: !multiple && showPopup && selectedLabel ? selectedLabel : placeholder || t(local.placeholder),
    inputValue: inputValue,
    tagInputProps: _objectSpread({}, tagInputProps),
    tagProps: tagProps,
    inputProps: _objectSpread({
      size: size
    }, inputProps),
    minCollapsedNum: minCollapsedNum,
    collapsedItems: renderCollapsedItems,
    popupProps: _objectSpread({
      overlayClassName: ["".concat(name, "__dropdown"), overlayClassName]
    }, restPopupProps),
    popupVisible: showPopup,
    onPopupVisibleChange: handleShowPopup,
    onTagChange: onTagChange,
    onInputChange: handleInputChange,
    onFocus: onFocus,
    onEnter: onEnter,
    onBlur: onBlur,
    onClear: function onClear(context) {
      onClearValue(context);
    },
    updateScrollTop: updateScrollTop
  }, selectInputProps)));
}, {
  Option: select_base_Option["default"],
  OptionGroup: select_base_OptionGroup["default"]
});
Select.displayName = "Select";
Select.defaultProps = select_defaultProps.selectDefaultProps;

exports["default"] = Select;
//# sourceMappingURL=Select.js.map
