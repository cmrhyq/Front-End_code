/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectWithoutProperties = require('../_chunks/dep-1a0462cc.js');
var slicedToArray = require('../_chunks/dep-9c5d4f93.js');
var defineProperty = require('../_chunks/dep-4eb93341.js');
var React = require('react');
var isString = require('../_chunks/dep-9a2dbbb1.js');
var isObject = require('../_chunks/dep-aab723b3.js');
var isFunction = require('../_chunks/dep-53ba6729.js');
var tdesignIconsReact = require('tdesign-icons-react');
var locale_LocalReceiver = require('../locale/LocalReceiver.js');
var button_index = require('../button/index.js');
var _util_noop = require('../_util/noop.js');
var dialog_RenderDialog = require('./RenderDialog.js');
var _util_useSetState = require('../_util/useSetState.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var dialog_defaultProps = require('./defaultProps.js');
require('../_chunks/dep-2205decf.js');
require('../_chunks/dep-61a8a7b0.js');
require('../_chunks/dep-2a90f794.js');
require('../_chunks/dep-8f18a7c4.js');
require('../_chunks/dep-1fff9729.js');
require('../_chunks/dep-4344eec8.js');
require('../_chunks/dep-fe984d70.js');
require('../_chunks/dep-46cf36fd.js');
require('../_chunks/dep-f5e18a2f.js');
require('../_chunks/dep-384b291c.js');
require('../_chunks/dep-a0b5d8f6.js');
require('../_chunks/dep-12656997.js');
require('../_chunks/dep-bb60493d.js');
require('../_chunks/dep-72020528.js');
require('../_chunks/dep-ad854ba5.js');
require('../_chunks/dep-eebdbd74.js');
require('../_chunks/dep-9cd0fde8.js');
require('../_chunks/dep-d3ad6e52.js');
require('../_chunks/dep-aafeb50a.js');
require('../_chunks/dep-6fa7a9e9.js');
require('../_chunks/dep-994ec160.js');
require('../_chunks/dep-9429a38a.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');
require('../button/Button.js');
require('classnames');
require('../_util/useRipple.js');
require('../_util/useAnimation.js');
require('../_util/setStyle.js');
require('../_util/dom.js');
require('raf');
require('../_util/easing.js');
require('../loading/index.js');
require('../loading/Loading.js');
require('../common/Portal.js');
require('react-dom');
require('../loading/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('../_chunks/dep-8052f095.js');
require('../_chunks/dep-606cfe2a.js');
require('../loading/defaultProps.js');
require('../loading/plugin.js');
require('../button/defaultProps.js');
require('react-transition-group');
require('../_util/useLayoutEffect.js');
require('../_util/useDialogEsc.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["visible", "attach", "closeBtn", "footer", "onCancel", "onConfirm", "cancelBtn", "confirmBtn", "onClose", "isPlugin"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var renderDialogButton = function renderDialogButton(btn, defaultProps) {
  var result = null;

  if (isString.isString_1(btn)) {
    result = /* @__PURE__ */React__default["default"].createElement(button_index.Button, _objectSpread({}, defaultProps), btn);
  } else if ( /*#__PURE__*/React.isValidElement(btn)) {
    result = btn;
  } else if (isObject.isObject_1(btn)) {
    result = /* @__PURE__ */React__default["default"].createElement(button_index.Button, _objectSpread(_objectSpread({}, defaultProps), btn));
  } else if (isFunction.isFunction_1(btn)) {
    result = btn();
  }

  return result;
};

var Dialog = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
    CloseIcon: tdesignIconsReact.CloseIcon,
    InfoCircleFilledIcon: tdesignIconsReact.InfoCircleFilledIcon,
    CheckCircleFilledIcon: tdesignIconsReact.CheckCircleFilledIcon
  }),
      CloseIcon = _useGlobalIcon.CloseIcon,
      InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon;

  var dialogDom = React.useRef();

  var _useSetState = _util_useSetState["default"](_objectSpread({
    width: 520,
    visible: false,
    zIndex: 2500,
    placement: "center",
    mode: "modal",
    showOverlay: true,
    destroyOnClose: false,
    draggable: false,
    preventScrollThrough: true,
    isPlugin: false
  }, props)),
      _useSetState2 = slicedToArray._slicedToArray(_useSetState, 2),
      state = _useSetState2[0],
      setState = _useSetState2[1];

  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("dialog"),
      _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var confirmText = t(local.confirm);
  var cancelText = t(local.cancel);

  var visible = state.visible,
      attach = state.attach,
      closeBtn = state.closeBtn,
      _state$footer = state.footer,
      footer = _state$footer === void 0 ? true : _state$footer,
      _state$onCancel = state.onCancel,
      onCancel = _state$onCancel === void 0 ? _util_noop["default"] : _state$onCancel,
      _state$onConfirm = state.onConfirm,
      onConfirm = _state$onConfirm === void 0 ? _util_noop["default"] : _state$onConfirm,
      _state$cancelBtn = state.cancelBtn,
      cancelBtn = _state$cancelBtn === void 0 ? cancelText : _state$cancelBtn,
      _state$confirmBtn = state.confirmBtn,
      confirmBtn = _state$confirmBtn === void 0 ? confirmText : _state$confirmBtn,
      _state$onClose = state.onClose,
      onClose = _state$onClose === void 0 ? _util_noop["default"] : _state$onClose,
      _state$isPlugin = state.isPlugin,
      isPlugin = _state$isPlugin === void 0 ? false : _state$isPlugin,
      restState = objectWithoutProperties._objectWithoutProperties(state, _excluded);

  React.useEffect(function () {
    if (!isPlugin) {
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), props);
      });
    }
  }, [props, setState, isPlugin]);
  var prefixCls = "".concat(classPrefix, "-dialog");

  var renderCloseIcon = function renderCloseIcon() {
    if (closeBtn === false) return null;
    if (closeBtn === true) return /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
      style: {
        verticalAlign: "unset"
      }
    });
    return closeBtn || /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
      style: {
        verticalAlign: "unset"
      }
    });
  };

  React__default["default"].useImperativeHandle(ref, function () {
    return {
      show: function show() {
        setState({
          visible: true
        });
      },
      hide: function hide() {
        setState({
          visible: false
        });
      },
      destroy: function destroy() {
        setState({
          visible: false,
          destroyOnClose: true
        });
      },
      update: function update(newOptions) {
        setState(function (prevState) {
          return _objectSpread(_objectSpread({}, prevState), newOptions);
        });
      }
    };
  });
  var renderHeader = React.useMemo(function () {
    if (!state.header) return null;
    var iconMap = {
      info: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
        className: "".concat(classPrefix, "-is-info")
      }),
      warning: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
        className: "".concat(classPrefix, "-is-warning")
      }),
      error: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
        className: "".concat(classPrefix, "-is-error")
      }),
      success: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, {
        className: "".concat(classPrefix, "-is-success")
      })
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__header")
    }, iconMap[state.theme], state.header);
  }, [state.header, state.theme, prefixCls, classPrefix]);

  var handleCancel = function handleCancel(e) {
    onCancel({
      e: e
    });
    onClose({
      e: e,
      trigger: "cancel"
    });
  };

  var handleConfirm = function handleConfirm(e) {
    onConfirm({
      e: e
    });
  };

  var defaultFooter = function defaultFooter() {
    var renderCancelBtn = renderDialogButton(cancelBtn, {
      variant: "outline"
    });
    var renderConfirmBtn = renderDialogButton(confirmBtn, {
      theme: "primary"
    });
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, renderCancelBtn && /*#__PURE__*/React__default["default"].cloneElement(renderCancelBtn, _objectSpread({
      onClick: handleCancel
    }, renderCancelBtn.props)), renderConfirmBtn && /*#__PURE__*/React__default["default"].cloneElement(renderConfirmBtn, _objectSpread({
      onClick: handleConfirm
    }, renderConfirmBtn.props)));
  };

  return /* @__PURE__ */React__default["default"].createElement(dialog_RenderDialog["default"], _objectSpread(_objectSpread({}, restState), {}, {
    visible: visible,
    prefixCls: prefixCls,
    header: renderHeader,
    attach: attach,
    closeBtn: renderCloseIcon(),
    classPrefix: classPrefix,
    onClose: onClose,
    onConfirm: onConfirm,
    footer: footer === true ? defaultFooter() : footer,
    ref: dialogDom
  }));
});
Dialog.displayName = "Dialog";
Dialog.defaultProps = dialog_defaultProps.dialogDefaultProps;

exports["default"] = Dialog;
//# sourceMappingURL=Dialog.js.map
