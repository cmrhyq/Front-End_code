{"version":3,"file":"Transfer.js","sources":["../../src/transfer/Transfer.tsx"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport difference from 'lodash/difference';\nimport classnames from 'classnames';\n\nimport { ChevronRightIcon as TdChevronRightIcon, ChevronLeftIcon as TdChevronLeftIcon } from 'tdesign-icons-react';\nimport { TdTransferProps, DataOption, TransferValue, TransferListType } from './type';\nimport useConfig from '../hooks/useConfig';\nimport useGlobalIcon from '../hooks/useGlobalIcon';\nimport Button from '../button';\nimport TransferList from './TransferList';\nimport { filterCheckedTreeNodes, getTargetNodes, getDefaultValue, getJSX, getLeafNodes } from './utils';\nimport { TNode, StyledProps } from '../common';\nimport { useLocaleReceiver } from '../locale/LocalReceiver';\nimport { transferDefaultProps } from './defaultProps';\n\nexport interface TransferProps extends TdTransferProps, StyledProps {\n  content?: Array<TNode>;\n}\n\ninterface StateInterface {\n  source: DataOption[];\n  target: DataOption[];\n}\n\ninterface CheckedInterface {\n  source: Array<TransferValue>;\n  target: Array<TransferValue>;\n}\n\nconst Transfer: React.FunctionComponent<TransferProps> = (props) => {\n  const {\n    data,\n    search,\n    checked,\n    defaultChecked,\n    onCheckedChange,\n    value,\n    defaultValue,\n    onChange,\n    empty,\n    disabled,\n    pagination,\n    title,\n    operation,\n    footer,\n    transferItem,\n    content,\n    tree,\n    showCheckAll,\n  } = props;\n  const [state, setState] = useState<StateInterface>(() => ({\n    source: data.filter((item) => !defaultValue.includes(item.value)),\n    target: data.filter((item) => defaultValue.includes(item.value)),\n  }));\n  const [checkeds, setCheckeds] = useState<CheckedInterface>(() => ({\n    source: state.source\n      .filter((item) => !item.disabled && defaultChecked.includes(item.value))\n      .map((item) => item.value),\n    target: state.target\n      .filter((item) => !item.disabled && defaultChecked.includes(item.value))\n      .map((item) => item.value),\n  }));\n  const [searchState, setSearchState] = useState<{ source: string; target: string }>({ source: '', target: '' });\n\n  const isTargetControlled = 'value' in props;\n  const isCheckedControlled = 'checked' in props;\n\n  const { classPrefix } = useConfig();\n  const { ChevronRightIcon, ChevronLeftIcon } = useGlobalIcon({\n    ChevronLeftIcon: TdChevronLeftIcon,\n    ChevronRightIcon: TdChevronRightIcon,\n  });\n  const transferClassName = `${classPrefix}-transfer`;\n\n  const [local, t] = useLocaleReceiver('transfer');\n\n  const [sourceData, targetData] = useMemo(() => {\n    const { source, target } = state;\n    const { source: searchSource, target: searchTarget } = searchState;\n    return [\n      source.filter((item) => !searchSource || item.label.indexOf(searchState.source) > -1),\n      target.filter((item) => !searchTarget || item.label.indexOf(searchState.target) > -1),\n    ];\n  }, [searchState, state]);\n\n  const [SourceEmptyCmp, TargetEmptyCmp] = getDefaultValue(empty, t(local.empty)).map((item) => getJSX(item));\n  const [sourceDisable, targetDisable] = getDefaultValue(disabled, false);\n  const [sourcePagonation, targetPagonation] = getDefaultValue(pagination);\n  const [sourceTitle, targetTitle] = getDefaultValue(title).map((item) => getJSX(item));\n  const [leftOperation, rightOperation] = getDefaultValue(operation, [\n    () => <ChevronRightIcon />,\n    () => <ChevronLeftIcon />,\n  ]).map((item) => getJSX(item));\n  const [sourceFooter, targetFooter] = getDefaultValue(footer).map((item) => getJSX(item));\n  const [sourceTransferItem, targetTransferItem] = getDefaultValue(transferItem);\n  const [sourceContent, targetContent] = getDefaultValue(content);\n\n  const [showCheckAllSource, showCheckAllTarget] = useMemo(\n    () =>\n      Array.isArray(showCheckAll) ? [showCheckAll[0] ?? true, showCheckAll[1] ?? true] : [showCheckAll, showCheckAll],\n    [showCheckAll],\n  );\n\n  const transformSource = () => {\n    const { source, target } = state;\n    const sourceCheckeds = source.filter((item) => checkeds.source.includes(item.value));\n    let newSource = difference(source, sourceCheckeds);\n    let newTarget = [...target, ...sourceCheckeds];\n    let newTargetValue = newTarget.map((t) => t.value);\n\n    // 树结构处理 source/target 节点数据\n    if (tree) {\n      newSource = filterCheckedTreeNodes(source, checkeds.source);\n      newTarget = getTargetNodes(newSource, data);\n      newTargetValue = getLeafNodes(newTarget).map((t) => t.value);\n    }\n    if (isTargetControlled) {\n      onChange?.(newTargetValue, {\n        type: 'source',\n        movedValue: sourceCheckeds.map((s) => s.value),\n      });\n    } else {\n      setState({ ...state, source: newSource, target: [...newTarget] });\n      setCheckeds({ ...checkeds, source: [] });\n    }\n  };\n  const transformTarget = () => {\n    const { source, target } = state;\n    const targetCheckeds = target.filter((item) => checkeds.target.includes(item.value));\n    let newSource = [...source, ...targetCheckeds];\n    let newTarget = difference(target, targetCheckeds);\n    let newTargetValue = newTarget.map((t) => t.value);\n\n    // 树结构处理 source/target 节点数据\n    if (tree) {\n      newTarget = filterCheckedTreeNodes(target, checkeds.target);\n      newSource = getTargetNodes(newTarget, data);\n      newTargetValue = getLeafNodes(newTarget).map((t) => t.value);\n    }\n    if (isTargetControlled) {\n      onChange?.(newTargetValue, {\n        type: 'target',\n        movedValue: targetCheckeds.map((s) => s.value),\n      });\n    } else {\n      setState({ ...state, source: newSource, target: newTarget });\n      setCheckeds({ ...checkeds, target: [] });\n    }\n  };\n\n  const OperationsCmp = () => {\n    const isSourceDisabled = sourceDisable || !checkeds.source.length;\n    const isTargetDisabled = targetDisable || !checkeds.target.length;\n\n    return (\n      <div className={`${transferClassName}__operations`}>\n        <Button\n          key={isSourceDisabled ? 'right-outline' : 'right-base'}\n          variant=\"outline\"\n          disabled={isSourceDisabled}\n          onClick={transformSource}\n        >\n          {leftOperation}\n        </Button>\n        <Button\n          key={isSourceDisabled ? 'left-outline' : 'left-base'}\n          variant=\"outline\"\n          disabled={isTargetDisabled}\n          onClick={transformTarget}\n        >\n          {rightOperation}\n        </Button>\n      </div>\n    );\n  };\n\n  const handleCheckChange = (value: Array<TransferValue>, type: TransferListType) => {\n    const { source: sourceChecked, target: targetChecked } = checkeds;\n    const inverseMap = { source: 'target', target: 'source' };\n    isCheckedControlled\n      ? onCheckedChange?.({\n          type,\n          checked: value.concat(checkeds[inverseMap[type]]),\n          sourceChecked,\n          targetChecked,\n        })\n      : setCheckeds({ ...checkeds, [type]: value });\n  };\n\n  // value 受控\n  useEffect(() => {\n    if (isTargetControlled && Array.isArray(value)) {\n      let newTarget = data.filter((item) => value.includes(item.value));\n      let newSource = difference(data, newTarget);\n      // 树结构处理 source/target 节点数据\n      if (tree) {\n        newSource = filterCheckedTreeNodes(data, value);\n        newTarget = getTargetNodes(newSource, data);\n      }\n      setState({ source: [...newSource], target: [...newTarget] });\n      setCheckeds({ source: [], target: [] });\n    }\n  }, [value, data, isTargetControlled, tree]);\n\n  // checked 受控\n  useEffect(() => {\n    const { source, target } = state;\n    if (isCheckedControlled && Array.isArray(checked)) {\n      const newSourceChecked = source\n        .filter((item) => !item.disabled && checked.includes(item.value))\n        .map((item) => item.value);\n      const newTargetChecked = target\n        .filter((item) => !item.disabled && checked.includes(item.value))\n        .map((item) => item.value);\n      setCheckeds({ source: newSourceChecked, target: newTargetChecked });\n    }\n  }, [checked, state, isCheckedControlled]);\n\n  return (\n    <div\n      className={classnames(transferClassName, {\n        [`${transferClassName}__search`]: search,\n        [`${transferClassName}__pagination`]: pagination,\n        [`${transferClassName}__footer`]: footer,\n        [`${transferClassName}--with-tree`]: tree,\n      })}\n    >\n      <TransferList\n        className={`${transferClassName}__list-source`}\n        data={sourceData}\n        search={search}\n        checked={checkeds.source}\n        empty={SourceEmptyCmp}\n        disabled={sourceDisable}\n        pagination={sourcePagonation}\n        title={sourceTitle}\n        footer={sourceFooter}\n        transferItem={sourceTransferItem}\n        content={sourceContent}\n        onCheckbox={(value) => handleCheckChange(value, 'source')}\n        onSearch={(val: string) => setSearchState({ ...searchState, source: val })}\n        tree={tree}\n        showCheckAll={showCheckAllSource}\n      ></TransferList>\n      {OperationsCmp()}\n      <TransferList\n        className={`${transferClassName}__list-target`}\n        data={targetData}\n        search={search}\n        checked={checkeds.target}\n        empty={TargetEmptyCmp}\n        disabled={targetDisable}\n        pagination={targetPagonation}\n        title={targetTitle}\n        footer={targetFooter}\n        transferItem={targetTransferItem}\n        content={targetContent}\n        onCheckbox={(value) => handleCheckChange(value, 'target')}\n        onSearch={(val: string) => setSearchState({ ...searchState, target: val })}\n        tree={tree}\n        showCheckAll={showCheckAllTarget}\n      ></TransferList>\n    </div>\n  );\n};\n\nTransfer.displayName = 'Transfer';\nTransfer.defaultProps = transferDefaultProps;\n\nexport default Transfer;\n"],"names":["Transfer","props","data","search","checked","defaultChecked","onCheckedChange","value","defaultValue","onChange","empty","disabled","pagination","title","operation","footer","transferItem","content","tree","showCheckAll","useState","source","filter","item","includes","target","_slicedToArray","state","setState","map","checkeds","setCheckeds","searchState","setSearchState","isTargetControlled","isCheckedControlled","useConfig","classPrefix","useGlobalIcon","ChevronLeftIcon","TdChevronLeftIcon","ChevronRightIcon","TdChevronRightIcon","transferClassName","useLocaleReceiver","local","t","useMemo","searchSource","searchTarget","label","indexOf","sourceData","targetData","getDefaultValue","getJSX","SourceEmptyCmp","TargetEmptyCmp","sourceDisable","targetDisable","sourcePagonation","targetPagonation","sourceTitle","targetTitle","leftOperation","rightOperation","sourceFooter","targetFooter","sourceTransferItem","targetTransferItem","sourceContent","targetContent","Array","isArray","showCheckAllSource","showCheckAllTarget","transformSource","sourceCheckeds","newSource","difference","newTarget","_toConsumableArray","newTargetValue","filterCheckedTreeNodes","getTargetNodes","getLeafNodes","type","movedValue","s","transformTarget","targetCheckeds","OperationsCmp","isSourceDisabled","length","isTargetDisabled","React","createElement","className","Button","key","variant","onClick","handleCheckChange","sourceChecked","targetChecked","inverseMap","concat","useEffect","newSourceChecked","newTargetChecked","classnames","TransferList","onCheckbox","onSearch","val","displayName","defaultProps","transferDefaultProps"],"mappings":"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"}