/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../_chunks/dep-9c5d4f93.js');
var defineProperty = require('../_chunks/dep-4eb93341.js');
var React = require('react');
var classNames = require('classnames');
var tdesignIconsReact = require('tdesign-icons-react');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var _util_noop = require('../_util/noop.js');
var swiper_defaultProps = require('./defaultProps.js');
var swiper_SwiperItem = require('./SwiperItem.js');
require('../_chunks/dep-2205decf.js');
require('../_chunks/dep-4344eec8.js');
require('../_chunks/dep-fe984d70.js');
require('../_chunks/dep-46cf36fd.js');
require('../_chunks/dep-f5e18a2f.js');
require('../_chunks/dep-53ba6729.js');
require('../_chunks/dep-61a8a7b0.js');
require('../_chunks/dep-2a90f794.js');
require('../_chunks/dep-aab723b3.js');
require('../_chunks/dep-384b291c.js');
require('../_chunks/dep-a0b5d8f6.js');
require('../_chunks/dep-12656997.js');
require('../_chunks/dep-1fff9729.js');
require('../_chunks/dep-bb60493d.js');
require('../_chunks/dep-72020528.js');
require('../_chunks/dep-ad854ba5.js');
require('../_chunks/dep-eebdbd74.js');
require('../_chunks/dep-8f18a7c4.js');
require('../_chunks/dep-9cd0fde8.js');
require('../_chunks/dep-d3ad6e52.js');
require('../_chunks/dep-aafeb50a.js');
require('../_chunks/dep-6fa7a9e9.js');
require('../_chunks/dep-994ec160.js');
require('../_chunks/dep-9429a38a.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var defaultNavigation = {
  placement: "inside",
  showSlideBtn: "always",
  size: "medium",
  type: "bars"
};

var Swiper = function Swiper(props) {
  var _classnames4, _classnames5;

  var animation = props.animation,
      autoplay = props.autoplay,
      current = props.current,
      defaultCurrent = props.defaultCurrent,
      direction = props.direction,
      duration = props.duration,
      interval = props.interval,
      trigger = props.trigger,
      height = props.height,
      loop = props.loop,
      stopOnHover = props.stopOnHover,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? _util_noop["default"] : _props$onChange,
      className = props.className,
      children = props.children,
      navigation = props.navigation,
      type = props.type;

  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
    ChevronLeftIcon: tdesignIconsReact.ChevronLeftIcon,
    ChevronRightIcon: tdesignIconsReact.ChevronRightIcon
  }),
      ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;

  var navigationConfig = defaultNavigation;
  var navigationNode = null;

  if ( /*#__PURE__*/React.isValidElement(navigation)) {
    navigationNode = navigation;
  } else {
    navigationConfig = _objectSpread(_objectSpread({}, defaultNavigation), navigation);
  }

  var _useState = React.useState(defaultCurrent),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      currentIndex = _useState2[0],
      setCurrentIndex = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      needAnimation = _useState4[0],
      setNeedAnimation = _useState4[1];

  var _useState5 = React.useState(navigationConfig.showSlideBtn === "always"),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      arrowShow = _useState6[0],
      setArrowShow = _useState6[1];

  var swiperTimer = React.useRef(null);
  var swiperAnimationTimer = React.useRef(null);
  var isHovering = React.useRef(false);
  var swiperWrap = React.useRef(null);

  var getWrapAttribute = function getWrapAttribute(attr) {
    var _swiperWrap$current, _swiperWrap$current$p;

    return (_swiperWrap$current = swiperWrap.current) === null || _swiperWrap$current === void 0 ? void 0 : (_swiperWrap$current$p = _swiperWrap$current.parentNode) === null || _swiperWrap$current$p === void 0 ? void 0 : _swiperWrap$current$p[attr];
  };

  var childrenList = React.useMemo(function () {
    return React__default["default"].Children.toArray(children).filter(function (child) {
      return child.type.displayName === swiper_SwiperItem["default"].displayName;
    });
  }, [children]);
  var childrenLength = childrenList.length;
  var swiperItemList = childrenList.map(function (child, index) {
    return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread(_objectSpread({
      key: index,
      index: index,
      currentIndex: currentIndex,
      needAnimation: needAnimation,
      childrenLength: childrenLength,
      getWrapAttribute: getWrapAttribute
    }, props), child.props));
  });

  if (childrenLength > 0 && type === "default") {
    var firstEle = swiperItemList[0];
    swiperItemList.push( /*#__PURE__*/React__default["default"].cloneElement(firstEle, _objectSpread(_objectSpread({}, firstEle.props), {}, {
      key: childrenLength,
      index: childrenLength
    })));
  }

  var swiperItemLength = swiperItemList.length;
  var swiperTo = React.useCallback(function (index, context) {
    onChange(index % childrenLength, context);
    setNeedAnimation(true);
    setCurrentIndex(index);
  }, [childrenLength, onChange]);
  var setTimer = React.useCallback(function () {
    if (autoplay && interval > 0) {
      swiperTimer.current = setTimeout(function () {
        swiperTo(currentIndex + 1, {
          source: "autoplay"
        });
      }, currentIndex === 0 ? interval - (duration + 50) : interval);
    }
  }, [autoplay, currentIndex, duration, interval, swiperTo]);
  var clearTimer = React.useCallback(function () {
    if (swiperTimer.current) {
      clearTimeout(swiperTimer.current);
      swiperTimer.current = null;
    }
  }, []);
  var isEnd = React.useCallback(function () {
    if (type === "card") {
      return !loop && currentIndex + 1 >= swiperItemLength;
    }

    return !loop && currentIndex + 2 >= swiperItemLength;
  }, [loop, currentIndex, swiperItemLength, type]);
  React.useEffect(function () {
    if (current !== void 0) {
      swiperTo(current % childrenLength, {
        source: "autoplay"
      });
    }
  }, [current, childrenLength, swiperTo]);
  React.useEffect(function () {
    if (currentIndex + 1 > swiperItemLength && type === "card") {
      return setCurrentIndex(0);
    }

    if (swiperAnimationTimer.current) {
      clearTimeout(swiperAnimationTimer.current);
      swiperAnimationTimer.current = null;
    }

    swiperAnimationTimer.current = setTimeout(function () {
      setNeedAnimation(false);

      if (isEnd()) {
        clearTimer();
      }

      if (currentIndex + 1 >= swiperItemLength && type !== "card") {
        setCurrentIndex(0);
      }
    }, duration + 50);
  }, [currentIndex, swiperItemLength, duration, type, clearTimer, isEnd]);
  React.useEffect(function () {
    if (!isHovering.current || !stopOnHover) {
      clearTimer();
      setTimer();
    }
  }, [setTimer, clearTimer, stopOnHover]);

  var onMouseEnter = function onMouseEnter() {
    isHovering.current = true;

    if (stopOnHover) {
      clearTimer();
    }

    if (navigationConfig.showSlideBtn === "hover") {
      setArrowShow(true);
    }
  };

  var onMouseLeave = function onMouseLeave() {
    isHovering.current = false;

    if (!isEnd()) {
      setTimer();
    }

    if (navigationConfig.showSlideBtn === "hover") {
      setArrowShow(false);
    }
  };

  var navMouseAction = function navMouseAction(action, index) {
    if (action === "enter"
    /* Enter */
    && trigger === "hover") {
      swiperTo(index, {
        source: "hover"
      });
    }

    if (action === "click"
    /* Click */
    && trigger === "click") {
      swiperTo(index, {
        source: "click"
      });
    }
  };

  var arrowClick = function arrowClick(direction2) {
    if (needAnimation) {
      return false;
    }

    if (direction2 === "right"
    /* Right */
    ) {
      if (type === "card") {
        return swiperTo(currentIndex + 1 >= swiperItemLength ? 0 : currentIndex + 1, {
          source: "click"
        });
      }

      return swiperTo(currentIndex + 1, {
        source: "click"
      });
    }

    if (direction2 === "left"
    /* Left */
    ) {
      if (currentIndex - 1 < 0) {
        return swiperTo(childrenLength - 1, {
          source: "click"
        });
      }

      return swiperTo(currentIndex - 1, {
        source: "click"
      });
    }
  };

  var createArrow = function createArrow(type2) {
    if (!arrowShow) {
      return "";
    }

    if (navigationConfig.type === "fraction" && type2 === "default"
    /* Default */
    ) {
      return "";
    }

    var fractionIndex = currentIndex + 1 > childrenLength ? 1 : currentIndex + 1;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames__default["default"]("".concat(classPrefix, "-swiper__arrow"), defineProperty._defineProperty({}, "".concat(classPrefix, "-swiper__arrow--default"), type2 === "default"))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-swiper__arrow-left"),
      onClick: function onClick() {
        return arrowClick("left"
        /* Left */
        );
      }
    }, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null)), type2 === "fraction"
    /* Fraction */
    ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-swiper__navigation-text-fraction")
    }, fractionIndex, "/", childrenLength) : "", /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-swiper__arrow-right"),
      onClick: function onClick() {
        return arrowClick("right"
        /* Right */
        );
      }
    }, /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null)));
  };

  var createNavigation = function createNavigation() {
    if (navigationConfig.type === "fraction") {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames__default["default"]("".concat(classPrefix, "-swiper__navigation"), "".concat(classPrefix, "-swiper__navigation--fraction"))
      }, createArrow("fraction"
      /* Fraction */
      ));
    }

    return navigationNode ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, navigationNode) : /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames__default["default"]("".concat(classPrefix, "-swiper__navigation"), defineProperty._defineProperty({}, "".concat(classPrefix, "-swiper__navigation-bars"), navigationConfig.type === "bars"))
    }, childrenList.map(function (_, i) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: i,
        className: classNames__default["default"]("".concat(classPrefix, "-swiper__navigation-item"), defineProperty._defineProperty({}, "".concat(classPrefix, "-is-active"), i === currentIndex % childrenLength)),
        onClick: function onClick() {
          return navMouseAction("click"
          /* Click */
          , i);
        },
        onMouseEnter: function onMouseEnter() {
          return navMouseAction("enter"
          /* Enter */
          , i);
        },
        onMouseLeave: function onMouseLeave() {
          return navMouseAction("leave"
          /* Leave */
          , i);
        }
      }, /* @__PURE__ */React__default["default"].createElement("span", null));
    }));
  };

  var getWrapperStyle = function getWrapperStyle() {
    var offsetHeight = height ? "".concat(height, "px") : "".concat(getWrapAttribute("offsetHeight"), "px");

    if (type === "card" || animation === "fade") {
      return {
        height: offsetHeight
      };
    }

    if (animation === "slide") {
      if (direction === "vertical") {
        return {
          height: offsetHeight,
          msTransform: "translate3d(0, -".concat(currentIndex * 100, "%, 0px)"),
          WebkitTransform: "translate3d(0, -".concat(currentIndex * 100, "%, 0px)"),
          transform: "translate3d(0, -".concat(currentIndex * 100, "%, 0px)"),
          transition: needAnimation ? "transform ".concat(duration / 1e3, "s ease") : ""
        };
      }

      return {
        msTransform: "translate3d(-".concat(currentIndex * 100, "%, 0px, 0px)"),
        WebkitTransform: "translate3d(-".concat(currentIndex * 100, "%, 0px, 0px)"),
        transform: "translate3d(-".concat(currentIndex * 100, "%, 0px, 0px)"),
        transition: needAnimation ? "transform ".concat(duration / 1e3, "s ease") : ""
      };
    }
  };

  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"]("".concat(classPrefix, "-swiper"), className),
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    ref: swiperWrap
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"]("".concat(classPrefix, "-swiper__wrap"), (_classnames4 = {}, defineProperty._defineProperty(_classnames4, "".concat(classPrefix, "-swiper--inside"), navigationConfig.placement === "inside"), defineProperty._defineProperty(_classnames4, "".concat(classPrefix, "-swiper--outside"), navigationConfig.placement === "outside"), defineProperty._defineProperty(_classnames4, "".concat(classPrefix, "-swiper--vertical"), direction === "vertical"), defineProperty._defineProperty(_classnames4, "".concat(classPrefix, "-swiper--large"), navigationConfig.size === "large"), defineProperty._defineProperty(_classnames4, "".concat(classPrefix, "-swiper--small"), navigationConfig.size === "small"), _classnames4))
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"]("".concat(classPrefix, "-swiper__content"), (_classnames5 = {}, defineProperty._defineProperty(_classnames5, "".concat(classPrefix, "-swiper-fade"), animation === "fade"), defineProperty._defineProperty(_classnames5, "".concat(classPrefix, "-swiper-card"), type === "card"), _classnames5)),
    style: {
      height: ""
    }
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(classPrefix, "-swiper__container"),
    style: getWrapperStyle()
  }, swiperItemList)), createNavigation(), createArrow("default"
  /* Default */
  )));
};

Swiper.SwiperItem = swiper_SwiperItem["default"];
Swiper.displayName = "Swiper";
Swiper.defaultProps = swiper_defaultProps.swiperDefaultProps;

exports["default"] = Swiper;
//# sourceMappingURL=Swiper.js.map
