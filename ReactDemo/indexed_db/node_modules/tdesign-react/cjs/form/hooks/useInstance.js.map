{"version":3,"file":"useInstance.js","sources":["../../../src/form/hooks/useInstance.tsx"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport isFunction from 'lodash/isFunction';\nimport merge from 'lodash/merge';\nimport type { TdFormProps, FormValidateResult, FormResetParams, FormValidateMessage, AllValidateResult } from '../type';\nimport useConfig from '../../hooks/useConfig';\n\nfunction getMapValue(\n  name: string | number | Array<string | number>,\n  formMapRef: React.MutableRefObject<Map<any, any>>,\n) {\n  // 提取所有 map key\n  const mapKeys = [...formMapRef.current.keys()];\n  // 转译为字符串后比对 key 兼容数组格式\n  const key = mapKeys.find((key) => String(key) === String(name));\n  // 拿到 key 引用地址获取 value\n  return formMapRef.current.get(key);\n}\n\n// 通过对象数据类型获取 map 引用\nfunction travelMapFromObject(\n  obj: Record<any, any>,\n  formMapRef: React.MutableRefObject<Map<any, any>>,\n  callback: Function,\n) {\n  for (const [mapName, formItemRef] of formMapRef.current.entries()) {\n    // 支持嵌套数据结构\n    if (Array.isArray(mapName)) {\n      // 创建唯一临时变量 symbol\n      const symbol = Symbol('name');\n      let fieldValue = null;\n\n      for (let i = 0; i < mapName.length; i++) {\n        const item = mapName[i];\n        if (Reflect.has(fieldValue || obj, item)) {\n          fieldValue = Reflect.get(fieldValue || obj, item);\n        } else {\n          // 当反射无法获取到值则重置为 symbol\n          fieldValue = symbol;\n          break;\n        }\n      }\n\n      // 说明设置了值\n      if (fieldValue !== symbol) {\n        callback(formItemRef, fieldValue);\n      }\n    } else if (Reflect.has(obj, mapName)) {\n      callback(formItemRef, obj[mapName]);\n    }\n  }\n}\n\n// 检测是否需要校验 默认全量校验\nfunction needValidate(name: string, fields: string[]) {\n  if (!fields || !Array.isArray(fields)) return true;\n  return fields.indexOf(name) !== -1;\n}\n\n// 整理校验结果\nfunction formatValidateResult(validateResultList) {\n  const result = validateResultList.reduce((r, err) => Object.assign(r || {}, err), {});\n  Object.keys(result).forEach((key) => {\n    if (result[key] === true) {\n      delete result[key];\n    } else {\n      result[key] = result[key].filter((fr: AllValidateResult) => fr.result === false);\n    }\n\n    // 整理嵌套数据\n    if (result[key] && key.includes(',')) {\n      const keyList = key.split(',');\n      const fieldValue = keyList.reduceRight((prev, curr) => ({ [curr]: prev }), result[key]);\n      merge(result, fieldValue);\n      delete result[key];\n    }\n  });\n  return isEmpty(result) ? true : result;\n}\n\nexport default function useInstance(props: TdFormProps, formRef, formMapRef: React.MutableRefObject<Map<any, any>>) {\n  const { classPrefix } = useConfig();\n  const FORM_ITEM_CLASS_PREFIX = `${classPrefix}-form-item__`;\n\n  const { scrollToFirstError, preventSubmitDefault = true, onSubmit } = props;\n\n  // 获取第一个错误表单\n  function getFirstError(r: FormValidateResult<FormData>) {\n    if (r === true) return;\n    const [firstKey] = Object.keys(r);\n    if (scrollToFirstError) {\n      scrollTo(`.${FORM_ITEM_CLASS_PREFIX + firstKey}`);\n    }\n    return r[firstKey][0]?.message;\n  }\n\n  // 校验不通过时，滚动到第一个错误表单\n  function scrollTo(selector: string) {\n    const dom = formRef.current.querySelector?.(selector);\n    const behavior = scrollToFirstError as ScrollBehavior;\n    dom && dom.scrollIntoView({ behavior });\n  }\n\n  // 对外方法 手动提交表单\n  function submit(e?: React.FormEvent<HTMLFormElement>) {\n    if (preventSubmitDefault) {\n      e?.preventDefault?.();\n      e?.stopPropagation?.();\n    }\n    validate().then((r) => {\n      const firstError = getFirstError(r);\n      onSubmit?.({ validateResult: r, firstError, e });\n    });\n  }\n\n  // 对外方法，该方法会触发全部表单组件错误信息显示\n  async function validate(param?: Record<string, any>): Promise<FormValidateResult<FormData>> {\n    const { fields, trigger = 'all', showErrorMessage } = param || {};\n    const list = [...formMapRef.current.values()]\n      .filter(\n        (formItemRef) => isFunction(formItemRef?.current?.validate) && needValidate(formItemRef?.current?.name, fields),\n      )\n      .map((formItemRef) => formItemRef?.current.validate(trigger, showErrorMessage));\n\n    const validateList = await Promise.all(list);\n    return formatValidateResult(validateList);\n  }\n\n  // 对外方法，该方法只会校验不会触发信息提示\n  async function validateOnly(param?: Record<string, any>): Promise<FormValidateResult<FormData>> {\n    const { fields, trigger = 'all' } = param || {};\n    const list = [...formMapRef.current.values()]\n      .filter(\n        (formItemRef) =>\n          isFunction(formItemRef?.current?.validateOnly) && needValidate(formItemRef?.current?.name, fields),\n      )\n      .map((formItemRef) => formItemRef?.current.validateOnly?.(trigger));\n\n    const validateList = await Promise.all(list);\n    return formatValidateResult(validateList);\n  }\n\n  // 对外方法，获取对应 formItem 的值\n  function getFieldValue(name: string | number | Array<string | number>) {\n    if (!name) return null;\n\n    const formItemRef = getMapValue(name, formMapRef);\n    return formItemRef?.current.getValue?.();\n  }\n\n  // 对外方法，获取一组字段名对应的值，当调用 getFieldsValue(true) 时返回所有值\n  function getFieldsValue(nameList: string[] | boolean) {\n    const fieldsValue = {};\n\n    if (nameList === true) {\n      for (const [name, formItemRef] of formMapRef.current.entries()) {\n        // 支持数组嵌套\n        if (Array.isArray(name)) {\n          const fieldValue = name.reduceRight((prev, curr) => ({ [curr]: prev }), formItemRef?.current.getValue?.());\n          merge(fieldsValue, fieldValue);\n        } else {\n          fieldsValue[name] = formItemRef?.current.getValue?.();\n        }\n      }\n    } else {\n      if (!Array.isArray(nameList)) throw new Error('getFieldsValue 参数需要 Array 类型');\n\n      nameList.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        // 支持数组嵌套\n        if (Array.isArray(name)) {\n          const fieldValue = name.reduceRight((prev, curr) => ({ [curr]: prev }), formItemRef?.current.getValue?.());\n          merge(fieldsValue, fieldValue);\n        } else {\n          formItemRef && (fieldsValue[name] = formItemRef?.current.getValue?.());\n        }\n      });\n    }\n    return fieldsValue;\n  }\n\n  // 对外方法，设置对应 formItem 的值\n  function setFieldsValue(fields = {}) {\n    travelMapFromObject(fields, formMapRef, (formItemRef, fieldValue) => {\n      formItemRef?.current?.setValue?.(fieldValue);\n    });\n  }\n\n  // 对外方法，设置对应 formItem 的数据\n  function setFields(fields = []) {\n    if (!Array.isArray(fields)) throw new Error('setFields 参数需要 Array 类型');\n\n    fields.forEach((field) => {\n      const { name, ...restFields } = field;\n      const formItemRef = getMapValue(name, formMapRef);\n\n      formItemRef?.current?.setField({ ...restFields });\n    });\n  }\n\n  // 对外方法，重置对应 formItem 的数据\n  function reset(params: FormResetParams<FormData>) {\n    // reset all\n    if (typeof params === 'undefined') {\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        formItemRef?.current?.resetField();\n      });\n    } else {\n      const { type = 'initial', fields = [] } = params;\n\n      fields.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        formItemRef?.current?.resetField(type);\n      });\n    }\n  }\n\n  // 对外方法，重置对应 formItem 的状态\n  function clearValidate(fields?: Array<keyof FormData>) {\n    // reset all\n    if (typeof fields === 'undefined') {\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        formItemRef?.current?.resetValidate();\n      });\n    } else {\n      if (!Array.isArray(fields)) throw new Error('clearValidate 参数需要 Array 类型');\n\n      fields.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        formItemRef?.current?.resetValidate();\n      });\n    }\n  }\n\n  // 对外方法，设置 formItem 的错误信息\n  function setValidateMessage(message: FormValidateMessage<FormData>) {\n    travelMapFromObject(message, formMapRef, (formItemRef, fieldValue) => {\n      formItemRef?.current?.setValidateMessage?.(fieldValue);\n    });\n  }\n\n  return {\n    submit,\n    reset,\n    validate,\n    validateOnly,\n    clearValidate,\n    setFields,\n    setFieldsValue,\n    setValidateMessage,\n    getFieldValue,\n    getFieldsValue,\n    currentElement: formRef.current,\n  };\n}\n"],"names":["getMapValue","name","formMapRef","mapKeys","current","keys","key","find","String","get","travelMapFromObject","obj","callback","entries","_slicedToArray","mapName","formItemRef","Array","isArray","symbol","Symbol","fieldValue","i","length","item","Reflect","has","needValidate","fields","indexOf","formatValidateResult","validateResultList","result","reduce","r","err","Object","assign","forEach","filter","fr","includes","keyList","split","reduceRight","prev","curr","merge","isEmpty","useInstance","props","formRef","useConfig","classPrefix","FORM_ITEM_CLASS_PREFIX","scrollToFirstError","preventSubmitDefault","onSubmit","getFirstError","firstKey","scrollTo","message","selector","dom","querySelector","behavior","scrollIntoView","submit","e","preventDefault","stopPropagation","validate","then","firstError","validateResult","_asyncToGenerator","_regeneratorRuntime","param","trigger","showErrorMessage","list","_toConsumableArray","values","isFunction","map","Promise","all","validateList","validateOnly","getFieldValue","getValue","getFieldsValue","nameList","fieldsValue","Error","setFieldsValue","setValue","setFields","field","restFields","setField","reset","params","resetField","type","clearValidate","resetValidate","setValidateMessage","currentElement"],"mappings":"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"}