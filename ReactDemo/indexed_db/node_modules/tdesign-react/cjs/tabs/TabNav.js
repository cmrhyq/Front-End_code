/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-4eb93341.js');
var slicedToArray = require('../_chunks/dep-9c5d4f93.js');
var React = require('react');
var classNames = require('classnames');
var tdesignIconsReact = require('tdesign-icons-react');
var debounce = require('../_chunks/dep-db2b3323.js');
var _util_noop = require('../_util/noop.js');
var tabs_useTabClass = require('./useTabClass.js');
var tabs_TabNavItem = require('./TabNavItem.js');
var tabs_TabBar = require('./TabBar.js');
var _common_js_tabs_base = require('../_common/js/tabs/base.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
require('../_chunks/dep-2205decf.js');
require('../_chunks/dep-aab723b3.js');
require('../_chunks/dep-2a90f794.js');
require('../_chunks/dep-61a8a7b0.js');
require('../_chunks/dep-52c5813c.js');
require('../_chunks/dep-09805e35.js');
require('../_chunks/dep-1fff9729.js');
require('../hooks/useConfig.js');
require('../_chunks/dep-4344eec8.js');
require('../_chunks/dep-fe984d70.js');
require('../_chunks/dep-46cf36fd.js');
require('../_chunks/dep-f5e18a2f.js');
require('../_chunks/dep-53ba6729.js');
require('../_chunks/dep-384b291c.js');
require('../_chunks/dep-a0b5d8f6.js');
require('../_chunks/dep-12656997.js');
require('../_chunks/dep-bb60493d.js');
require('../_chunks/dep-72020528.js');
require('../_chunks/dep-ad854ba5.js');
require('../_chunks/dep-eebdbd74.js');
require('../_chunks/dep-8f18a7c4.js');
require('../_chunks/dep-9cd0fde8.js');
require('../_chunks/dep-d3ad6e52.js');
require('../_chunks/dep-aafeb50a.js');
require('../_chunks/dep-6fa7a9e9.js');
require('../_chunks/dep-994ec160.js');
require('../_chunks/dep-9429a38a.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');
require('../_util/useRipple.js');
require('../_util/useAnimation.js');
require('../_util/setStyle.js');
require('../_util/dom.js');
require('raf');
require('../_chunks/dep-9a2dbbb1.js');
require('../_util/easing.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var moveActiveTabIntoView = _common_js_tabs_base["default"].moveActiveTabIntoView,
    calcScrollLeft = _common_js_tabs_base["default"].calcScrollLeft,
    scrollToLeft = _common_js_tabs_base["default"].scrollToLeft,
    scrollToRight = _common_js_tabs_base["default"].scrollToRight,
    calculateCanToLeft = _common_js_tabs_base["default"].calculateCanToLeft,
    calculateCanToRight = _common_js_tabs_base["default"].calculateCanToRight;

var TabNav = function TabNav(props) {
  var _props$placement = props.placement,
      placement = _props$placement === void 0 ? "top" : _props$placement,
      itemList = props.itemList,
      _props$tabClick = props.tabClick,
      tabClick = _props$tabClick === void 0 ? _util_noop["default"] : _props$tabClick,
      theme = props.theme,
      addable = props.addable,
      onAdd = props.onAdd,
      _props$size = props.size,
      size = _props$size === void 0 ? "medium" : _props$size,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$onRemove = props.onRemove,
      onRemove = _props$onRemove === void 0 ? _util_noop["default"] : _props$onRemove,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? _util_noop["default"] : _props$onChange,
      activeValue = props.activeValue,
      children = props.children;

  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
    AddIcon: tdesignIconsReact.AddIcon,
    ChevronLeftIcon: tdesignIconsReact.ChevronLeftIcon,
    ChevronRightIcon: tdesignIconsReact.ChevronRightIcon
  }),
      AddIcon = _useGlobalIcon.AddIcon,
      ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;

  var isCard = theme === "card";

  var _useTabClass = tabs_useTabClass.useTabClass(),
      tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
      tdClassGenerator = _useTabClass.tdClassGenerator,
      tdSizeClassGenerator = _useTabClass.tdSizeClassGenerator;

  var navsContainerRef = React.useRef(null);
  var navsWrapRef = React.useRef(null);
  var getIndex = React.useCallback(function (value) {
    var index = itemList.findIndex(function (item) {
      return item.value === value;
    });
    return index > -1 ? index : -1;
  }, [itemList]);
  var activeIndex = getIndex(activeValue);

  var _useState = React.useState(false),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      canToLeft = _useState2[0],
      setToLeftBtnVisible = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      canToRight = _useState4[0],
      setToRightBtnVisible = _useState4[1];

  var scrollBarRef = React.useRef(null);
  var leftOperationsRef = React.useRef(null);
  var rightOperationsRef = React.useRef(null);
  var toLeftBtnRef = React.useRef(null);
  var toRightBtnRef = React.useRef(null);

  var _useState5 = React.useState(0),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      scrollLeft = _useState6[0],
      setScrollLeft = _useState6[1];

  var _useState7 = React.useState(null),
      _useState8 = slicedToArray._slicedToArray(_useState7, 2),
      activeTab = _useState8[0],
      setActiveTab = _useState8[1];

  React.useEffect(function () {
    var left = moveActiveTabIntoView({
      activeTab: activeTab,
      navsContainer: navsContainerRef.current,
      navsWrap: navsWrapRef.current,
      toLeftBtn: toLeftBtnRef.current,
      toRightBtn: toRightBtnRef.current,
      leftOperations: leftOperationsRef.current,
      rightOperations: rightOperationsRef.current
    }, scrollLeft);
    setScrollLeft(left);
  }, [activeTab, scrollLeft]);
  var setScrollBtnVisibleHandler = React.useCallback(function () {
    var canToleft = calculateCanToLeft({
      navsContainer: navsContainerRef.current,
      navsWrap: navsWrapRef.current,
      leftOperations: leftOperationsRef.current,
      toLeftBtn: toLeftBtnRef.current
    }, scrollLeft, placement);
    var canToRight2 = calculateCanToRight({
      navsContainer: navsContainerRef.current,
      navsWrap: navsWrapRef.current,
      rightOperations: rightOperationsRef.current,
      toRightBtn: toRightBtnRef.current
    }, scrollLeft, placement);
    setToLeftBtnVisible(canToleft);
    setToRightBtnVisible(canToRight2);
  }, [scrollLeft, placement, children]);

  var handleScroll = function handleScroll(position) {
    var val = position === "left" ? scrollToLeft({
      navsContainer: navsContainerRef.current,
      leftOperations: leftOperationsRef.current,
      toLeftBtn: toLeftBtnRef.current
    }, scrollLeft) : scrollToRight({
      navsWrap: navsWrapRef.current,
      navsContainer: navsContainerRef.current,
      rightOperations: rightOperationsRef.current,
      toRightBtn: toRightBtnRef.current
    }, scrollLeft);
    setScrollLeft(val);
  };

  React.useEffect(function () {
    var onResize = debounce.debounce_1(function () {
      if (["top", "bottom"].includes(placement.toLowerCase())) {
        var left = calcScrollLeft({
          navsContainer: navsContainerRef.current,
          navsWrap: navsWrapRef.current,
          rightOperations: rightOperationsRef.current
        }, scrollLeft);
        setScrollLeft(left);
        setScrollBtnVisibleHandler();
      }
    }, 300);
    window.addEventListener("resize", onResize);
    return function () {
      window.removeEventListener("resize", onResize);
      onResize.cancel();
    };
  });
  React.useEffect(function () {
    if (["top", "bottom"].includes(placement.toLowerCase())) {
      var left = calcScrollLeft({
        navsContainer: navsContainerRef.current,
        navsWrap: navsWrapRef.current,
        rightOperations: rightOperationsRef.current
      }, scrollLeft);
      setScrollLeft(left);
    }
  }, [itemList.length, scrollLeft, placement]);
  var TabBarCom = isCard ? null : /* @__PURE__ */React__default["default"].createElement(tabs_TabBar["default"], {
    tabPosition: placement,
    activeId: activeIndex,
    containerRef: navsWrapRef
  });
  React.useEffect(function () {
    setScrollBtnVisibleHandler();
  }, [setScrollBtnVisibleHandler]);

  var handleTabItemRemove = function handleTabItemRemove(removeItem) {
    var removeValue = removeItem.value,
        removeIndex = removeItem.index;

    if (removeValue === activeValue) {
      var _itemList;

      onChange(removeIndex === 0 ? (_itemList = itemList[removeIndex + 1]) === null || _itemList === void 0 ? void 0 : _itemList.value : itemList[removeIndex - 1].value);
    }

    onRemove(removeItem);
  };

  var handleTabItemClick = function handleTabItemClick(clickItem) {
    tabClick(clickItem.value);
    onChange(clickItem.value);
  };

  var handleTabAdd = function handleTabAdd(e) {
    onAdd({
      e: e
    });
  };

  return /* @__PURE__ */React__default["default"].createElement("div", {
    ref: navsContainerRef,
    className: classNames__default["default"](tdTabsClassGenerator("nav")),
    style: {
      minHeight: 48
    }
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    ref: leftOperationsRef,
    className: classNames__default["default"](tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--left"))
  }, canToLeft ? /* @__PURE__ */React__default["default"].createElement("div", {
    onClick: function onClick() {
      handleScroll("left");
    },
    className: classNames__default["default"](tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--left"), tdSizeClassGenerator(size)),
    ref: toLeftBtnRef
  }, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null)) : null), /* @__PURE__ */React__default["default"].createElement("div", {
    ref: rightOperationsRef,
    className: classNames__default["default"](tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--right"))
  }, canToRight ? /* @__PURE__ */React__default["default"].createElement("div", {
    onClick: function onClick() {
      handleScroll("right");
    },
    className: classNames__default["default"](tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--right"), tdSizeClassGenerator(size)),
    ref: toRightBtnRef
  }, /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null)) : null, addable ? /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("add-btn"), tdTabsClassGenerator("btn"), tdSizeClassGenerator(size)),
    onClick: handleTabAdd
  }, /* @__PURE__ */React__default["default"].createElement(AddIcon, null)) : null), /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("nav-container"), isCard ? tdTabsClassGenerator("nav--card") : "", tdClassGenerator("is-".concat(placement)), addable ? tdClassGenerator("is-addable") : "")
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("nav-scroll"), canToLeft || canToRight ? tdClassGenerator("is-scrollable") : ""),
    ref: scrollBarRef
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("nav-wrap"), ["left", "right"].includes(placement) ? tdClassGenerator("is-vertical") : "", tdClassGenerator("is-smooth")),
    style: {
      transform: "translate(".concat(-scrollLeft, "px, 0)")
    },
    ref: navsWrapRef
  }, placement !== "bottom" ? TabBarCom : null, !isCard && /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("bar"), tdClassGenerator("is-".concat(placement)))
  }), itemList.map(function (v, index) {
    return /* @__PURE__ */React__default["default"].createElement(tabs_TabNavItem["default"], _objectSpread(_objectSpread(_objectSpread({}, props), v), {}, {
      onRemove: v.onRemove,
      key: v.value,
      label: v.label,
      isActive: activeValue === v.value,
      theme: theme,
      placement: placement,
      index: index,
      disabled: disabled || v.disabled,
      onClick: function onClick() {
        return handleTabItemClick(v);
      },
      onTabRemove: handleTabItemRemove,
      innerRef: function innerRef(ref) {
        if (activeValue === v.value) {
          setActiveTab(ref);
        }
      }
    }));
  }), placement === "bottom" ? TabBarCom : null))));
};

TabNav.displayName = "TabNav";

exports["default"] = TabNav;
//# sourceMappingURL=TabNav.js.map
