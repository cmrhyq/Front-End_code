/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-4eb93341.js');
var _typeof = require('../_chunks/dep-2a90f794.js');
var slicedToArray = require('../_chunks/dep-9c5d4f93.js');
var objectWithoutProperties = require('../_chunks/dep-1a0462cc.js');
var React = require('react');
var classNames = require('classnames');
var hooks_useConfig = require('../hooks/useConfig.js');
var _util_noop = require('../_util/noop.js');
var hooks_useControlled = require('../hooks/useControlled.js');
var _common_js_utils_helper = require('../_common/js/utils/helper.js');
var _common_js_utils_calcTextareaHeight = require('../_common/js/utils/calcTextareaHeight.js');
var textarea_defaultProps = require('./defaultProps.js');
require('../_chunks/dep-2205decf.js');
require('../_chunks/dep-4344eec8.js');
require('../_chunks/dep-fe984d70.js');
require('../_chunks/dep-46cf36fd.js');
require('../_chunks/dep-f5e18a2f.js');
require('../_chunks/dep-53ba6729.js');
require('../_chunks/dep-61a8a7b0.js');
require('../_chunks/dep-aab723b3.js');
require('../_chunks/dep-384b291c.js');
require('../_chunks/dep-a0b5d8f6.js');
require('../_chunks/dep-12656997.js');
require('../_chunks/dep-1fff9729.js');
require('../_chunks/dep-bb60493d.js');
require('../_chunks/dep-72020528.js');
require('../_chunks/dep-ad854ba5.js');
require('../_chunks/dep-eebdbd74.js');
require('../_chunks/dep-8f18a7c4.js');
require('../_chunks/dep-9cd0fde8.js');
require('../_chunks/dep-d3ad6e52.js');
require('../_chunks/dep-aafeb50a.js');
require('../_chunks/dep-6fa7a9e9.js');
require('../_chunks/dep-994ec160.js');
require('../_chunks/dep-9429a38a.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');
require('../_chunks/dep-c76c2a08.js');
require('../_chunks/dep-dc6c808e.js');
require('../_chunks/dep-76deafcc.js');
require('../_chunks/dep-afce8659.js');
require('../_chunks/dep-09805e35.js');
require('../_chunks/dep-8052f095.js');
require('../_chunks/dep-606cfe2a.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var _excluded = ["disabled", "maxlength", "maxcharacter", "className", "readonly", "autofocus", "style", "onKeydown", "onKeypress", "onKeyup", "autosize", "status", "tips", "allowInputOverMax"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Textarea = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames, _classNames2;

  var disabled = props.disabled,
      maxlength = props.maxlength,
      maxcharacter = props.maxcharacter,
      className = props.className,
      readonly = props.readonly,
      autofocus = props.autofocus,
      style = props.style,
      _props$onKeydown = props.onKeydown,
      onKeydown = _props$onKeydown === void 0 ? _util_noop["default"] : _props$onKeydown,
      _props$onKeypress = props.onKeypress,
      onKeypress = _props$onKeypress === void 0 ? _util_noop["default"] : _props$onKeypress,
      _props$onKeyup = props.onKeyup,
      onKeyup = _props$onKeyup === void 0 ? _util_noop["default"] : _props$onKeyup,
      autosize = props.autosize,
      status = props.status,
      tips = props.tips,
      allowInputOverMax = props.allowInputOverMax,
      otherProps = objectWithoutProperties._objectWithoutProperties(props, _excluded);

  var _useControlled = hooks_useControlled["default"](props, "value", props.onChange),
      _useControlled2 = slicedToArray._slicedToArray(_useControlled, 2),
      _useControlled2$ = _useControlled2[0],
      value = _useControlled2$ === void 0 ? "" : _useControlled2$,
      setValue = _useControlled2[1];

  var _useState = React.useState(false),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      isOvermax = _useState4[0],
      setIsOvermax = _useState4[1];

  var _useState5 = React.useState({}),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      textareaStyle = _useState6[0],
      setTextareaStyle = _useState6[1];

  var composingRef = React.useRef(false);
  var hasMaxcharacter = typeof maxcharacter !== "undefined";
  var textareaRef = React.useRef();
  var wrapperRef = React.useRef();
  var currentLength = React.useMemo(function () {
    return _common_js_utils_helper.getUnicodeLength(value);
  }, [value]);
  var characterLength = React.useMemo(function () {
    var characterInfo = _common_js_utils_helper.getCharacterLength(String(value), allowInputOverMax ? Infinity : maxcharacter);
    if (_typeof._typeof(characterInfo) === "object") return characterInfo.length;
    return characterInfo;
  }, [value, allowInputOverMax, maxcharacter]);

  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var textareaPropsNames = Object.keys(otherProps).filter(function (key) {
    return !/^on[A-Z]/.test(key);
  });
  var textareaProps = textareaPropsNames.reduce(function (textareaProps2, key) {
    return Object.assign(textareaProps2, defineProperty._defineProperty({}, key, props[key]));
  }, {});
  var eventPropsNames = Object.keys(otherProps).filter(function (key) {
    return /^on[A-Z]/.test(key);
  });
  var eventProps = eventPropsNames.reduce(function (eventProps2, key) {
    Object.assign(eventProps2, defineProperty._defineProperty({}, key, function (e) {
      if (disabled) return;
      if (key === "onFocus") setIsFocused(true);
      if (key === "onBlur") setIsFocused(false);
      props[key](e.currentTarget.value, {
        e: e
      });
    }));
    return eventProps2;
  }, {});
  var textareaClassNames = classNames__default["default"]("".concat(classPrefix, "-textarea__inner"), className, (_classNames = {}, defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-is-").concat(status), status), defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-is-focused"), isFocused), defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-resize-none"), _typeof._typeof(autosize) === "object"), _classNames));
  var adjustTextareaHeight = React.useCallback(function () {
    if (autosize === true) {
      setTextareaStyle(_common_js_utils_calcTextareaHeight["default"](textareaRef.current));
    } else if (_typeof._typeof(autosize) === "object") {
      setTextareaStyle(_common_js_utils_calcTextareaHeight["default"](textareaRef.current, autosize === null || autosize === void 0 ? void 0 : autosize.minRows, autosize === null || autosize === void 0 ? void 0 : autosize.maxRows));
    }
  }, [autosize]);
  React.useEffect(function () {
    adjustTextareaHeight();
  }, [textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current]);

  function inputValueChangeHandle(e) {
    var target = e.target;
    var val = target.value;

    if (!allowInputOverMax && !composingRef.current) {
      val = _common_js_utils_helper.limitUnicodeMaxLength(val, maxlength);

      if (maxcharacter && maxcharacter >= 0) {
        var stringInfo = _common_js_utils_helper.getCharacterLength(val, maxcharacter);
        val = _typeof._typeof(stringInfo) === "object" && stringInfo.characters;
      }
    }

    setValue(val, {
      e: e
    });
  }

  function handleCompositionStart() {
    composingRef.current = true;
  }

  function handleCompositionEnd(e) {
    if (composingRef.current) {
      composingRef.current = false;
      inputValueChangeHandle(e);
    }
  }

  var renderLimitText = function renderLimitText(current, max) {
    return /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-textarea__limit")
    }, isOvermax && allowInputOverMax ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-textarea__tips--warning")
    }, " ", current) : "".concat(current), "/".concat(max));
  };

  React.useEffect(function () {
    if (autosize === false) {
      setTextareaStyle({
        height: "auto",
        minHeight: "auto"
      });
    }
  }, [adjustTextareaHeight, autosize]);
  React.useEffect(function () {
    adjustTextareaHeight();
  }, [adjustTextareaHeight, value]);
  React.useEffect(function () {
    if (allowInputOverMax) {
      setIsOvermax(!!(maxlength && currentLength > maxlength) || !!(maxcharacter && characterLength > maxcharacter));
    }
  }, [allowInputOverMax, characterLength, currentLength, maxcharacter, maxlength]);
  React.useImperativeHandle(ref, function () {
    return {
      currentElement: wrapperRef.current,
      textareaElement: textareaRef.current
    };
  });
  return /* @__PURE__ */React__default["default"].createElement("div", {
    style: style,
    ref: wrapperRef,
    className: classNames__default["default"]("".concat(classPrefix, "-textarea"), className)
  }, /* @__PURE__ */React__default["default"].createElement("textarea", _objectSpread(_objectSpread(_objectSpread({}, textareaProps), eventProps), {}, {
    value: value,
    style: textareaStyle,
    className: textareaClassNames,
    readOnly: readonly,
    autoFocus: autofocus,
    disabled: disabled,
    onChange: inputValueChangeHandle,
    onKeyDown: function onKeyDown(e) {
      return onKeydown(e.currentTarget.value, {
        e: e
      });
    },
    onKeyPress: function onKeyPress(e) {
      return onKeypress(e.currentTarget.value, {
        e: e
      });
    },
    onKeyUp: function onKeyUp(e) {
      return onKeyup(e.currentTarget.value, {
        e: e
      });
    },
    onCompositionStart: handleCompositionStart,
    onCompositionEnd: handleCompositionEnd,
    ref: textareaRef
  })), hasMaxcharacter && renderLimitText(characterLength, maxcharacter), !hasMaxcharacter && maxlength && renderLimitText(currentLength, maxlength), tips ? /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"]("".concat(classPrefix, "-textarea__tips"), (_classNames2 = {}, defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-textarea__tips--normal"), !status), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-textarea__tips--").concat(status), status), _classNames2))
  }, tips) : null);
});
Textarea.displayName = "Textarea";
Textarea.defaultProps = textarea_defaultProps.textareaDefaultProps;

exports["default"] = Textarea;
//# sourceMappingURL=Textarea.js.map
