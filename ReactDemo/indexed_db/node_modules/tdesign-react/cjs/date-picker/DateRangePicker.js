/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-4eb93341.js');
var toConsumableArray = require('../_chunks/dep-8052f095.js');
var slicedToArray = require('../_chunks/dep-9c5d4f93.js');
var React = require('react');
var classNames = require('classnames');
var dayjs = require('dayjs');
var hooks_useConfig = require('../hooks/useConfig.js');
var rangeInput_index = require('../range-input/index.js');
var datePicker_panel_RangePanel = require('./panel/RangePanel.js');
var datePicker_hooks_useRange = require('./hooks/useRange.js');
var datePicker_hooks_useRangeValue = require('./hooks/useRangeValue.js');
var _common_js_datePicker_format = require('../_common/js/date-picker/format.js');
var _common_js_datePicker_utils = require('../_common/js/date-picker/utils.js');
var datePicker_defaultProps = require('./defaultProps.js');
var _common_js_log_log = require('../_common/js/log/log.js');
require('../_chunks/dep-2205decf.js');
require('../_chunks/dep-606cfe2a.js');
require('../_chunks/dep-4344eec8.js');
require('../_chunks/dep-fe984d70.js');
require('../_chunks/dep-46cf36fd.js');
require('../_chunks/dep-f5e18a2f.js');
require('../_chunks/dep-53ba6729.js');
require('../_chunks/dep-61a8a7b0.js');
require('../_chunks/dep-2a90f794.js');
require('../_chunks/dep-aab723b3.js');
require('../_chunks/dep-384b291c.js');
require('../_chunks/dep-a0b5d8f6.js');
require('../_chunks/dep-12656997.js');
require('../_chunks/dep-1fff9729.js');
require('../_chunks/dep-bb60493d.js');
require('../_chunks/dep-72020528.js');
require('../_chunks/dep-ad854ba5.js');
require('../_chunks/dep-eebdbd74.js');
require('../_chunks/dep-8f18a7c4.js');
require('../_chunks/dep-9cd0fde8.js');
require('../_chunks/dep-d3ad6e52.js');
require('../_chunks/dep-aafeb50a.js');
require('../_chunks/dep-6fa7a9e9.js');
require('../_chunks/dep-994ec160.js');
require('../_chunks/dep-9429a38a.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');
require('../range-input/RangeInput.js');
require('../_chunks/dep-1a0462cc.js');
require('tdesign-icons-react');
require('../input/index.js');
require('../input/Input.js');
require('../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../hooks/useGlobalIcon.js');
require('../_common/js/utils/helper.js');
require('../input/InputGroup.js');
require('../hooks/useControlled.js');
require('../_chunks/dep-c76c2a08.js');
require('../_chunks/dep-dc6c808e.js');
require('../_chunks/dep-76deafcc.js');
require('../_chunks/dep-afce8659.js');
require('../_chunks/dep-09805e35.js');
require('../_util/noop.js');
require('../locale/LocalReceiver.js');
require('../input/defaultProps.js');
require('../range-input/defaultProps.js');
require('../range-input/RangeInputPopup.js');
require('../popup/index.js');
require('../popup/Popup.js');
require('react-transition-group');
require('react-popper');
require('../_util/useAnimation.js');
require('../common/Portal.js');
require('react-dom');
require('../_util/dom.js');
require('raf');
require('../_chunks/dep-9a2dbbb1.js');
require('../_util/easing.js');
require('../popup/hooks/useTrigger.js');
require('react-is');
require('../popup/utils/ref.js');
require('../_util/composeRefs.js');
require('../popup/utils/transition.js');
require('../_util/useMutationObserver.js');
require('../_chunks/dep-db2b3323.js');
require('../_chunks/dep-52c5813c.js');
require('../_util/useWindowSize.js');
require('../popup/defaultProps.js');
require('../select-input/useOverlayInnerStyle.js');
require('./panel/PanelContent.js');
require('./base/Header.js');
require('../select/index.js');
require('../select/base/Select.js');
require('../_chunks/dep-65cb34d8.js');
require('../_chunks/dep-8329ea23.js');
require('../select/util/helper.js');
require('../select/base/OptionGroup.js');
require('../select/defaultProps.js');
require('../select/base/Option.js');
require('../_chunks/dep-364d4c00.js');
require('../_util/useRipple.js');
require('../_util/setStyle.js');
require('../common/FakeArrow.js');
require('../loading/index.js');
require('../loading/Loading.js');
require('../loading/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../loading/defaultProps.js');
require('../loading/plugin.js');
require('../select-input/index.js');
require('../select-input/SelectInput.js');
require('../select-input/useSingle.js');
require('../_chunks/dep-b5af0182.js');
require('../_chunks/dep-55c5ba71.js');
require('../_chunks/dep-1e8de681.js');
require('../_chunks/dep-07e5d807.js');
require('../select-input/useMultiple.js');
require('../tag-input/index.js');
require('../tag-input/TagInput.js');
require('../_util/useDragSorter.js');
require('../tag-input/useTagScroll.js');
require('../tag-input/useTagList.js');
require('lodash');
require('../tag/index.js');
require('../tag/Tag.js');
require('../tag/CheckTag.js');
require('../tag/defaultProps.js');
require('../tag-input/useHover.js');
require('../tag-input/defaultProps.js');
require('../select-input/defaultProps.js');
require('../select/base/PopupContent.js');
require('../jumper/index.js');
require('../jumper/Jumper.js');
require('../button/index.js');
require('../button/Button.js');
require('../button/defaultProps.js');
require('../jumper/defaultProps.js');
require('./base/Table.js');
require('./base/Cell.js');
require('../time-picker/index.js');
require('../time-picker/TimePicker.js');
require('../_chunks/dep-e4c3e633.js');
require('../time-picker/TimeRangePicker.js');
require('../time-picker/panel/TimePickerPanel.js');
require('../time-picker/panel/SinglePanel.js');
require('../time-picker/hooks/useTimePickerTextConfig.js');
require('../_common/js/time-picker/const.js');
require('../_common/js/time-picker/utils.js');
require('../hooks/useDebounce.js');
require('../_util/usePersistFn.js');
require('../hooks/usePropsRef.js');
require('../time-picker/defaultProps.js');
require('./panel/ExtraContent.js');
require('./base/Footer.js');
require('./hooks/useTableData.js');
require('./hooks/useDisableDate.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DateRangePicker = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;

  var className = props.className,
      style = props.style,
      disabled = props.disabled,
      mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      disableDate = props.disableDate,
      _props$firstDayOfWeek = props.firstDayOfWeek,
      firstDayOfWeek = _props$firstDayOfWeek === void 0 ? globalDatePickerConfig.firstDayOfWeek : _props$firstDayOfWeek,
      presets = props.presets,
      timePickerProps = props.timePickerProps,
      presetsPlacement = props.presetsPlacement,
      panelPreselection = props.panelPreselection,
      onPick = props.onPick;

  var _useRange = datePicker_hooks_useRange["default"](props),
      inputValue = _useRange.inputValue,
      popupVisible = _useRange.popupVisible,
      rangeInputProps = _useRange.rangeInputProps,
      popupProps = _useRange.popupProps,
      value = _useRange.value,
      year = _useRange.year,
      month = _useRange.month,
      time = _useRange.time,
      activeIndex = _useRange.activeIndex,
      isHoverCell = _useRange.isHoverCell,
      setActiveIndex = _useRange.setActiveIndex,
      onChange = _useRange.onChange,
      setIsHoverCell = _useRange.setIsHoverCell,
      setInputValue = _useRange.setInputValue,
      setPopupVisible = _useRange.setPopupVisible,
      setTime = _useRange.setTime,
      setYear = _useRange.setYear,
      setMonth = _useRange.setMonth,
      isFirstValueSelected = _useRange.isFirstValueSelected,
      setIsFirstValueSelected = _useRange.setIsFirstValueSelected,
      cacheValue = _useRange.cacheValue,
      setCacheValue = _useRange.setCacheValue;

  var _getDefaultFormat = _common_js_datePicker_format.getDefaultFormat({
    mode: mode,
    enableTimePicker: enableTimePicker,
    format: props.format,
    valueType: props.valueType
  }),
      format = _getDefaultFormat.format,
      valueType = _getDefaultFormat.valueType,
      timeFormat = _getDefaultFormat.timeFormat;

  var _useState = React.useState(false),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      isSelected = _useState2[0],
      setIsSelected = _useState2[1];

  React.useEffect(function () {
    if (popupVisible) {
      setIsSelected(false);
      setCacheValue(_common_js_datePicker_format.formatDate(value || [], {
        format: format,
        targetFormat: format
      }));
      setTime(_common_js_datePicker_format.formatTime(value || [dayjs__default["default"]().format(timeFormat), dayjs__default["default"]().format(timeFormat)], timeFormat));

      if (!value.length) {
        setYear(datePicker_hooks_useRangeValue.initYearMonthTime({
          value: value,
          mode: mode,
          format: format
        }).year);
        setMonth(datePicker_hooks_useRangeValue.initYearMonthTime({
          value: value,
          mode: mode,
          format: format,
          enableTimePicker: enableTimePicker
        }).month);
      } else if (value.length === 2 && !enableTimePicker) {
        var nextMonth = value.map(function (v) {
          return _common_js_datePicker_format.parseToDayjs(v || new Date(), format).month();
        });

        if (year[0] === year[1] && nextMonth[0] === nextMonth[1]) {
          nextMonth[0] === 11 ? nextMonth[0] -= 1 : nextMonth[1] += 1;
        }

        setMonth(nextMonth);
      } else {
        setYear(value.map(function (v) {
          return _common_js_datePicker_format.parseToDayjs(v || new Date(), format).year();
        }));
        setMonth(value.map(function (v) {
          return _common_js_datePicker_format.parseToDayjs(v || new Date(), format).month();
        }));
      }
    } else {
      setIsHoverCell(false);
      setIsFirstValueSelected(false);
      setInputValue(_common_js_datePicker_format.formatDate(value || [], {
        format: format,
        targetFormat: format
      }));
    }
  }, [popupVisible]);

  function onCellMouseEnter(date) {
    setIsHoverCell(true);

    var nextValue = toConsumableArray._toConsumableArray(inputValue);

    nextValue[activeIndex] = _common_js_datePicker_format.formatDate(date, {
      format: format,
      targetFormat: format
    });
    setInputValue(nextValue);
  }

  function onCellMouseLeave() {
    setIsHoverCell(false);
    setInputValue(cacheValue);
  }

  function onCellClick(date, _ref) {
    var e = _ref.e,
        partial = _ref.partial;
    onPick === null || onPick === void 0 ? void 0 : onPick(date, {
      e: e,
      partial: activeIndex ? "end" : "start"
    });
    setIsHoverCell(false);
    setIsSelected(true);

    var nextValue = toConsumableArray._toConsumableArray(inputValue);

    nextValue[activeIndex] = _common_js_datePicker_format.formatDate(date, {
      format: format,
      targetFormat: format
    });
    setCacheValue(nextValue);
    setInputValue(nextValue);

    if (mode === "date") {
      var partialIndex = partial === "start" ? 0 : 1;
      var isAdditional = dayjs__default["default"](date).month() !== month[partialIndex];

      if (isAdditional) {
        if (activeIndex === 0) setMonth([dayjs__default["default"](date).month(), Math.min(dayjs__default["default"](date).month() + 1, 11)]);
        if (activeIndex === 1) setMonth([Math.max(dayjs__default["default"](date).month() - 1, 0), dayjs__default["default"](date).month()]);
      }
    }

    if (enableTimePicker) return;
    var notValidIndex = nextValue.findIndex(function (v) {
      return !v || !_common_js_datePicker_format.isValidDate(v, format);
    });

    if (notValidIndex === -1 && nextValue.length === 2) {
      onChange(_common_js_datePicker_format.formatDate(nextValue, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: nextValue.map(function (v) {
          return dayjs__default["default"](v);
        }),
        trigger: "pick"
      });
    }

    if (!isFirstValueSelected) {
      var nextIndex = notValidIndex;
      if (nextIndex === -1) nextIndex = activeIndex ? 0 : 1;
      setActiveIndex(nextIndex);
      setIsFirstValueSelected(true);
    } else {
      setPopupVisible(false);
    }
  }

  function onJumperClick(_ref2) {
    var trigger = _ref2.trigger,
        partial = _ref2.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    var monthCountMap = {
      date: 1,
      week: 1,
      month: 12,
      quarter: 12,
      year: 120
    };
    var monthCount = monthCountMap[mode] || 0;
    var current = new Date(year[partialIndex], month[partialIndex]);
    var next = null;

    if (trigger === "prev") {
      next = _common_js_datePicker_utils.subtractMonth(current, monthCount);
    } else if (trigger === "current") {
      next = new Date();
    } else if (trigger === "next") {
      next = _common_js_datePicker_utils.addMonth(current, monthCount);
    }

    var nextYear = toConsumableArray._toConsumableArray(year);

    nextYear[partialIndex] = next.getFullYear();

    var nextMonth = toConsumableArray._toConsumableArray(month);

    nextMonth[partialIndex] = next.getMonth();

    if (partialIndex === 0) {
      nextYear[1] = Math.max(nextYear[0], nextYear[1]);

      if (nextYear[0] === nextYear[1]) {
        nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
      }
    }

    if (partialIndex === 1) {
      nextYear[0] = Math.min(nextYear[0], nextYear[1]);

      if (nextYear[0] === nextYear[1]) {
        nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
      }
    }

    setYear(nextYear);
    setMonth(nextMonth);
  }

  function onTimePickerChange(val) {
    var _extractTimeObj = _common_js_datePicker_utils.extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;

    var nextInputValue = toConsumableArray._toConsumableArray(inputValue);

    var changedInputValue = inputValue[activeIndex];
    var currentDate = !dayjs__default["default"](changedInputValue, format).isValid() ? dayjs__default["default"]().year(year[activeIndex]).month(month[activeIndex]) : dayjs__default["default"](changedInputValue, format);
    var nextHours = hours;
    if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
    if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
    var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
    nextInputValue[activeIndex] = nextDate;

    var nextTime = toConsumableArray._toConsumableArray(time);

    nextTime[activeIndex] = val;
    setTime(nextTime);
    setIsSelected(true);
    setInputValue(_common_js_datePicker_format.formatDate(nextInputValue, {
      format: format,
      targetFormat: format
    }));
    setCacheValue(_common_js_datePicker_format.formatDate(nextInputValue, {
      format: format,
      targetFormat: format
    }));
  }

  function onConfirmClick() {
    var nextValue = toConsumableArray._toConsumableArray(inputValue);

    var notValidIndex = nextValue.findIndex(function (v) {
      return !v || !_common_js_datePicker_format.isValidDate(v, format);
    });

    if (notValidIndex === -1 && nextValue.length === 2) {
      onChange(_common_js_datePicker_format.formatDate(nextValue, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: nextValue.map(function (v) {
          return dayjs__default["default"](v);
        }),
        trigger: "confirm"
      });
      setYear(nextValue.map(function (v) {
        return dayjs__default["default"](v, format).year();
      }));
      setMonth(nextValue.map(function (v) {
        return dayjs__default["default"](v, format).month();
      }));
    }

    if (!isFirstValueSelected) {
      var nextIndex = notValidIndex;
      if (nextIndex === -1) nextIndex = activeIndex ? 0 : 1;
      setActiveIndex(nextIndex);
      setIsFirstValueSelected(true);
    } else {
      setPopupVisible(false);
    }
  }

  function onPresetClick(preset) {
    var presetValue = preset;

    if (typeof preset === "function") {
      presetValue = preset();
    }

    if (!Array.isArray(presetValue)) {
      _common_js_log_log["default"].error("DateRangePicker", "preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
    } else {
      onChange(_common_js_datePicker_format.formatDate(presetValue, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: presetValue.map(function (p) {
          return dayjs__default["default"](p);
        }),
        trigger: "preset"
      });
      setPopupVisible(false);
    }
  }

  function onYearChange(nextVal, _ref3) {
    var partial = _ref3.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;

    var nextYear = toConsumableArray._toConsumableArray(year);

    nextYear[partialIndex] = nextVal;
    if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
    if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
    setYear(nextYear);
  }

  function onMonthChange(nextVal, _ref4) {
    var partial = _ref4.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;

    var nextMonth = toConsumableArray._toConsumableArray(month);

    nextMonth[partialIndex] = nextVal;

    if (year[0] === year[1]) {
      if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
      if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
    }

    setMonth(nextMonth);
  }

  var panelProps = {
    hoverValue: isHoverCell ? inputValue : [],
    value: isSelected ? cacheValue : value,
    isFirstValueSelected: isFirstValueSelected,
    panelPreselection: panelPreselection,
    year: year,
    month: month,
    mode: mode,
    format: format,
    presets: presets,
    time: time,
    disableDate: disableDate,
    firstDayOfWeek: firstDayOfWeek,
    timePickerProps: timePickerProps,
    enableTimePicker: enableTimePicker,
    presetsPlacement: presetsPlacement,
    activeIndex: activeIndex,
    popupVisible: popupVisible,
    onCellClick: onCellClick,
    onCellMouseEnter: onCellMouseEnter,
    onCellMouseLeave: onCellMouseLeave,
    onJumperClick: onJumperClick,
    onConfirmClick: onConfirmClick,
    onPresetClick: onPresetClick,
    onYearChange: onYearChange,
    onMonthChange: onMonthChange,
    onTimePickerChange: onTimePickerChange
  };
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"]("".concat(classPrefix, "-date-range-picker"), className),
    style: style,
    ref: ref
  }, /* @__PURE__ */React__default["default"].createElement(rangeInput_index.RangeInputPopup, {
    disabled: disabled,
    status: props.status,
    tips: props.tips,
    inputValue: inputValue,
    popupProps: popupProps,
    rangeInputProps: rangeInputProps,
    popupVisible: popupVisible,
    panel: /* @__PURE__ */React__default["default"].createElement(datePicker_panel_RangePanel["default"], _objectSpread({}, panelProps))
  }));
});
DateRangePicker.displayName = "DateRangePicker";
DateRangePicker.defaultProps = datePicker_defaultProps.dateRangePickerDefaultProps;

exports["default"] = DateRangePicker;
//# sourceMappingURL=DateRangePicker.js.map
