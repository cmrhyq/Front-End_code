/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-4eb93341.js');
var slicedToArray = require('../../_chunks/dep-9c5d4f93.js');
var React = require('react');
var tdesignIconsReact = require('tdesign-icons-react');
var dayjs = require('dayjs');
var classNames = require('classnames');
var hooks_useConfig = require('../../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../../hooks/useGlobalIcon.js');
var _common_js_datePicker_format = require('../../_common/js/date-picker/format.js');
var datePicker_hooks_useSingleValue = require('./useSingleValue.js');
require('../../_chunks/dep-2205decf.js');
require('../../_chunks/dep-4344eec8.js');
require('../../_chunks/dep-fe984d70.js');
require('../../_chunks/dep-46cf36fd.js');
require('../../_chunks/dep-f5e18a2f.js');
require('../../_chunks/dep-53ba6729.js');
require('../../_chunks/dep-61a8a7b0.js');
require('../../_chunks/dep-2a90f794.js');
require('../../_chunks/dep-aab723b3.js');
require('../../_chunks/dep-384b291c.js');
require('../../_chunks/dep-a0b5d8f6.js');
require('../../_chunks/dep-12656997.js');
require('../../_chunks/dep-1fff9729.js');
require('../../_chunks/dep-bb60493d.js');
require('../../_chunks/dep-72020528.js');
require('../../_chunks/dep-ad854ba5.js');
require('../../_chunks/dep-eebdbd74.js');
require('../../_chunks/dep-8f18a7c4.js');
require('../../_chunks/dep-9cd0fde8.js');
require('../../_chunks/dep-d3ad6e52.js');
require('../../_chunks/dep-aafeb50a.js');
require('../../_chunks/dep-6fa7a9e9.js');
require('../../_chunks/dep-994ec160.js');
require('../../_chunks/dep-9429a38a.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_common/js/global-config/default-config.js');
require('../../_common/js/date-picker/utils.js');
require('../../_chunks/dep-e4c3e633.js');
require('../../_chunks/dep-52c5813c.js');
require('../../_chunks/dep-09805e35.js');
require('../../_chunks/dep-76deafcc.js');
require('../../_common/js/log/log.js');
require('../../hooks/useControlled.js');
require('../../_chunks/dep-c76c2a08.js');
require('../../_chunks/dep-dc6c808e.js');
require('../../_chunks/dep-afce8659.js');
require('../../_util/noop.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useSingleInput(props) {
  var _props$placeholder, _props$suffixIcon, _props$popupProps$ove, _props$popupProps, _props$popupProps2;

  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;

  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
    CalendarIcon: tdesignIconsReact.CalendarIcon
  }),
      CalendarIcon = _useGlobalIcon.CalendarIcon;

  var name = "".concat(classPrefix, "-date-picker");

  var _getDefaultFormat = _common_js_datePicker_format.getDefaultFormat({
    mode: props.mode,
    format: props.format,
    valueType: props.valueType,
    enableTimePicker: props.enableTimePicker
  }),
      format = _getDefaultFormat.format,
      valueType = _getDefaultFormat.valueType,
      timeFormat = _getDefaultFormat.timeFormat;

  var inputRef = React.useRef();

  var _useSingleValue = datePicker_hooks_useSingleValue["default"](props),
      value = _useSingleValue.value,
      onChange = _useSingleValue.onChange,
      time = _useSingleValue.time,
      setTime = _useSingleValue.setTime,
      month = _useSingleValue.month,
      setMonth = _useSingleValue.setMonth,
      year = _useSingleValue.year,
      setYear = _useSingleValue.setYear,
      cacheValue = _useSingleValue.cacheValue,
      setCacheValue = _useSingleValue.setCacheValue;

  var _useState = React.useState(false),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      popupVisible = _useState2[0],
      setPopupVisible = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      isHoverCell = _useState4[0],
      setIsHoverCell = _useState4[1];

  var _useState5 = React.useState(_common_js_datePicker_format.formatDate(value, {
    format: format,
    targetFormat: format
  })),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      inputValue = _useState6[0],
      setInputValue = _useState6[1];

  var inputProps = _objectSpread(_objectSpread({}, props.inputProps), {}, {
    ref: inputRef,
    clearable: props.clearable,
    prefixIcon: props.prefixIcon,
    readonly: !props.allowInput,
    placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : globalDatePickerConfig.placeholder[props.mode],
    suffixIcon: (_props$suffixIcon = props.suffixIcon) !== null && _props$suffixIcon !== void 0 ? _props$suffixIcon : /* @__PURE__ */React__default["default"].createElement(CalendarIcon, null),
    className: classNames__default["default"](defineProperty._defineProperty({}, "".concat(name, "__input--placeholder"), isHoverCell)),
    onClear: function onClear(_ref) {
      var e = _ref.e;
      e.stopPropagation();
      setPopupVisible(false);
      onChange("", {
        dayjsValue: dayjs__default["default"](""),
        trigger: "clear"
      });
    },
    onBlur: function onBlur(val, _ref2) {
      var _props$onBlur;

      var e = _ref2.e;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
        value: val,
        e: e
      });
    },
    onFocus: function onFocus(_, _ref3) {
      var _props$onFocus;

      var e = _ref3.e;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
        value: value,
        e: e
      });
    },
    onChange: function onChange(val) {
      setInputValue(val);
      if (!_common_js_datePicker_format.isValidDate(val, format)) return;
      var newMonth = dayjs__default["default"](val).month();
      var newYear = dayjs__default["default"](val).year();
      var newTime = _common_js_datePicker_format.formatTime(val, timeFormat);
      !Number.isNaN(newYear) && setYear(newYear);
      !Number.isNaN(newMonth) && setMonth(newMonth);
      !Number.isNaN(newTime) && setTime(newTime);
    },
    onEnter: function onEnter(val) {
      if (!_common_js_datePicker_format.isValidDate(val, format) && !_common_js_datePicker_format.isValidDate(value, format)) return;
      setPopupVisible(false);

      if (_common_js_datePicker_format.isValidDate(val, format)) {
        onChange(_common_js_datePicker_format.formatDate(val, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: dayjs__default["default"](val),
          trigger: "enter"
        });
      } else if (_common_js_datePicker_format.isValidDate(value, format)) {
        setInputValue(_common_js_datePicker_format.formatDate(value, {
          format: format,
          targetFormat: format
        }));
      } else {
        setInputValue("");
      }
    }
  });

  var popupProps = _objectSpread(_objectSpread({
    expandAnimation: true
  }, props.popupProps), {}, {
    overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
      width: "auto"
    },
    overlayClassName: classNames__default["default"]((_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(name, "__panel-container")),
    onVisibleChange: function onVisibleChange(visible, context) {
      if (context.trigger === "trigger-element-click") {
        return setPopupVisible(true);
      }

      if (!visible) {
        setIsHoverCell(false);
      }

      setPopupVisible(visible);
    }
  });

  React.useEffect(function () {
    if (!value) {
      setInputValue("");
      return;
    }

    if (!_common_js_datePicker_format.isValidDate(value, valueType)) return;
    setInputValue(_common_js_datePicker_format.formatDate(value, {
      format: format,
      targetFormat: format
    }));
  }, [value]);
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    inputValue: inputValue,
    popupVisible: popupVisible,
    inputProps: inputProps,
    popupProps: popupProps,
    inputRef: inputRef,
    cacheValue: cacheValue,
    onChange: onChange,
    setYear: setYear,
    setMonth: setMonth,
    setTime: setTime,
    setIsHoverCell: setIsHoverCell,
    setInputValue: setInputValue,
    setPopupVisible: setPopupVisible,
    setCacheValue: setCacheValue
  };
}

exports["default"] = useSingleInput;
//# sourceMappingURL=useSingle.js.map
