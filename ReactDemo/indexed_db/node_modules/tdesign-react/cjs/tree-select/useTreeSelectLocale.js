/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../_chunks/dep-9c5d4f93.js');
var React = require('react');
var locale_LocalReceiver = require('../locale/LocalReceiver.js');
var hooks_useConfig = require('../hooks/useConfig.js');
require('../_chunks/dep-2205decf.js');
require('../_chunks/dep-4eb93341.js');
require('../_chunks/dep-4344eec8.js');
require('../_chunks/dep-fe984d70.js');
require('../_chunks/dep-46cf36fd.js');
require('../_chunks/dep-f5e18a2f.js');
require('../_chunks/dep-53ba6729.js');
require('../_chunks/dep-61a8a7b0.js');
require('../_chunks/dep-2a90f794.js');
require('../_chunks/dep-aab723b3.js');
require('../_chunks/dep-384b291c.js');
require('../_chunks/dep-a0b5d8f6.js');
require('../_chunks/dep-12656997.js');
require('../_chunks/dep-1fff9729.js');
require('../_chunks/dep-bb60493d.js');
require('../_chunks/dep-72020528.js');
require('../_chunks/dep-ad854ba5.js');
require('../_chunks/dep-eebdbd74.js');
require('../_chunks/dep-8f18a7c4.js');
require('../_chunks/dep-9cd0fde8.js');
require('../_chunks/dep-d3ad6e52.js');
require('../_chunks/dep-aafeb50a.js');
require('../_chunks/dep-6fa7a9e9.js');
require('../_chunks/dep-994ec160.js');
require('../_chunks/dep-9429a38a.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var useTreeSelectLocale = function useTreeSelectLocale(props) {
  var _props$empty, _props$loadingText, _props$placeholder;

  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("treeSelect"),
      _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var emptyText = t(local.empty);
  var placeholderText = t(local.placeholder);
  var loadingTextLabel = t(local.loadingText);
  return {
    empty: (_props$empty = props.empty) !== null && _props$empty !== void 0 ? _props$empty : /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-select__empty")
    }, emptyText),
    loadingItem: /* @__PURE__ */React__default["default"].createElement("p", {
      className: "".concat(classPrefix, "-select__loading-tips")
    }, (_props$loadingText = props.loadingText) !== null && _props$loadingText !== void 0 ? _props$loadingText : /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-select__empty")
    }, loadingTextLabel)),
    placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : placeholderText
  };
};

exports.useTreeSelectLocale = useTreeSelectLocale;
//# sourceMappingURL=useTreeSelectLocale.js.map
