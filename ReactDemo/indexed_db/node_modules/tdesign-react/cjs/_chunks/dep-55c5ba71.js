/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

var _assignValue = require('./dep-72020528.js');
var _baseGet = require('./dep-8329ea23.js');
var _isIndex = require('./dep-9cd0fde8.js');
var isObject$1 = require('./dep-aab723b3.js');

var assignValue = _assignValue._assignValue,
    castPath = _baseGet._castPath,
    isIndex = _isIndex._isIndex,
    isObject = isObject$1.isObject_1,
    toKey = _baseGet._toKey;
/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */

function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }

  path = castPath(path, object);
  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;

      if (newValue === undefined) {
        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }

    assignValue(nested, key, newValue);
    nested = nested[key];
  }

  return object;
}

var _baseSet = baseSet;

exports._baseSet = _baseSet;
//# sourceMappingURL=dep-55c5ba71.js.map
