/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

var _getTag = require('./dep-4fb39763.js');
var isArguments$1 = require('./dep-eebdbd74.js');
var isArray$1 = require('./dep-8f18a7c4.js');
var isArrayLike$1 = require('./dep-d3ad6e52.js');
var isTypedArray$1 = require('./dep-a0b5d8f6.js');

var baseKeys = _getTag._baseKeys,
    getTag = _getTag._getTag,
    isArguments = isArguments$1.isArguments_1,
    isArray = isArray$1.isArray_1,
    isArrayLike = isArrayLike$1.isArrayLike_1,
    isBuffer = isTypedArray$1.isBuffer.exports,
    isPrototype = isTypedArray$1._isPrototype,
    isTypedArray = isTypedArray$1.isTypedArray_1;
/** `Object#toString` result references. */

var mapTag = '[object Map]',
    setTag = '[object Set]';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */

function isEmpty(value) {
  if (value == null) {
    return true;
  }

  if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }

  var tag = getTag(value);

  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }

  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }

  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }

  return true;
}

var isEmpty_1 = isEmpty;

exports.isEmpty_1 = isEmpty_1;
//# sourceMappingURL=dep-ca4cc26d.js.map
