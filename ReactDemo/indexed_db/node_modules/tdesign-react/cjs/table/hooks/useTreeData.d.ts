import TableTreeStore, { SwapParams } from '../../_common/js/table/tree-store';
import { TdEnhancedTableProps, PrimaryTableCol, TableRowData, TableRowValue, TableRowState } from '../type';
export interface UseSwapParams<T> extends SwapParams<T> {
    data: T[];
}
export default function useTreeData(props: TdEnhancedTableProps): {
    store: TableTreeStore<import("../../_common/js/table/types").TableRowData>;
    rowDataKeys: {
        rowKey: string;
        childrenKey: string;
    };
    dataSource: TableRowData[];
    swapData: (params: UseSwapParams<TableRowData>) => void;
    setData: <T>(key: TableRowValue, newRowData: T) => void;
    getData: (key: TableRowValue) => TableRowState;
    remove: (key: TableRowValue) => void;
    appendTo: <T_1>(key: TableRowValue, newData: T_1 | T_1[]) => void;
    insertAfter: <T_2>(rowValue: TableRowValue, newData: T_2) => void;
    insertBefore: <T_3>(rowValue: TableRowValue, newData: T_3) => void;
    formatTreeColumn: (col: PrimaryTableCol) => PrimaryTableCol;
    toggleExpandData: (p: {
        row: TableRowData;
        rowIndex: number;
        trigger?: 'inner';
    }) => void;
    expandAll: () => void;
    foldAll: () => void;
    getTreeNode: () => import("../../_common/js/table/types").TableRowData[];
    resetData: (data: TableRowData[]) => void;
    getTreeExpandedRow: (type?: 'unique' | 'data' | 'all') => any[];
};
