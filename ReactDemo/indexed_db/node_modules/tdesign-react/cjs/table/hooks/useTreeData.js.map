{"version":3,"file":"useTreeData.js","sources":["../../../src/table/hooks/useTreeData.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport {\n  AddRectangleIcon as TdAddRectangleIcon,\n  MinusRectangleIcon as TdMinusRectangleIcon,\n} from 'tdesign-icons-react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport classNames from 'classnames';\nimport TableTreeStore, { SwapParams } from '../../_common/js/table/tree-store';\nimport { TdEnhancedTableProps, PrimaryTableCol, TableRowData, TableRowValue, TableRowState } from '../type';\nimport useClassName from './useClassName';\nimport { renderCell } from '../TR';\nimport { useLocaleReceiver } from '../../locale/LocalReceiver';\nimport useGlobalIcon from '../../hooks/useGlobalIcon';\n\nexport interface UseSwapParams<T> extends SwapParams<T> {\n  data: T[];\n}\n\nexport default function useTreeData(props: TdEnhancedTableProps) {\n  const { data, columns, tree, rowKey, treeExpandAndFoldIcon } = props;\n  const [store] = useState(new TableTreeStore() as InstanceType<typeof TableTreeStore>);\n  const [treeNodeCol, setTreeNodeCol] = useState<PrimaryTableCol>(() => getTreeNodeColumnCol());\n  const [dataSource, setDataSource] = useState<TdEnhancedTableProps['data']>(data || []);\n  const { tableTreeClasses } = useClassName();\n  const [locale, t] = useLocaleReceiver('table');\n  const { AddRectangleIcon, MinusRectangleIcon } = useGlobalIcon({\n    AddRectangleIcon: TdAddRectangleIcon,\n    MinusRectangleIcon: TdMinusRectangleIcon,\n  });\n\n  const rowDataKeys = useMemo(\n    () => ({\n      rowKey: rowKey || 'id',\n      childrenKey: tree?.childrenKey || 'children',\n    }),\n    [rowKey, tree?.childrenKey],\n  );\n\n  const checkedColumn = useMemo(() => columns.find((col) => col.colKey === 'row-select'), [columns]);\n\n  const uniqueKeys = useMemo(\n    () => store?.getAllUniqueKeys(data, rowDataKeys)?.join() || '',\n    [data, rowDataKeys, store],\n  );\n\n  useEffect(() => {\n    if (!store || !checkedColumn) return;\n    // 第一次，不需要执行 updateDisabledState\n    const rowValue = get(dataSource[0], rowDataKeys.rowKey);\n    if (!store.treeDataMap.get(rowValue)) return;\n    store.updateDisabledState(dataSource, checkedColumn, rowDataKeys);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checkedColumn]);\n\n  useEffect(\n    () => {\n      if (!data || !store) return;\n      // 如果没有树形解构，则不需要相关逻辑\n      if (!tree || !Object.keys(tree).length) {\n        setDataSource(data);\n        return;\n      }\n      resetData(data);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [uniqueKeys],\n  );\n\n  useEffect(\n    () => {\n      const treeNodeColTmp = getTreeNodeColumnCol();\n      setTreeNodeCol(treeNodeColTmp);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [columns],\n  );\n\n  function resetData(data: TableRowData[]) {\n    let newVal = cloneDeep(data);\n    store.initialTreeStore(newVal, props.columns, rowDataKeys);\n    if (props.tree?.defaultExpandAll) {\n      newVal = store.expandAll(newVal, rowDataKeys);\n    }\n    setDataSource(newVal);\n  }\n\n  function getTreeNodeStyle(level: number) {\n    if (level === undefined) return;\n    const indent = props.tree?.indent === undefined ? 24 : props.tree?.indent;\n    // 默认 1px 是为了临界省略\n    return indent ? { paddingLeft: `${level * indent || 1}px` } : {};\n  }\n\n  /**\n   * 对外暴露的组件实例方法，展开或收起某一行\n   * @param p 行数据\n   */\n  function toggleExpandData(p: { row: TableRowData; rowIndex: number; trigger?: 'inner' }) {\n    const newData = store.toggleExpandData(p, dataSource, rowDataKeys);\n    setDataSource([...newData]);\n    if (p.trigger === 'inner') {\n      const rowValue = get(p.row, rowDataKeys.rowKey);\n      props.onTreeExpandChange?.({\n        row: p.row,\n        rowIndex: p.rowIndex,\n        rowState: store?.treeDataMap?.get(rowValue),\n      });\n    }\n  }\n\n  function getTreeNodeColumnCol() {\n    const { columns } = props;\n    let treeNodeColumnIndex = props.tree?.treeNodeColumnIndex || 0;\n    // type 存在，则表示表格内部渲染的特殊列，比如：展开行按钮、复选框、单选按钮等，不能作为树结点列。因此树结点展开列向后顺移\n    while (\n      columns[treeNodeColumnIndex]?.type ||\n      columns[treeNodeColumnIndex]?.colKey === '__EXPAND_ROW_ICON_COLUMN__'\n    ) {\n      treeNodeColumnIndex += 1;\n    }\n    return columns[treeNodeColumnIndex];\n  }\n\n  function formatTreeColumn(col: PrimaryTableCol): PrimaryTableCol {\n    if (!col || !treeNodeCol || !store) return {};\n    if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;\n    const newCol = { ...treeNodeCol };\n    newCol.cell = (p) => {\n      const cellInfo = renderCell(\n        { ...p, col: { ...treeNodeCol } },\n        {\n          cellEmptyContent: props.cellEmptyContent,\n        },\n      );\n      const currentState = store.treeDataMap.get(get(p.row, rowDataKeys.rowKey));\n      const colStyle = getTreeNodeStyle(currentState?.level);\n      const classes = { [tableTreeClasses.inlineCol]: !!col.ellipsis };\n      const childrenNodes = get(p.row, rowDataKeys.childrenKey);\n      if ((childrenNodes && childrenNodes instanceof Array) || childrenNodes === true) {\n        const expanded = store.treeDataMap.get(get(p.row, rowDataKeys.rowKey))?.expanded;\n        const type = expanded ? 'fold' : 'expand';\n        const defaultIconNode =\n          t(locale.treeExpandAndFoldIcon, { type }) || (expanded ? <MinusRectangleIcon /> : <AddRectangleIcon />);\n        const iconNode = treeExpandAndFoldIcon ? treeExpandAndFoldIcon({ type, ...p }) : defaultIconNode;\n        return (\n          <div className={classNames([tableTreeClasses.col, classes])} style={colStyle}>\n            {!!(childrenNodes.length || childrenNodes === true) && (\n              <span className={tableTreeClasses.icon} onClick={() => toggleExpandData({ ...p, trigger: 'inner' })}>\n                {iconNode}\n              </span>\n            )}\n            {cellInfo}\n          </div>\n        );\n      }\n      return (\n        <div style={colStyle} className={classNames(classes)}>\n          {cellInfo}\n        </div>\n      );\n    };\n    // 树形节点会显示操作符号 [+] 和 [-]，但省略显示的浮层中不需要操作符\n    if (newCol.ellipsis === true) {\n      newCol.ellipsis = (p) => renderCell({ ...p, col: { ...treeNodeCol } });\n    }\n    return newCol;\n  }\n\n  /**\n   * 对外暴露的组件实例方法，设置行数据，自动刷新界面\n   * @param key 当前行唯一标识值\n   * @param newRowData 新行数据\n   */\n  function setData<T>(key: TableRowValue, newRowData: T) {\n    const rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);\n    const newData = [...dataSource];\n    newData[rowIndex] = newRowData;\n    setDataSource([...newData]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  function getData(key: TableRowValue): TableRowState {\n    return store.getData(key);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，对外暴露的组件实例方法，移除指定节点\n   * @param key 行唯一标识\n   */\n  function remove(key: TableRowValue) {\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    const newData = store.remove(key, dataSource, rowDataKeys);\n    setDataSource([...newData]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，为当前节点添加子节点，默认添加到最后一个节点\n   * @param key 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  function appendTo<T>(key: TableRowValue, newData: T | T[]) {\n    if (!key) {\n      setDataSource([...store.appendToRoot(newData, dataSource, rowDataKeys)]);\n      return;\n    }\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    setDataSource([...store.appendTo(key, newData, dataSource, rowDataKeys)]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，当前节点之后，插入节点\n   */\n  function insertAfter<T>(rowValue: TableRowValue, newData: T) {\n    setDataSource([...store.insertAfter(rowValue, newData, dataSource, rowDataKeys)]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，当前节点之后，插入节点\n   */\n  function insertBefore<T>(rowValue: TableRowValue, newData: T) {\n    setDataSource([...store.insertBefore(rowValue, newData, dataSource, rowDataKeys)]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，展开所有节点\n   */\n  function expandAll() {\n    setDataSource([...store.expandAll(dataSource, rowDataKeys)]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，收起所有节点\n   */\n  function foldAll() {\n    setDataSource([...store.foldAll(dataSource, rowDataKeys)]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，交换行数据，React 在回掉函数函数中无法获取最新的 state 信息，因此需要参数 params.data\n   */\n  function swapData(params: UseSwapParams<TableRowData>) {\n    const r = store.swapData(params.data, params, rowDataKeys);\n    if (r.result) {\n      setDataSource([...r.dataSource]);\n    } else {\n      const params = {\n        code: r.code,\n        reason: r.reason,\n      };\n      props.onAbnormalDragSort?.(params);\n    }\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取全部数据的树形结构\n   * @param key 节点唯一标识\n   */\n  function getTreeNode() {\n    return store.getTreeNode(dataSource, rowDataKeys);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取树形结构展开的节点\n   */\n  function getTreeExpandedRow(type: 'unique' | 'data' | 'all' = 'data') {\n    return store.getTreeExpandedRow(dataSource, rowDataKeys, type);\n  }\n\n  return {\n    store,\n    rowDataKeys,\n    dataSource,\n    swapData,\n    setData,\n    getData,\n    remove,\n    appendTo,\n    insertAfter,\n    insertBefore,\n    formatTreeColumn,\n    toggleExpandData,\n    expandAll,\n    foldAll,\n    getTreeNode,\n    resetData,\n    getTreeExpandedRow,\n  };\n}\n"],"names":["useTreeData","props","data","columns","tree","rowKey","treeExpandAndFoldIcon","useState","TableTreeStore","_slicedToArray","store","getTreeNodeColumnCol","treeNodeCol","setTreeNodeCol","dataSource","setDataSource","useClassName","tableTreeClasses","useLocaleReceiver","locale","t","useGlobalIcon","AddRectangleIcon","TdAddRectangleIcon","MinusRectangleIcon","TdMinusRectangleIcon","rowDataKeys","useMemo","childrenKey","checkedColumn","find","col","colKey","uniqueKeys","getAllUniqueKeys","join","useEffect","rowValue","get","treeDataMap","updateDisabledState","Object","keys","length","resetData","treeNodeColTmp","newVal","cloneDeep","initialTreeStore","defaultExpandAll","expandAll","getTreeNodeStyle","level","indent","paddingLeft","toggleExpandData","p","newData","_toConsumableArray","trigger","row","onTreeExpandChange","rowIndex","rowState","treeNodeColumnIndex","type","formatTreeColumn","newCol","cell","cellInfo","renderCell","cellEmptyContent","currentState","colStyle","classes","inlineCol","ellipsis","childrenNodes","Array","expanded","defaultIconNode","React","createElement","iconNode","className","classNames","style","icon","onClick","setData","key","newRowData","updateData","getData","remove","appendTo","appendToRoot","insertAfter","insertBefore","foldAll","swapData","params","r","result","code","reason","onAbnormalDragSort","getTreeNode","getTreeExpandedRow"],"mappings":"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"}