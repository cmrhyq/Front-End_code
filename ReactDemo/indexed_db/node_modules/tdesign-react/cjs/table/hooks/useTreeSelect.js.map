{"version":3,"file":"useTreeSelect.js","sources":["../../../src/table/hooks/useTreeSelect.tsx"],"sourcesContent":["import { useMemo, useState, useEffect } from 'react';\nimport get from 'lodash/get';\nimport intersection from 'lodash/intersection';\nimport { TdEnhancedTableProps, TdPrimaryTableProps, TableRowData, PrimaryTableCol } from '../type';\nimport { KeysType, TableTreeDataMap, TreeDataMapType } from '../../_common/js/table/tree-store';\nimport useControlled from '../../hooks/useControlled';\n\nexport interface GetChildrenDataReturnValue {\n  allChildren: Array<any>;\n  allChildrenKeys: Array<string | number>;\n  leafNodeKeys: Array<string | number>;\n}\n\n// 保存子节点信息，避免重复计算\nexport const childrenMap = new Map();\n\nexport function getChildrenData(\n  treeDataMap: TreeDataMapType,\n  data: TableRowData,\n  keys: { childrenKey: string; rowKey: string },\n  r?: GetChildrenDataReturnValue,\n): GetChildrenDataReturnValue {\n  if (childrenMap.get(data)) return childrenMap.get(data);\n  const result = r || { allChildren: [], allChildrenKeys: [], leafNodeKeys: [] };\n  const children = get(data, keys.childrenKey);\n  if (!children || !children.length) return result;\n  const selectableChildren = children.filter(\n    (item: TableRowData) => !treeDataMap.get(get(item, keys.rowKey))?.disabled,\n  );\n  result.allChildren = [...new Set(result.allChildren.concat(selectableChildren))];\n  for (let i = 0, len = children.length; i < len; i++) {\n    const tItem = children[i];\n    const c = get(tItem, keys.childrenKey);\n    if (c?.length) {\n      const nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);\n      result.allChildren = [...new Set(result.allChildren.concat(nextLevelData.allChildren))];\n    }\n  }\n  // 避免使用 forEach，减少上下文消耗\n  for (let i = 0, len = result.allChildren.length; i < len; i++) {\n    const item = result.allChildren[i];\n    const children = get(item, keys.childrenKey);\n    const rowValue = get(item, keys.rowKey);\n    result.allChildrenKeys.push(rowValue);\n    if (!children || !children.length) {\n      result.leafNodeKeys.push(rowValue);\n    }\n  }\n  result.allChildrenKeys = [...new Set(result.allChildrenKeys)];\n  result.leafNodeKeys = [...new Set(result.leafNodeKeys)];\n  return result;\n}\n\nexport interface RemoveParams {\n  // 当前选中的数据\n  selectedRowKeys: Array<string | number>;\n  // 需要移除的数据\n  removeKeys: Array<string | number>;\n}\n\nexport interface RemainData {\n  data: Array<any>;\n  keys: Array<string | number>;\n}\n\nexport function removeChildrenKeys(p: RemoveParams, r?: RemainData): RemainData {\n  const { selectedRowKeys, removeKeys } = p;\n  const result = r || { data: [], keys: [] };\n  for (let i = 0, len = selectedRowKeys.length; i < len; i++) {\n    const key = selectedRowKeys[i];\n    if (!removeKeys.includes(key)) {\n      result.keys.push(key);\n    }\n  }\n  return result;\n}\n\nexport interface GetKeyDataParams {\n  treeDataMap: TreeDataMapType;\n  data: Array<any>;\n  column: PrimaryTableCol;\n  keys: KeysType;\n}\n\nexport interface GetRowDataParams {\n  treeDataMap: TreeDataMapType;\n  selectedRowKeys: Array<string | number>;\n}\n\nexport function getRowDataByKeys(p: GetRowDataParams) {\n  const { treeDataMap, selectedRowKeys } = p;\n  const result = [];\n  for (let i = 0, len = selectedRowKeys.length; i < len; i++) {\n    const key = selectedRowKeys[i];\n    result.push(treeDataMap.get(key));\n  }\n  return result;\n}\n\ntype SelectChangeParams = Parameters<TdPrimaryTableProps['onSelectChange']>;\n\nexport default function useTreeSelect(props: TdEnhancedTableProps, treeDataMap: TableTreeDataMap) {\n  const { tree, rowKey, data, indeterminateSelectedRowKeys } = props;\n  // 半选状态的节点：子节点选中至少一个，且没有全部选中\n  const [tIndeterminateSelectedRowKeys, setTIndeterminateSelectedRowKeys] = useState([]);\n  // eslint-disable-next-line\n  const [tSelectedRowKeys, setTSelectedRowKeys] = useControlled(props, 'selectedRowKeys', props.onSelectChange, {\n    defaultSelectedRowKeys: props.defaultSelectedRowKeys || [],\n  });\n\n  const rowDataKeys = useMemo(\n    () => ({\n      rowKey: rowKey || 'id',\n      childrenKey: tree?.childrenKey || 'children',\n    }),\n    [rowKey, tree?.childrenKey],\n  );\n\n  useEffect(() => {\n    if (!tree || !treeDataMap.size || tree.checkStrictly) return;\n    updateIndeterminateState();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tSelectedRowKeys, data, tree, treeDataMap]);\n\n  function updateIndeterminateState() {\n    if (!tree || tree.checkStrictly) return;\n    if (!tSelectedRowKeys.length) {\n      setTIndeterminateSelectedRowKeys([]);\n      return;\n    }\n    const keys: Array<string | number> = [];\n    const parentMap: { [key: string | number]: any[] } = {};\n    for (let i = 0, len = tSelectedRowKeys.length; i < len; i++) {\n      const rowValue = tSelectedRowKeys[i];\n      const state = treeDataMap.get(rowValue);\n      const children = get(state.row, rowDataKeys.childrenKey);\n      // 根据选中的叶子结点计算父节点半选状态\n      if (!children || !children.length) {\n        let parentTmp = state.parent;\n        while (parentTmp) {\n          if (!parentMap[parentTmp.id]) {\n            parentMap[parentTmp.id] = [];\n          }\n          parentMap[parentTmp.id].push(state.row);\n          const checkedLength = parentMap[parentTmp.id].length;\n          const { allChildrenKeys } = getChildrenData(treeDataMap, parentTmp.row, rowDataKeys);\n          const parentTmpIndex = keys.indexOf(parentTmp.id);\n          const selectedIndex = tSelectedRowKeys.indexOf(parentTmp.id);\n          if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {\n            parentTmpIndex === -1 && keys.push(parentTmp.id);\n          } else {\n            parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);\n          }\n          parentTmp = parentTmp.parent;\n        }\n      }\n    }\n    setTIndeterminateSelectedRowKeys(keys);\n  }\n\n  function updateParentCheckedState(\n    selectedKeys: (string | number)[],\n    currentRowKey: string | number,\n    type: 'check' | 'uncheck',\n  ) {\n    if (!tree || tree.checkStrictly) return;\n    const keys = [...selectedKeys];\n    const state = treeDataMap.get(currentRowKey);\n    let parentTmp = state.parent;\n    while (parentTmp) {\n      const { leafNodeKeys } = getChildrenData(treeDataMap, parentTmp.row, rowDataKeys);\n      const checkedChildrenKeys = intersection(leafNodeKeys, selectedKeys);\n      const selectedIndex = keys.indexOf(parentTmp.id);\n      if (type === 'uncheck') {\n        selectedIndex !== -1 && keys.splice(selectedIndex, 1);\n      } else if (checkedChildrenKeys.length === leafNodeKeys.length) {\n        selectedIndex === -1 && keys.push(parentTmp.id);\n      }\n      parentTmp = parentTmp.parent;\n    }\n    return keys;\n  }\n\n  function onInnerSelectChange(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]) {\n    if (!tree || tree.checkStrictly) {\n      setTSelectedRowKeys(rowKeys, extraData);\n      return;\n    }\n    if (extraData.currentRowKey === 'CHECK_ALL_BOX') {\n      handleSelectAll(extraData);\n    } else {\n      handleSelect(rowKeys, extraData);\n    }\n  }\n\n  function handleSelectAll(extraData: SelectChangeParams[1]) {\n    const newRowKeys: Array<string | number> = [];\n    const newRowData: TableRowData[] = [];\n    if (extraData?.type === 'check') {\n      const arr = [...treeDataMap.values()];\n      for (let i = 0, len = arr.length; i < len; i++) {\n        const item = arr[i];\n        if (!item?.disabled) {\n          newRowData.push(item.row);\n          newRowKeys.push(get(item.row, rowDataKeys.rowKey));\n        }\n      }\n    }\n    const newExtraData = {\n      ...extraData,\n      selectedRowData: newRowData || [],\n    };\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n\n  function handleSelect(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]) {\n    let newRowKeys = [...rowKeys];\n    if (tree.checkStrictly === false) {\n      if (extraData.type === 'check') {\n        const result = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys);\n        const { allChildrenKeys } = result;\n        childrenMap.set(extraData.currentRowData, result);\n        newRowKeys = [...new Set(newRowKeys.concat(allChildrenKeys))];\n      } else if (extraData.type === 'uncheck') {\n        const children = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys);\n        const result = removeChildrenKeys({\n          selectedRowKeys: rowKeys,\n          removeKeys: children.allChildrenKeys,\n        });\n        newRowKeys = result.keys;\n      }\n    }\n    newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);\n    const newRowData = getRowDataByKeys({ treeDataMap, selectedRowKeys: newRowKeys });\n    const newExtraData = {\n      ...extraData,\n      selectedRowData: newRowData,\n    };\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n\n  return {\n    // 如果存在受控属性 indeterminateSelectedRowKeys 则优先使用；否则使用内部状态：tIndeterminateSelectedRowKeys\n    tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys || tIndeterminateSelectedRowKeys,\n    onInnerSelectChange,\n  };\n}\n"],"names":["childrenMap","Map","getChildrenData","treeDataMap","data","keys","r","get","result","allChildren","allChildrenKeys","leafNodeKeys","children","childrenKey","length","selectableChildren","filter","item","rowKey","disabled","_toConsumableArray","Set","concat","i","len","tItem","c","nextLevelData","rowValue","push","removeChildrenKeys","p","selectedRowKeys","removeKeys","key","includes","getRowDataByKeys","useTreeSelect","props","tree","indeterminateSelectedRowKeys","useState","_slicedToArray","tIndeterminateSelectedRowKeys","setTIndeterminateSelectedRowKeys","useControlled","onSelectChange","defaultSelectedRowKeys","tSelectedRowKeys","setTSelectedRowKeys","rowDataKeys","useMemo","useEffect","size","checkStrictly","updateIndeterminateState","parentMap","state","row","parentTmp","parent","id","checkedLength","parentTmpIndex","indexOf","selectedIndex","splice","updateParentCheckedState","selectedKeys","currentRowKey","type","checkedChildrenKeys","intersection","onInnerSelectChange","rowKeys","extraData","handleSelectAll","handleSelect","newRowKeys","newRowData","arr","values","newExtraData","selectedRowData","currentRowData","set"],"mappings":"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"}