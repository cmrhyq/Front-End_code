/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var toConsumableArray = require('../../_chunks/dep-8052f095.js');
var defineProperty = require('../../_chunks/dep-4eb93341.js');
var slicedToArray = require('../../_chunks/dep-9c5d4f93.js');
var React = require('react');
var Sortable = require('sortablejs');
var get = require('../../_chunks/dep-65cb34d8.js');
var table_hooks_useClassName = require('./useClassName.js');
var _util_dom = require('../../_util/dom.js');
var _common_js_log_log = require('../../_common/js/log/log.js');
var _common_js_utils_swapDragArrayElement = require('../../_common/js/utils/swapDragArrayElement.js');
require('../../_chunks/dep-2205decf.js');
require('../../_chunks/dep-606cfe2a.js');
require('../../_chunks/dep-8329ea23.js');
require('../../_chunks/dep-8f18a7c4.js');
require('../../_chunks/dep-2a90f794.js');
require('../../_chunks/dep-09805e35.js');
require('../../_chunks/dep-61a8a7b0.js');
require('../../_chunks/dep-1fff9729.js');
require('../../_chunks/dep-46cf36fd.js');
require('../../_chunks/dep-f5e18a2f.js');
require('../../_chunks/dep-53ba6729.js');
require('../../_chunks/dep-aab723b3.js');
require('../../_chunks/dep-384b291c.js');
require('../../_chunks/dep-afce8659.js');
require('../../hooks/useConfig.js');
require('../../_chunks/dep-4344eec8.js');
require('../../_chunks/dep-fe984d70.js');
require('../../_chunks/dep-a0b5d8f6.js');
require('../../_chunks/dep-12656997.js');
require('../../_chunks/dep-bb60493d.js');
require('../../_chunks/dep-72020528.js');
require('../../_chunks/dep-ad854ba5.js');
require('../../_chunks/dep-eebdbd74.js');
require('../../_chunks/dep-9cd0fde8.js');
require('../../_chunks/dep-d3ad6e52.js');
require('../../_chunks/dep-aafeb50a.js');
require('../../_chunks/dep-6fa7a9e9.js');
require('../../_chunks/dep-994ec160.js');
require('../../_chunks/dep-9429a38a.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_common/js/global-config/default-config.js');
require('raf');
require('../../_chunks/dep-9a2dbbb1.js');
require('../../_util/easing.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Sortable__default = /*#__PURE__*/_interopDefaultLegacy(Sortable);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useDragSort(props, primaryTableRef) {
  var sortOnRowDraggable = props.sortOnRowDraggable,
      dragSort = props.dragSort,
      data = props.data,
      onDragSort = props.onDragSort;

  var _useClassName = table_hooks_useClassName["default"](),
      tableDraggableClasses = _useClassName.tableDraggableClasses,
      tableBaseClass = _useClassName.tableBaseClass,
      tableFullRowClasses = _useClassName.tableFullRowClasses;

  var _useState = React.useState(props.columns || []),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      columns = _useState2[0],
      setDragSortColumns = _useState2[1];

  var dragCol = React.useMemo(function () {
    return columns.find(function (item) {
      return item.colKey === "drag";
    });
  }, [columns]);
  var isRowDraggable = React.useMemo(function () {
    return sortOnRowDraggable || dragSort === "row";
  }, [dragSort, sortOnRowDraggable]);
  var isRowHandlerDraggable = React.useMemo(function () {
    return ["row-handler", "row-handler-col"].includes(dragSort) && !!dragCol;
  }, [dragSort, dragCol]);
  var isColDraggable = React.useMemo(function () {
    return ["col", "row-handler-col"].includes(dragSort);
  }, [dragSort]);
  var lastRowList = React.useRef([]);
  var tData = React.useRef();
  var lastColList = React.useRef([]);
  var dragColumns = React.useRef([]);
  var originalColumns = React.useRef([]);

  if (props.sortOnRowDraggable) {
    _common_js_log_log["default"].warn("Table", "`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.");
  }

  React.useEffect(function () {
    lastRowList.current = data.map(function (item) {
      return String(get.get_1(item, props.rowKey));
    });
    tData.current = data;
  }, [data, props.rowKey]);
  React.useEffect(function () {
    lastColList.current = props.columns.map(function (t) {
      return t.colKey;
    });
    dragColumns.current = props.columns;
    originalColumns.current = props.columns;
  }, [props.columns]);

  var registerRowDragEvent = function registerRowDragEvent(element) {
    var _dragInstanceTmp2;

    if (!isRowHandlerDraggable && !isRowDraggable) return;
    var dragInstanceTmp = null;
    var dragContainer = element === null || element === void 0 ? void 0 : element.querySelector("tbody");

    if (!dragContainer) {
      _common_js_log_log["default"].error("Table", "tbody does not exist.");
      return null;
    }

    var baseOptions = _objectSpread(_objectSpread({
      animation: 150
    }, props.dragSortOptions), {}, {
      ghostClass: tableDraggableClasses.ghost,
      chosenClass: tableDraggableClasses.chosen,
      dragClass: tableDraggableClasses.dragging,
      filter: ".".concat(tableFullRowClasses.base),
      onMove: function onMove(evt) {
        return !_util_dom.hasClass(evt.related, tableFullRowClasses.base);
      },
      onEnd: function onEnd(evt) {
        var _dragInstanceTmp;

        var currentIndex = evt.oldIndex,
            targetIndex = evt.newIndex;
        (_dragInstanceTmp = dragInstanceTmp) === null || _dragInstanceTmp === void 0 ? void 0 : _dragInstanceTmp.sort(toConsumableArray._toConsumableArray(lastRowList.current));

        if (props.firstFullRow) {
          currentIndex -= 1;
          targetIndex -= 1;
        }

        var params = {
          currentIndex: currentIndex,
          current: tData.current[currentIndex],
          targetIndex: targetIndex,
          target: tData.current[targetIndex],
          data: tData.current,
          newData: _common_js_utils_swapDragArrayElement["default"](toConsumableArray._toConsumableArray(tData.current), currentIndex, targetIndex),
          e: evt,
          sort: "row"
        };
        params.currentData = params.newData;
        onDragSort === null || onDragSort === void 0 ? void 0 : onDragSort(params);
      }
    });

    if (isRowDraggable) {
      dragInstanceTmp = new Sortable__default["default"](dragContainer, _objectSpread({}, baseOptions));
    } else if (isRowHandlerDraggable) {
      dragInstanceTmp = new Sortable__default["default"](dragContainer, _objectSpread(_objectSpread({}, baseOptions), {}, {
        handle: ".".concat(tableDraggableClasses.handle)
      }));
    }

    lastRowList.current = (_dragInstanceTmp2 = dragInstanceTmp) === null || _dragInstanceTmp2 === void 0 ? void 0 : _dragInstanceTmp2.toArray();
  };

  var registerColDragEvent = function registerColDragEvent(tableElement) {
    var _dragInstanceTmp4;

    if (!isColDraggable || !tableElement) return;
    var dragInstanceTmp = null;

    var options = _objectSpread(_objectSpread({
      animation: 150
    }, props.dragSortOptions), {}, {
      dataIdAttr: "data-colkey",
      direction: "vertical",
      ghostClass: tableDraggableClasses.ghost,
      chosenClass: tableDraggableClasses.chosen,
      dragClass: tableDraggableClasses.dragging,
      handle: ".".concat(tableBaseClass.thCellInner),
      onEnd: function onEnd(evt) {
        var _dragInstanceTmp3;

        (_dragInstanceTmp3 = dragInstanceTmp) === null || _dragInstanceTmp3 === void 0 ? void 0 : _dragInstanceTmp3.sort(toConsumableArray._toConsumableArray(lastColList.current));
        var currentIndex = evt.oldIndex,
            targetIndex = evt.newIndex;
        var current = dragColumns.current[currentIndex];
        var target = dragColumns.current[targetIndex];

        if (!current || !current.colKey) {
          _common_js_log_log["default"].error("Table", "colKey is missing in ".concat(JSON.stringify(current)));
        }

        if (!target || !target.colKey) {
          _common_js_log_log["default"].error("Table", "colKey is missing in ".concat(JSON.stringify(target)));
        }

        currentIndex = originalColumns.current.findIndex(function (t) {
          return t.colKey === current.colKey;
        });
        targetIndex = originalColumns.current.findIndex(function (t) {
          return t.colKey === target.colKey;
        });
        var params = {
          data: dragColumns.current,
          currentIndex: currentIndex,
          current: current,
          targetIndex: targetIndex,
          target: target,
          newData: _common_js_utils_swapDragArrayElement["default"](toConsumableArray._toConsumableArray(originalColumns.current), currentIndex, targetIndex),
          e: evt,
          sort: "col"
        };
        params.currentData = params.newData;
        onDragSort === null || onDragSort === void 0 ? void 0 : onDragSort(params);
      }
    });

    var container = tableElement.querySelector("thead > tr");
    dragInstanceTmp = new Sortable__default["default"](container, options);
    lastColList.current = (_dragInstanceTmp4 = dragInstanceTmp) === null || _dragInstanceTmp4 === void 0 ? void 0 : _dragInstanceTmp4.toArray();
  };

  React.useEffect(function () {
    var _primaryTableRef$curr, _primaryTableRef$curr2;

    if (!primaryTableRef || !primaryTableRef.current) return;
    registerRowDragEvent((_primaryTableRef$curr = primaryTableRef.current) === null || _primaryTableRef$curr === void 0 ? void 0 : _primaryTableRef$curr.tableElement);
    registerColDragEvent((_primaryTableRef$curr2 = primaryTableRef.current) === null || _primaryTableRef$curr2 === void 0 ? void 0 : _primaryTableRef$curr2.tableHtmlElement);
    var timer = setTimeout(function () {
      var _primaryTableRef$curr3;

      if ((_primaryTableRef$curr3 = primaryTableRef.current) !== null && _primaryTableRef$curr3 !== void 0 && _primaryTableRef$curr3.affixHeaderElement) {
        registerColDragEvent(primaryTableRef.current.affixHeaderElement);
      }

      clearTimeout(timer);
    });
  }, [primaryTableRef, columns, dragSort]);
  return {
    isRowDraggable: isRowDraggable,
    isRowHandlerDraggable: isRowHandlerDraggable,
    isColDraggable: isColDraggable,
    setDragSortColumns: setDragSortColumns
  };
}

exports["default"] = useDragSort;
//# sourceMappingURL=useDragSort.js.map
