{"version":3,"file":"useRowSelect.js","sources":["../../../src/table/hooks/useRowSelect.tsx"],"sourcesContent":["// 行选中相关功能：单选 + 多选\n\nimport React, { useEffect, useState, MouseEvent } from 'react';\nimport intersection from 'lodash/intersection';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport useControlled from '../../hooks/useControlled';\nimport {\n  PrimaryTableCellParams,\n  PrimaryTableCol,\n  RowClassNameParams,\n  TableRowData,\n  TdBaseTableProps,\n  TdPrimaryTableProps,\n} from '../type';\nimport { isRowSelectedDisabled } from '../utils';\nimport { TableClassName } from './useClassName';\nimport Checkbox from '../../checkbox';\nimport Radio from '../../radio';\nimport { ClassName } from '../../common';\nimport log from '../../_common/js/log';\n\nconst selectedRowDataMap = new Map<string | number, TableRowData>();\n\nexport default function useRowSelect(\n  props: TdPrimaryTableProps,\n  tableSelectedClasses: TableClassName['tableSelectedClasses'],\n) {\n  const { selectedRowKeys, columns, data, rowKey, indeterminateSelectedRowKeys } = props;\n  const [selectedRowClassNames, setSelectedRowClassNames] = useState<TdBaseTableProps['rowClassName']>();\n  const [tSelectedRowKeys, setTSelectedRowKeys] = useControlled(props, 'selectedRowKeys', props.onSelectChange, {\n    defaultSelectedRowKeys: props.defaultSelectedRowKeys || [],\n  });\n  const selectColumn = columns.find(({ type }) => ['multiple', 'single'].includes(type));\n  const canSelectedRows = data.filter((row, rowIndex): boolean => !isDisabled(row, rowIndex));\n  // 选中的行，和所有可以选择的行，交集，用于计算 isSelectedAll 和 isIndeterminate\n  const intersectionKeys = intersection(\n    tSelectedRowKeys,\n    canSelectedRows.map((t) => get(t, rowKey || 'id')),\n  );\n\n  useEffect(\n    () => {\n      if (!selectColumn && (!tSelectedRowKeys || !tSelectedRowKeys.length)) return;\n      const disabledRowFunc = (p: RowClassNameParams<TableRowData>): ClassName =>\n        selectColumn.disabled(p) ? tableSelectedClasses.disabled : '';\n      const disabledRowClass = selectColumn?.disabled ? disabledRowFunc : undefined;\n      const selected = new Set(tSelectedRowKeys);\n      const selectedRowClassFunc = ({ row }: RowClassNameParams<TableRowData>) => {\n        const rowId = get(row, rowKey || 'id');\n        return selected.has(rowId) ? tableSelectedClasses.selected : '';\n      };\n      const selectedRowClass = selected.size ? selectedRowClassFunc : undefined;\n      setSelectedRowClassNames([disabledRowClass, selectedRowClass]);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, columns, tSelectedRowKeys, selectColumn, rowKey],\n  );\n\n  function isDisabled(row: Record<string, any>, rowIndex: number): boolean {\n    return isRowSelectedDisabled(selectColumn, row, rowIndex);\n  }\n\n  function getSelectedHeader() {\n    return () => {\n      const isIndeterminate = intersectionKeys.length > 0 && intersectionKeys.length < canSelectedRows.length;\n      const isChecked =\n        intersectionKeys.length !== 0 &&\n        canSelectedRows.length !== 0 &&\n        intersectionKeys.length === canSelectedRows.length;\n      return (\n        <Checkbox\n          checked={isChecked}\n          indeterminate={isIndeterminate}\n          disabled={!canSelectedRows.length}\n          onChange={handleSelectAll}\n        />\n      );\n    };\n  }\n\n  function renderSelectCell(p: PrimaryTableCellParams<TableRowData>) {\n    const { col: column, row = {}, rowIndex } = p;\n    const checked = tSelectedRowKeys.includes(get(row, rowKey || 'id'));\n    const disabled: boolean =\n      typeof column.disabled === 'function' ? column.disabled({ row, rowIndex }) : column.disabled;\n    const checkProps = isFunction(column.checkProps) ? column.checkProps({ row, rowIndex }) : column.checkProps;\n    const selectBoxProps = {\n      checked,\n      disabled,\n      ...checkProps,\n      onChange: () => {\n        handleSelectChange(row);\n      },\n    };\n    // 选中行功能中，点击 checkbox/radio 需阻止事件冒泡，避免触发不必要的 onRowClick\n    const onCheckClick = (e: MouseEvent<HTMLLabelElement>) => {\n      e?.stopPropagation();\n    };\n    if (column.type === 'single') return <Radio {...selectBoxProps} onClick={onCheckClick} />;\n    if (column.type === 'multiple') {\n      const isIndeterminate = indeterminateSelectedRowKeys?.length\n        ? indeterminateSelectedRowKeys.includes(get(row, rowKey))\n        : false;\n      return <Checkbox indeterminate={isIndeterminate} {...selectBoxProps} onClick={onCheckClick} />;\n    }\n    return null;\n  }\n\n  function handleSelectChange(row: TableRowData = {}) {\n    let selectedRowKeys = [...tSelectedRowKeys];\n    const reRowKey = rowKey || 'id';\n    const id = get(row, reRowKey);\n    selectedRowDataMap.set(id, row);\n    const selectedRowIndex = selectedRowKeys.indexOf(id);\n    const isExisted = selectedRowIndex !== -1;\n    if (selectColumn.type === 'multiple') {\n      isExisted ? selectedRowKeys.splice(selectedRowIndex, 1) : selectedRowKeys.push(id);\n    } else if (selectColumn.type === 'single') {\n      selectedRowKeys = !isExisted ? [id] : [];\n    } else {\n      log.warn('Table', '`column.type` must be one of `multiple` and `single`');\n      return;\n    }\n    setTSelectedRowKeys(selectedRowKeys, {\n      selectedRowData: selectedRowKeys.map((t) => selectedRowDataMap.get(t)),\n      currentRowKey: id,\n      currentRowData: row,\n      type: isExisted ? 'uncheck' : 'check',\n    });\n  }\n\n  function handleSelectAll(checked: boolean) {\n    const reRowKey = rowKey || 'id';\n    const canSelectedRowKeys = canSelectedRows.map((record) => get(record, reRowKey));\n    const disabledSelectedRowKeys = selectedRowKeys?.filter((id) => !canSelectedRowKeys.includes(id)) || [];\n    const allIds = checked ? [...disabledSelectedRowKeys, ...canSelectedRowKeys] : [...disabledSelectedRowKeys];\n    setTSelectedRowKeys(allIds, {\n      selectedRowData: checked ? allIds.map((t) => selectedRowDataMap.get(t)) : [],\n      type: checked ? 'check' : 'uncheck',\n      currentRowKey: 'CHECK_ALL_BOX',\n    });\n  }\n\n  function formatToRowSelectColumn(col: PrimaryTableCol) {\n    const isSelection = ['multiple', 'single'].includes(col.type);\n    if (!isSelection) return col;\n    return {\n      ...col,\n      width: col.width || 64,\n      className: tableSelectedClasses.checkCell,\n      cell: (p: PrimaryTableCellParams<TableRowData>) => renderSelectCell(p),\n      title: col.type === 'multiple' ? getSelectedHeader() : '',\n    };\n  }\n\n  useEffect(() => {\n    for (let i = 0, len = data.length; i < len; i++) {\n      selectedRowDataMap.set(get(data[i], rowKey || 'id'), data[i]);\n    }\n  }, [data, rowKey]);\n\n  return {\n    selectedRowClassNames,\n    formatToRowSelectColumn,\n  };\n}\n"],"names":["selectedRowDataMap","Map","useRowSelect","props","tableSelectedClasses","selectedRowKeys","columns","data","rowKey","indeterminateSelectedRowKeys","useState","_slicedToArray","selectedRowClassNames","setSelectedRowClassNames","useControlled","onSelectChange","defaultSelectedRowKeys","tSelectedRowKeys","setTSelectedRowKeys","selectColumn","find","type","includes","canSelectedRows","filter","row","rowIndex","isDisabled","intersectionKeys","intersection","map","t","get","useEffect","length","disabledRowFunc","p","disabled","disabledRowClass","selected","Set","selectedRowClassFunc","rowId","has","selectedRowClass","size","isRowSelectedDisabled","getSelectedHeader","isIndeterminate","isChecked","React","createElement","Checkbox","checked","indeterminate","onChange","handleSelectAll","renderSelectCell","column","col","checkProps","isFunction","selectBoxProps","handleSelectChange","onCheckClick","e","stopPropagation","Radio","onClick","reRowKey","id","set","selectedRowIndex","indexOf","isExisted","splice","push","log","warn","selectedRowData","currentRowKey","currentRowData","canSelectedRowKeys","record","disabledSelectedRowKeys","allIds","_toConsumableArray","formatToRowSelectColumn","isSelection","width","className","checkCell","cell","title","i","len"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAMA,kBAAA,sBAAyBC,KAA/B,CAAA;AAEwB,SAAAC,YAAA,CACtBC,KADsB,EAEtBC,oBAFsB,EAGtB;AACA,EAAA,IAAQC,eAAR,GAAiFF,KAAjF,CAAQE,eAAR;AAAA,MAAyBC,OAAzB,GAAiFH,KAAjF,CAAyBG,OAAzB;AAAA,MAAkCC,IAAlC,GAAiFJ,KAAjF,CAAkCI,IAAlC;AAAA,MAAwCC,MAAxC,GAAiFL,KAAjF,CAAwCK,MAAxC;AAAA,MAAgDC,4BAAhD,GAAiFN,KAAjF,CAAgDM,4BAAhD,CAAA;;AACA,EAAA,IAAA,SAAA,GAA0DC,cAA2C,EAArG;AAAA,MAAA,UAAA,GAAAC,4BAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAAOC,qBAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAA8BC,wBAA9B,GAAA,UAAA,CAAA,CAAA,CAAA,CAAA;;EACM,IAA0CC,cAAAA,GAAAA,+BAAcX,OAAO,mBAAmBA,MAAMY,gBAAgB;AAC5GC,IAAAA,sBAAA,EAAwBb,KAAM,CAAAa,sBAAN,IAAgC,EAAA;AADoD,IAAxG;AAAA,MAAA,eAAA,GAAAL,4BAAA,CAAA,cAAA,EAAA,CAAA,CAAA;AAAA,MAACM,gBAAD,GAAA,eAAA,CAAA,CAAA,CAAA;AAAA,MAAmBC,mBAAnB,GAAA,eAAA,CAAA,CAAA,CAAA,CAAA;;AAGN,EAAA,IAAMC,YAAe,GAAAb,OAAA,CAAQc,IAAR,CAAa,UAAA,IAAA,EAAA;IAAA,IAAGC,IAAH,QAAGA,IAAH,CAAA;IAAA,OAAc,CAAC,UAAD,EAAa,QAAb,EAAuBC,QAAvB,CAAgCD,IAAhC,CAAd,CAAA;AAAA,GAAb,CAArB,CAAA;EACM,IAAAE,eAAA,GAAkBhB,IAAK,CAAAiB,MAAL,CAAY,UAACC,GAAD,EAAMC,QAAN,EAAA;AAAA,IAAA,OAA4B,CAACC,UAAA,CAAWF,GAAX,EAAgBC,QAAhB,CAA7B,CAAA;AAAA,GAAZ,CAAlB,CAAA;EAEN,IAAME,gBAAmB,GAAAC,2BAAA,CACvBZ,gBADuB,EAEvBM,eAAA,CAAgBO,GAAhB,CAAoB,UAACC,CAAD,EAAA;AAAA,IAAA,OAAOC,UAAID,GAAGvB,MAAA,IAAU,KAAxB,CAAA;AAAA,GAApB,CAFuB,CAAzB,CAAA;AAKAyB,EAAAA,eAAA,CACE,YAAM;IACJ,IAAI,CAACd,YAAD,KAAkB,CAACF,gBAAD,IAAqB,CAACA,gBAAiB,CAAAiB,MAAzD,CAAJ,EAAsE,OAAA;;AAChE,IAAA,IAAAC,eAAA,GAAkB,SAAlBA,eAAkB,CAACC,CAAD,EAAA;MAAA,OACtBjB,YAAA,CAAakB,QAAb,CAAsBD,CAAtB,IAA2BhC,qBAAqBiC,QAAhD,GAA2D,EADrC,CAAA;KAAlB,CAAA;;AAEA,IAAA,IAAAC,gBAAA,GAAmBnB,YAAc,KAAA,IAAd,IAAAA,YAAc,KAAA,KAAA,CAAd,IAAAA,YAAc,CAAAkB,QAAd,GAAyBF,eAAzB,GAA2C,KAAA,CAA9D,CAAA;AACA,IAAA,IAAAI,QAAA,GAAW,IAAIC,GAAJ,CAAQvB,gBAAR,CAAX,CAAA;;AACN,IAAA,IAAMwB,oBAAuB,GAAA,SAAvBA,oBAAuB,CAA+C,KAAA,EAAA;MAAA,IAA5ChB,GAA4C,SAA5CA,GAA4C,CAAA;MAC1E,IAAMiB,KAAQ,GAAAV,SAAA,CAAIP,GAAJ,EAASjB,MAAA,IAAU,IAAnB,CAAd,CAAA;MACA,OAAO+B,QAAS,CAAAI,GAAT,CAAaD,KAAb,IAAsBtC,qBAAqBmC,QAA3C,GAAsD,EAA7D,CAAA;KAFF,CAAA;;IAIM,IAAAK,gBAAA,GAAmBL,QAAS,CAAAM,IAAT,GAAgBJ,oBAAhB,GAAuC,KAAA,CAA1D,CAAA;AACmB5B,IAAAA,wBAAA,CAAA,CAACyB,gBAAD,EAAmBM,gBAAnB,CAAA,CAAA,CAAA;AAC3B,GAbF,EAeE,CAACrC,IAAD,EAAOD,OAAP,EAAgBW,gBAAhB,EAAkCE,YAAlC,EAAgDX,MAAhD,CAfF,CAAA,CAAA;;AAkBS,EAAA,SAAAmB,UAAA,CAAWF,GAAX,EAAqCC,QAArC,EAAgE;AAChE,IAAA,OAAAoB,iCAAA,CAAsB3B,YAAtB,EAAoCM,GAApC,EAAyCC,QAAzC,CAAA,CAAA;AACT,GAAA;;AAEA,EAAA,SAASqB,iBAAT,GAA6B;AAC3B,IAAA,OAAO,YAAM;AACX,MAAA,IAAMC,kBAAkBpB,gBAAiB,CAAAM,MAAjB,GAA0B,CAA1B,IAA+BN,gBAAA,CAAiBM,MAAjB,GAA0BX,eAAgB,CAAAW,MAAjG,CAAA;MACM,IAAAe,SAAA,GACJrB,iBAAiBM,MAAjB,KAA4B,CAA5B,IACAX,gBAAgBW,MAAhB,KAA2B,CAD3B,IAEAN,gBAAiB,CAAAM,MAAjB,KAA4BX,eAAgB,CAAAW,MAHxC,CAAA;AAIN,MAAA,sBACGgB,yBAAA,CAAAC,aAAA,CAAAC,uBAAA,EAAA;AACCC,QAAAA,OAAS,EAAAJ,SADV;AAECK,QAAAA,aAAe,EAAAN,eAFhB;AAGCX,QAAAA,QAAA,EAAU,CAACd,eAAgB,CAAAW,MAH5B;AAICqB,QAAAA,QAAU,EAAAC,eAAAA;AAJX,OAAA,CADH,CAAA;KANF,CAAA;AAeF,GAAA;;EAEA,SAASC,gBAAT,CAA0BrB,CAA1B,EAAmE;AACjE,IAAA,IAAasB,MAAb,GAA4CtB,CAA5C,CAAQuB,GAAR;QAA4CvB,MAAAA,GAAAA,CAA5C,CAAqBX,GAArB;QAAqBA,GAArB,uBAA2B,EAA3B,GAAA,MAAA;AAAA,QAA+BC,QAA/B,GAA4CU,CAA5C,CAA+BV,QAA/B,CAAA;AACA,IAAA,IAAM2B,UAAUpC,gBAAiB,CAAAK,QAAjB,CAA0BU,UAAIP,KAAKjB,MAAA,IAAU,KAA7C,CAAhB,CAAA;AACA,IAAA,IAAM6B,QACJ,GAAA,OAAOqB,MAAO,CAAArB,QAAd,KAA2B,UAA3B,GAAwCqB,MAAA,CAAOrB,QAAP,CAAgB;AAAEZ,MAAAA,GAAK,EAALA,GAAF;AAAOC,MAAAA,QAAA,EAAAA,QAAAA;AAAP,KAAhB,CAAxC,GAA6EgC,MAAO,CAAArB,QADtF,CAAA;AAEA,IAAA,IAAMuB,UAAa,GAAAC,uBAAA,CAAWH,MAAO,CAAAE,UAAlB,CAAA,GAAgCF,MAAA,CAAOE,UAAP,CAAkB;AAAEnC,MAAAA,GAAK,EAALA,GAAF;AAAOC,MAAAA,QAAA,EAAAA,QAAAA;AAAP,KAAlB,CAAhC,GAAuEgC,MAAO,CAAAE,UAAjG,CAAA;;AACA,IAAA,IAAME,cAAiB,GAAA,aAAA,CAAA,aAAA,CAAA;AACrBT,MAAAA,OAAA,EAAAA,OADqB;AAErBhB,MAAAA,QAAA,EAAAA,QAAAA;AAFqB,KAAA,EAGlBuB,UAHkB,CAAA,EAAA,EAAA,EAAA;AAIrBL,MAAAA,UAAU,SAAM,QAAA,GAAA;QACdQ,kBAAA,CAAmBtC,GAAnB,CAAA,CAAA;AACF,OAAA;KANF,CAAA,CAAA;;AASM,IAAA,IAAAuC,YAAA,GAAe,SAAfA,YAAe,CAACC,CAAD,EAAqC;AACxDA,MAAAA,CAAA,SAAA,IAAAA,CAAA,WAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAA,CAAGC,eAAH,EAAA,CAAA;KADI,CAAA;;AAGN,IAAA,IAAIR,OAAOrC,IAAP,KAAgB,QAApB,EAA8B,sBAAQ6B,yBAAA,CAAAC,aAAA,CAAAgB,iBAAA,kCAAUL,cAAV,CAAA,EAAA,EAAA,EAAA;AAA0BM,MAAAA,OAAS,EAAAJ,YAAAA;KAA3C,CAAA,CAAA,CAAA;;AAC1B,IAAA,IAAAN,MAAA,CAAOrC,IAAP,KAAgB,UAAhB,EAA4B;MACxB,IAAA2B,eAAA,GAAkBvC,iCAAA,IAAA,IAAAA,iCAAA,KAAA,CAAA,IAAAA,6BAA8ByB,MAA9B,GACpBzB,4BAAA,CAA6Ba,QAA7B,CAAsCU,SAAI,CAAAP,GAAA,EAAKjB,MAAL,CAA1C,CADoB,GAEpB,KAFE,CAAA;AAGN,MAAA,sBAAQ0C,yBAAA,CAAAC,aAAA,CAAAC,uBAAA,EAAA,aAAA,CAAA,aAAA,CAAA;AAASE,QAAAA,aAAe,EAAAN,eAAAA;AAAxB,OAAA,EAA6Cc,cAA7C,CAAA,EAAA,EAAA,EAAA;AAA6DM,QAAAA,OAAS,EAAAJ,YAAAA;OAA9E,CAAA,CAAA,CAAA;AACF,KAAA;;AACO,IAAA,OAAA,IAAA,CAAA;AACT,GAAA;;AAES,EAAA,SAAAD,kBAAA,GAA2C;IAAA,IAAxBtC,GAAwB,uEAAJ,EAAI,CAAA;;IAC9CpB,IAAAA,gBAAAA,GAAsBY,oCAAAA,CAAAA,gBAAtBZ,CAAAA,CAAAA;;AACJ,IAAA,IAAMgE,WAAW7D,MAAU,IAAA,IAA3B,CAAA;AACM,IAAA,IAAA8D,EAAA,GAAKtC,SAAI,CAAAP,GAAA,EAAK4C,QAAL,CAAT,CAAA;AACarE,IAAAA,kBAAA,CAAAuE,GAAA,CAAID,EAAJ,EAAQ7C,GAAR,CAAA,CAAA;AACb,IAAA,IAAA+C,gBAAA,GAAmBnE,gBAAgB,CAAAoE,OAAhBpE,CAAwBiE,EAAxBjE,CAAnB,CAAA;AACN,IAAA,IAAMqE,YAAYF,gBAAqB,KAAA,CAAA,CAAvC,CAAA;;AACI,IAAA,IAAArD,YAAA,CAAaE,IAAb,KAAsB,UAAtB,EAAkC;AACpCqD,MAAAA,SAAA,GAAYrE,iBAAgBsE,MAAhBtE,CAAuBmE,gBAAvBnE,EAAyC,CAAzCA,CAAZ,GAA0DA,gBAAAA,CAAgBuE,IAAhBvE,CAAqBiE,EAArBjE,CAA1D,CAAA;AACF,KAFI,MAEJ,IAAWc,YAAa,CAAAE,IAAb,KAAsB,QAAjC,EAA2C;MACzChB,mBAAkB,CAACqE,SAAD,GAAa,CAACJ,EAAD,CAAb,GAAoB,EAAtCjE,CAAAA;AACK,KAFP,MAEO;AACDwE,MAAAA,6BAAA,CAAAC,IAAA,CAAK,OAAL,EAAc,sDAAd,CAAA,CAAA;AACJ,MAAA,OAAA;AACF,KAAA;;IACA5D,mBAAA,CAAoBb,gBAApB,EAAqC;AACnC0E,MAAAA,eAAA,EAAiB1E,iBAAgByB,GAAhBzB,CAAoB,UAAC0B,CAAD,EAAA;AAAA,QAAA,OAAO/B,kBAAmB,CAAAgC,GAAnB,CAAuBD,CAAvB,CAAP,CAAA;AAAA,OAApB1B,CADkB;AAEnC2E,MAAAA,aAAe,EAAAV,EAFoB;AAGnCW,MAAAA,cAAgB,EAAAxD,GAHmB;AAInCJ,MAAAA,IAAA,EAAMqD,YAAY,YAAY,OAAA;AAJK,KAArC,CAAA,CAAA;AAMF,GAAA;;EAEA,SAASlB,eAAT,CAAyBH,OAAzB,EAA2C;AACzC,IAAA,IAAMgB,WAAW7D,MAAU,IAAA,IAA3B,CAAA;AACM,IAAA,IAAA0E,kBAAA,GAAqB3D,gBAAgBO,GAAhB,CAAoB,UAACqD,MAAD,EAAA;AAAA,MAAA,OAAYnD,SAAI,CAAAmD,MAAA,EAAQd,QAAR,CAAhB,CAAA;AAAA,KAApB,CAArB,CAAA;AACA,IAAA,IAAAe,uBAAA,GAA0B,CAAA/E,eAAiB,SAAjB,IAAAA,eAAiB,KAAjB,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,eAAiB,CAAAmB,MAAjB,CAAwB,UAAC8C,EAAD,EAAA;AAAA,MAAA,OAAQ,CAACY,kBAAA,CAAmB5D,QAAnB,CAA4BgD,EAA5B,CAAT,CAAA;AAAA,KAAxB,MAAqE,EAA/F,CAAA;IACA,IAAAe,MAAA,GAAShC,OAAU,GAAA,EAAA,CAAA,MAAA,CAAAiC,oCAAA,CAAIF,uBAAJ,CAAgCF,EAAAA,oCAAAA,CAAAA,kBAAhC,CAA0DE,CAAAA,GAAAA,oCAAAA,CAAAA,uBAA1D,CAAnB,CAAA;IACNlE,mBAAA,CAAoBmE,MAApB,EAA4B;MAC1BN,eAAA,EAAiB1B,OAAU,GAAAgC,MAAA,CAAOvD,GAAP,CAAW,UAACC,CAAD,EAAA;AAAA,QAAA,OAAO/B,kBAAA,CAAmBgC,GAAnB,CAAuBD,CAAvB,CAAP,CAAA;OAAX,CAAA,GAA+C,EADhD;AAE1BV,MAAAA,IAAA,EAAMgC,UAAU,UAAU,SAFA;AAG1B2B,MAAAA,aAAe,EAAA,eAAA;AAHW,KAA5B,CAAA,CAAA;AAKF,GAAA;;EAEA,SAASO,uBAAT,CAAiC5B,GAAjC,EAAuD;AACrD,IAAA,IAAM6B,cAAc,CAAC,UAAD,EAAa,QAAb,CAAuBlE,CAAAA,QAAvB,CAAgCqC,IAAItC,IAApC,CAApB,CAAA;AACA,IAAA,IAAI,CAACmE,WAAL,EAAyB,OAAA7B,GAAA,CAAA;AAClB,IAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACFA,GADE,CAAA,EAAA,EAAA,EAAA;AAEL8B,MAAAA,KAAA,EAAO9B,IAAI8B,KAAJ,IAAa,EAFf;MAGLC,WAAWtF,oBAAqB,CAAAuF,SAH3B;MAILC,IAAM,EAAA,cAACxD,CAAD,EAAA;QAAA,OAA6CqB,gBAAA,CAAiBrB,CAAjB,CAA7C,CAAA;OAJD;MAKLyD,KAAO,EAAAlC,GAAA,CAAItC,IAAJ,KAAa,UAAb,GAA0B0B,mBAA1B,GAAgD,EAAA;AALlD,KAAA,CAAA,CAAA;AAOT,GAAA;;AAEAd,EAAAA,eAAA,CAAU,YAAM;AACd,IAAA,KAAA,IAAS6D,IAAI,CAAb,EAAgBC,GAAA,GAAMxF,KAAK2B,MAA3B,EAAmC4D,CAAA,GAAIC,GAAvC,EAA4CD,CAAK,EAAjD,EAAiD;AAC5B9F,MAAAA,kBAAA,CAAAuE,GAAA,CAAIvC,UAAIzB,IAAK,CAAAuF,CAAA,GAAItF,UAAU,KAA3B,EAAkCD,KAAKuF,EAAvC,CAAA,CAAA;AACrB,KAAA;AACC,GAJH,EAIG,CAACvF,IAAD,EAAOC,MAAP,CAJH,CAAA,CAAA;EAMO,OAAA;AACLI,IAAAA,qBAAA,EAAAA,qBADK;AAEL2E,IAAAA,uBAAA,EAAAA,uBAAAA;GAFK,CAAA;AAIT;;;;"}