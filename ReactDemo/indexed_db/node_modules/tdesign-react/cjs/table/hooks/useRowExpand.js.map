{"version":3,"file":"useRowExpand.js","sources":["../../../src/table/hooks/useRowExpand.tsx"],"sourcesContent":["import React, { MouseEvent, ReactNode } from 'react';\nimport { ChevronRightCircleIcon as TdChevronRightCircleIcon } from 'tdesign-icons-react';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport classNames from 'classnames';\nimport {\n  TdPrimaryTableProps,\n  PrimaryTableCol,\n  TableRowData,\n  PrimaryTableCellParams,\n  TableExpandedRowParams,\n  RowEventContext,\n} from '../type';\nimport useClassName from './useClassName';\nimport useControlled from '../../hooks/useControlled';\nimport useGlobalIcon from '../../hooks/useGlobalIcon';\nimport { useLocaleReceiver } from '../../locale/LocalReceiver';\n\nexport default function useRowExpand(props: TdPrimaryTableProps) {\n  const { expandIcon } = props;\n  const { ChevronRightCircleIcon } = useGlobalIcon({\n    ChevronRightCircleIcon: TdChevronRightCircleIcon,\n  });\n  const [locale] = useLocaleReceiver('table');\n  const { tableExpandClasses, positiveRotate90, tableFullRowClasses } = useClassName();\n  // controlled and uncontrolled\n  const [tExpandedRowKeys, setTExpandedRowKeys] = useControlled(props, 'expandedRowKeys', props.onExpandChange, {\n    defaultExpandedRowKeys: props.defaultExpandedRowKeys || [],\n  });\n\n  const showExpandedRow = Boolean(props.expandedRow);\n\n  const showExpandIconColumn = props.expandIcon !== false && showExpandedRow;\n\n  const isFirstColumnFixed = props.columns?.[0]?.fixed === 'left';\n\n  const onToggleExpand = (e: MouseEvent<HTMLSpanElement>, row: TableRowData) => {\n    props.expandOnRowClick && e.stopPropagation();\n    const currentId = get(row, props.rowKey || 'id');\n    const index = tExpandedRowKeys.indexOf(currentId);\n    const newKeys = [...tExpandedRowKeys];\n    index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);\n    setTExpandedRowKeys(newKeys, {\n      expandedRowData: props.data.filter((t) => newKeys.includes(get(t, props.rowKey || 'id'))),\n      currentRowData: row,\n    });\n  };\n\n  const renderExpandIcon = (p: PrimaryTableCellParams<TableRowData>, expandIcon: TdPrimaryTableProps['expandIcon']) => {\n    const { row, rowIndex } = p;\n    const currentId = get(row, props.rowKey || 'id');\n    const expanded = tExpandedRowKeys.includes(currentId);\n    const defaultIcon: ReactNode = locale.expandIcon || <ChevronRightCircleIcon />;\n    let icon = defaultIcon;\n    if (expandIcon === false || expandIcon === null) {\n      icon = null;\n    } else if (isFunction(expandIcon)) {\n      icon = expandIcon({ row, index: rowIndex });\n    }\n    const classes = [\n      tableExpandClasses.iconBox,\n      tableExpandClasses[expanded ? 'expanded' : 'collapsed'],\n      { [positiveRotate90]: expanded },\n    ];\n    return (\n      <span className={classNames(classes)} onClick={(e: MouseEvent<HTMLSpanElement>) => onToggleExpand(e, row)}>\n        {icon}\n      </span>\n    );\n  };\n\n  const getExpandColumn = () => {\n    const expandCol: PrimaryTableCol<TableRowData> = {\n      colKey: '__EXPAND_ROW_ICON_COLUMN__',\n      width: 64,\n      className: tableExpandClasses.iconCell,\n      fixed: isFirstColumnFixed ? 'left' : undefined,\n      cell: (p) => renderExpandIcon(p, expandIcon),\n    };\n    return expandCol;\n  };\n\n  const renderExpandedRow = (\n    p: TableExpandedRowParams<TableRowData> & { tableWidth: number; isWidthOverflow: boolean },\n  ) => {\n    const rowId = get(p.row, props.rowKey || 'id');\n    if (!tExpandedRowKeys.includes(rowId)) return null;\n    const isFixedLeft = p.isWidthOverflow && props.columns.find((item) => item.fixed === 'left');\n    return (\n      <tr\n        key={`expand_${rowId}`}\n        className={classNames([tableExpandClasses.row, { [tableFullRowClasses.base]: isFixedLeft }])}\n      >\n        <td colSpan={p.columns.length}>\n          <div\n            className={classNames([tableExpandClasses.rowInner, { [tableFullRowClasses.innerFullRow]: isFixedLeft }])}\n            style={isFixedLeft ? { width: `${p.tableWidth}px` } : {}}\n          >\n            <div className={tableFullRowClasses.innerFullElement}>{props.expandedRow(p)}</div>\n          </div>\n        </td>\n      </tr>\n    );\n  };\n\n  const onInnerExpandRowClick = (p: RowEventContext<TableRowData>) => {\n    onToggleExpand(p.e, p.row);\n  };\n\n  return {\n    showExpandedRow,\n    showExpandIconColumn,\n    getExpandColumn,\n    renderExpandedRow,\n    onInnerExpandRowClick,\n  };\n}\n"],"names":["useRowExpand","props","expandIcon","useGlobalIcon","ChevronRightCircleIcon","TdChevronRightCircleIcon","useLocaleReceiver","_slicedToArray","locale","useClassName","tableExpandClasses","positiveRotate90","tableFullRowClasses","useControlled","onExpandChange","defaultExpandedRowKeys","tExpandedRowKeys","setTExpandedRowKeys","showExpandedRow","Boolean","expandedRow","showExpandIconColumn","isFirstColumnFixed","columns","fixed","onToggleExpand","e","row","expandOnRowClick","stopPropagation","currentId","get","rowKey","index","indexOf","newKeys","splice","push","expandedRowData","data","filter","t","includes","currentRowData","renderExpandIcon","p","rowIndex","expanded","defaultIcon","React","createElement","icon","isFunction","classes","iconBox","className","classNames","onClick","getExpandColumn","expandCol","colKey","width","iconCell","cell","renderExpandedRow","rowId","isFixedLeft","isWidthOverflow","find","item","key","_defineProperty","base","colSpan","length","rowInner","innerFullRow","style","tableWidth","innerFullElement","onInnerExpandRowClick"],"mappings":"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"}