/**
 * tdesign v0.41.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-4eb93341.js');
var slicedToArray = require('../../_chunks/dep-9c5d4f93.js');
var React = require('react');
var classNames = require('classnames');
var dayjs = require('dayjs');
var toInteger$1 = require('../../_chunks/dep-e4c3e633.js');
var toString$1 = require('../../_chunks/dep-afce8659.js');
var _stringToArray = require('../../_chunks/dep-dc6c808e.js');
var _isIterateeCall = require('../../_chunks/dep-9429a38a.js');
var hooks_useConfig = require('../../hooks/useConfig.js');
var _util_noop = require('../../_util/noop.js');
var timePicker_hooks_useTimePickerTextConfig = require('../hooks/useTimePickerTextConfig.js');
var _common_js_timePicker_const = require('../../_common/js/time-picker/const.js');
var _common_js_timePicker_utils = require('../../_common/js/time-picker/utils.js');
var hooks_useDebounce = require('../../hooks/useDebounce.js');
var hooks_usePropsRef = require('../../hooks/usePropsRef.js');
require('../../_chunks/dep-2205decf.js');
require('../../_chunks/dep-61a8a7b0.js');
require('../../_chunks/dep-2a90f794.js');
require('../../_chunks/dep-52c5813c.js');
require('../../_chunks/dep-aab723b3.js');
require('../../_chunks/dep-09805e35.js');
require('../../_chunks/dep-1fff9729.js');
require('../../_chunks/dep-8f18a7c4.js');
require('../../_chunks/dep-76deafcc.js');
require('../../_chunks/dep-384b291c.js');
require('../../_chunks/dep-d3ad6e52.js');
require('../../_chunks/dep-53ba6729.js');
require('../../_chunks/dep-12656997.js');
require('../../_chunks/dep-9cd0fde8.js');
require('../../_chunks/dep-4344eec8.js');
require('../../_chunks/dep-fe984d70.js');
require('../../_chunks/dep-46cf36fd.js');
require('../../_chunks/dep-f5e18a2f.js');
require('../../_chunks/dep-a0b5d8f6.js');
require('../../_chunks/dep-bb60493d.js');
require('../../_chunks/dep-72020528.js');
require('../../_chunks/dep-ad854ba5.js');
require('../../_chunks/dep-eebdbd74.js');
require('../../_chunks/dep-aafeb50a.js');
require('../../_chunks/dep-6fa7a9e9.js');
require('../../_chunks/dep-994ec160.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_common/js/global-config/default-config.js');
require('../../locale/LocalReceiver.js');
require('lodash');
require('../../_util/usePersistFn.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeFloor = Math.floor;
/**
 * The base implementation of `_.repeat` which doesn't coerce arguments.
 *
 * @private
 * @param {string} string The string to repeat.
 * @param {number} n The number of times to repeat the string.
 * @returns {string} Returns the repeated string.
 */

function baseRepeat$1(string, n) {
  var result = '';

  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
    return result;
  } // Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.


  do {
    if (n % 2) {
      result += string;
    }

    n = nativeFloor(n / 2);

    if (n) {
      string += string;
    }
  } while (n);

  return result;
}

var _baseRepeat = baseRepeat$1;

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

function baseProperty$1(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}

var _baseProperty = baseProperty$1;

var baseProperty = _baseProperty;
/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */

var asciiSize$1 = baseProperty('length');
var _asciiSize = asciiSize$1;

/** Used to compose unicode character classes. */
var rsAstralRange = "\\ud800-\\udfff",
    rsComboMarksRange = "\\u0300-\\u036f",
    reComboHalfMarksRange = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange = "\\u20d0-\\u20ff",
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = "\\ufe0e\\ufe0f";
/** Used to compose unicode capture groups. */

var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = "\\ud83c[\\udffb-\\udfff]",
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsZWJ = "\\u200d";
/** Used to compose unicode regexes. */

var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */

function unicodeSize$1(string) {
  var result = reUnicode.lastIndex = 0;

  while (reUnicode.test(string)) {
    ++result;
  }

  return result;
}

var _unicodeSize = unicodeSize$1;

var asciiSize = _asciiSize,
    hasUnicode$1 = _stringToArray._hasUnicode,
    unicodeSize = _unicodeSize;
/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */

function stringSize$2(string) {
  return hasUnicode$1(string) ? unicodeSize(string) : asciiSize(string);
}

var _stringSize = stringSize$2;

var baseRepeat = _baseRepeat,
    baseToString = toString$1._baseToString,
    castSlice = _stringToArray._castSlice,
    hasUnicode = _stringToArray._hasUnicode,
    stringSize$1 = _stringSize,
    stringToArray = _stringToArray._stringToArray;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeCeil$1 = Math.ceil;
/**
 * Creates the padding for `string` based on `length`. The `chars` string
 * is truncated if the number of characters exceeds `length`.
 *
 * @private
 * @param {number} length The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padding for `string`.
 */

function createPadding$1(length, chars) {
  chars = chars === undefined ? ' ' : baseToString(chars);
  var charsLength = chars.length;

  if (charsLength < 2) {
    return charsLength ? baseRepeat(chars, length) : chars;
  }

  var result = baseRepeat(chars, nativeCeil$1(length / stringSize$1(chars)));
  return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
}

var _createPadding = createPadding$1;

var createPadding = _createPadding,
    stringSize = _stringSize,
    toInteger = toInteger$1.toInteger_1,
    toString = toString$1.toString_1;
/**
 * Pads `string` on the left side if it's shorter than `length`. Padding
 * characters are truncated if they exceed `length`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.padStart('abc', 6);
 * // => '   abc'
 *
 * _.padStart('abc', 6, '_-');
 * // => '_-_abc'
 *
 * _.padStart('abc', 3);
 * // => 'abc'
 */

function padStart(string, length, chars) {
  string = toString(string);
  length = toInteger(length);
  var strLength = length ? stringSize(string) : 0;
  return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
}

var padStart_1 = padStart;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil,
    nativeMax = Math.max;
/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */

function baseRange$1(start, end, step, fromRight) {
  var index = -1,
      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);

  while (length--) {
    result[fromRight ? length : ++index] = start;
    start += step;
  }

  return result;
}

var _baseRange = baseRange$1;

var baseRange = _baseRange,
    isIterateeCall = _isIterateeCall._isIterateeCall,
    toFinite = toInteger$1.toFinite_1;
/**
 * Creates a `_.range` or `_.rangeRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new range function.
 */

function createRange$1(fromRight) {
  return function (start, end, step) {
    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
      end = step = undefined;
    } // Ensure the sign of `-0` is preserved.


    start = toFinite(start);

    if (end === undefined) {
      end = start;
      start = 0;
    } else {
      end = toFinite(end);
    }

    step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
    return baseRange(start, end, step, fromRight);
  };
}

var _createRange = createRange$1;

var createRange = _createRange;
/**
 * Creates an array of numbers (positive and/or negative) progressing from
 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
 * `start` is specified without an `end` or `step`. If `end` is not specified,
 * it's set to `start` with `start` then set to `0`.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.rangeRight
 * @example
 *
 * _.range(4);
 * // => [0, 1, 2, 3]
 *
 * _.range(-4);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 5);
 * // => [1, 2, 3, 4]
 *
 * _.range(0, 20, 5);
 * // => [0, 5, 10, 15]
 *
 * _.range(0, -4, -1);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.range(0);
 * // => []
 */

var range = createRange();
var range_1 = range;

var timeArr = [_common_js_timePicker_const.EPickerCols.hour, _common_js_timePicker_const.EPickerCols.minute, _common_js_timePicker_const.EPickerCols.second, _common_js_timePicker_const.EPickerCols.milliSecond];
var panelOffset = {
  top: 15,
  bottom: 21
};
dayjs__default["default"].extend(toInteger$1.customParseFormat);

var SinglePanel = function SinglePanel(props) {
  var steps = props.steps,
      format = props.format,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? _util_noop["default"] : _props$onChange,
      value = props.value,
      _props$hideDisabledTi = props.hideDisabledTime,
      hideDisabledTime = _props$hideDisabledTi === void 0 ? true : _props$hideDisabledTi,
      disableTime = props.disableTime,
      _props$position = props.position,
      position = _props$position === void 0 ? "start" : _props$position,
      triggerScroll = props.triggerScroll,
      resetTriggerScroll = props.resetTriggerScroll,
      isVisible = props.isVisible;

  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var TEXT_CONFIG = timePicker_hooks_useTimePickerTextConfig.useTimePickerTextConfig();
  var panelClassName = "".concat(classPrefix, "-time-picker__panel");

  var _useState = React.useState([]),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      cols = _useState2[0],
      setCols = _useState2[1];

  var colsRef = React.useRef([]);
  var maskRef = React.useRef(null);
  var dayjsValue = React.useMemo(function () {
    var isStepsSet = !!steps.filter(function (v) {
      return v > 1;
    }).length;
    if (value) return dayjs__default["default"](value, format);
    if (isStepsSet) return dayjs__default["default"]().hour(0).minute(0).second(0);
    return dayjs__default["default"]();
  }, [value, format, steps]);
  React.useEffect(function () {
    colsRef.current = colsRef.current.slice(0, cols.length);
  }, [cols]);
  React.useEffect(function () {
    var match = format.match(_common_js_timePicker_const.TIME_FORMAT);

    var _match = slicedToArray._slicedToArray(match, 7),
        startCol = _match[1],
        hourCol = _match[2],
        minuteCol = _match[3],
        secondCol = _match[4],
        milliSecondCol = _match[5],
        endCol = _match[6];

    var meridiem = _common_js_timePicker_const.EPickerCols.meridiem,
        hour = _common_js_timePicker_const.EPickerCols.hour,
        minute = _common_js_timePicker_const.EPickerCols.minute,
        second = _common_js_timePicker_const.EPickerCols.second,
        milliSecond = _common_js_timePicker_const.EPickerCols.milliSecond;
    var renderCol = [startCol && meridiem, hourCol && hour, minuteCol && minute, secondCol && second, milliSecondCol && milliSecond, endCol && meridiem].filter(function (v) {
      return !!v;
    });
    setCols(renderCol);
  }, [format]);
  var getItemHeight = React.useCallback(function () {
    var _maskRef$current;

    var maskDom = maskRef === null || maskRef === void 0 ? void 0 : (_maskRef$current = maskRef.current) === null || _maskRef$current === void 0 ? void 0 : _maskRef$current.querySelector("div");

    if (!maskDom) {
      return {
        offsetHeight: 0,
        margin: 0
      };
    }

    return {
      offsetHeight: maskDom.offsetHeight,
      margin: parseInt(getComputedStyle(maskDom).marginTop, 10)
    };
  }, []);
  var timeItemCanUsed = React.useCallback(function (col, el) {
    var colIdx = timeArr.indexOf(col);

    if (colIdx !== -1) {
      var _ref, _ref$col;

      var params = [dayjsValue.hour(), dayjsValue.minute(), dayjsValue.second()];
      params[colIdx] = Number(el);
      return !((_ref = disableTime && (disableTime === null || disableTime === void 0 ? void 0 : disableTime.apply(void 0, params.concat([{
        partial: position
      }])))) !== null && _ref !== void 0 && (_ref$col = _ref[col]) !== null && _ref$col !== void 0 && _ref$col.includes(Number(el)));
    }

    return true;
  }, [position, disableTime, dayjsValue]);
  var getColList = React.useCallback(function (col) {
    var count = 0;

    if (timeArr.includes(col)) {
      var colIdx = timeArr.indexOf(col);
      var colStep = steps[colIdx] || 1;
      if (col === _common_js_timePicker_const.EPickerCols.hour) count = _common_js_timePicker_const.TWELVE_HOUR_FORMAT.test(format) ? 11 : 23;else if (col === _common_js_timePicker_const.EPickerCols.milliSecond) count = 999;else count = 59;
      var colList = range_1(0, count + 1, Number(colStep)).map(function (v) {
        return padStart_1(String(v), 2, "0");
      }) || [];
      return hideDisabledTime && !!disableTime ? colList.filter(function (t) {
        var _disableTime, _disableTime$col;

        var params = [dayjsValue.hour(), dayjsValue.minute(), dayjsValue.second()];
        params[colIdx] = Number(t);
        return !(disableTime !== null && disableTime !== void 0 && (_disableTime = disableTime.apply(void 0, params.concat([{
          partial: position
        }]))) !== null && _disableTime !== void 0 && (_disableTime$col = _disableTime[col]) !== null && _disableTime$col !== void 0 && _disableTime$col.includes(Number(t)));
      }) : colList;
    }

    return _common_js_timePicker_const.MERIDIEM_LIST;
  }, [steps, format, hideDisabledTime, dayjsValue, disableTime, position]);
  var getScrollDistance = React.useCallback(function (col, time) {
    if (col === _common_js_timePicker_const.EPickerCols.hour && /[h]{1}/.test(format)) time %= 12;
    var itemIdx = getColList(col).indexOf(padStart_1(String(time), 2, "0"));

    var _getItemHeight = getItemHeight(),
        offsetHeight = _getItemHeight.offsetHeight,
        margin = _getItemHeight.margin;

    var timeItemTotalHeight = offsetHeight + margin;
    var distance = Math.abs(Math.max(0, itemIdx) * timeItemTotalHeight);
    return distance;
  }, [getItemHeight, getColList, format]);
  var isVisibleRef = hooks_usePropsRef.usePropRef(isVisible);
  var handleScroll = hooks_useDebounce["default"](function (col, idx) {
    var _colsRef$current$idx;

    if (!isVisibleRef.current) {
      return;
    }

    var val;
    var formattedVal;
    var scrollTop = (_colsRef$current$idx = colsRef.current[idx]) === null || _colsRef$current$idx === void 0 ? void 0 : _colsRef$current$idx.scrollTop;

    var _getItemHeight2 = getItemHeight(),
        offsetHeight = _getItemHeight2.offsetHeight,
        margin = _getItemHeight2.margin;

    var timeItemTotalHeight = offsetHeight + margin;
    var colStep = Math.abs(Math.round(scrollTop / timeItemTotalHeight + 0.5));
    var meridiem = _common_js_timePicker_const.MERIDIEM_LIST[Math.min(colStep - 1, 1)].toLowerCase();
    if (Number.isNaN(colStep)) colStep = 1;

    if (timeArr.includes(col)) {
      var max = 59;
      if (col === _common_js_timePicker_const.EPickerCols.hour) max = /[h]{1}/.test(format) ? 11 : 23;else if (col === _common_js_timePicker_const.EPickerCols.milliSecond) max = 999;
      var colIdx = timeArr.indexOf(col);
      var availableArr = range_1(0, max + 1, Number(steps[colIdx]) || 1);
      val = _common_js_timePicker_utils.closestLookup(availableArr, Number(getColList(col)[Math.min(colStep - 1, max + 1, availableArr.length - 1)]), Number(steps[colIdx]) || 1);
      if (Number.isNaN(val)) val = availableArr[availableArr.length - 1];

      if (col === _common_js_timePicker_const.EPickerCols.hour && cols.includes(_common_js_timePicker_const.EPickerCols.meridiem) && dayjsValue.hour() >= 12) {
        val = Number(val) + 12;
      }
    } else val = meridiem;

    var distance = getScrollDistance(col, val);

    if (!dayjs__default["default"](dayjsValue).isValid() || value && !dayjs__default["default"](value, format, true).isValid()) {
      return;
    }

    if (timeArr.includes(col)) {
      var _dayjsValue$col;

      if (timeItemCanUsed(col, val)) formattedVal = (_dayjsValue$col = dayjsValue[col]) === null || _dayjsValue$col === void 0 ? void 0 : _dayjsValue$col.call(dayjsValue, val).format(format);
    } else {
      var currentHour = dayjsValue.hour();

      if (meridiem === _common_js_timePicker_const.AM && currentHour >= 12) {
        formattedVal = dayjsValue.hour(currentHour - 12).format(format);
      } else if (meridiem === _common_js_timePicker_const.PM && currentHour < 12) {
        formattedVal = dayjsValue.hour(currentHour + 12).format(format);
      } else {
        formattedVal = dayjsValue.format(format);
      }
    }

    if (formattedVal !== value) {
      onChange(formattedVal);
    }

    if (distance !== scrollTop) {
      var _scrollCtrl$scrollTo;

      var scrollCtrl = colsRef.current[cols.indexOf(col)];
      if (!scrollCtrl || scrollCtrl.scrollTop === distance) return;
      (_scrollCtrl$scrollTo = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo === void 0 ? void 0 : _scrollCtrl$scrollTo.call(scrollCtrl, {
        top: distance,
        behavior: "smooth"
      });
    }
  }, 50);
  var scrollToTime = React.useCallback(function (col, time, idx) {
    var _scrollCtrl$scrollTo2;

    var behavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "auto";
    var distance = getScrollDistance(col, time);
    var scrollCtrl = colsRef.current[idx];
    if (!scrollCtrl || scrollCtrl.scrollTop === distance || !timeItemCanUsed(col, time)) return;
    (_scrollCtrl$scrollTo2 = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo2 === void 0 ? void 0 : _scrollCtrl$scrollTo2.call(scrollCtrl, {
      top: distance,
      behavior: behavior
    });
  }, [getScrollDistance]);
  var updateTimeScrollPos = React.useCallback(function () {
    var isAutoScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var behavior = value && !isAutoScroll ? "smooth" : "auto";
    var isStepsSet = !!steps.filter(function (v) {
      return v > 1;
    }).length;
    cols.forEach(function (col, idx) {
      if (!isStepsSet || isStepsSet && value) {
        var _dayjsValue$col2;

        scrollToTime(col, timeArr.includes(col) ? (_dayjsValue$col2 = dayjsValue[col]) === null || _dayjsValue$col2 === void 0 ? void 0 : _dayjsValue$col2.call(dayjsValue) : dayjsValue.format("a"), idx, behavior);
      } else {
        var _getColList;

        scrollToTime(col, (_getColList = getColList(col)) === null || _getColList === void 0 ? void 0 : _getColList[0], idx, behavior);
      }
    });
    resetTriggerScroll();
  }, [cols, scrollToTime, dayjsValue, value, steps, getColList, resetTriggerScroll]);

  var handleTimeItemClick = function handleTimeItemClick(col, el, idx) {
    if (!timeItemCanUsed(col, el)) return;

    if (timeArr.includes(col)) {
      if (col === _common_js_timePicker_const.EPickerCols.hour && dayjsValue.format("a") === _common_js_timePicker_const.PM && cols.includes(_common_js_timePicker_const.EPickerCols.meridiem)) {
        el = Number(el) + 12;
      }

      scrollToTime(col, el, idx, "smooth");
      setTimeout(function () {
        var _dayjsValue$col3;

        onChange((_dayjsValue$col3 = dayjsValue[col]) === null || _dayjsValue$col3 === void 0 ? void 0 : _dayjsValue$col3.call(dayjsValue, el).format(format));
      }, 100);
    } else {
      var currentHour = dayjsValue.hour();

      if (el === _common_js_timePicker_const.AM && currentHour >= 12) {
        onChange(dayjsValue.hour(currentHour - 12).format(format));
      } else if (el === _common_js_timePicker_const.PM && currentHour < 12) {
        onChange(dayjsValue.hour(currentHour + 12).format(format));
      }
    }
  };

  React.useEffect(function () {
    updateTimeScrollPos(true);
  }, [value, updateTimeScrollPos]);
  React.useEffect(function () {
    if (triggerScroll) updateTimeScrollPos(true);
  }, [triggerScroll, updateTimeScrollPos]);
  var isCurrent = React.useCallback(function (col, colItem) {
    var _dayjsValue$col4;

    var colVal;

    if (col === _common_js_timePicker_const.EPickerCols.meridiem) {
      var currentMeridiem = dayjsValue.format("a");
      return currentMeridiem === colItem;
    }

    colVal = (_dayjsValue$col4 = dayjsValue[col]) === null || _dayjsValue$col4 === void 0 ? void 0 : _dayjsValue$col4.call(dayjsValue);

    if (col === _common_js_timePicker_const.EPickerCols.hour && /[h]{1}/.test(format)) {
      colVal %= 12;
    }

    return colVal === Number(colItem);
  }, [format, dayjsValue]);

  function renderScrollCtrl() {
    return cols.map(function (col, idx) {
      return /* @__PURE__ */React__default["default"].createElement("ul", {
        key: "".concat(col, "_").concat(idx),
        ref: function ref(el) {
          return colsRef.current[idx] = el;
        },
        className: "".concat(panelClassName, "-body-scroll"),
        onScroll: function onScroll() {
          return handleScroll(col, idx);
        },
        style: {
          "--timePickerPanelOffsetTop": panelOffset.top,
          "--timePickerPanelOffsetBottom": panelOffset.bottom
        }
      }, getColList(col).map(function (el) {
        var _classNames;

        return /* @__PURE__ */React__default["default"].createElement("li", {
          key: el,
          className: classNames__default["default"]("".concat(panelClassName, "-body-scroll-item"), (_classNames = {}, defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), !timeItemCanUsed(col, el)), defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-is-current"), isCurrent(col, el)), _classNames)),
          onClick: function onClick() {
            return handleTimeItemClick(col, el, idx);
          }
        }, timeArr.includes(col) ? _common_js_timePicker_const.TWELVE_HOUR_FORMAT.test(format) && el === "00" ? "12" : el : TEXT_CONFIG[el]);
      }));
    });
  }

  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(panelClassName, "-body")
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(panelClassName, "-body-active-mask"),
    ref: maskRef
  }, cols.map(function (col, idx) {
    return /* @__PURE__ */React__default["default"].createElement("div", {
      key: "".concat(col, "_").concat(idx)
    });
  })), renderScrollCtrl());
};

exports["default"] = SinglePanel;
//# sourceMappingURL=SinglePanel.js.map
